{
	"id": "2d4ec966c2e9c7033e3351e1c2d56e5f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stakable-2.0.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Error handling message for Modifier\n */\nerror Function__notAuthorized();\nerror Function__notAVoter();\nerror Function__votingNotAvailable();\n\n/**\n * @notice Error handling message for Staking functions\n */\nerror Staking__cannotStakeNothing();\nerror Staking__userIsStaker();\nerror Staking__penaltyExceed3Percent();\nerror Staking__airdropExceed20Percent();\nerror Staking__noStakingFound();\nerror Staking_noStakingPackageFound();\n\n/**\n * @notice Error handling message for Airdrop functions\n */\nerror Airdrop__claimableOnceAWeek();\n\n/**\n * @notice Error handling message for Voting functions\n */\nerror Voting__votingIsRunning();\nerror Voting__alreadyVoted();\nerror Voting__notYetVoted();\nerror Voting__notEnoughVoters();\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    struct Voter {\n        bool votingRight;\n        mapping(uint256 => bool) voted;\n    }\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n\n    bool internal _votingStatus;\n    uint256 internal _votingId;\n    uint256 public totalVoters;\n    mapping(address => Voter) public voters;\n    mapping(uint256 => uint256) public votedUsers;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _isVoter() internal view {\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        if (voters[msg.sender].votingRight == false) {\n            revert Function__notAVoter();\n        }\n    }\n\n    modifier isVoter() {\n        _isVoter();\n        _;\n    }\n\n    function _checkVotingStatus() internal view {\n        // require(_votingStatus, \"Voting is not available\");\n        if (!_votingStatus) {\n            revert Function__votingNotAvailable();\n        }\n    }\n\n    modifier votingStatusTrue() {\n        _checkVotingStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(\n        address user,\n        uint256 amount,\n        uint256 stakePeriod\n    ) external nonReentrant onlyOwner {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        if (amount <= 0) {\n            revert Staking__cannotStakeNothing();\n        }\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n        if (stakeholders[user].amount != 0) {\n            revert Staking__userIsStaker();\n        }\n\n        if (stakingPackage[stakePeriod] == 0) {\n            revert Staking_noStakingPackageFound();\n        }\n\n        totalVoters += 1;\n        voters[user].votingRight = true;\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[user] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n\n        SafeERC20.safeTransferFrom(\n            IERC20(token_address),\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Emit an event that the stake has occured\n        emit Staked(user, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        if (amount > 30) {\n            revert Staking__penaltyExceed3Percent();\n        }\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (user_stake.amount == 0) {\n            return 0;\n        }\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        if (amount == 0) {\n            return (0, 0);\n        }\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    // ! TODO: ganti function _calculateStakingWithPenalty dan _calculateStakingReward menjadi single return\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        delete stakeholders[msg.sender];\n        totalVoters -= 1;\n        delete voters[msg.sender].voted[_votingId];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (amount_reduced + reward_reduced)\n            );\n        } else {\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        // require(user_stake.amount > 0, \"No Stake Found\");\n        if (user_stake.amount <= 0) {\n            revert Staking__noStakingFound();\n        }\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        if (amount > 200) {\n            revert Staking__airdropExceed20Percent();\n        }\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function _blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop(address user) external {\n        // TODO: can be simplified if using address\n        Stake storage staker = stakeholders[user];\n\n        if (staker.amount > 0) {\n            if (calculateWeek(staker.latestClaimDrop) == 0) {\n                revert Airdrop__claimableOnceAWeek();\n            }\n\n            staker.claimableAirdrop = 0;\n            staker.latestClaimDrop = block.timestamp;\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                _calculateAirdrop(staker.amount)\n            );\n        }\n    }\n\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\n    // ! Replaceable with Governance token\n\n    function getVoters(address user) external view returns (bool, bool) {\n        return (voters[user].votingRight, voters[user].voted[_votingId]);\n    }\n\n    // TODO: can be simplified since not connected directly\n    function startVoting() external nonReentrant onlyOwner {\n        if (_votingStatus == true) {\n            revert Voting__votingIsRunning();\n        }\n\n        _votingStatus = true;\n        _votingId += 1;\n    }\n\n    function vote() public nonReentrant votingStatusTrue isVoter {\n        if (voters[msg.sender].voted[_votingId] == true) {\n            revert Voting__alreadyVoted();\n        }\n\n        voters[msg.sender].voted[_votingId] = true;\n        votedUsers[_votingId] += 1;\n    }\n\n    function retractVote() public nonReentrant votingStatusTrue isVoter {\n        if (voters[msg.sender].voted[_votingId] == false) {\n            revert Voting__notYetVoted();\n        }\n\n        voters[msg.sender].voted[_votingId] == false;\n        votedUsers[_votingId] -= 1;\n    }\n\n    function getVotingResult()\n        external\n        view\n        onlyOwner\n        votingStatusTrue\n        returns (bool)\n    {\n        if (totalVoters <= 1) {\n            revert Voting__notEnoughVoters();\n        }\n        uint256 half_voters = (totalVoters * 5) / 10;\n\n        if (votedUsers[_votingId] > half_voters) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function stopVoting() external onlyOwner votingStatusTrue {\n        _votingStatus = false;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 1000
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;645:3270:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2A 0xF7 DUP8 EXTCODECOPY 0xCE 0xD4 SLT MLOAD DUP2 0xAA 0xAF RETURNDATACOPY 0xE1 0xF8 0xB1 RETURNDATACOPY 0xC0 0xB6 EQ JUMPDEST NUMBER 0xAC 0x24 0x27 0xEA 0xCC PUSH2 0xDF4E EQ 0x2C 0xC8 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202af7873cced4125181aaaf3ee1f8b13ec0b6145b43ac2427eacc61df4e142cc864736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0xE6 0xEE 0xDF DIFFICULTY 0xD6 0x5F MSTORE PUSH2 0x3BCF 0xAB SWAP4 DUP3 SHR SWAP15 CREATE2 PUSH13 0x2157C74D9DB29E16940B500A4C SWAP7 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ce6eedf44d65f52613bcfab93821c9ef56c2157c74d9db29e16940b500a4c9664736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stakable-2.0.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__notAVoter",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Function__votingNotAvailable",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__cannotStakeNothing",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__alreadyVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notEnoughVoters",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__notYetVoted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Voting__votingIsRunning",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getVoters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getVotingResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "retractVote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stopVoting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stakable-2.0.sol\":980:12683  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stakable-2.0.sol\":1680:1981  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/Stakable-2.0.sol\":1800:1802  15 */\n  0x0f\n    /* \"contracts/Stakable-2.0.sol\":1779:1797  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Stakable-2.0.sol\":1779:1802  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1826:1828  80 */\n  0x50\n    /* \"contracts/Stakable-2.0.sol\":1812:1823  airdropRate */\n  0x04\n    /* \"contracts/Stakable-2.0.sol\":1812:1828  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1839:1852  token_address */\n  0x0b\n    /* \"contracts/Stakable-2.0.sol\":1839:1860  token_address = token */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1871:1885  stakingPackage */\n  0x02\n    /* \"contracts/Stakable-2.0.sol\":1871:1894  stakingPackage[90 days] */\n  0x20\n  mstore\n    /* \"contracts/Stakable-2.0.sol\":1897:1898  6 */\n  0x06\n    /* \"contracts/Stakable-2.0.sol\":1871:1894  stakingPackage[90 days] */\n  0xa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c\n    /* \"contracts/Stakable-2.0.sol\":1871:1898  stakingPackage[90 days] = 6 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1935:1936  7 */\n  0x07\n    /* \"contracts/Stakable-2.0.sol\":1908:1932  stakingPackage[180 days] */\n  0x089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832\n    /* \"contracts/Stakable-2.0.sol\":1908:1936  stakingPackage[180 days] = 7 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":1961:1969  365 days */\n  0x01e13380\n  0x00\n    /* \"contracts/Stakable-2.0.sol\":1946:1970  stakingPackage[365 days] */\n  mstore\n    /* \"contracts/Stakable-2.0.sol\":1973:1974  8 */\n  0x08\n    /* \"contracts/Stakable-2.0.sol\":1946:1970  stakingPackage[365 days] */\n  0xdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b\n    /* \"contracts/Stakable-2.0.sol\":1946:1974  stakingPackage[365 days] = 8 */\n  sstore\n    /* \"contracts/Stakable-2.0.sol\":980:12683  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/Stakable-2.0.sol\":980:12683  contract Staking is ReentrancyGuard, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stakable-2.0.sol\":980:12683  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8c8e8fee\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xbed9d861\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xd2a569c3\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xfab2f86b\n      eq\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup1\n      0xbed9d861\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xc63aa3e7\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0xa3ec138d\n      gt\n      tag_31\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x8c8e8fee\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa143a5f2\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0x632a9a52\n      gt\n      tag_32\n      jumpi\n      dup1\n      0x715018a6\n      gt\n      tag_33\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      dup1\n      0x632a9a52\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x65f8c6c5\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x671d2b75\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      dup1\n      0x1ec6b60a\n      gt\n      tag_34\n      jumpi\n      dup1\n      0x1ec6b60a\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x2d15cc04\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      dup1\n      0x070c8b74\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x0c51b88f\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x10486b6a\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11889:12167  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_3:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/Stakable-2.0.sol\":4306:5733  function stake(... */\n    tag_4:\n      tag_35\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":8536:9560  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_5:\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n        /* \"#utility.yul\":696:700   */\n      0x00\n        /* \"#utility.yul\":738:741   */\n      0x0120\n        /* \"#utility.yul\":727:736   */\n      dup3\n        /* \"#utility.yul\":723:742   */\n      add\n        /* \"#utility.yul\":715:742   */\n      swap1\n      pop\n        /* \"#utility.yul\":775:781   */\n      dup3\n        /* \"#utility.yul\":769:782   */\n      mload\n        /* \"#utility.yul\":758:767   */\n      dup3\n        /* \"#utility.yul\":751:783   */\n      mstore\n        /* \"#utility.yul\":839:843   */\n      0x20\n        /* \"#utility.yul\":831:837   */\n      dup4\n        /* \"#utility.yul\":827:844   */\n      add\n        /* \"#utility.yul\":821:845   */\n      mload\n        /* \"#utility.yul\":814:818   */\n      0x20\n        /* \"#utility.yul\":803:812   */\n      dup4\n        /* \"#utility.yul\":799:819   */\n      add\n        /* \"#utility.yul\":792:846   */\n      mstore\n        /* \"#utility.yul\":893:897   */\n      0x40\n        /* \"#utility.yul\":885:891   */\n      dup4\n        /* \"#utility.yul\":881:898   */\n      add\n        /* \"#utility.yul\":875:899   */\n      mload\n        /* \"#utility.yul\":943:955   */\n      dup1\n        /* \"#utility.yul\":937:956   */\n      mload\n        /* \"#utility.yul\":930:934   */\n      0x40\n        /* \"#utility.yul\":919:928   */\n      dup5\n        /* \"#utility.yul\":915:935   */\n      add\n        /* \"#utility.yul\":908:957   */\n      mstore\n        /* \"#utility.yul\":1017:1021   */\n      0x20\n        /* \"#utility.yul\":1003:1015   */\n      dup2\n        /* \"#utility.yul\":999:1022   */\n      add\n        /* \"#utility.yul\":993:1023   */\n      mload\n        /* \"#utility.yul\":988:990   */\n      0x60\n        /* \"#utility.yul\":977:986   */\n      dup5\n        /* \"#utility.yul\":973:991   */\n      add\n        /* \"#utility.yul\":966:1024   */\n      mstore\n        /* \"#utility.yul\":1085:1089   */\n      0x40\n        /* \"#utility.yul\":1071:1083   */\n      dup2\n        /* \"#utility.yul\":1067:1090   */\n      add\n        /* \"#utility.yul\":1061:1091   */\n      mload\n        /* \"#utility.yul\":1055:1058   */\n      0x80\n        /* \"#utility.yul\":1044:1053   */\n      dup5\n        /* \"#utility.yul\":1040:1059   */\n      add\n        /* \"#utility.yul\":1033:1092   */\n      mstore\n        /* \"#utility.yul\":1153:1155   */\n      0x60\n        /* \"#utility.yul\":1139:1151   */\n      dup2\n        /* \"#utility.yul\":1135:1156   */\n      add\n        /* \"#utility.yul\":1129:1157   */\n      mload\n        /* \"#utility.yul\":1123:1126   */\n      0xa0\n        /* \"#utility.yul\":1112:1121   */\n      dup5\n        /* \"#utility.yul\":1108:1127   */\n      add\n        /* \"#utility.yul\":1101:1158   */\n      mstore\n        /* \"#utility.yul\":1219:1222   */\n      0x80\n        /* \"#utility.yul\":1205:1217   */\n      dup2\n        /* \"#utility.yul\":1201:1223   */\n      add\n        /* \"#utility.yul\":1195:1224   */\n      mload\n        /* \"#utility.yul\":1189:1192   */\n      0xc0\n        /* \"#utility.yul\":1178:1187   */\n      dup5\n        /* \"#utility.yul\":1174:1193   */\n      add\n        /* \"#utility.yul\":1167:1225   */\n      mstore\n        /* \"#utility.yul\":1286:1289   */\n      0xa0\n        /* \"#utility.yul\":1272:1284   */\n      dup2\n        /* \"#utility.yul\":1268:1290   */\n      add\n        /* \"#utility.yul\":1262:1291   */\n      mload\n        /* \"#utility.yul\":1256:1259   */\n      0xe0\n        /* \"#utility.yul\":1245:1254   */\n      dup5\n        /* \"#utility.yul\":1241:1260   */\n      add\n        /* \"#utility.yul\":1234:1292   */\n      mstore\n        /* \"#utility.yul\":1353:1356   */\n      0xc0\n        /* \"#utility.yul\":1339:1351   */\n      dup2\n        /* \"#utility.yul\":1335:1357   */\n      add\n        /* \"#utility.yul\":1329:1358   */\n      mload\n        /* \"#utility.yul\":1323:1326   */\n      0x0100\n        /* \"#utility.yul\":1312:1321   */\n      dup5\n        /* \"#utility.yul\":1308:1327   */\n      add\n        /* \"#utility.yul\":1301:1359   */\n      mstore\n      pop\n        /* \"#utility.yul\":542:1365   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stakable-2.0.sol\":8536:9560  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stakable-2.0.sol\":11398:11608  function startVoting() external nonReentrant onlyOwner {... */\n    tag_6:\n      tag_35\n      tag_46\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":11183:11332  function getVoters(address user) external view returns (bool, bool) {... */\n    tag_7:\n      tag_47\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":11269:11281  voters[user] */\n      and\n        /* \"contracts/Stakable-2.0.sol\":11239:11243  bool */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":11269:11281  voters[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11269:11275  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":11269:11281  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11269:11293  voters[user].votingRight */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11314:11323  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":11295:11324  voters[user].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11269:11293  voters[user].votingRight */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11295:11313  voters[user].voted */\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable-2.0.sol\":11295:11324  voters[user].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11269:11293  voters[user].votingRight */\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":11295:11324  voters[user].voted[_votingId] */\n      swap2\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11183:11332  function getVoters(address user) external view returns (bool, bool) {... */\n      jump\n    tag_47:\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":1748:1762   */\n      swap3\n      iszero\n        /* \"#utility.yul\":1741:1763   */\n      iszero\n        /* \"#utility.yul\":1723:1764   */\n      dup4\n      mstore\n        /* \"#utility.yul\":1807:1821   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1800:1822   */\n      iszero\n        /* \"#utility.yul\":1795:1797   */\n      0x20\n        /* \"#utility.yul\":1780:1798   */\n      dup4\n      add\n        /* \"#utility.yul\":1773:1823   */\n      mstore\n        /* \"#utility.yul\":1696:1714   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":11183:11332  function getVoters(address user) external view returns (bool, bool) {... */\n      tag_43\n        /* \"#utility.yul\":1561:1829   */\n      jump\n        /* \"contracts/Stakable-2.0.sol\":1516:1542  uint256 public totalVoters */\n    tag_8:\n      tag_53\n      sload(0x08)\n      dup2\n      jump\n    tag_53:\n      mload(0x40)\n        /* \"#utility.yul\":1980:2005   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1968:1970   */\n      0x20\n        /* \"#utility.yul\":1953:1971   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":1516:1542  uint256 public totalVoters */\n      tag_43\n        /* \"#utility.yul\":1834:2011   */\n      jump\n        /* \"contracts/Stakable-2.0.sol\":11614:11883  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_9:\n      tag_35\n      tag_58\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10435:11028  function claimAirdrop(address user) external {... */\n    tag_10:\n      tag_35\n      tag_60\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_60:\n      tag_61\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":12173:12579  function getVotingResult()... */\n    tag_11:\n      tag_62\n      tag_63\n      jump\t// in\n    tag_62:\n      mload(0x40)\n        /* \"#utility.yul\":2181:2195   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2174:2196   */\n      iszero\n        /* \"#utility.yul\":2156:2197   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2144:2146   */\n      0x20\n        /* \"#utility.yul\":2129:2147   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":12173:12579  function getVotingResult()... */\n      tag_43\n        /* \"#utility.yul\":2016:2203   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_12:\n      tag_35\n      tag_67\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1385:1411  uint256 public airdropRate */\n    tag_13:\n      tag_53\n      sload(0x04)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":5739:6045  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_14:\n      tag_35\n      tag_72\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_72:\n      tag_74\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1645:1673  address public token_address */\n    tag_15:\n      sload(0x0b)\n      tag_75\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_75:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2557:2612   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2539:2613   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2527:2529   */\n      0x20\n        /* \"#utility.yul\":2512:2530   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":1645:1673  address public token_address */\n      tag_43\n        /* \"#utility.yul\":2393:2619   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump(tag_75)\n        /* \"contracts/Stakable-2.0.sol\":1593:1638  mapping(uint256 => uint256) public votedUsers */\n    tag_17:\n      tag_53\n      tag_83\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_83:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":1548:1587  mapping(address => Voter) public voters */\n    tag_18:\n      tag_62\n      tag_87\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_87:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":10110:10244  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_19:\n      tag_53\n      tag_91\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_91:\n      tag_92\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":1417:1444  uint256 public airdropSince */\n    tag_20:\n      tag_53\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":7546:8530  function withdrawStake() external nonReentrant {... */\n    tag_21:\n      tag_35\n      tag_98\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10008:10104  function _blockTimestamp() public view returns (uint256) {... */\n    tag_22:\n        /* \"contracts/Stakable-2.0.sol\":10082:10097  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10008:10104  function _blockTimestamp() public view returns (uint256) {... */\n      jump(tag_53)\n        /* \"contracts/Stakable-2.0.sol\":1346:1379  uint256 public stakingPenaltyRate */\n    tag_23:\n      tag_53\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Stakable-2.0.sol\":9672:9762  function startAirdrop() external onlyOwner {... */\n    tag_24:\n      tag_35\n      tag_106\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":9768:10002  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_25:\n      tag_35\n      tag_108\n      calldatasize\n      0x04\n      tag_73\n      jump\t// in\n    tag_108:\n      tag_109\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_26:\n      tag_35\n      tag_111\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_111:\n      tag_112\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":12585:12681  function stopVoting() external onlyOwner votingStatusTrue {... */\n    tag_27:\n      tag_35\n      tag_114\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":11889:12167  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x1f\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2937   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2938   */\n      mstore\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_117:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_116:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      tag_120\n        /* \"contracts/Stakable-2.0.sol\":3951:3969  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      jump\t// in\n    tag_120:\n        /* \"contracts/Stakable-2.0.sol\":3669:3679  _isVoter() */\n      tag_123\n        /* \"contracts/Stakable-2.0.sol\":3669:3677  _isVoter */\n      tag_124\n        /* \"contracts/Stakable-2.0.sol\":3669:3679  _isVoter() */\n      jump\t// in\n    tag_123:\n        /* \"contracts/Stakable-2.0.sol\":11978:11988  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":11971:11989  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11971:11977  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":11971:11989  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11996:12005  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":11971:12006  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11971:11995  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable-2.0.sol\":11971:12006  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":11967:12070  if (voters[msg.sender].voted[_votingId] == false) {... */\n      tag_126\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12038:12059  Voting__notYetVoted() */\n      mload(0x40)\n      0x8b74220000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11967:12070  if (voters[msg.sender].voted[_votingId] == false) {... */\n    tag_126:\n        /* \"contracts/Stakable-2.0.sol\":12105:12114  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12080:12098  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":12080:12115  voters[msg.sender].voted[_votingId] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12134:12144  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12080:12098  voters[msg.sender] */\n      0x20\n        /* \"contracts/Stakable-2.0.sol\":12134:12155  votedUsers[_votingId] */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12080:12098  voters[msg.sender] */\n      0x40\n        /* \"contracts/Stakable-2.0.sol\":12134:12155  votedUsers[_votingId] */\n      dup2\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":12134:12160  votedUsers[_votingId] -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12080:12104  voters[msg.sender].voted */\n      0x01\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":12080:12098  voters[msg.sender] */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12134:12160  votedUsers[_votingId] -= 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12080:12104  voters[msg.sender].voted */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":12134:12160  votedUsers[_votingId] -= 1 */\n      tag_128\n      jump\t// in\n    tag_127:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":11889:12167  function retractVote() public nonReentrant votingStatusTrue isVoter {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":4306:5733  function stake(... */\n    tag_40:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x1f\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2937   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2938   */\n      mstore\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2624:2979   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_130:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_136:\n        /* \"contracts/Stakable-2.0.sol\":4568:4569  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":4558:4564  amount */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":4558:4569  amount <= 0 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":4554:4632  if (amount <= 0) {... */\n      tag_140\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4592:4621  Staking__cannotStakeNothing() */\n      mload(0x40)\n      0x88b440d600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4554:4632  if (amount <= 0) {... */\n    tag_140:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":4717:4735  stakeholders[user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":4717:4729  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":4717:4735  stakeholders[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":4717:4742  stakeholders[user].amount */\n      sload\n        /* \"contracts/Stakable-2.0.sol\":4717:4747  stakeholders[user].amount != 0 */\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":4713:4804  if (stakeholders[user].amount != 0) {... */\n      tag_141\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4770:4793  Staking__userIsStaker() */\n      mload(0x40)\n      0x04462d2700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4713:4804  if (stakeholders[user].amount != 0) {... */\n    tag_141:\n        /* \"contracts/Stakable-2.0.sol\":4818:4845  stakingPackage[stakePeriod] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":4818:4832  stakingPackage */\n      0x02\n        /* \"contracts/Stakable-2.0.sol\":4818:4845  stakingPackage[stakePeriod] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":4814:4915  if (stakingPackage[stakePeriod] == 0) {... */\n      tag_142\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":4873:4904  Staking_noStakingPackageFound() */\n      mload(0x40)\n      0x95377be400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":4814:4915  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_142:\n        /* \"contracts/Stakable-2.0.sol\":4940:4941  1 */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":4925:4936  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":4925:4941  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_143\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_143:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":4951:4963  voters[user] */\n      dup4\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":4951:4957  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":4951:4963  voters[user] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":4951:4982  voters[user].votingRight = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable-2.0.sol\":4978:4982  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":4951:4982  voters[user].votingRight = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      dup1\n      mload\n      0xe0\n      dup2\n      add\n      dup3\n      mstore\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5100:5115  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      dup2\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5327:5354  stakingPackage[stakePeriod] */\n      dup6\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5327:5341  stakingPackage */\n      0x02\n        /* \"contracts/Stakable-2.0.sol\":5327:5354  stakingPackage[stakePeriod] */\n      swap1\n      swap4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      swap1\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5100:5115  block.timestamp */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      0x60\n      dup2\n      add\n        /* \"contracts/Stakable-2.0.sol\":5369:5392  stakePeriod + timestamp */\n      tag_145\n        /* \"contracts/Stakable-2.0.sol\":5100:5115  block.timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":5342:5353  stakePeriod */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":5369:5392  stakePeriod + timestamp */\n      tag_144\n      jump\t// in\n    tag_145:\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5407:5408  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":5265:5448  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":5244:5262  stakeholders[user] */\n      dup1\n      dup11\n      and\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":5244:5256  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":5244:5262  stakeholders[user] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":5244:5448  stakeholders[user] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      add\n      mload\n      0x02\n      dup3\n      add\n      sstore\n      swap2\n      dup4\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      0x80\n      dup4\n      add\n      mload\n      0x04\n      dup4\n      add\n      sstore\n      0xa0\n      dup4\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap3\n      add\n      mload\n      0x06\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":5506:5519  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":5459:5601  SafeERC20.safeTransferFrom(... */\n      tag_146\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":5506:5519  token_address */\n      and\n        /* \"contracts/Stakable-2.0.sol\":5534:5544  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":5566:5570  this */\n      address\n        /* \"contracts/Stakable-2.0.sol\":5585:5591  amount */\n      dup7\n        /* \"contracts/Stakable-2.0.sol\":5459:5485  SafeERC20.safeTransferFrom */\n      tag_147\n        /* \"contracts/Stakable-2.0.sol\":5459:5601  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_146:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":5668:5726  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      dup5\n      and\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stakable-2.0.sol\":5681:5687  amount */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":5689:5698  timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":5701:5724  stakePeriod + timestamp */\n      tag_148\n        /* \"contracts/Stakable-2.0.sol\":5689:5698  timestamp */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":5701:5712  stakePeriod */\n      dup8\n        /* \"contracts/Stakable-2.0.sol\":5701:5724  stakePeriod + timestamp */\n      tag_144\n      jump\t// in\n    tag_148:\n        /* \"contracts/Stakable-2.0.sol\":5668:5726  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":3999:4024   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4055:4057   */\n      0x20\n        /* \"#utility.yul\":4040:4058   */\n      dup5\n      add\n        /* \"#utility.yul\":4033:4067   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":4083:4101   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4076:4110   */\n      mstore\n        /* \"#utility.yul\":3987:3989   */\n      0x60\n        /* \"#utility.yul\":3972:3990   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":5668:5726  Staked(user, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":4306:5733  function stake(... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":8536:9560  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_42:\n        /* \"contracts/Stakable-2.0.sol\":8579:8600  StakingSummary memory */\n      tag_151\n      tag_152\n      jump\t// in\n    tag_151:\n        /* \"contracts/Stakable-2.0.sol\":8651:8661  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8612:8635  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":8638:8662  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8638:8650  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":8638:8662  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":8612:8662  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8733:8818  if (user_stake.amount <= 0) {... */\n      tag_154\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":8782:8807  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":8733:8818  if (user_stake.amount <= 0) {... */\n    tag_154:\n        /* \"contracts/Stakable-2.0.sol\":8859:8891  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8827:8856  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":8859:8891  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8919:8952  _calculateStakeReward(user_stake) */\n      tag_155\n        /* \"contracts/Stakable-2.0.sol\":8880:8890  user_stake */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":8919:8940  _calculateStakeReward */\n      tag_156\n        /* \"contracts/Stakable-2.0.sol\":8919:8952  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_155:\n        /* \"contracts/Stakable-2.0.sol\":8902:8952  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8995:9010  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":8967:8974  summary */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":8967:8980  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8967:8992  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8967:9010  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":8963:9177  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_157\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9161:9165  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":9139:9157  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":9130:9136  reward */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":9130:9157  reward * stakingPenaltyRate */\n      tag_158\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_158:\n        /* \"contracts/Stakable-2.0.sol\":9129:9165  (reward * stakingPenaltyRate) / 1000 */\n      tag_160\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"contracts/Stakable-2.0.sol\":9082:9100  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":9062:9079  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9104:9108  1000 */\n      0x03e8\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":9062:9100  user_stake.amount * stakingPenaltyRate */\n      tag_162\n      swap2\n      tag_159\n      jump\t// in\n    tag_162:\n        /* \"contracts/Stakable-2.0.sol\":9061:9108  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_163\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_163:\n        /* \"contracts/Stakable-2.0.sol\":9060:9166  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_164\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_164:\n        /* \"contracts/Stakable-2.0.sol\":9026:9041  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/Stakable-2.0.sol\":9026:9166  summary.penalty =... */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":8963:9177  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_157:\n        /* \"contracts/Stakable-2.0.sol\":9235:9236  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9191:9232  calculateWeek(user_stake.latestClaimDrop) */\n      tag_165\n        /* \"contracts/Stakable-2.0.sol\":9205:9215  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":9205:9231  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9191:9204  calculateWeek */\n      tag_92\n        /* \"contracts/Stakable-2.0.sol\":9191:9232  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_165:\n        /* \"contracts/Stakable-2.0.sol\":9191:9236  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":9187:9436  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_166\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9252:9267  uint256 airdrop */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9270:9306  _calculateAirdrop(user_stake.amount) */\n      tag_167\n        /* \"contracts/Stakable-2.0.sol\":9288:9298  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":9288:9305  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9270:9287  _calculateAirdrop */\n      tag_168\n        /* \"contracts/Stakable-2.0.sol\":9270:9306  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_167:\n        /* \"contracts/Stakable-2.0.sol\":9320:9333  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9320:9350  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stakable-2.0.sol\":9320:9360  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stakable-2.0.sol\":9187:9436  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_169)\n    tag_166:\n        /* \"contracts/Stakable-2.0.sol\":9391:9404  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9424:9425  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":9391:9421  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/Stakable-2.0.sol\":9391:9425  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9187:9436  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_169:\n        /* \"contracts/Stakable-2.0.sol\":9446:9459  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9446:9469  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stakable-2.0.sol\":9446:9478  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9511:9528  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/Stakable-2.0.sol\":9488:9528  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9446:9453  summary */\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":8536:9560  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":11398:11608  function startVoting() external nonReentrant onlyOwner {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_171\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x1f\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2937   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2938   */\n      mstore\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2624:2979   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_171:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_176\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_176:\n        /* \"contracts/Stakable-2.0.sol\":11467:11480  _votingStatus */\n      and(0xff, sload(0x06))\n        /* \"contracts/Stakable-2.0.sol\":11467:11488  _votingStatus == true */\n      iszero\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":11467:11480  _votingStatus */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11467:11488  _votingStatus == true */\n      eq\n        /* \"contracts/Stakable-2.0.sol\":11463:11547  if (_votingStatus == true) {... */\n      iszero\n      tag_179\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":11511:11536  Voting__votingIsRunning() */\n      mload(0x40)\n      0x6da4cd2e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11463:11547  if (_votingStatus == true) {... */\n    tag_179:\n        /* \"contracts/Stakable-2.0.sol\":11557:11570  _votingStatus */\n      0x06\n        /* \"contracts/Stakable-2.0.sol\":11557:11577  _votingStatus = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stakable-2.0.sol\":11573:11577  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11557:11577  _votingStatus = true */\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":11587:11596  _votingId */\n      0x07\n        /* \"contracts/Stakable-2.0.sol\":11587:11601  _votingId += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11557:11570  _votingStatus */\n      0x00\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11587:11601  _votingId += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11573:11577  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11587:11601  _votingId += 1 */\n      tag_144\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":11614:11883  function vote() public nonReentrant votingStatusTrue isVoter {... */\n    tag_58:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_183\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x1f\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2937   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2938   */\n      mstore\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2624:2979   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_183:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      tag_186\n        /* \"contracts/Stakable-2.0.sol\":3951:3969  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      jump\t// in\n    tag_186:\n        /* \"contracts/Stakable-2.0.sol\":3669:3679  _isVoter() */\n      tag_188\n        /* \"contracts/Stakable-2.0.sol\":3669:3677  _isVoter */\n      tag_124\n        /* \"contracts/Stakable-2.0.sol\":3669:3679  _isVoter() */\n      jump\t// in\n    tag_188:\n        /* \"contracts/Stakable-2.0.sol\":11696:11706  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":11689:11707  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11689:11695  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":11689:11707  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11714:11723  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":11689:11724  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11689:11713  voters[msg.sender].voted */\n      0x01\n      swap1\n      dup2\n      add\n        /* \"contracts/Stakable-2.0.sol\":11689:11724  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap3\n      mstore\n      swap1\n      swap2\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":11689:11732  voters[msg.sender].voted[_votingId] == true */\n      iszero\n      iszero\n      eq\n        /* \"contracts/Stakable-2.0.sol\":11685:11788  if (voters[msg.sender].voted[_votingId] == true) {... */\n      iszero\n      tag_190\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":11755:11777  Voting__alreadyVoted() */\n      mload(0x40)\n      0x740e33b000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":11685:11788  if (voters[msg.sender].voted[_votingId] == true) {... */\n    tag_190:\n        /* \"contracts/Stakable-2.0.sol\":11805:11815  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":11798:11816  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11798:11804  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":11798:11816  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11823:11832  _votingId */\n      0x07\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11798:11833  voters[msg.sender].voted[_votingId] */\n      dup6\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11836:11840  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":11798:11822  voters[msg.sender].voted */\n      swap2\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":11798:11833  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n      dup3\n      dup6\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11798:11840  voters[msg.sender].voted[_votingId] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup4\n      or\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":11861:11870  _votingId */\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11850:11871  votedUsers[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":11850:11860  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":11850:11871  votedUsers[_votingId] */\n      swap1\n      swap3\n      mstore\n      dup3\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":11850:11876  votedUsers[_votingId] += 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":11836:11840  true */\n      swap2\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":11850:11871  votedUsers[_votingId] */\n      swap1\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":11850:11876  votedUsers[_votingId] += 1 */\n      tag_127\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11836:11840  true */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":11850:11876  votedUsers[_votingId] += 1 */\n      tag_144\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10435:11028  function claimAirdrop(address user) external {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":10565:10583  stakeholders[user] */\n      dup2\n      and\n        /* \"contracts/Stakable-2.0.sol\":10542:10562  Stake storage staker */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10565:10583  stakeholders[user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":10565:10577  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":10565:10583  stakeholders[user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":10598:10611  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":10598:10615  staker.amount > 0 */\n      iszero\n        /* \"contracts/Stakable-2.0.sol\":10594:11022  if (staker.amount > 0) {... */\n      tag_196\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":10635:10672  calculateWeek(staker.latestClaimDrop) */\n      tag_194\n        /* \"contracts/Stakable-2.0.sol\":10649:10655  staker */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":10649:10671  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stakable-2.0.sol\":10635:10648  calculateWeek */\n      tag_92\n        /* \"contracts/Stakable-2.0.sol\":10635:10672  calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_194:\n        /* \"contracts/Stakable-2.0.sol\":10631:10748  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n      tag_195\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":10704:10733  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      0xdd8456cc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":10631:10748  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_195:\n        /* \"contracts/Stakable-2.0.sol\":10788:10789  0 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10762:10785  staker.claimableAirdrop */\n      0x05\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":10762:10789  staker.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":10828:10843  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10803:10825  staker.latestClaimDrop */\n      0x06\n      dup3\n      add\n        /* \"contracts/Stakable-2.0.sol\":10803:10843  staker.latestClaimDrop = block.timestamp */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":10905:10918  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":10983:10996  staker.amount */\n      dup2\n      sload\n        /* \"contracts/Stakable-2.0.sol\":10858:11011  SafeERC20.safeTransfer(... */\n      tag_196\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":10905:10918  token_address */\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":10937:10947  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":10965:10997  _calculateAirdrop(staker.amount) */\n      tag_197\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":10965:10982  _calculateAirdrop */\n      tag_168\n        /* \"contracts/Stakable-2.0.sol\":10965:10997  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_197:\n        /* \"contracts/Stakable-2.0.sol\":10858:10880  SafeERC20.safeTransfer */\n      tag_198\n        /* \"contracts/Stakable-2.0.sol\":10858:11011  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_196:\n        /* \"contracts/Stakable-2.0.sol\":10480:11028  {... */\n      pop\n        /* \"contracts/Stakable-2.0.sol\":10435:11028  function claimAirdrop(address user) external {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":12173:12579  function getVotingResult()... */\n    tag_63:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      sload(0x01)\n        /* \"contracts/Stakable-2.0.sol\":12290:12294  bool */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_202\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_202:\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      tag_205\n        /* \"contracts/Stakable-2.0.sol\":3951:3969  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      jump\t// in\n    tag_205:\n        /* \"contracts/Stakable-2.0.sol\":12329:12330  1 */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":12314:12325  totalVoters */\n      sload(0x08)\n        /* \"contracts/Stakable-2.0.sol\":12314:12330  totalVoters <= 1 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":12310:12389  if (totalVoters <= 1) {... */\n      tag_207\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12353:12378  Voting__notEnoughVoters() */\n      mload(0x40)\n      0x2f9686de00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":12310:12389  if (totalVoters <= 1) {... */\n    tag_207:\n        /* \"contracts/Stakable-2.0.sol\":12398:12417  uint256 half_voters */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":12440:12442  10 */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12421:12432  totalVoters */\n      sload(0x08)\n        /* \"contracts/Stakable-2.0.sol\":12435:12436  5 */\n      0x05\n        /* \"contracts/Stakable-2.0.sol\":12421:12436  totalVoters * 5 */\n      tag_208\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_208:\n        /* \"contracts/Stakable-2.0.sol\":12420:12442  (totalVoters * 5) / 10 */\n      tag_209\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_209:\n        /* \"contracts/Stakable-2.0.sol\":12468:12477  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":12457:12478  votedUsers[_votingId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":12457:12467  votedUsers */\n      0x0a\n        /* \"contracts/Stakable-2.0.sol\":12457:12478  votedUsers[_votingId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stakable-2.0.sol\":12398:12442  uint256 half_voters = (totalVoters * 5) / 10 */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12457:12492  votedUsers[_votingId] > half_voters */\n      dup2\n      lt\n        /* \"contracts/Stakable-2.0.sol\":12453:12573  if (votedUsers[_votingId] > half_voters) {... */\n      iszero\n      tag_210\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":12515:12519  true */\n      0x01\n        /* \"contracts/Stakable-2.0.sol\":12508:12519  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12173:12579  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":12453:12573  if (votedUsers[_votingId] > half_voters) {... */\n    tag_210:\n        /* \"contracts/Stakable-2.0.sol\":12557:12562  false */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":12550:12562  return false */\n      swap2\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":12173:12579  function getVotingResult()... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_67:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_215\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_215:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_218\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_219\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":5739:6045  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_223\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_223:\n        /* \"contracts/Stakable-2.0.sol\":5897:5899  30 */\n      0x1e\n        /* \"contracts/Stakable-2.0.sol\":5888:5894  amount */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":5888:5899  amount > 30 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":5884:5965  if (amount > 30) {... */\n      iszero\n      tag_226\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":5922:5954  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      0xf1a470d700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":5884:5965  if (amount > 30) {... */\n    tag_226:\n        /* \"contracts/Stakable-2.0.sol\":5974:5992  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Stakable-2.0.sol\":5974:6001  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":6016:6038  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1980:2005   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":6016:6038  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":1968:1970   */\n      0x20\n        /* \"#utility.yul\":1953:1971   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":6016:6038  PenaltyChanged(amount) */\n    tag_227:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stakable-2.0.sol\":5739:6045  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":10110:10244  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_92:\n        /* \"contracts/Stakable-2.0.sol\":10173:10180  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10231:10237  7 days */\n      0x093a80\n        /* \"contracts/Stakable-2.0.sol\":10200:10227  block.timestamp - timestamp */\n      tag_230\n        /* \"contracts/Stakable-2.0.sol\":10218:10227  timestamp */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":10200:10215  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":10200:10227  block.timestamp - timestamp */\n      tag_128\n      jump\t// in\n    tag_230:\n        /* \"contracts/Stakable-2.0.sol\":10199:10237  (block.timestamp - timestamp) / 7 days */\n      tag_231\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_231:\n        /* \"contracts/Stakable-2.0.sol\":10192:10237  return (block.timestamp - timestamp) / 7 days */\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":10110:10244  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":7546:8530  function withdrawStake() external nonReentrant {... */\n    tag_98:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_233\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2826:2828   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2808:2829   */\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x1f\n        /* \"#utility.yul\":2845:2863   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2838:2868   */\n      mstore\n        /* \"#utility.yul\":2904:2937   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":2884:2902   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2877:2938   */\n      mstore\n        /* \"#utility.yul\":2955:2973   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_117\n        /* \"#utility.yul\":2624:2979   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_233:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      dup2\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":7750:7760  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":7737:7761  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":7737:7749  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":7737:7761  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":7711:7761  Stake memory user_stake = stakeholders[msg.sender] */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      swap4\n      dup5\n      add\n      sload\n      swap1\n      dup3\n      add\n      mstore\n      0x03\n      dup4\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup4\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup4\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      swap1\n      swap3\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":7788:7821  _calculateStakeReward(user_stake) */\n      tag_236\n        /* \"contracts/Stakable-2.0.sol\":7711:7761  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n        /* \"contracts/Stakable-2.0.sol\":7788:7809  _calculateStakeReward */\n      tag_156\n        /* \"contracts/Stakable-2.0.sol\":7788:7821  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_236:\n        /* \"contracts/Stakable-2.0.sol\":7852:7862  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":7839:7863  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":7839:7851  stakeholders */\n      0x0c\n        /* \"contracts/Stakable-2.0.sol\":7839:7863  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":7832:7863  delete stakeholders[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x06\n      swap1\n      swap2\n      add\n      dup3\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":7873:7884  totalVoters */\n      0x08\n        /* \"contracts/Stakable-2.0.sol\":7873:7889  totalVoters -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stakable-2.0.sol\":7771:7821  uint256 reward = _calculateStakeReward(user_stake) */\n      swap4\n      swap5\n      pop\n        /* \"contracts/Stakable-2.0.sol\":7832:7863  delete stakeholders[msg.sender] */\n      swap1\n      swap3\n        /* \"contracts/Stakable-2.0.sol\":7873:7884  totalVoters */\n      swap1\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":7839:7863  stakeholders[msg.sender] */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7873:7889  totalVoters -= 1 */\n      tag_237\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7832:7863  delete stakeholders[msg.sender] */\n      dup5\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7873:7889  totalVoters -= 1 */\n      tag_128\n      jump\t// in\n    tag_237:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":7913:7923  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":7906:7924  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":7906:7912  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":7906:7924  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":7931:7940  _votingId */\n      sload(0x07)\n        /* \"contracts/Stakable-2.0.sol\":7906:7941  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":7906:7930  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stakable-2.0.sol\":7906:7941  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":7899:7941  delete voters[msg.sender].voted[_votingId] */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":7956:7978  user_stake.releaseTime */\n      0x60\n      dup3\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":7981:7996  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/Stakable-2.0.sol\":7952:8524  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_238\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":8030:8052  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":8070:8092  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":8109:8164  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_239\n        /* \"contracts/Stakable-2.0.sol\":8138:8148  user_stake */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":8138:8155  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8157:8163  reward */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":8109:8137  _calculateStakingWithPenalty */\n      tag_240\n        /* \"contracts/Stakable-2.0.sol\":8109:8164  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_239:\n        /* \"contracts/Stakable-2.0.sol\":8226:8239  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":8012:8164  (... */\n      swap2\n      swap4\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":8179:8333  SafeERC20.safeTransfer(... */\n      tag_241\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":8226:8239  token_address */\n      and\n        /* \"contracts/Stakable-2.0.sol\":8258:8268  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":8287:8318  amount_reduced + reward_reduced */\n      tag_197\n        /* \"contracts/Stakable-2.0.sol\":8012:8164  (... */\n      dup5\n      dup7\n        /* \"contracts/Stakable-2.0.sol\":8287:8318  amount_reduced + reward_reduced */\n      tag_144\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":8179:8333  SafeERC20.safeTransfer(... */\n    tag_241:\n        /* \"contracts/Stakable-2.0.sol\":7998:8344  {... */\n      pop\n      pop\n        /* \"contracts/Stakable-2.0.sol\":7952:8524  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_244)\n    tag_238:\n        /* \"contracts/Stakable-2.0.sol\":8411:8424  token_address */\n      sload(0x0b)\n        /* \"contracts/Stakable-2.0.sol\":8472:8489  user_stake.amount */\n      dup3\n      mload\n        /* \"contracts/Stakable-2.0.sol\":8364:8513  SafeERC20.safeTransfer(... */\n      tag_244\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable-2.0.sol\":8411:8424  token_address */\n      and\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8443:8453  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8472:8498  user_stake.amount + reward */\n      tag_197\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8492:8498  reward */\n      dup6\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":8472:8498  user_stake.amount + reward */\n      tag_144\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":8364:8513  SafeERC20.safeTransfer(... */\n    tag_244:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":7546:8530  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":9672:9762  function startAirdrop() external onlyOwner {... */\n    tag_106:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_250\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_250:\n        /* \"contracts/Stakable-2.0.sol\":9740:9755  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":9725:9737  airdropSince */\n      0x05\n        /* \"contracts/Stakable-2.0.sol\":9725:9755  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":9672:9762  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":9768:10002  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_109:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_256\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_256:\n        /* \"contracts/Stakable-2.0.sol\":9859:9862  200 */\n      0xc8\n        /* \"contracts/Stakable-2.0.sol\":9850:9856  amount */\n      dup2\n        /* \"contracts/Stakable-2.0.sol\":9850:9862  amount > 200 */\n      gt\n        /* \"contracts/Stakable-2.0.sol\":9846:9929  if (amount > 200) {... */\n      iszero\n      tag_259\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":9885:9918  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      0xa552cf1000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":9846:9929  if (amount > 200) {... */\n    tag_259:\n        /* \"contracts/Stakable-2.0.sol\":9938:9949  airdropRate */\n      0x04\n        /* \"contracts/Stakable-2.0.sol\":9938:9958  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":9973:9995  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1980:2005   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":9973:9995  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":1968:1970   */\n      0x20\n        /* \"#utility.yul\":1953:1971   */\n      add\n        /* \"contracts/Stakable-2.0.sol\":9973:9995  AirdropChanged(amount) */\n      tag_227\n        /* \"#utility.yul\":1834:2011   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_112:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_264\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_264:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_267\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4775:4777   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4757:4778   */\n      mstore\n        /* \"#utility.yul\":4814:4816   */\n      0x26\n        /* \"#utility.yul\":4794:4812   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4787:4817   */\n      mstore\n        /* \"#utility.yul\":4853:4887   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4833:4851   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4826:4888   */\n      mstore\n        /* \"#utility.yul\":4924:4932   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4904:4922   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4897:4933   */\n      mstore\n        /* \"#utility.yul\":4950:4969   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_117\n        /* \"#utility.yul\":4573:4975   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_267:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_270\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_219\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_270:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":12585:12681  function stopVoting() external onlyOwner votingStatusTrue {... */\n    tag_114:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_274\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3505:3507   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3487:3508   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":3524:3542   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3517:3547   */\n      mstore\n        /* \"#utility.yul\":3583:3617   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3563:3581   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3556:3618   */\n      mstore\n        /* \"#utility.yul\":3635:3653   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_117\n        /* \"#utility.yul\":3303:3659   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n    tag_274:\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      tag_277\n        /* \"contracts/Stakable-2.0.sol\":3951:3969  _checkVotingStatus */\n      tag_121\n        /* \"contracts/Stakable-2.0.sol\":3951:3971  _checkVotingStatus() */\n      jump\t// in\n    tag_277:\n        /* \"contracts/Stakable-2.0.sol\":12653:12666  _votingStatus */\n      0x06\n        /* \"contracts/Stakable-2.0.sol\":12653:12674  _votingStatus = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stakable-2.0.sol\":12585:12681  function stopVoting() external onlyOwner votingStatusTrue {... */\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":3703:3907  function _checkVotingStatus() internal view {... */\n    tag_121:\n        /* \"contracts/Stakable-2.0.sol\":3824:3837  _votingStatus */\n      and(0xff, sload(0x06))\n        /* \"contracts/Stakable-2.0.sol\":3819:3901  if (!_votingStatus) {... */\n      tag_218\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":3860:3890  Function__votingNotAvailable() */\n      mload(0x40)\n      0xa1d1891400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stakable-2.0.sol\":3403:3634  function _isVoter() internal view {... */\n    tag_124:\n        /* \"contracts/Stakable-2.0.sol\":3541:3551  msg.sender */\n      caller\n        /* \"contracts/Stakable-2.0.sol\":3534:3552  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable-2.0.sol\":3534:3540  voters */\n      0x09\n        /* \"contracts/Stakable-2.0.sol\":3534:3552  voters[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stakable-2.0.sol\":3534:3564  voters[msg.sender].votingRight */\n      sload\n      0xff\n      and\n        /* \"contracts/Stakable-2.0.sol\":3530:3628  if (voters[msg.sender].votingRight == false) {... */\n      tag_218\n      jumpi\n        /* \"contracts/Stakable-2.0.sol\":3596:3617  Function__notAVoter() */\n      mload(0x40)\n      0x1e567dd400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5261:5276   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":5243:5277   */\n      mstore\n        /* \"#utility.yul\":5313:5328   */\n      dup4\n      and\n        /* \"#utility.yul\":5293:5311   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5286:5329   */\n      mstore\n        /* \"#utility.yul\":5345:5363   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":5338:5372   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_285\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1070:1075  token */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1100:1127  token.transferFrom.selector */\n      0x23b872dd00000000000000000000000000000000000000000000000000000000\n      swap1\n        /* \"#utility.yul\":5155:5173   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_286:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1069  _callOptionalReturn */\n      tag_288\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_285:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6288:6725  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_156:\n        /* \"contracts/Stakable-2.0.sol\":6418:6435  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6391:6398  uint256 */\n      0x00\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6414:6475  if (user_stake.amount == 0) {... */\n      tag_290\n      jumpi\n      pop\n        /* \"contracts/Stakable-2.0.sol\":6463:6464  0 */\n      0x00\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":6288:6725  function _calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6414:6475  if (user_stake.amount == 0) {... */\n    tag_290:\n        /* \"contracts/Stakable-2.0.sol\":6714:6718  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stakable-2.0.sol\":6667:6710  _calculateStakingDuration(user_stake.since) */\n      tag_291\n        /* \"contracts/Stakable-2.0.sol\":6693:6703  user_stake */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":6693:6709  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6667:6692  _calculateStakingDuration */\n      tag_292\n        /* \"contracts/Stakable-2.0.sol\":6667:6710  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_291:\n        /* \"contracts/Stakable-2.0.sol\":6628:6648  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6592:6609  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stakable-2.0.sol\":6592:6648  user_stake.amount *... */\n      tag_293\n      swap2\n        /* \"contracts/Stakable-2.0.sol\":6628:6648  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6592:6648  user_stake.amount *... */\n      tag_159\n      jump\t// in\n    tag_293:\n        /* \"contracts/Stakable-2.0.sol\":6592:6710  user_stake.amount *... */\n      tag_230\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n        /* \"contracts/Stakable-2.0.sol\":10250:10429  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_168:\n        /* \"contracts/Stakable-2.0.sol\":10345:10352  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":10414:10422  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stakable-2.0.sol\":10406:10410  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":10391:10402  airdropRate */\n      sload(0x04)\n        /* \"contracts/Stakable-2.0.sol\":10377:10388  stakeAmount */\n      dup5\n        /* \"contracts/Stakable-2.0.sol\":10377:10402  stakeAmount * airdropRate */\n      tag_297\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_297:\n        /* \"contracts/Stakable-2.0.sol\":10376:10410  (stakeAmount * airdropRate) / 1000 */\n      tag_230\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_198:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5575:5630   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5557:5631   */\n      mstore\n        /* \"#utility.yul\":5647:5665   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":5640:5674   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_301\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      0xa9059cbb00000000000000000000000000000000000000000000000000000000\n      swap1\n        /* \"#utility.yul\":5530:5548   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      tag_286\n        /* \"#utility.yul\":5383:5680   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_301:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_219:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stakable-2.0.sol\":6731:7090  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_240:\n        /* \"contracts/Stakable-2.0.sol\":6848:6855  uint256 */\n      0x00\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":6884:6895  amount == 0 */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":6880:6935  if (amount == 0) {... */\n      tag_306\n      jumpi\n      pop\n        /* \"contracts/Stakable-2.0.sol\":6919:6920  0 */\n      0x00\n      swap1\n      pop\n      dup1\n        /* \"contracts/Stakable-2.0.sol\":6911:6924  return (0, 0) */\n      jump(tag_305)\n        /* \"contracts/Stakable-2.0.sol\":6880:6935  if (amount == 0) {... */\n    tag_306:\n        /* \"contracts/Stakable-2.0.sol\":7007:7011  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":6985:7003  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":6976:6982  amount */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":6976:7003  amount * stakingPenaltyRate */\n      tag_307\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_307:\n        /* \"contracts/Stakable-2.0.sol\":6975:7011  (amount * stakingPenaltyRate) / 1000 */\n      tag_308\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_308:\n        /* \"contracts/Stakable-2.0.sol\":6965:7012  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_309\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6965:6971  amount */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":6965:7012  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_128\n      jump\t// in\n    tag_309:\n        /* \"contracts/Stakable-2.0.sol\":7068:7072  1000 */\n      0x03e8\n        /* \"contracts/Stakable-2.0.sol\":7046:7064  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stakable-2.0.sol\":7037:7043  reward */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7037:7064  reward * stakingPenaltyRate */\n      tag_310\n      swap2\n      swap1\n      tag_159\n      jump\t// in\n    tag_310:\n        /* \"contracts/Stakable-2.0.sol\":7036:7072  (reward * stakingPenaltyRate) / 1000 */\n      tag_311\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_311:\n        /* \"contracts/Stakable-2.0.sol\":7026:7073  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_312\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":7026:7032  reward */\n      dup6\n        /* \"contracts/Stakable-2.0.sol\":7026:7073  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_128\n      jump\t// in\n    tag_312:\n        /* \"contracts/Stakable-2.0.sol\":6944:7083  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stakable-2.0.sol\":6731:7090  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_305:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_288:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_314\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      and\n      tag_315\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_314:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      tag_301\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_317\n      swap2\n      swap1\n      tag_318\n      jump\t// in\n    tag_317:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_301\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6169:6171   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6151:6172   */\n      mstore\n        /* \"#utility.yul\":6208:6210   */\n      0x2a\n        /* \"#utility.yul\":6188:6206   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6181:6211   */\n      mstore\n        /* \"#utility.yul\":6247:6281   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":6227:6245   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6220:6282   */\n      mstore\n        /* \"#utility.yul\":6318:6330   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6298:6316   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6291:6331   */\n      mstore\n        /* \"#utility.yul\":6348:6367   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_117\n        /* \"#utility.yul\":5967:6373   */\n      jump\n        /* \"contracts/Stakable-2.0.sol\":6051:6282  function _calculateStakingDuration(uint256 since)... */\n    tag_292:\n        /* \"contracts/Stakable-2.0.sol\":6148:6155  uint256 */\n      0x00\n        /* \"contracts/Stakable-2.0.sol\":6267:6275  365 days */\n      0x01e13380\n        /* \"contracts/Stakable-2.0.sol\":6232:6255  block.timestamp - since */\n      tag_323\n        /* \"contracts/Stakable-2.0.sol\":6250:6255  since */\n      dup4\n        /* \"contracts/Stakable-2.0.sol\":6232:6247  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable-2.0.sol\":6232:6255  block.timestamp - since */\n      tag_128\n      jump\t// in\n    tag_323:\n        /* \"contracts/Stakable-2.0.sol\":6231:6263  (block.timestamp - since) * 1e24 */\n      tag_230\n      swap1\n        /* \"contracts/Stakable-2.0.sol\":6259:6263  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stakable-2.0.sol\":6231:6263  (block.timestamp - since) * 1e24 */\n      tag_159\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_315:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_327\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_328\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_327:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_326:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_328:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_330\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6580:6582   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6562:6583   */\n      mstore\n        /* \"#utility.yul\":6619:6621   */\n      0x26\n        /* \"#utility.yul\":6599:6617   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6592:6622   */\n      mstore\n        /* \"#utility.yul\":6658:6692   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":6638:6656   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6631:6693   */\n      mstore\n        /* \"#utility.yul\":6729:6737   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6709:6727   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6702:6738   */\n      mstore\n        /* \"#utility.yul\":6755:6774   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_117\n        /* \"#utility.yul\":6378:6780   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_330:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_335\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6987:6989   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6969:6990   */\n      mstore\n        /* \"#utility.yul\":7026:7028   */\n      0x1d\n        /* \"#utility.yul\":7006:7024   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6999:7029   */\n      mstore\n        /* \"#utility.yul\":7065:7096   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":7045:7063   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7038:7097   */\n      mstore\n        /* \"#utility.yul\":7114:7132   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_117\n        /* \"#utility.yul\":6785:7138   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n    tag_335:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_338\n      swap2\n      swap1\n      tag_339\n      jump\t// in\n    tag_338:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_342\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_341)\n    tag_342:\n      0x60\n      swap2\n      pop\n    tag_341:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_343\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_344\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_343:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_344:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_347\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      jump(tag_326)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_347:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      tag_349\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_349:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_117\n      swap2\n      swap1\n      tag_352\n      jump\t// in\n    tag_152:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_353\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_353:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:210   */\n    tag_355:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:185   */\n      dup2\n      and\n        /* \"#utility.yul\":121:186   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:204   */\n      tag_360\n      jumpi\n        /* \"#utility.yul\":200:201   */\n      0x00\n        /* \"#utility.yul\":197:198   */\n      dup1\n        /* \"#utility.yul\":190:202   */\n      revert\n        /* \"#utility.yul\":111:204   */\n    tag_360:\n        /* \"#utility.yul\":14:210   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":215:537   */\n    tag_39:\n        /* \"#utility.yul\":292:298   */\n      0x00\n        /* \"#utility.yul\":300:306   */\n      dup1\n        /* \"#utility.yul\":308:314   */\n      0x00\n        /* \"#utility.yul\":361:363   */\n      0x60\n        /* \"#utility.yul\":349:358   */\n      dup5\n        /* \"#utility.yul\":340:347   */\n      dup7\n        /* \"#utility.yul\":336:359   */\n      sub\n        /* \"#utility.yul\":332:364   */\n      slt\n        /* \"#utility.yul\":329:381   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":377:378   */\n      0x00\n        /* \"#utility.yul\":374:375   */\n      dup1\n        /* \"#utility.yul\":367:379   */\n      revert\n        /* \"#utility.yul\":329:381   */\n    tag_362:\n        /* \"#utility.yul\":400:429   */\n      tag_363\n        /* \"#utility.yul\":419:428   */\n      dup5\n        /* \"#utility.yul\":400:429   */\n      tag_355\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":390:429   */\n      swap6\n        /* \"#utility.yul\":476:478   */\n      0x20\n        /* \"#utility.yul\":461:479   */\n      dup6\n      add\n        /* \"#utility.yul\":448:480   */\n      calldataload\n      swap6\n      pop\n        /* \"#utility.yul\":527:529   */\n      0x40\n        /* \"#utility.yul\":512:530   */\n      swap1\n      swap5\n      add\n        /* \"#utility.yul\":499:531   */\n      calldataload\n      swap4\n        /* \"#utility.yul\":215:537   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1370:1556   */\n    tag_49:\n        /* \"#utility.yul\":1429:1435   */\n      0x00\n        /* \"#utility.yul\":1482:1484   */\n      0x20\n        /* \"#utility.yul\":1470:1479   */\n      dup3\n        /* \"#utility.yul\":1461:1468   */\n      dup5\n        /* \"#utility.yul\":1457:1480   */\n      sub\n        /* \"#utility.yul\":1453:1485   */\n      slt\n        /* \"#utility.yul\":1450:1502   */\n      iszero\n      tag_366\n      jumpi\n        /* \"#utility.yul\":1498:1499   */\n      0x00\n        /* \"#utility.yul\":1495:1496   */\n      dup1\n        /* \"#utility.yul\":1488:1500   */\n      revert\n        /* \"#utility.yul\":1450:1502   */\n    tag_366:\n        /* \"#utility.yul\":1521:1550   */\n      tag_326\n        /* \"#utility.yul\":1540:1549   */\n      dup3\n        /* \"#utility.yul\":1521:1550   */\n      tag_355\n      jump\t// in\n        /* \"#utility.yul\":2208:2388   */\n    tag_73:\n        /* \"#utility.yul\":2267:2273   */\n      0x00\n        /* \"#utility.yul\":2320:2322   */\n      0x20\n        /* \"#utility.yul\":2308:2317   */\n      dup3\n        /* \"#utility.yul\":2299:2306   */\n      dup5\n        /* \"#utility.yul\":2295:2318   */\n      sub\n        /* \"#utility.yul\":2291:2323   */\n      slt\n        /* \"#utility.yul\":2288:2340   */\n      iszero\n      tag_372\n      jumpi\n        /* \"#utility.yul\":2336:2337   */\n      0x00\n        /* \"#utility.yul\":2333:2334   */\n      dup1\n        /* \"#utility.yul\":2326:2338   */\n      revert\n        /* \"#utility.yul\":2288:2340   */\n    tag_372:\n      pop\n        /* \"#utility.yul\":2359:2382   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2208:2388   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2984:3168   */\n    tag_356:\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":3033:3034   */\n      0x00\n        /* \"#utility.yul\":3026:3114   */\n      mstore\n        /* \"#utility.yul\":3133:3137   */\n      0x11\n        /* \"#utility.yul\":3130:3131   */\n      0x04\n        /* \"#utility.yul\":3123:3138   */\n      mstore\n        /* \"#utility.yul\":3157:3161   */\n      0x24\n        /* \"#utility.yul\":3154:3155   */\n      0x00\n        /* \"#utility.yul\":3147:3162   */\n      revert\n        /* \"#utility.yul\":3173:3298   */\n    tag_128:\n        /* \"#utility.yul\":3213:3217   */\n      0x00\n        /* \"#utility.yul\":3241:3242   */\n      dup3\n        /* \"#utility.yul\":3238:3239   */\n      dup3\n        /* \"#utility.yul\":3235:3243   */\n      lt\n        /* \"#utility.yul\":3232:3266   */\n      iszero\n      tag_378\n      jumpi\n        /* \"#utility.yul\":3246:3264   */\n      tag_378\n      tag_356\n      jump\t// in\n    tag_378:\n      pop\n        /* \"#utility.yul\":3283:3292   */\n      sub\n      swap1\n        /* \"#utility.yul\":3173:3298   */\n      jump\t// out\n        /* \"#utility.yul\":3664:3792   */\n    tag_144:\n        /* \"#utility.yul\":3704:3707   */\n      0x00\n        /* \"#utility.yul\":3735:3736   */\n      dup3\n        /* \"#utility.yul\":3731:3737   */\n      not\n        /* \"#utility.yul\":3728:3729   */\n      dup3\n        /* \"#utility.yul\":3725:3738   */\n      gt\n        /* \"#utility.yul\":3722:3761   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":3741:3759   */\n      tag_382\n      tag_356\n      jump\t// in\n    tag_382:\n      pop\n        /* \"#utility.yul\":3777:3786   */\n      add\n      swap1\n        /* \"#utility.yul\":3664:3792   */\n      jump\t// out\n        /* \"#utility.yul\":4121:4289   */\n    tag_159:\n        /* \"#utility.yul\":4161:4168   */\n      0x00\n        /* \"#utility.yul\":4227:4228   */\n      dup2\n        /* \"#utility.yul\":4223:4224   */\n      0x00\n        /* \"#utility.yul\":4219:4225   */\n      not\n        /* \"#utility.yul\":4215:4229   */\n      div\n        /* \"#utility.yul\":4212:4213   */\n      dup4\n        /* \"#utility.yul\":4209:4230   */\n      gt\n        /* \"#utility.yul\":4204:4205   */\n      dup3\n        /* \"#utility.yul\":4197:4206   */\n      iszero\n        /* \"#utility.yul\":4190:4207   */\n      iszero\n        /* \"#utility.yul\":4186:4231   */\n      and\n        /* \"#utility.yul\":4183:4254   */\n      iszero\n      tag_386\n      jumpi\n        /* \"#utility.yul\":4234:4252   */\n      tag_386\n      tag_356\n      jump\t// in\n    tag_386:\n      pop\n        /* \"#utility.yul\":4274:4283   */\n      mul\n      swap1\n        /* \"#utility.yul\":4121:4289   */\n      jump\t// out\n        /* \"#utility.yul\":4294:4568   */\n    tag_161:\n        /* \"#utility.yul\":4334:4335   */\n      0x00\n        /* \"#utility.yul\":4360:4361   */\n      dup3\n        /* \"#utility.yul\":4350:4539   */\n      tag_388\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":4392:4393   */\n      0x00\n        /* \"#utility.yul\":4385:4473   */\n      mstore\n        /* \"#utility.yul\":4496:4500   */\n      0x12\n        /* \"#utility.yul\":4493:4494   */\n      0x04\n        /* \"#utility.yul\":4486:4501   */\n      mstore\n        /* \"#utility.yul\":4524:4528   */\n      0x24\n        /* \"#utility.yul\":4521:4522   */\n      0x00\n        /* \"#utility.yul\":4514:4529   */\n      revert\n        /* \"#utility.yul\":4350:4539   */\n    tag_388:\n      pop\n        /* \"#utility.yul\":4553:4562   */\n      div\n      swap1\n        /* \"#utility.yul\":4294:4568   */\n      jump\t// out\n        /* \"#utility.yul\":5685:5962   */\n    tag_318:\n        /* \"#utility.yul\":5752:5758   */\n      0x00\n        /* \"#utility.yul\":5805:5807   */\n      0x20\n        /* \"#utility.yul\":5793:5802   */\n      dup3\n        /* \"#utility.yul\":5784:5791   */\n      dup5\n        /* \"#utility.yul\":5780:5803   */\n      sub\n        /* \"#utility.yul\":5776:5808   */\n      slt\n        /* \"#utility.yul\":5773:5825   */\n      iszero\n      tag_393\n      jumpi\n        /* \"#utility.yul\":5821:5822   */\n      0x00\n        /* \"#utility.yul\":5818:5819   */\n      dup1\n        /* \"#utility.yul\":5811:5823   */\n      revert\n        /* \"#utility.yul\":5773:5825   */\n    tag_393:\n        /* \"#utility.yul\":5853:5862   */\n      dup2\n        /* \"#utility.yul\":5847:5863   */\n      mload\n        /* \"#utility.yul\":5906:5911   */\n      dup1\n        /* \"#utility.yul\":5899:5912   */\n      iszero\n        /* \"#utility.yul\":5892:5913   */\n      iszero\n        /* \"#utility.yul\":5885:5890   */\n      dup2\n        /* \"#utility.yul\":5882:5914   */\n      eq\n        /* \"#utility.yul\":5872:5932   */\n      tag_326\n      jumpi\n        /* \"#utility.yul\":5928:5929   */\n      0x00\n        /* \"#utility.yul\":5925:5926   */\n      dup1\n        /* \"#utility.yul\":5918:5930   */\n      revert\n        /* \"#utility.yul\":7143:7401   */\n    tag_357:\n        /* \"#utility.yul\":7215:7216   */\n      0x00\n        /* \"#utility.yul\":7225:7338   */\n    tag_399:\n        /* \"#utility.yul\":7239:7245   */\n      dup4\n        /* \"#utility.yul\":7236:7237   */\n      dup2\n        /* \"#utility.yul\":7233:7246   */\n      lt\n        /* \"#utility.yul\":7225:7338   */\n      iszero\n      tag_401\n      jumpi\n        /* \"#utility.yul\":7315:7326   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":7309:7327   */\n      mload\n        /* \"#utility.yul\":7296:7307   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":7289:7328   */\n      mstore\n        /* \"#utility.yul\":7261:7263   */\n      0x20\n        /* \"#utility.yul\":7254:7264   */\n      add\n        /* \"#utility.yul\":7225:7338   */\n      jump(tag_399)\n    tag_401:\n        /* \"#utility.yul\":7356:7362   */\n      dup4\n        /* \"#utility.yul\":7353:7354   */\n      dup2\n        /* \"#utility.yul\":7350:7363   */\n      gt\n        /* \"#utility.yul\":7347:7395   */\n      iszero\n      tag_285\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":7391:7392   */\n      0x00\n        /* \"#utility.yul\":7373:7389   */\n      swap2\n      add\n        /* \"#utility.yul\":7366:7393   */\n      mstore\n        /* \"#utility.yul\":7143:7401   */\n      jump\t// out\n        /* \"#utility.yul\":7406:7680   */\n    tag_339:\n        /* \"#utility.yul\":7535:7538   */\n      0x00\n        /* \"#utility.yul\":7573:7579   */\n      dup3\n        /* \"#utility.yul\":7567:7580   */\n      mload\n        /* \"#utility.yul\":7589:7642   */\n      tag_404\n        /* \"#utility.yul\":7635:7641   */\n      dup2\n        /* \"#utility.yul\":7630:7633   */\n      dup5\n        /* \"#utility.yul\":7623:7627   */\n      0x20\n        /* \"#utility.yul\":7615:7621   */\n      dup8\n        /* \"#utility.yul\":7611:7628   */\n      add\n        /* \"#utility.yul\":7589:7642   */\n      tag_357\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":7658:7674   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":7406:7680   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7685:8068   */\n    tag_352:\n        /* \"#utility.yul\":7834:7836   */\n      0x20\n        /* \"#utility.yul\":7823:7832   */\n      dup2\n        /* \"#utility.yul\":7816:7837   */\n      mstore\n        /* \"#utility.yul\":7797:7801   */\n      0x00\n        /* \"#utility.yul\":7866:7872   */\n      dup3\n        /* \"#utility.yul\":7860:7873   */\n      mload\n        /* \"#utility.yul\":7909:7915   */\n      dup1\n        /* \"#utility.yul\":7904:7906   */\n      0x20\n        /* \"#utility.yul\":7893:7902   */\n      dup5\n        /* \"#utility.yul\":7889:7907   */\n      add\n        /* \"#utility.yul\":7882:7916   */\n      mstore\n        /* \"#utility.yul\":7925:7991   */\n      tag_406\n        /* \"#utility.yul\":7984:7990   */\n      dup2\n        /* \"#utility.yul\":7979:7981   */\n      0x40\n        /* \"#utility.yul\":7968:7977   */\n      dup6\n        /* \"#utility.yul\":7964:7982   */\n      add\n        /* \"#utility.yul\":7959:7961   */\n      0x20\n        /* \"#utility.yul\":7951:7957   */\n      dup8\n        /* \"#utility.yul\":7947:7962   */\n      add\n        /* \"#utility.yul\":7925:7991   */\n      tag_357\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":8052:8054   */\n      0x1f\n        /* \"#utility.yul\":8031:8046   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":8027:8056   */\n      and\n        /* \"#utility.yul\":8012:8057   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":8059:8061   */\n      0x40\n        /* \"#utility.yul\":8008:8062   */\n      add\n      swap3\n        /* \"#utility.yul\":7685:8068   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d3df6db783213df4aa51349dfa32bb0a14dc433964ab7bbd0dfa84d5a9dd8d3264736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_874": {
									"entryPoint": null,
									"id": 874,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 231,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 313,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:7"
															},
															"nodeType": "YulIf",
															"src": "105:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:7"
															},
															"nodeType": "YulIf",
															"src": "204:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:7",
														"type": ""
													}
												],
												"src": "14:290:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405162001b6d38038062001b6d83398101604081905261003191610139565b600160005561003f336100e7565b600f6003556050600455600b80546001600160a01b0319166001600160a01b0392909216919091179055600260205260067fa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c5560077f089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832556301e1338060005260087fdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b55610169565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561014b57600080fd5b81516001600160a01b038116811461016257600080fd5b9392505050565b6119f480620001796000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80638c8e8fee116100ee578063bed9d86111610097578063d2a569c311610071578063d2a569c3146103ca578063d5dbdf1b146103d2578063f2fde38b146103e5578063fab2f86b146103f857600080fd5b8063bed9d861146103b3578063c63aa3e7146103bb578063cb79c2e1146103c157600080fd5b8063a3ec138d116100c8578063a3ec138d14610374578063b5d9df8314610397578063b87da76d146103aa57600080fd5b80638c8e8fee146103185780638da5cb5b14610343578063a143a5f21461035457600080fd5b8063632a9a5211610150578063715018a61161012a578063715018a6146102f45780638891cf0d146102fc5780638c63f97f1461030557600080fd5b8063632a9a52146102c157806365f8c6c5146102c9578063671d2b75146102dc57600080fd5b80631ec6b60a116101815780631ec6b60a146102455780632d15cc041461024d5780635f5300ff146102aa57600080fd5b8063070c8b74146101a85780630c51b88f146101b257806310486b6a146101c5575b600080fd5b6101b0610400565b005b6101b06101c0366004611834565b6104f4565b6101cd6107c4565b60405161023c919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b6101b0610933565b61029361025b366004611867565b6001600160a01b031660009081526009602090815260408083208054600754855260019091019092529091205460ff91821692911690565b60408051921515835290151560208301520161023c565b6102b360085481565b60405190815260200161023c565b6101b0610a49565b6101b06102d7366004611867565b610b58565b6102e4610bee565b604051901515815260200161023c565b6101b0610cd8565b6102b360045481565b6101b0610313366004611882565b610d3e565b600b5461032b906001600160a01b031681565b6040516001600160a01b03909116815260200161023c565b6001546001600160a01b031661032b565b6102b3610362366004611882565b600a6020526000908152604090205481565b6102e4610382366004611867565b60096020526000908152604090205460ff1681565b6102b36103a5366004611882565b610e0f565b6102b360055481565b6101b0610e2f565b426102b3565b6102b360035481565b6101b0610fd8565b6101b06103e0366004611882565b611038565b6101b06103f3366004611867565b611102565b6101b06111e4565b600260005414156104585760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055610465611252565b61046d61128e565b336000908152600960209081526040808320600754845260010190915290205460ff166104c6576040517f8b74220000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6007546000908152600a602052604081208054600192906104e89084906118b1565b90915550506001600055565b600260005414156105475760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000556001546001600160a01b031633146105a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b600082116105e0576040517f88b440d600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0383166000908152600c602052604090205415610630576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081815260026020526040902054610675576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016008600082825461068891906118c8565b90915550506001600160a01b0383166000908152600960209081526040808320805460ff19166001179055805160e08101825285815242818401819052858552600290935292819020549083015290606081016106e583856118c8565b815260006020808301829052604080840183905260609384018390526001600160a01b03808a168452600c8352928190208551815591850151600183015584015160028201559183015160038301556080830151600483015560a0830151600583015560c090920151600690910155600b5461076491163330866112d7565b6001600160a01b0384167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848361079b81876118c8565b6040805193845260208401929092529082015260600160405180910390a2505060016000555050565b6107cc6117ba565b336000908152600c6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c0830152610861576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252600080825260208201819052918101839052906108878361138e565b90504282604001516060015111156108e0576103e8600354826108aa91906118e0565b6108b491906118ff565b60035484516103e8916108c6916118e0565b6108d091906118ff565b6108da91906118c8565b60208301525b60006108ef8460c00151610e0f565b111561091357600061090484600001516113d3565b604084015160a0015250610921565b6040820151600060a0909101525b60408201516080015290518152919050565b600260005414156109865760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000556001546001600160a01b031633146109e55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b60065460ff16151560011415610a27576040517f6da4cd2e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006805460ff19166001908117909155600780546000906104e89084906118c8565b60026000541415610a9c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b6002600055610aa9611252565b610ab161128e565b336000908152600960209081526040808320600754845260019081019092529091205460ff1615151415610b11576040517f740e33b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260096020908152604080832060078054855260019182018452828520805460ff191683179055548452600a90925282208054919290916104e89084906118c8565b6001600160a01b0381166000908152600c60205260409020805415610bea57610b848160060154610e0f565b610bba576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006005820155426006820155600b548154610bea916001600160a01b0316903390610be5906113d3565b6113f5565b5050565b6001546000906001600160a01b03163314610c4b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b610c53611252565b600160085411610c8f576040517f2f9686de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600a6008546005610ca291906118e0565b610cac91906118ff565b6007546000908152600a6020526040902054909150811015610cd057600191505090565b600091505090565b6001546001600160a01b03163314610d325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b610d3c6000611443565b565b6001546001600160a01b03163314610d985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b601e811115610dd3576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a80610e1f83426118b1565b610e2991906118ff565b92915050565b60026000541415610e825760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161044f565b60026000818155338152600c60209081526040808320815160e0810183528154815260018201549381019390935293840154908201526003830154606082015260048301546080820152600583015460a082015260069092015460c0830152610eea8261138e565b336000908152600c602052604081208181556001808201839055600282018390556003820183905560048201839055600582018390556006909101829055600880549394509092909190610f3f9084906118b1565b909155505033600090815260096020908152604080832060075484526001019091529020805460ff191690556060820151421015610faf57600080610f888460000151846114ad565b600b549193509150610fa8906001600160a01b031633610be584866118c8565b5050610fcf565b600b548251610fcf916001600160a01b0316903390610be59085906118c8565b50506001600055565b6001546001600160a01b031633146110325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b42600555565b6001546001600160a01b031633146110925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b60c88111156110cd576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e90602001610e04565b6001546001600160a01b0316331461115c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b6001600160a01b0381166111d85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161044f565b6111e181611443565b50565b6001546001600160a01b0316331461123e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161044f565b611246611252565b6006805460ff19169055565b60065460ff16610d3c576040517fa1d1891400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526009602052604090205460ff16610d3c576040517f1e567dd400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b03808516602483015283166044820152606481018290526113889085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611516565b50505050565b805160009061139f57506000919050565b6a52b7d2dcc80cd2e40000006113b883602001516115fb565b604084015184516113c991906118e0565b610e1f91906118e0565b60006301dfe2006103e8600454846113eb91906118e0565b610e1f91906118ff565b6040516001600160a01b03831660248201526044810182905261143e9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611324565b505050565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080836114c05750600090508061150f565b6103e8600354856114d191906118e0565b6114db91906118ff565b6114e590856118b1565b6103e8600354856114f691906118e0565b61150091906118ff565b61150a90856118b1565b915091505b9250929050565b600061156b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116209092919063ffffffff16565b80519091501561143e57808060200190518101906115899190611921565b61143e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161044f565b60006301e1338061160c83426118b1565b610e1f9069d3c21bcecceda10000006118e0565b606061162f8484600085611639565b90505b9392505050565b6060824710156116b15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161044f565b6001600160a01b0385163b6117085760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161044f565b600080866001600160a01b03168587604051611724919061196f565b60006040518083038185875af1925050503d8060008114611761576040519150601f19603f3d011682016040523d82523d6000602084013e611766565b606091505b5091509150611776828286611781565b979650505050505050565b60608315611790575081611632565b8251156117a05782518084602001fd5b8160405162461bcd60e51b815260040161044f919061198b565b604051806060016040528060008152602001600081526020016118136040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b80356001600160a01b038116811461182f57600080fd5b919050565b60008060006060848603121561184957600080fd5b61185284611818565b95602085013595506040909401359392505050565b60006020828403121561187957600080fd5b61163282611818565b60006020828403121561189457600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118c3576118c361189b565b500390565b600082198211156118db576118db61189b565b500190565b60008160001904831182151516156118fa576118fa61189b565b500290565b60008261191c57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561193357600080fd5b8151801515811461163257600080fd5b60005b8381101561195e578181015183820152602001611946565b838111156113885750506000910152565b60008251611981818460208701611943565b9190910192915050565b60208152600082518060208401526119aa816040850160208701611943565b601f01601f1916919091016040019291505056fea2646970667358221220d3df6db783213df4aa51349dfa32bb0a14dc433964ab7bbd0dfa84d5a9dd8d3264736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B6D CODESIZE SUB DUP1 PUSH3 0x1B6D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x31 SWAP2 PUSH2 0x139 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3F CALLER PUSH2 0xE7 JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 SSTORE PUSH1 0x50 PUSH1 0x4 SSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x6 PUSH32 0xA1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C SSTORE PUSH1 0x7 PUSH32 0x89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832 SSTORE PUSH4 0x1E13380 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH32 0xDC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B SSTORE PUSH2 0x169 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x162 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19F4 DUP1 PUSH3 0x179 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C8E8FEE GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD2A569C3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x632A9A52 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1EC6B60A GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC51B88F EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1C5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B0 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23C SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x293 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x7 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xA49 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0xD3E JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x3A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xE2F JUMP JUMPDEST TIMESTAMP PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x1102 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x465 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x46D PUSH2 0x128E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x5E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x675 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x688 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x6E5 DUP4 DUP6 PUSH2 0x18C8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x764 SWAP2 AND CALLER ADDRESS DUP7 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x79B DUP2 DUP8 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x17BA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x887 DUP4 PUSH2 0x138E JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x8E0 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x8AA SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x8B4 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x8C6 SWAP2 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x8D0 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x8DA SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x8EF DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xE0F JUMP JUMPDEST GT ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 PUSH2 0x904 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xAA9 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0xAB1 PUSH2 0x128E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xBEA JUMPI PUSH2 0xB84 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xE0F JUMP JUMPDEST PUSH2 0xBBA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH2 0xBEA SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0xBE5 SWAP1 PUSH2 0x13D3 JUMP JUMPDEST PUSH2 0x13F5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xC53 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x8 SLOAD PUSH1 0x5 PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xCAC SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xD3C PUSH1 0x0 PUSH2 0x1443 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0xE1F DUP4 TIMESTAMP PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0xE29 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xE82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xEEA DUP3 PUSH2 0x138E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xF3F SWAP1 DUP5 SWAP1 PUSH2 0x18B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 PUSH2 0xF88 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0xFA8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0xBE5 DUP5 DUP7 PUSH2 0x18C8 JUMP JUMPDEST POP POP PUSH2 0xFCF JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH2 0xFCF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0xBE5 SWAP1 DUP6 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1032 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1092 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xE04 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x115C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x11D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x11E1 DUP2 PUSH2 0x1443 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x123E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x1246 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1388 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1516 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x139F JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x13B8 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x15FB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x13C9 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x13EB SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x143E SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x1324 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x14C0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x14DB SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x14E5 SWAP1 DUP6 PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14F6 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x1500 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x150A SWAP1 DUP6 PUSH2 0x18B1 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x156B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1620 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x143E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1589 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH2 0x143E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0x160C DUP4 TIMESTAMP PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0xE1F SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x18E0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x162F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1639 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x16B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1761 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1766 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1776 DUP3 DUP3 DUP7 PUSH2 0x1781 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1790 JUMPI POP DUP2 PUSH2 0x1632 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x17A0 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x198B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1813 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1852 DUP5 PUSH2 0x1818 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1632 DUP3 PUSH2 0x1818 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1894 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x18C3 JUMPI PUSH2 0x18C3 PUSH2 0x189B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x18DB JUMPI PUSH2 0x18DB PUSH2 0x189B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x189B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x191C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x195E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1946 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1388 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1981 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1943 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19AA DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xDF PUSH14 0xB783213DF4AA51349DFA32BB0A14 0xDC NUMBER CODECOPY PUSH5 0xAB7BBD0DFA DUP5 0xD5 0xA9 0xDD DUP14 ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "980:11703:6:-:0;;;1680:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;921:32:0;719:10:5;921:18:0;:32::i;:::-;1800:2:6;1779:18;:23;1826:2;1812:11;:16;1839:13;:21;;-1:-1:-1;;;;;;1839:21:6;-1:-1:-1;;;;;1839:21:6;;;;;;;;;;1871:14;:23;;1897:1;1871:23;:27;1935:1;1908:24;:28;1961:8;-1:-1:-1;1946:24:6;1973:1;1946:24;:28;980:11703;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;14:290:7:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:7;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:7:o;:::-;980:11703:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_blockTimestamp_1430": {
									"entryPoint": null,
									"id": 1430,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_calculateAirdrop_1464": {
									"entryPoint": 5075,
									"id": 1464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1141": {
									"entryPoint": 5006,
									"id": 1141,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1110": {
									"entryPoint": 5627,
									"id": 1110,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1182": {
									"entryPoint": 5293,
									"id": 1182,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 5398,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkVotingStatus_956": {
									"entryPoint": 4690,
									"id": 956,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_isVoter_938": {
									"entryPoint": 4750,
									"id": 938,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 5187,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_819": {
									"entryPoint": null,
									"id": 819,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_821": {
									"entryPoint": null,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateWeek_1446": {
									"entryPoint": 3599,
									"id": 1446,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1421": {
									"entryPoint": 4152,
									"id": 1421,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1091": {
									"entryPoint": 3390,
									"id": 1091,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1521": {
									"entryPoint": 2904,
									"id": 1521,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_605": {
									"entryPoint": 5689,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 5664,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getVoters_1543": {
									"entryPoint": null,
									"id": 1543,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@getVotingResult_1686": {
									"entryPoint": 3054,
									"id": 1686,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@hasStake_1386": {
									"entryPoint": 1988,
									"id": 1386,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_464": {
									"entryPoint": null,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 3288,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@retractVote_1647": {
									"entryPoint": 1024,
									"id": 1647,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_279": {
									"entryPoint": 4823,
									"id": 279,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 5109,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1067": {
									"entryPoint": 1268,
									"id": 1067,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_817": {
									"entryPoint": null,
									"id": 817,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1397": {
									"entryPoint": 4056,
									"id": 1397,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startVoting_1567": {
									"entryPoint": 2355,
									"id": 1567,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stopVoting_1698": {
									"entryPoint": 4580,
									"id": 1698,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_838": {
									"entryPoint": null,
									"id": 838,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_827": {
									"entryPoint": null,
									"id": 827,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 4354,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 6017,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@vote_1607": {
									"entryPoint": 2633,
									"id": 1607,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@votedUsers_836": {
									"entryPoint": null,
									"id": 836,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_832": {
									"entryPoint": null,
									"id": 832,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_1269": {
									"entryPoint": 3631,
									"id": 1269,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 6168,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256t_uint256": {
									"entryPoint": 6196,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 6433,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6274,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 6511,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6344,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 6399,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6368,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6321,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 6467,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 6299,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:8070:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:147:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "188:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "197:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "200:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "190:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "190:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "190:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "142:42:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:54:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:65:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:73:7"
															},
															"nodeType": "YulIf",
															"src": "111:93:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:7",
														"type": ""
													}
												],
												"src": "14:196:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "319:218:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "365:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "374:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "377:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "367:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "367:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "367:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "340:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "349:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "336:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "336:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "361:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "332:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "332:32:7"
															},
															"nodeType": "YulIf",
															"src": "329:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "390:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "419:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "400:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "390:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "438:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "465:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "476:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "461:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "461:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "448:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "448:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "489:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "516:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "527:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "512:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "512:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "499:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "499:32:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "489:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "269:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "280:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "292:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "300:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "308:6:7",
														"type": ""
													}
												],
												"src": "215:322:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "705:660:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "715:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "727:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "738:3:7",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "723:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "723:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "715:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "758:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "775:6:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "769:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "769:13:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "751:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "751:32:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "751:32:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "803:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "814:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "799:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "799:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "831:6:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "839:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "827:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "827:17:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "821:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "821:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "792:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "792:54:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "792:54:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "855:44:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "885:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "893:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "881:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "881:17:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "875:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "875:24:7"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "859:12:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "919:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "930:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "915:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "915:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "943:12:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "937:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "937:19:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "908:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "908:49:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "908:49:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "977:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "988:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "973:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "973:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1003:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1017:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "999:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "999:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "993:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "993:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "966:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "966:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "966:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1044:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1055:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1040:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1040:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1071:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1085:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1067:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1067:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1061:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1061:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1033:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1033:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1033:59:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1112:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1123:3:7",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1108:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1108:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1139:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1153:2:7",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1135:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1135:21:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1129:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1129:28:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1101:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1101:57:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1101:57:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1178:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1189:3:7",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1174:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1174:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1205:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1219:3:7",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1201:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1201:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1195:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1195:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1167:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1167:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1245:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1256:3:7",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1241:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1241:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1272:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1286:3:7",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1268:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1268:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1262:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1262:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1234:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1234:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1234:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1312:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1323:3:7",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1308:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1308:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "1339:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1353:3:7",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1335:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1335:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1329:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1329:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1301:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1301:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1301:58:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "674:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "685:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "696:4:7",
														"type": ""
													}
												],
												"src": "542:823:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1440:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1486:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1495:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1498:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1488:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1488:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1488:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1461:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1470:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1457:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1457:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1482:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1453:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1453:32:7"
															},
															"nodeType": "YulIf",
															"src": "1450:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1511:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1540:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1521:18:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1521:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1511:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1406:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1417:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1429:6:7",
														"type": ""
													}
												],
												"src": "1370:186:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1678:151:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1688:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1700:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1711:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1696:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1696:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1688:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1730:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1755:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1748:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1748:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1741:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1741:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1723:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1723:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1723:41:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1784:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1795:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1780:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "1814:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1807:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1807:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1800:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1800:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1773:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1773:50:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1773:50:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1639:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1650:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1658:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1669:4:7",
														"type": ""
													}
												],
												"src": "1561:268:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1935:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1945:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1957:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1968:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1953:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1953:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1945:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1987:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1998:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1980:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1980:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1980:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1904:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1915:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1926:4:7",
														"type": ""
													}
												],
												"src": "1834:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2111:92:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2121:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2133:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2144:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2129:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2129:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2121:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2163:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2188:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2181:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2181:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2174:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2174:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2156:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2156:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2156:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2080:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2091:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2102:4:7",
														"type": ""
													}
												],
												"src": "2016:187:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2278:110:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2324:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2333:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2336:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2326:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2326:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2326:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2299:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2308:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2295:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2295:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2320:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2291:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2291:32:7"
															},
															"nodeType": "YulIf",
															"src": "2288:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2349:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2372:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2359:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2359:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2349:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2244:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2255:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2267:6:7",
														"type": ""
													}
												],
												"src": "2208:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2494:125:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2504:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2516:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2527:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2512:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2512:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2504:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2546:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2561:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2569:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2557:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2557:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2539:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2539:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2539:74:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2463:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2474:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2485:4:7",
														"type": ""
													}
												],
												"src": "2393:226:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2798:181:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2815:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2826:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2849:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2860:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2845:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2845:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2865:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2838:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2838:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2838:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2888:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2899:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2884:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2884:18:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2904:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2877:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2877:61:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2877:61:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2947:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2959:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2970:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2955:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2955:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2947:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2775:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2789:4:7",
														"type": ""
													}
												],
												"src": "2624:355:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3016:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3033:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3036:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3026:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3026:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3130:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3133:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3123:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3123:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3123:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3154:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3157:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3147:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3147:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3147:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2984:184:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3222:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3244:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3246:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3246:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3246:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3238:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3241:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3235:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3235:8:7"
															},
															"nodeType": "YulIf",
															"src": "3232:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3275:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3287:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3290:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3283:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3275:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3204:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3207:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3213:4:7",
														"type": ""
													}
												],
												"src": "3173:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3477:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3494:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3505:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3487:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3487:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3487:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3528:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3539:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3524:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3524:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3544:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3517:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3517:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3517:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3567:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3578:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3563:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3563:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3583:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3556:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3556:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3556:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3627:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3639:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3650:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3635:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3635:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3627:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3454:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3468:4:7",
														"type": ""
													}
												],
												"src": "3303:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3712:80:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3739:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3741:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3741:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3741:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3728:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "3735:1:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "3731:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3731:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3725:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3725:13:7"
															},
															"nodeType": "YulIf",
															"src": "3722:39:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3770:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3781:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3784:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3777:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3777:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3770:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3695:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3698:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "3704:3:7",
														"type": ""
													}
												],
												"src": "3664:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3954:162:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3964:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3976:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3987:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3972:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3972:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3964:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4006:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4017:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3999:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3999:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3999:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4044:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4055:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4040:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4040:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4060:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4033:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4033:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4033:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4087:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4098:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4083:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4083:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4103:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4076:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4076:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4076:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3907:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3918:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3926:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3934:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3945:4:7",
														"type": ""
													}
												],
												"src": "3797:319:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4173:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4232:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4234:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4234:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4234:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4204:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4197:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4197:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4190:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4190:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4212:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4223:1:7",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4219:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4219:6:7"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4227:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4215:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4215:14:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4209:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4209:21:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4186:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4186:45:7"
															},
															"nodeType": "YulIf",
															"src": "4183:71:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4263:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4278:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4281:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4274:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4274:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4263:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4152:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4155:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4161:7:7",
														"type": ""
													}
												],
												"src": "4121:168:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4340:228:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4371:168:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4392:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4395:77:7",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4385:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4385:88:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4385:88:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4493:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4496:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4486:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4486:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4486:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4521:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4524:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4514:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4514:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4514:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4360:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4353:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4353:9:7"
															},
															"nodeType": "YulIf",
															"src": "4350:189:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4548:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4557:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4560:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4553:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4553:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4548:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4325:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4328:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "4334:1:7",
														"type": ""
													}
												],
												"src": "4294:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4747:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4764:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4775:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4757:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4757:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4757:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4814:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4837:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4848:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4833:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4833:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4853:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4826:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4826:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4826:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4908:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4919:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4904:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4904:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4924:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4897:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4897:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4897:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4942:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4954:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4965:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4950:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4950:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4724:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4738:4:7",
														"type": ""
													}
												],
												"src": "4573:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5137:241:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5147:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5159:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5170:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5155:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5155:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5147:4:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5182:52:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5192:42:7",
																"type": "",
																"value": "0xffffffffffffffffffffffffffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5186:2:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5250:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5265:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5273:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5261:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5261:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5243:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5243:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5243:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5297:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5308:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5293:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5293:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5317:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5325:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5313:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5313:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5286:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5286:43:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5286:43:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5349:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5360:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5345:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5345:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5365:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5338:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5338:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5338:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5090:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5101:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5109:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5117:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5128:4:7",
														"type": ""
													}
												],
												"src": "4980:398:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5512:168:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5522:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5534:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5545:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5530:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5530:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5522:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5564:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5579:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5587:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5575:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5575:55:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5557:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5557:74:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5557:74:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5651:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5662:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5647:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5647:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5667:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5640:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5640:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5640:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5473:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5484:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5492:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5503:4:7",
														"type": ""
													}
												],
												"src": "5383:297:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5763:199:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5809:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5818:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5821:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5811:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5811:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5811:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5784:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5793:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5780:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5805:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5776:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5776:32:7"
															},
															"nodeType": "YulIf",
															"src": "5773:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5834:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5853:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5847:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5847:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5838:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5916:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5925:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5928:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5918:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5918:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5918:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5885:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "5906:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "5899:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5899:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5892:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5892:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5882:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5882:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5875:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5875:40:7"
															},
															"nodeType": "YulIf",
															"src": "5872:60:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5941:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5951:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5941:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5729:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5740:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5752:6:7",
														"type": ""
													}
												],
												"src": "5685:277:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6141:232:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6158:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6169:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6151:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6151:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6151:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6192:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6203:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6188:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6188:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6208:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6181:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6181:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6181:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6231:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6242:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6227:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6227:18:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6247:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6220:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6220:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6220:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6302:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6313:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6298:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6298:18:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6318:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6291:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6291:40:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6291:40:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6340:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6352:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6363:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6348:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6348:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6340:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6118:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6132:4:7",
														"type": ""
													}
												],
												"src": "5967:406:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6552:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6569:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6580:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6562:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6562:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6562:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6603:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6614:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6599:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6599:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6619:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6592:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6592:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6592:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6642:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6653:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6638:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6638:18:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6658:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6631:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6631:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6631:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6713:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6724:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6709:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6709:18:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6729:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6702:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6702:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6702:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6747:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6759:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6770:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6755:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6755:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6747:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6529:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6543:4:7",
														"type": ""
													}
												],
												"src": "6378:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6959:179:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6976:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6987:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6969:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6969:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6969:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7010:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7021:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7006:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7006:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7026:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6999:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6999:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6999:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7049:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7060:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7045:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7045:18:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7065:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7038:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7038:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7038:59:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7106:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7118:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7129:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7114:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7114:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7106:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6936:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6950:4:7",
														"type": ""
													}
												],
												"src": "6785:353:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7196:205:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7206:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "7215:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "7210:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7275:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7300:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "7305:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7296:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7296:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "7319:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "7324:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "7315:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "7315:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "7309:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7309:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7289:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7289:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7289:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7236:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7239:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7233:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7233:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7247:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7249:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7258:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7261:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7254:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7254:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7249:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7229:3:7",
																"statements": []
															},
															"src": "7225:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7364:31:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "7377:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "7382:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "7373:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7373:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7391:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7366:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7366:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7366:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7353:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7356:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7350:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7350:13:7"
															},
															"nodeType": "YulIf",
															"src": "7347:48:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "7174:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "7179:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7184:6:7",
														"type": ""
													}
												],
												"src": "7143:258:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7543:137:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7553:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7573:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7567:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7567:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7557:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7615:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7623:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7611:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7611:17:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7630:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7635:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7589:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7589:53:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7589:53:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7651:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7662:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7667:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7658:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7658:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7651:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7519:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7524:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7535:3:7",
														"type": ""
													}
												],
												"src": "7406:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7806:262:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7823:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7834:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7816:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7816:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7816:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7846:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7866:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7860:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7860:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7850:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7893:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7904:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7889:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7889:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7909:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7882:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7882:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7882:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7951:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7959:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7947:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7947:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7968:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7979:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7964:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7964:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7984:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7925:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7925:66:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7925:66:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8000:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8016:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "8035:6:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8043:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "8031:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8031:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8052:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "8048:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8048:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "8027:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8027:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8012:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8012:45:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8059:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8008:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8008:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8000:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7775:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7786:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7797:4:7",
														"type": ""
													}
												],
												"src": "7685:383:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bool_t_bool__to_t_bool_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1A3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8C8E8FEE GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xD2A569C3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI DUP1 PUSH4 0xFAB2F86B EQ PUSH2 0x3F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x3BB JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA3EC138D GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x374 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x318 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x354 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x632A9A52 GT PUSH2 0x150 JUMPI DUP1 PUSH4 0x715018A6 GT PUSH2 0x12A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2F4 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x632A9A52 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0x65F8C6C5 EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0x671D2B75 EQ PUSH2 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1EC6B60A GT PUSH2 0x181 JUMPI DUP1 PUSH4 0x1EC6B60A EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x2D15CC04 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x2AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70C8B74 EQ PUSH2 0x1A8 JUMPI DUP1 PUSH4 0xC51B88F EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x10486B6A EQ PUSH2 0x1C5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x400 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B0 PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1834 JUMP JUMPDEST PUSH2 0x4F4 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23C SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B0 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x293 PUSH2 0x25B CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x7 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xA49 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x2D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0xB58 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xCD8 JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x313 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0xD3E JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x32B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23C JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x32B JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0x382 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x2B3 PUSH2 0x3A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xE2F JUMP JUMPDEST TIMESTAMP PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x2B3 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0xFD8 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1882 JUMP JUMPDEST PUSH2 0x1038 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x3F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1867 JUMP JUMPDEST PUSH2 0x1102 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0x465 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0x46D PUSH2 0x128E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8B74220000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x5E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x88B440D600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x630 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x675 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x688 SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x6E5 DUP4 DUP6 PUSH2 0x18C8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x764 SWAP2 AND CALLER ADDRESS DUP7 PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x79B DUP2 DUP8 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x17BA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x861 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x887 DUP4 PUSH2 0x138E JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x8E0 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x8AA SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x8B4 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x8C6 SWAP2 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x8D0 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x8DA SWAP2 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x8EF DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xE0F JUMP JUMPDEST GT ISZERO PUSH2 0x913 JUMPI PUSH1 0x0 PUSH2 0x904 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x13D3 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x921 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x986 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x9E5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xA27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DA4CD2E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xA9C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE PUSH2 0xAA9 PUSH2 0x1252 JUMP JUMPDEST PUSH2 0xAB1 PUSH2 0x128E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP1 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO EQ ISZERO PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH32 0x740E33B000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 ADD DUP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 OR SWAP1 SSTORE SLOAD DUP5 MSTORE PUSH1 0xA SWAP1 SWAP3 MSTORE DUP3 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 0x4E8 SWAP1 DUP5 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xBEA JUMPI PUSH2 0xB84 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0xE0F JUMP JUMPDEST PUSH2 0xBBA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH2 0xBEA SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0xBE5 SWAP1 PUSH2 0x13D3 JUMP JUMPDEST PUSH2 0x13F5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xC4B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xC53 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x8 SLOAD GT PUSH2 0xC8F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2F9686DE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x8 SLOAD PUSH1 0x5 PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xCAC SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 LT ISZERO PUSH2 0xCD0 JUMPI PUSH1 0x1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD32 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0xD3C PUSH1 0x0 PUSH2 0x1443 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xDD3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0xE1F DUP4 TIMESTAMP PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0xE29 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xE82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xEEA DUP3 PUSH2 0x138E JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xF3F SWAP1 DUP5 SWAP1 PUSH2 0x18B1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 PUSH2 0xF88 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0xFA8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0xBE5 DUP5 DUP7 PUSH2 0x18C8 JUMP JUMPDEST POP POP PUSH2 0xFCF JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH2 0xFCF SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALLER SWAP1 PUSH2 0xBE5 SWAP1 DUP6 SWAP1 PUSH2 0x18C8 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1032 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1092 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0x10CD JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0xE04 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x115C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x11D8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x11E1 DUP2 PUSH2 0x1443 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x123E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH2 0x1246 PUSH2 0x1252 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D1891400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xD3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1E567DD400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1388 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1516 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x139F JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x13B8 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x15FB JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0x13C9 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x13EB SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0xE1F SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x143E SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD PUSH2 0x1324 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0x14C0 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x14DB SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x14E5 SWAP1 DUP6 PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x14F6 SWAP2 SWAP1 PUSH2 0x18E0 JUMP JUMPDEST PUSH2 0x1500 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x150A SWAP1 DUP6 PUSH2 0x18B1 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x156B DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1620 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x143E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1589 SWAP2 SWAP1 PUSH2 0x1921 JUMP JUMPDEST PUSH2 0x143E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0x160C DUP4 TIMESTAMP PUSH2 0x18B1 JUMP JUMPDEST PUSH2 0xE1F SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x18E0 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x162F DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1639 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x16B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x1708 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44F JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x196F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1761 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1766 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1776 DUP3 DUP3 DUP7 PUSH2 0x1781 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1790 JUMPI POP DUP2 PUSH2 0x1632 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x17A0 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44F SWAP2 SWAP1 PUSH2 0x198B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1813 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x182F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1852 DUP5 PUSH2 0x1818 JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1879 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1632 DUP3 PUSH2 0x1818 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1894 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x18C3 JUMPI PUSH2 0x18C3 PUSH2 0x189B JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x18DB JUMPI PUSH2 0x18DB PUSH2 0x189B JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x189B JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x191C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x195E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1946 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1388 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1981 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1943 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x19AA DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1943 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xDF PUSH14 0xB783213DF4AA51349DFA32BB0A14 0xDC NUMBER CODECOPY PUSH5 0xAB7BBD0DFA DUP5 0xD5 0xA9 0xDD DUP14 ORIGIN PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "980:11703:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11889:278;;;:::i;:::-;;4306:1427;;;;;;:::i;:::-;;:::i;8536:1024::-;;;:::i;:::-;;;;;;696:4:7;738:3;727:9;723:19;715:27;;775:6;769:13;758:9;751:32;839:4;831:6;827:17;821:24;814:4;803:9;799:20;792:54;893:4;885:6;881:17;875:24;943:12;937:19;930:4;919:9;915:20;908:49;1017:4;1003:12;999:23;993:30;988:2;977:9;973:18;966:58;1085:4;1071:12;1067:23;1061:30;1055:3;1044:9;1040:19;1033:59;1153:2;1139:12;1135:21;1129:28;1123:3;1112:9;1108:19;1101:57;1219:3;1205:12;1201:22;1195:29;1189:3;1178:9;1174:19;1167:58;1286:3;1272:12;1268:22;1262:29;1256:3;1245:9;1241:19;1234:58;1353:3;1339:12;1335:22;1329:29;1323:3;1312:9;1308:19;1301:58;;542:823;;;;;8536:1024:6;;;;;;;;11398:210;;;:::i;11183:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;11269:12:6;11239:4;11269:12;;;:6;:12;;;;;;;;:24;;11314:9;;11295:29;;11269:24;11295:18;;;:29;;;;;;;11269:24;;;;;11295:29;;;11183:149;;;;;1748:14:7;;1741:22;1723:41;;1807:14;;1800:22;1795:2;1780:18;;1773:50;1696:18;11183:149:6;1561:268:7;1516:26:6;;;;;;;;;1980:25:7;;;1968:2;1953:18;1516:26:6;1834:177:7;11614:269:6;;;:::i;10435:593::-;;;;;;:::i;:::-;;:::i;12173:406::-;;;:::i;:::-;;;2181:14:7;;2174:22;2156:41;;2144:2;2129:18;12173:406:6;2016:187:7;1668:101:0;;;:::i;1385:26:6:-;;;;;;5739:306;;;;;;:::i;:::-;;:::i;1645:28::-;;;;;-1:-1:-1;;;;;1645:28:6;;;;;;-1:-1:-1;;;;;2557:55:7;;;2539:74;;2527:2;2512:18;1645:28:6;2393:226:7;1036:85:0;1108:6;;-1:-1:-1;;;;;1108:6:0;1036:85;;1593:45:6;;;;;;:::i;:::-;;;;;;;;;;;;;;1548:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;10110:134;;;;;;:::i;:::-;;:::i;1417:27::-;;;;;;7546:984;;;:::i;10008:96::-;10082:15;10008:96;;1346:33;;;;;;9672:90;;;:::i;9768:234::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;12585:96:6:-;;;:::i;11889:278::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2826:2:7;2317:63:1;;;2808:21:7;2865:2;2845:18;;;2838:30;2904:33;2884:18;;;2877:61;2955:18;;2317:63:1;;;;;;;;;1744:1;2455:7;:18;3951:20:6::1;:18;:20::i;:::-;3669:10:::2;:8;:10::i;:::-;11978::::3;11971:18;::::0;;;:6:::3;:18;::::0;;;;;;;11996:9:::3;::::0;11971:35;;:24:::3;;:35:::0;;;;;;::::3;;11967:103;;12038:21;;;;;;;;;;;;;;11967:103;12105:9;::::0;12080:18:::3;:35:::0;;;12134:10:::3;12080:18;12134:21:::0;12080:18;12134:21;;:26;;12080:24:::3;::::0;:18;12134:26:::3;::::0;12080:24;;12134:26:::3;:::i;:::-;::::0;;;-1:-1:-1;;1701:1:1;2628:7;:22;11889:278:6:o;4306:1427::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2826:2:7;2317:63:1;;;2808:21:7;2865:2;2845:18;;;2838:30;2904:33;2884:18;;;2877:61;2955:18;;2317:63:1;2624:355:7;2317:63:1;1744:1;2455:7;:18;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0::1;1240:68;;;::::0;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0::1;::::0;::::1;3487:21:7::0;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0::1;3303:356:7::0;1240:68:0::1;4568:1:6::2;4558:6;:11;4554:78;;4592:29;;;;;;;;;;;;;;4554:78;-1:-1:-1::0;;;;;4717:18:6;::::2;;::::0;;;:12:::2;:18;::::0;;;;:25;:30;4713:91:::2;;4770:23;;;;;;;;;;;;;;4713:91;4818:27;::::0;;;:14:::2;:27;::::0;;;;;4814:101:::2;;4873:31;;;;;;;;;;;;;;4814:101;4940:1;4925:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;;;;;;4951:12:6;::::2;;::::0;;;:6:::2;:12;::::0;;;;;;;:31;;-1:-1:-1;;4951:31:6::2;4978:4;4951:31;::::0;;5265:183;;::::2;::::0;::::2;::::0;;;;;5100:15:::2;5265:183:::0;;::::2;::::0;;;5327:27;;;:14:::2;:27:::0;;;;;;;;5265:183;;;;5100:15;5265:183;;;5369:23:::2;5100:15:::0;5342:11;5369:23:::2;:::i;:::-;5265:183:::0;;5407:1:::2;5265:183;::::0;;::::2;::::0;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5244:18:6;;::::2;::::0;;:12:::2;:18:::0;;;;;;:204;;;;;;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;::::0;::::2;::::0;::::2;::::0;;;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;::::2;::::0;;::::2;::::0;::::2;::::0;;::::2;::::0;5506:13:::2;::::0;5459:142:::2;::::0;5506:13:::2;5534:10;5566:4;5585:6:::0;5459:26:::2;:142::i;:::-;-1:-1:-1::0;;;;;5668:58:6;::::2;;5681:6:::0;5689:9;5701:23:::2;5689:9:::0;5701:11;:23:::2;:::i;:::-;5668:58;::::0;;3999:25:7;;;4055:2;4040:18;;4033:34;;;;4083:18;;;4076:34;3987:2;3972:18;5668:58:6::2;;;;;;;-1:-1:-1::0;;1701:1:1;2628:7;:22;-1:-1:-1;;4306:1427:6:o;8536:1024::-;8579:21;;:::i;:::-;8651:10;8612:23;8638:24;;;:12;:24;;;;;;;;;8612:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8733:85;;8782:25;;;;;;;;;;;;;;8733:85;8859:32;;;;;;;;8827:29;8859:32;;;;;;;;;;;;;;;;8919:33;8880:10;8919:21;:33::i;:::-;8902:50;;8995:15;8967:7;:13;;;:25;;;:43;8963:214;;;9161:4;9139:18;;9130:6;:27;;;;:::i;:::-;9129:36;;;;:::i;:::-;9082:18;;9062:17;;9104:4;;9062:38;;;:::i;:::-;9061:47;;;;:::i;:::-;9060:106;;;;:::i;:::-;9026:15;;;:140;8963:214;9235:1;9191:41;9205:10;:26;;;9191:13;:41::i;:::-;:45;9187:249;;;9252:15;9270:36;9288:10;:17;;;9270;:36::i;:::-;9320:13;;;;:30;;:40;-1:-1:-1;9187:249:6;;;9391:13;;;;9424:1;9391:30;;;;:34;9187:249;9446:13;;;;:23;;:32;9511:17;;9488:40;;9446:7;8536:1024;-1:-1:-1;8536:1024:6:o;11398:210::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2826:2:7;2317:63:1;;;2808:21:7;2865:2;2845:18;;;2838:30;2904:33;2884:18;;;2877:61;2955:18;;2317:63:1;2624:355:7;2317:63:1;1744:1;2455:7;:18;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0::1;1240:68;;;::::0;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0::1;::::0;::::1;3487:21:7::0;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0::1;3303:356:7::0;1240:68:0::1;11467:13:6::2;::::0;::::2;;:21;;:13:::0;:21:::2;11463:84;;;11511:25;;;;;;;;;;;;;;11463:84;11557:13;:20:::0;;-1:-1:-1;;11557:20:6::2;11573:4;11557:20:::0;;::::2;::::0;;;11587:9:::2;:14:::0;;11557:13:::2;::::0;11587:14:::2;::::0;11573:4;;11587:14:::2;:::i;11614:269::-:0;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2826:2:7;2317:63:1;;;2808:21:7;2865:2;2845:18;;;2838:30;2904:33;2884:18;;;2877:61;2955:18;;2317:63:1;2624:355:7;2317:63:1;1744:1;2455:7;:18;3951:20:6::1;:18;:20::i;:::-;3669:10:::2;:8;:10::i;:::-;11696::::3;11689:18;::::0;;;:6:::3;:18;::::0;;;;;;;11714:9:::3;::::0;11689:35;;:24:::3;::::0;;::::3;:35:::0;;;;;;;::::3;;:43;;;11685:103;;;11755:22;;;;;;;;;;;;;;11685:103;11805:10;11798:18;::::0;;;:6:::3;:18;::::0;;;;;;;11823:9:::3;::::0;;11798:35;;11836:4:::3;11798:24:::0;;::::3;:35:::0;;;;;:42;;-1:-1:-1;;11798:42:6::3;::::0;::::3;::::0;;11861:9;11850:21;;:10:::3;:21:::0;;;;;:26;;11836:4;;11850:21;;:26:::3;::::0;11836:4;;11850:26:::3;:::i;10435:593::-:0;-1:-1:-1;;;;;10565:18:6;;10542:20;10565:18;;;:12;:18;;;;;10598:13;;:17;10594:428;;10635:37;10649:6;:22;;;10635:13;:37::i;:::-;10631:117;;10704:29;;;;;;;;;;;;;;10631:117;10788:1;10762:23;;;:27;10828:15;10803:22;;;:40;10905:13;;10983;;10858:153;;-1:-1:-1;;;;;10905:13:6;;10937:10;;10965:32;;:17;:32::i;:::-;10858:22;:153::i;:::-;10480:548;10435:593;:::o;12173:406::-;1108:6:0;;12290:4:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;3951:20:6::1;:18;:20::i;:::-;12329:1:::2;12314:11;;:16;12310:79;;12353:25;;;;;;;;;;;;;;12310:79;12398:19;12440:2;12421:11;;12435:1;12421:15;;;;:::i;:::-;12420:22;;;;:::i;:::-;12468:9;::::0;12457:21:::2;::::0;;;:10:::2;:21;::::0;;;;;12398:44;;-1:-1:-1;12457:35:6;-1:-1:-1;12453:120:6::2;;;12515:4;12508:11;;;12173:406:::0;:::o;12453:120::-:2;12557:5;12550:12;;;12173:406:::0;:::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;5739:306:6:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;5897:2:6::1;5888:6;:11;5884:81;;;5922:32;;;;;;;;;;;;;;5884:81;5974:18;:27:::0;;;6016:22:::1;::::0;1980:25:7;;;6016:22:6::1;::::0;1968:2:7;1953:18;6016:22:6::1;;;;;;;;5739:306:::0;:::o;10110:134::-;10173:7;10231:6;10200:27;10218:9;10200:15;:27;:::i;:::-;10199:38;;;;:::i;:::-;10192:45;10110:134;-1:-1:-1;;10110:134:6:o;7546:984::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;2826:2:7;2317:63:1;;;2808:21:7;2865:2;2845:18;;;2838:30;2904:33;2884:18;;;2877:61;2955:18;;2317:63:1;2624:355:7;2317:63:1;1744:1;2455:7;:18;;;7750:10:6::1;7737:24:::0;;:12:::1;:24;::::0;;;;;;;7711:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;7788:33:::1;7711:50:::0;7788:21:::1;:33::i;:::-;7852:10;7839:24;::::0;;;:12:::1;:24;::::0;;;;7832:31;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;7873:11:::1;:16:::0;;7771:50;;-1:-1:-1;7832:31:6;;7873:11;;7839:24;7873:16:::1;::::0;7832:31;;7873:16:::1;:::i;:::-;::::0;;;-1:-1:-1;;7913:10:6::1;7906:18;::::0;;;:6:::1;:18;::::0;;;;;;;7931:9:::1;::::0;7906:35;;:24:::1;;:35:::0;;;;;7899:42;;-1:-1:-1;;7899:42:6::1;::::0;;7956:22:::1;::::0;::::1;::::0;7981:15:::1;-1:-1:-1::0;7952:572:6::1;;;8030:22;8070::::0;8109:55:::1;8138:10;:17;;;8157:6;8109:28;:55::i;:::-;8226:13;::::0;8012:152;;-1:-1:-1;8012:152:6;-1:-1:-1;8179:154:6::1;::::0;-1:-1:-1;;;;;8226:13:6::1;8258:10;8287:31;8012:152:::0;;8287:31:::1;:::i;8179:154::-;7998:346;;7952:572;;;8411:13;::::0;8472:17;;8364:149:::1;::::0;-1:-1:-1;;;;;8411:13:6::1;::::0;8443:10:::1;::::0;8472:26:::1;::::0;8492:6;;8472:26:::1;:::i;8364:149::-;-1:-1:-1::0;;1701:1:1;2628:7;:22;7546:984:6:o;9672:90::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;9740:15:6::1;9725:12;:30:::0;9672:90::o;9768:234::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;9859:3:6::1;9850:6;:12;9846:83;;;9885:33;;;;;;;;;;;;;;9846:83;9938:11;:20:::0;;;9973:22:::1;::::0;1980:25:7;;;9973:22:6::1;::::0;1968:2:7;1953:18;9973:22:6::1;1834:177:7::0;1918:198:0;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;4775:2:7;1998:73:0::1;::::0;::::1;4757:21:7::0;4814:2;4794:18;;;4787:30;4853:34;4833:18;;;4826:62;4924:8;4904:18;;;4897:36;4950:19;;1998:73:0::1;4573:402:7::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;12585:96:6:-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;3505:2:7;1240:68:0;;;3487:21:7;;;3524:18;;;3517:30;3583:34;3563:18;;;3556:62;3635:18;;1240:68:0;3303:356:7;1240:68:0;3951:20:6::1;:18;:20::i;:::-;12653:13:::2;:21:::0;;-1:-1:-1;;12653:21:6::2;::::0;;12585:96::o;3703:204::-;3824:13;;;;3819:82;;3860:30;;;;;;;;;;;;;;3403:231;3541:10;3534:18;;;;:6;:18;;;;;:30;;;3530:98;;3596:21;;;;;;;;;;;;;;912:241:3;1077:68;;-1:-1:-1;;;;;5261:15:7;;;1077:68:3;;;5243:34:7;5313:15;;5293:18;;;5286:43;5345:18;;;5338:34;;;1050:96:3;;1070:5;;1100:27;;5155:18:7;;1077:68:3;;;;-1:-1:-1;;1077:68:3;;;;;;;;;;;;;;;;;;;;;;;;;;;1050:19;:96::i;:::-;912:241;;;;:::o;6288:437:6:-;6418:17;;6391:7;;6414:61;;-1:-1:-1;6463:1:6;;6288:437;-1:-1:-1;6288:437:6:o;6414:61::-;6714:4;6667:43;6693:10;:16;;;6667:25;:43::i;:::-;6628:20;;;;6592:17;;:56;;6628:20;6592:56;:::i;:::-;:118;;;;:::i;10250:179::-;10345:7;10414:8;10406:4;10391:11;;10377;:25;;;;:::i;:::-;10376:34;;;;:::i;701:205:3:-;840:58;;-1:-1:-1;;;;;5575:55:7;;840:58:3;;;5557:74:7;5647:18;;;5640:34;;;813:86:3;;833:5;;863:23;;5530:18:7;;840:58:3;5383:297:7;813:86:3;701:205;;;:::o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;;;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;6731:359:6:-;6848:7;;6884:11;6880:55;;-1:-1:-1;6919:1:6;;-1:-1:-1;6919:1:6;6911:13;;6880:55;7007:4;6985:18;;6976:6;:27;;;;:::i;:::-;6975:36;;;;:::i;:::-;6965:47;;:6;:47;:::i;:::-;7068:4;7046:18;;7037:6;:27;;;;:::i;:::-;7036:36;;;;:::i;:::-;7026:47;;:6;:47;:::i;:::-;6944:139;;;;6731:359;;;;;;:::o;3207:706:3:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:3;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:3;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:3;;6169:2:7;3811:85:3;;;6151:21:7;6208:2;6188:18;;;6181:30;6247:34;6227:18;;;6220:62;6318:12;6298:18;;;6291:40;6348:19;;3811:85:3;5967:406:7;6051:231:6;6148:7;6267:8;6232:23;6250:5;6232:15;:23;:::i;:::-;6231:32;;6259:4;6231:32;:::i;3861:223:4:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:4;;6580:2:7;5137:81:4;;;6562:21:7;6619:2;6599:18;;;6592:30;6658:34;6638:18;;;6631:62;6729:8;6709:18;;;6702:36;6755:19;;5137:81:4;6378:402:7;5137:81:4;-1:-1:-1;;;;;1465:19:4;;;5228:60;;;;-1:-1:-1;;;5228:60:4;;6987:2:7;5228:60:4;;;6969:21:7;7026:2;7006:18;;;6999:30;7065:31;7045:18;;;7038:59;7114:18;;5228:60:4;6785:353:7;5228:60:4;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:4;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:4:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:4;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:4;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:196:7:-;82:20;;-1:-1:-1;;;;;131:54:7;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:322::-;292:6;300;308;361:2;349:9;340:7;336:23;332:32;329:52;;;377:1;374;367:12;329:52;400:29;419:9;400:29;:::i;:::-;390:39;476:2;461:18;;448:32;;-1:-1:-1;527:2:7;512:18;;;499:32;;215:322;-1:-1:-1;;;215:322:7:o;1370:186::-;1429:6;1482:2;1470:9;1461:7;1457:23;1453:32;1450:52;;;1498:1;1495;1488:12;1450:52;1521:29;1540:9;1521:29;:::i;2208:180::-;2267:6;2320:2;2308:9;2299:7;2295:23;2291:32;2288:52;;;2336:1;2333;2326:12;2288:52;-1:-1:-1;2359:23:7;;2208:180;-1:-1:-1;2208:180:7:o;2984:184::-;-1:-1:-1;;;3033:1:7;3026:88;3133:4;3130:1;3123:15;3157:4;3154:1;3147:15;3173:125;3213:4;3241:1;3238;3235:8;3232:34;;;3246:18;;:::i;:::-;-1:-1:-1;3283:9:7;;3173:125::o;3664:128::-;3704:3;3735:1;3731:6;3728:1;3725:13;3722:39;;;3741:18;;:::i;:::-;-1:-1:-1;3777:9:7;;3664:128::o;4121:168::-;4161:7;4227:1;4223;4219:6;4215:14;4212:1;4209:21;4204:1;4197:9;4190:17;4186:45;4183:71;;;4234:18;;:::i;:::-;-1:-1:-1;4274:9:7;;4121:168::o;4294:274::-;4334:1;4360;4350:189;;-1:-1:-1;;;4392:1:7;4385:88;4496:4;4493:1;4486:15;4524:4;4521:1;4514:15;4350:189;-1:-1:-1;4553:9:7;;4294:274::o;5685:277::-;5752:6;5805:2;5793:9;5784:7;5780:23;5776:32;5773:52;;;5821:1;5818;5811:12;5773:52;5853:9;5847:16;5906:5;5899:13;5892:21;5885:5;5882:32;5872:60;;5928:1;5925;5918:12;7143:258;7215:1;7225:113;7239:6;7236:1;7233:13;7225:113;;;7315:11;;;7309:18;7296:11;;;7289:39;7261:2;7254:10;7225:113;;;7356:6;7353:1;7350:13;7347:48;;;-1:-1:-1;;7391:1:7;7373:16;;7366:27;7143:258::o;7406:274::-;7535:3;7573:6;7567:13;7589:53;7635:6;7630:3;7623:4;7615:6;7611:17;7589:53;:::i;:::-;7658:16;;;;;7406:274;-1:-1:-1;;7406:274:7:o;7685:383::-;7834:2;7823:9;7816:21;7797:4;7866:6;7860:13;7909:6;7904:2;7893:9;7889:18;7882:34;7925:66;7984:6;7979:2;7968:9;7964:18;7959:2;7951:6;7947:15;7925:66;:::i;:::-;8052:2;8031:15;-1:-1:-1;;8027:29:7;8012:45;;;;8059:2;8008:54;;7685:383;-1:-1:-1;;7685:383:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1328800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_blockTimestamp()": "258",
								"airdropRate()": "2362",
								"airdropSince()": "2384",
								"calculateWeek(uint256)": "487",
								"changeAirdropPercentage(uint256)": "25633",
								"changePenaltyFee(uint256)": "25645",
								"claimAirdrop(address)": "infinite",
								"getVoters(address)": "6946",
								"getVotingResult()": "13293",
								"hasStake()": "infinite",
								"owner()": "2399",
								"renounceOwnership()": "28147",
								"retractVote()": "infinite",
								"stake(address,uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2384",
								"startAirdrop()": "24433",
								"startVoting()": "82234",
								"stopVoting()": "28759",
								"token_address()": "2383",
								"totalVoters()": "2385",
								"transferOwnership(address)": "28385",
								"vote()": "infinite",
								"votedUsers(uint256)": "2528",
								"voters(address)": "2576",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "243",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1800,
									"end": 1802,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1779,
									"end": 1797,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1779,
									"end": 1802,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1826,
									"end": 1828,
									"name": "PUSH",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1812,
									"end": 1823,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1812,
									"end": 1828,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1852,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1871,
									"end": 1885,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1897,
									"end": 1898,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "PUSH",
									"source": 6,
									"value": "A1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C"
								},
								{
									"begin": 1871,
									"end": 1898,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1935,
									"end": 1936,
									"name": "PUSH",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 1908,
									"end": 1932,
									"name": "PUSH",
									"source": 6,
									"value": "89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832"
								},
								{
									"begin": 1908,
									"end": 1936,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1961,
									"end": 1969,
									"name": "PUSH",
									"source": 6,
									"value": "1E13380"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1946,
									"end": 1970,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1973,
									"end": 1974,
									"name": "PUSH",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 1946,
									"end": 1970,
									"name": "PUSH",
									"source": 6,
									"value": "DC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B"
								},
								{
									"begin": 1946,
									"end": 1974,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 980,
									"end": 12683,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d3df6db783213df4aa51349dfa32bb0a14dc433964ab7bbd0dfa84d5a9dd8d3264736f6c634300080b0033",
									".code": [
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "D5DBDF1B"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "FAB2F86B"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "CB79C2E1"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "B5D9DF83"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "B87DA76D"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "632A9A52"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "8891CF0D"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "8C63F97F"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "632A9A52"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "65F8C6C5"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "671D2B75"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "1EC6B60A"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "1EC6B60A"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "2D15CC04"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "5F5300FF"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "70C8B74"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "C51B88F"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "10486B6A"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12683,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 696,
											"end": 700,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 738,
											"end": 741,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 727,
											"end": 736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 723,
											"end": 742,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 715,
											"end": 742,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 715,
											"end": 742,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 769,
											"end": 782,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 758,
											"end": 767,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 751,
											"end": 783,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 839,
											"end": 843,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 831,
											"end": 837,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 827,
											"end": 844,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 821,
											"end": 845,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 814,
											"end": 818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 803,
											"end": 812,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 799,
											"end": 819,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 792,
											"end": 846,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 893,
											"end": 897,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 885,
											"end": 891,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 881,
											"end": 898,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 875,
											"end": 899,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 943,
											"end": 955,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 937,
											"end": 956,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 930,
											"end": 934,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 919,
											"end": 928,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 915,
											"end": 935,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 908,
											"end": 957,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1021,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1003,
											"end": 1015,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 999,
											"end": 1022,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 993,
											"end": 1023,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 988,
											"end": 990,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 977,
											"end": 986,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 973,
											"end": 991,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 966,
											"end": 1024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1085,
											"end": 1089,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1071,
											"end": 1083,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1067,
											"end": 1090,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1061,
											"end": 1091,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1055,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1044,
											"end": 1053,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1040,
											"end": 1059,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1033,
											"end": 1092,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1153,
											"end": 1155,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1139,
											"end": 1151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1135,
											"end": 1156,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1129,
											"end": 1157,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1123,
											"end": 1126,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1112,
											"end": 1121,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1108,
											"end": 1127,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1101,
											"end": 1158,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1219,
											"end": 1222,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1205,
											"end": 1217,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1201,
											"end": 1223,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1195,
											"end": 1224,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1189,
											"end": 1192,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1178,
											"end": 1187,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1174,
											"end": 1193,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1167,
											"end": 1225,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1286,
											"end": 1289,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1272,
											"end": 1284,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1268,
											"end": 1290,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1262,
											"end": 1291,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1256,
											"end": 1259,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1245,
											"end": 1254,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1241,
											"end": 1260,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1234,
											"end": 1292,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1353,
											"end": 1356,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1339,
											"end": 1351,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1335,
											"end": 1357,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1329,
											"end": 1358,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1323,
											"end": 1326,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1312,
											"end": 1321,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1308,
											"end": 1327,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1301,
											"end": 1359,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1301,
											"end": 1359,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 542,
											"end": 1365,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 542,
											"end": 1365,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 542,
											"end": 1365,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 542,
											"end": 1365,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 542,
											"end": 1365,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "tag",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11239,
											"end": 11243,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11275,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11281,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11314,
											"end": 11323,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11314,
											"end": 11323,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11295,
											"end": 11313,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11313,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11269,
											"end": 11293,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11295,
											"end": 11324,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1748,
											"end": 1762,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1748,
											"end": 1762,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1741,
											"end": 1763,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1723,
											"end": 1764,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1723,
											"end": 1764,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1807,
											"end": 1821,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1807,
											"end": 1821,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1800,
											"end": 1822,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1795,
											"end": 1797,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1780,
											"end": 1798,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1780,
											"end": 1798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1773,
											"end": 1823,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1696,
											"end": 1714,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11183,
											"end": 11332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1561,
											"end": 1829,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "tag",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1968,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1953,
											"end": 1971,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1834,
											"end": 2011,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "tag",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2181,
											"end": 2195,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2181,
											"end": 2195,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2174,
											"end": 2196,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2197,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2156,
											"end": 2197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2144,
											"end": 2146,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2129,
											"end": 2147,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 2016,
											"end": 2203,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2557,
											"end": 2612,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2557,
											"end": 2612,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2557,
											"end": 2612,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2539,
											"end": 2613,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2539,
											"end": 2613,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2527,
											"end": 2529,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2512,
											"end": 2530,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 2393,
											"end": 2619,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "tag",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10008,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 10008,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10082,
											"end": 10097,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10008,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 10008,
											"end": 10104,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "53"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2937,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2877,
											"end": 2938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3669,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "tag",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11978,
											"end": 11988,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11977,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11989,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11996,
											"end": 12005,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11996,
											"end": 12005,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 11995,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11971,
											"end": 11995,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11971,
											"end": 12006,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11967,
											"end": 12070,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 11967,
											"end": 12070,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "PUSH",
											"source": 6,
											"value": "8B74220000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12038,
											"end": 12059,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11967,
											"end": 12070,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 11967,
											"end": 12070,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12105,
											"end": 12114,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12105,
											"end": 12114,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12080,
											"end": 12115,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12115,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12115,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12144,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12134,
											"end": 12155,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12134,
											"end": 12155,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12155,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12104,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12080,
											"end": 12104,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12098,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12104,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 12080,
											"end": 12104,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12134,
											"end": 12160,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 11889,
											"end": 12167,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2937,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2877,
											"end": 2938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2624,
											"end": 2979,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4568,
											"end": 4569,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4558,
											"end": 4564,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4558,
											"end": 4569,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 4554,
											"end": 4632,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 4554,
											"end": 4632,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "PUSH",
											"source": 6,
											"value": "88B440D600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4592,
											"end": 4621,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4554,
											"end": 4632,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 4554,
											"end": 4632,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4729,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4735,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4742,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4717,
											"end": 4747,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4713,
											"end": 4804,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 4713,
											"end": 4804,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "PUSH",
											"source": 6,
											"value": "4462D2700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4770,
											"end": 4793,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4713,
											"end": 4804,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 4713,
											"end": 4804,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4832,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4818,
											"end": 4845,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4814,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 4814,
											"end": 4915,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "PUSH",
											"source": 6,
											"value": "95377BE400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4873,
											"end": 4904,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4814,
											"end": 4915,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 4814,
											"end": 4915,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4940,
											"end": 4941,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4925,
											"end": 4936,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4925,
											"end": 4936,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4925,
											"end": 4941,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4957,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4963,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4978,
											"end": 4982,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4951,
											"end": 4982,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5341,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5327,
											"end": 5354,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 5100,
											"end": 5115,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5342,
											"end": 5353,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5392,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 5369,
											"end": 5392,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5369,
											"end": 5392,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 5369,
											"end": 5392,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5407,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5265,
											"end": 5448,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5256,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5262,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5244,
											"end": 5448,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5506,
											"end": 5519,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 5506,
											"end": 5519,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5459,
											"end": 5601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 5459,
											"end": 5601,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5506,
											"end": 5519,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5534,
											"end": 5544,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5566,
											"end": 5570,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5585,
											"end": 5591,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5459,
											"end": 5485,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 5459,
											"end": 5601,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5459,
											"end": 5601,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 5459,
											"end": 5601,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "PUSH",
											"source": 6,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5681,
											"end": 5687,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5689,
											"end": 5698,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5701,
											"end": 5724,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 5689,
											"end": 5698,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5701,
											"end": 5712,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5701,
											"end": 5724,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 5701,
											"end": 5724,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5701,
											"end": 5724,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 5701,
											"end": 5724,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3999,
											"end": 4024,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3999,
											"end": 4024,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3999,
											"end": 4024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4055,
											"end": 4057,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4040,
											"end": 4058,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4040,
											"end": 4058,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4067,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4067,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4067,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4067,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4083,
											"end": 4101,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4083,
											"end": 4101,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4083,
											"end": 4101,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4076,
											"end": 4110,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3987,
											"end": 3989,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5668,
											"end": 5726,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4306,
											"end": 5733,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 8579,
											"end": 8600,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8651,
											"end": 8661,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8635,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8650,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8638,
											"end": 8662,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8662,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8733,
											"end": 8818,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 8733,
											"end": 8818,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8782,
											"end": 8807,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8733,
											"end": 8818,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 8733,
											"end": 8818,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8827,
											"end": 8856,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8859,
											"end": 8891,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8919,
											"end": 8952,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 8880,
											"end": 8890,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8919,
											"end": 8940,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 8919,
											"end": 8952,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8919,
											"end": 8952,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 8919,
											"end": 8952,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8902,
											"end": 8952,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8902,
											"end": 8952,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8995,
											"end": 9010,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 8974,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 8980,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8967,
											"end": 8980,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 8980,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 8992,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8967,
											"end": 8992,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 8992,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8967,
											"end": 9010,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8963,
											"end": 9177,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8963,
											"end": 9177,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 8963,
											"end": 9177,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9161,
											"end": 9165,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9139,
											"end": 9157,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9139,
											"end": 9157,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9130,
											"end": 9136,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 9130,
											"end": 9157,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 9129,
											"end": 9165,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9082,
											"end": 9100,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9082,
											"end": 9100,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9062,
											"end": 9079,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9062,
											"end": 9079,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9104,
											"end": 9108,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9104,
											"end": 9108,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 9062,
											"end": 9100,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 9061,
											"end": 9108,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 9060,
											"end": 9166,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9026,
											"end": 9041,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9026,
											"end": 9041,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9026,
											"end": 9041,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9026,
											"end": 9166,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8963,
											"end": 9177,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 8963,
											"end": 9177,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9235,
											"end": 9236,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9191,
											"end": 9232,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 9205,
											"end": 9215,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9205,
											"end": 9231,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 9205,
											"end": 9231,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9205,
											"end": 9231,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9191,
											"end": 9204,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 9191,
											"end": 9232,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9191,
											"end": 9232,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 9191,
											"end": 9232,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9191,
											"end": 9236,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9252,
											"end": 9267,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9270,
											"end": 9306,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 9288,
											"end": 9298,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9288,
											"end": 9305,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9288,
											"end": 9305,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9288,
											"end": 9305,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9270,
											"end": 9287,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 9270,
											"end": 9306,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9270,
											"end": 9306,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 9270,
											"end": 9306,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9320,
											"end": 9333,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9320,
											"end": 9333,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9320,
											"end": 9333,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9320,
											"end": 9333,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9320,
											"end": 9350,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9320,
											"end": 9350,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9320,
											"end": 9360,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9404,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9391,
											"end": 9404,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9404,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9404,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9424,
											"end": 9425,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9391,
											"end": 9421,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9391,
											"end": 9421,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9421,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9421,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9391,
											"end": 9425,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 9187,
											"end": 9436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9459,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9446,
											"end": 9459,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9459,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9459,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9469,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9446,
											"end": 9469,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9478,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9511,
											"end": 9528,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9511,
											"end": 9528,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9488,
											"end": 9528,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9488,
											"end": 9528,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9446,
											"end": 9453,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8536,
											"end": 9560,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "tag",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 11398,
											"end": 11608,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2937,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2877,
											"end": 2938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2624,
											"end": 2979,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 11467,
											"end": 11480,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11467,
											"end": 11480,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11467,
											"end": 11480,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11467,
											"end": 11480,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11467,
											"end": 11488,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11467,
											"end": 11488,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11467,
											"end": 11480,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11467,
											"end": 11488,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 11463,
											"end": 11547,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11463,
											"end": 11547,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 11463,
											"end": 11547,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "PUSH",
											"source": 6,
											"value": "6DA4CD2E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11511,
											"end": 11536,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11463,
											"end": 11547,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 11463,
											"end": 11547,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11570,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11573,
											"end": 11577,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11577,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11587,
											"end": 11596,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11557,
											"end": 11570,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11557,
											"end": 11570,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11573,
											"end": 11577,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11573,
											"end": 11577,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 11587,
											"end": 11601,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 11614,
											"end": 11883,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2937,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2877,
											"end": 2938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2624,
											"end": 2979,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3669,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 3669,
											"end": 3679,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11696,
											"end": 11706,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11695,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11707,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11714,
											"end": 11723,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11714,
											"end": 11723,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11713,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11689,
											"end": 11713,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11713,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11713,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 11689,
											"end": 11724,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11732,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11732,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11689,
											"end": 11732,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 11685,
											"end": 11788,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 11685,
											"end": 11788,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 11685,
											"end": 11788,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "PUSH",
											"source": 6,
											"value": "740E33B000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11755,
											"end": 11777,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 11685,
											"end": 11788,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 11685,
											"end": 11788,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 11805,
											"end": 11815,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11804,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11816,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11823,
											"end": 11832,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 11823,
											"end": 11832,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11823,
											"end": 11832,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11836,
											"end": 11840,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 11798,
											"end": 11822,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11822,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11822,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11833,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11798,
											"end": 11840,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 11861,
											"end": 11870,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11860,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11836,
											"end": 11840,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11836,
											"end": 11840,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11871,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11836,
											"end": 11840,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11836,
											"end": 11840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 11850,
											"end": 11876,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10542,
											"end": 10562,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10577,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10565,
											"end": 10583,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10598,
											"end": 10611,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10598,
											"end": 10611,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10598,
											"end": 10615,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10594,
											"end": 11022,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 10594,
											"end": 11022,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10635,
											"end": 10672,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 10649,
											"end": 10655,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10649,
											"end": 10671,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10649,
											"end": 10671,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10649,
											"end": 10671,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10635,
											"end": 10648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10635,
											"end": 10672,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10635,
											"end": 10672,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 10635,
											"end": 10672,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10631,
											"end": 10748,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 10631,
											"end": 10748,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "PUSH",
											"source": 6,
											"value": "DD8456CC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10704,
											"end": 10733,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10631,
											"end": 10748,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 10631,
											"end": 10748,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10788,
											"end": 10789,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10762,
											"end": 10785,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 10762,
											"end": 10785,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10762,
											"end": 10785,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10762,
											"end": 10789,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10828,
											"end": 10843,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 10825,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10803,
											"end": 10825,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 10825,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10803,
											"end": 10843,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10905,
											"end": 10918,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 10905,
											"end": 10918,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10983,
											"end": 10996,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10983,
											"end": 10996,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10858,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 10858,
											"end": 11011,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10905,
											"end": 10918,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10905,
											"end": 10918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10937,
											"end": 10947,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10937,
											"end": 10947,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10965,
											"end": 10997,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 10965,
											"end": 10997,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10965,
											"end": 10982,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 10965,
											"end": 10997,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10965,
											"end": 10997,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 10965,
											"end": 10997,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10858,
											"end": 10880,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "198"
										},
										{
											"begin": 10858,
											"end": 11011,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10858,
											"end": 11011,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 10858,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10480,
											"end": 11028,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10435,
											"end": 11028,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "tag",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 12290,
											"end": 12294,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12290,
											"end": 12294,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12329,
											"end": 12330,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12314,
											"end": 12325,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 12314,
											"end": 12325,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12314,
											"end": 12330,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 12310,
											"end": 12389,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 12310,
											"end": 12389,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "PUSH",
											"source": 6,
											"value": "2F9686DE00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12353,
											"end": 12378,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 12310,
											"end": 12389,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 12310,
											"end": 12389,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12398,
											"end": 12417,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12440,
											"end": 12442,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12421,
											"end": 12432,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 12421,
											"end": 12432,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12435,
											"end": 12436,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 12421,
											"end": 12436,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 12420,
											"end": 12442,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12468,
											"end": 12477,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 12468,
											"end": 12477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12467,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 12457,
											"end": 12478,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 12398,
											"end": 12442,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12398,
											"end": 12442,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12457,
											"end": 12492,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 12453,
											"end": 12573,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 12453,
											"end": 12573,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 12453,
											"end": 12573,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 12515,
											"end": 12519,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 12508,
											"end": 12519,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12508,
											"end": 12519,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12508,
											"end": 12519,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 12453,
											"end": 12573,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 12453,
											"end": 12573,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12557,
											"end": 12562,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 12550,
											"end": 12562,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 12550,
											"end": 12562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12550,
											"end": 12562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12173,
											"end": 12579,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5897,
											"end": 5899,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 5888,
											"end": 5894,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5888,
											"end": 5899,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5884,
											"end": 5965,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5884,
											"end": 5965,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 5884,
											"end": 5965,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "PUSH",
											"source": 6,
											"value": "F1A470D700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5922,
											"end": 5954,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5884,
											"end": 5965,
											"name": "tag",
											"source": 6,
											"value": "226"
										},
										{
											"begin": 5884,
											"end": 5965,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5974,
											"end": 5992,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5974,
											"end": 6001,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5974,
											"end": 6001,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5974,
											"end": 6001,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "PUSH",
											"source": 6,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1968,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1953,
											"end": 1971,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "tag",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5739,
											"end": 6045,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10173,
											"end": 10180,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10231,
											"end": 10237,
											"name": "PUSH",
											"source": 6,
											"value": "93A80"
										},
										{
											"begin": 10200,
											"end": 10227,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 10218,
											"end": 10227,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10200,
											"end": 10215,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10200,
											"end": 10227,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 10200,
											"end": 10227,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10200,
											"end": 10227,
											"name": "tag",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 10200,
											"end": 10227,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "tag",
											"source": 6,
											"value": "231"
										},
										{
											"begin": 10199,
											"end": 10237,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10192,
											"end": 10237,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10110,
											"end": 10244,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "tag",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2826,
											"end": 2828,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2829,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2865,
											"end": 2867,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2845,
											"end": 2863,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2838,
											"end": 2868,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2904,
											"end": 2937,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2884,
											"end": 2902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2877,
											"end": 2938,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2955,
											"end": 2973,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 2624,
											"end": 2979,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7750,
											"end": 7760,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7749,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7761,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 7711,
											"end": 7761,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7788,
											"end": 7809,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "tag",
											"source": 6,
											"value": "236"
										},
										{
											"begin": 7788,
											"end": 7821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7852,
											"end": 7862,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7851,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7884,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7771,
											"end": 7821,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7771,
											"end": 7821,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7884,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7884,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7839,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7832,
											"end": 7863,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "tag",
											"source": 6,
											"value": "237"
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7873,
											"end": 7889,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7913,
											"end": 7923,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7912,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7924,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7931,
											"end": 7940,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7931,
											"end": 7940,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7930,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7906,
											"end": 7930,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7941,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7941,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7941,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7899,
											"end": 7941,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7941,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7899,
											"end": 7941,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7956,
											"end": 7978,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7956,
											"end": 7978,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7956,
											"end": 7978,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7956,
											"end": 7978,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7981,
											"end": 7996,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8030,
											"end": 8052,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8070,
											"end": 8092,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8109,
											"end": 8164,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 8138,
											"end": 8148,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8138,
											"end": 8155,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8138,
											"end": 8155,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8138,
											"end": 8155,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8157,
											"end": 8163,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8109,
											"end": 8137,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 8109,
											"end": 8164,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8109,
											"end": 8164,
											"name": "tag",
											"source": 6,
											"value": "239"
										},
										{
											"begin": 8109,
											"end": 8164,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8226,
											"end": 8239,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8226,
											"end": 8239,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8012,
											"end": 8164,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8012,
											"end": 8164,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8012,
											"end": 8164,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8179,
											"end": 8333,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 8179,
											"end": 8333,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8226,
											"end": 8239,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8258,
											"end": 8268,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8287,
											"end": 8318,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 8012,
											"end": 8164,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8012,
											"end": 8164,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 8287,
											"end": 8318,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 8287,
											"end": 8318,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8179,
											"end": 8333,
											"name": "tag",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 8179,
											"end": 8333,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7998,
											"end": 8344,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7998,
											"end": 8344,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "tag",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 7952,
											"end": 8524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8411,
											"end": 8424,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8411,
											"end": 8424,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8472,
											"end": 8489,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8472,
											"end": 8489,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8364,
											"end": 8513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 8364,
											"end": 8513,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8411,
											"end": 8424,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8411,
											"end": 8424,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8443,
											"end": 8453,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8443,
											"end": 8453,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8472,
											"end": 8498,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 8472,
											"end": 8498,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8498,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8492,
											"end": 8498,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8472,
											"end": 8498,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 8472,
											"end": 8498,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8364,
											"end": 8513,
											"name": "tag",
											"source": 6,
											"value": "244"
										},
										{
											"begin": 8364,
											"end": 8513,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7546,
											"end": 8530,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9740,
											"end": 9755,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9725,
											"end": 9737,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 9725,
											"end": 9755,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9672,
											"end": 9762,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 9768,
											"end": 10002,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9859,
											"end": 9862,
											"name": "PUSH",
											"source": 6,
											"value": "C8"
										},
										{
											"begin": 9850,
											"end": 9856,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9850,
											"end": 9862,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9846,
											"end": 9929,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9846,
											"end": 9929,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 9846,
											"end": 9929,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "PUSH",
											"source": 6,
											"value": "A552CF1000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9885,
											"end": 9918,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9846,
											"end": 9929,
											"name": "tag",
											"source": 6,
											"value": "259"
										},
										{
											"begin": 9846,
											"end": 9929,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9938,
											"end": 9949,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9938,
											"end": 9958,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9938,
											"end": 9958,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9938,
											"end": 9958,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9973,
											"end": 9995,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9973,
											"end": 9995,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1980,
											"end": 2005,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 9995,
											"name": "PUSH",
											"source": 6,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 9973,
											"end": 9995,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1968,
											"end": 1970,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1953,
											"end": 1971,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9973,
											"end": 9995,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "227"
										},
										{
											"begin": 1834,
											"end": 2011,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4775,
											"end": 4777,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4757,
											"end": 4778,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4814,
											"end": 4816,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4787,
											"end": 4817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4853,
											"end": 4887,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4826,
											"end": 4888,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4924,
											"end": 4932,
											"name": "PUSH",
											"source": 7,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4904,
											"end": 4922,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4897,
											"end": 4933,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4950,
											"end": 4969,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4950,
											"end": 4969,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 4573,
											"end": 4975,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "tag",
											"source": 0,
											"value": "270"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3505,
											"end": 3507,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3487,
											"end": 3508,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3524,
											"end": 3542,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3517,
											"end": 3547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3583,
											"end": 3617,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3563,
											"end": 3581,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3556,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3635,
											"end": 3653,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 3303,
											"end": 3659,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 3951,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "tag",
											"source": 6,
											"value": "277"
										},
										{
											"begin": 3951,
											"end": 3971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 12653,
											"end": 12666,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 12653,
											"end": 12674,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 12653,
											"end": 12674,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12653,
											"end": 12674,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 12653,
											"end": 12674,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 12653,
											"end": 12674,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 12585,
											"end": 12681,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3703,
											"end": 3907,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 3703,
											"end": 3907,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3824,
											"end": 3837,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 3824,
											"end": 3837,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3824,
											"end": 3837,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3824,
											"end": 3837,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3819,
											"end": 3901,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 3819,
											"end": 3901,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "PUSH",
											"source": 6,
											"value": "A1D1891400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3860,
											"end": 3890,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3403,
											"end": 3634,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3403,
											"end": 3634,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3541,
											"end": 3551,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3540,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3552,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3564,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3534,
											"end": 3564,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3534,
											"end": 3564,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 3628,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 3530,
											"end": 3628,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "PUSH",
											"source": 6,
											"value": "1E567DD400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3596,
											"end": 3617,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5261,
											"end": 5276,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5261,
											"end": 5276,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5261,
											"end": 5276,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5243,
											"end": 5277,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5313,
											"end": 5328,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5313,
											"end": 5328,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5293,
											"end": 5311,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5286,
											"end": 5329,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5345,
											"end": 5363,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5345,
											"end": 5363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5345,
											"end": 5363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5338,
											"end": 5372,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5338,
											"end": 5372,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5338,
											"end": 5372,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5155,
											"end": 5173,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 5155,
											"end": 5173,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "tag",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "tag",
											"source": 3,
											"value": "285"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6288,
											"end": 6725,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 6288,
											"end": 6725,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6418,
											"end": 6435,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6418,
											"end": 6435,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6391,
											"end": 6398,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6391,
											"end": 6398,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6414,
											"end": 6475,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 6414,
											"end": 6475,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6463,
											"end": 6464,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6463,
											"end": 6464,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6288,
											"end": 6725,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6288,
											"end": 6725,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6414,
											"end": 6475,
											"name": "tag",
											"source": 6,
											"value": "290"
										},
										{
											"begin": 6414,
											"end": 6475,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6714,
											"end": 6718,
											"name": "PUSH",
											"source": 6,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6667,
											"end": 6710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 6693,
											"end": 6703,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6693,
											"end": 6709,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6693,
											"end": 6709,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6693,
											"end": 6709,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6667,
											"end": 6692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 6667,
											"end": 6710,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6667,
											"end": 6710,
											"name": "tag",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 6667,
											"end": 6710,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6628,
											"end": 6648,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6628,
											"end": 6648,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6628,
											"end": 6648,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6628,
											"end": 6648,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6609,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6609,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6628,
											"end": 6648,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "tag",
											"source": 6,
											"value": "293"
										},
										{
											"begin": 6592,
											"end": 6648,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 6592,
											"end": 6710,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6710,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6592,
											"end": 6710,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 6592,
											"end": 6710,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10250,
											"end": 10429,
											"name": "tag",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 10250,
											"end": 10429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10345,
											"end": 10352,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10414,
											"end": 10422,
											"name": "PUSH",
											"source": 6,
											"value": "1DFE200"
										},
										{
											"begin": 10406,
											"end": 10410,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 10391,
											"end": 10402,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10391,
											"end": 10402,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10377,
											"end": 10388,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "tag",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 10377,
											"end": 10402,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10410,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 10376,
											"end": 10410,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10410,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10376,
											"end": 10410,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 10376,
											"end": 10410,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5575,
											"end": 5630,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5575,
											"end": 5630,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5557,
											"end": 5631,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5647,
											"end": 5665,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5647,
											"end": 5665,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5647,
											"end": 5665,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5640,
											"end": 5674,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5640,
											"end": 5674,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5640,
											"end": 5674,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5530,
											"end": 5548,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5530,
											"end": 5548,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 5383,
											"end": 5680,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "tag",
											"source": 6,
											"value": "240"
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6848,
											"end": 6855,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6848,
											"end": 6855,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6884,
											"end": 6895,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6935,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "306"
										},
										{
											"begin": 6880,
											"end": 6935,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6919,
											"end": 6920,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6919,
											"end": 6920,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6919,
											"end": 6920,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6911,
											"end": 6924,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 6911,
											"end": 6924,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6880,
											"end": 6935,
											"name": "tag",
											"source": 6,
											"value": "306"
										},
										{
											"begin": 6880,
											"end": 6935,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7007,
											"end": 7011,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 6985,
											"end": 7003,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6985,
											"end": 7003,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6976,
											"end": 6982,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "tag",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 6976,
											"end": 7003,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "tag",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 6975,
											"end": 7011,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6965,
											"end": 6971,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "tag",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 6965,
											"end": 7012,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7068,
											"end": 7072,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7046,
											"end": 7064,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7046,
											"end": 7064,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7037,
											"end": 7043,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "tag",
											"source": 6,
											"value": "310"
										},
										{
											"begin": 7037,
											"end": 7064,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "tag",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 7036,
											"end": 7072,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "312"
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7026,
											"end": 7032,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "tag",
											"source": 6,
											"value": "312"
										},
										{
											"begin": 7026,
											"end": 7073,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6944,
											"end": 7083,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6944,
											"end": 7083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6944,
											"end": 7083,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6944,
											"end": 7083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "tag",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6731,
											"end": 7090,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "314"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "315"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "314"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "318"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "317"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "301"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6169,
											"end": 6171,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6151,
											"end": 6172,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6208,
											"end": 6210,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6188,
											"end": 6206,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6181,
											"end": 6211,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6247,
											"end": 6281,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 6227,
											"end": 6245,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6227,
											"end": 6245,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6227,
											"end": 6245,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6220,
											"end": 6282,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6318,
											"end": 6330,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6298,
											"end": 6316,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6291,
											"end": 6331,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6348,
											"end": 6367,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6348,
											"end": 6367,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 5967,
											"end": 6373,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6051,
											"end": 6282,
											"name": "tag",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 6051,
											"end": 6282,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6148,
											"end": 6155,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6267,
											"end": 6275,
											"name": "PUSH",
											"source": 6,
											"value": "1E13380"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 6250,
											"end": 6255,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6232,
											"end": 6247,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "tag",
											"source": 6,
											"value": "323"
										},
										{
											"begin": 6232,
											"end": 6255,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6231,
											"end": 6263,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "230"
										},
										{
											"begin": 6231,
											"end": 6263,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6259,
											"end": 6263,
											"name": "PUSH",
											"source": 6,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6231,
											"end": 6263,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 6231,
											"end": 6263,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "327"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "328"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "327"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "326"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "328"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "330"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6580,
											"end": 6582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6562,
											"end": 6583,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6619,
											"end": 6621,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 6599,
											"end": 6617,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6599,
											"end": 6617,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6599,
											"end": 6617,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6592,
											"end": 6622,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6658,
											"end": 6692,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 6638,
											"end": 6656,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6638,
											"end": 6656,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6638,
											"end": 6656,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6631,
											"end": 6693,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6729,
											"end": 6737,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6709,
											"end": 6727,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6709,
											"end": 6727,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6709,
											"end": 6727,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6702,
											"end": 6738,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6755,
											"end": 6774,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6755,
											"end": 6774,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6378,
											"end": 6780,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "330"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "335"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6987,
											"end": 6989,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6969,
											"end": 6990,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7026,
											"end": 7028,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 7006,
											"end": 7024,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7006,
											"end": 7024,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7006,
											"end": 7024,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7029,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7065,
											"end": 7096,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 7045,
											"end": 7063,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 7045,
											"end": 7063,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7045,
											"end": 7063,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7038,
											"end": 7097,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7114,
											"end": 7132,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 7114,
											"end": 7132,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 6785,
											"end": 7138,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "335"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "338"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "339"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "338"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "342"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "341"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "342"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "341"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "344"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "344"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "347"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "326"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "347"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "349"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "349"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "352"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "152"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "353"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "353"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 210,
											"name": "tag",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 14,
											"end": 210,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 185,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 131,
											"end": 185,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 121,
											"end": 186,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 121,
											"end": 186,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 111,
											"end": 204,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 111,
											"end": 204,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 200,
											"end": 201,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 197,
											"end": 198,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 190,
											"end": 202,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 111,
											"end": 204,
											"name": "tag",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 111,
											"end": 204,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14,
											"end": 210,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14,
											"end": 210,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14,
											"end": 210,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 210,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 215,
											"end": 537,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 215,
											"end": 537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 292,
											"end": 298,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 300,
											"end": 306,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 308,
											"end": 314,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 361,
											"end": 363,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 349,
											"end": 358,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 340,
											"end": 347,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 336,
											"end": 359,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 332,
											"end": 364,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 329,
											"end": 381,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 329,
											"end": 381,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 329,
											"end": 381,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 377,
											"end": 378,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 375,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 367,
											"end": 379,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 329,
											"end": 381,
											"name": "tag",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 329,
											"end": 381,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 400,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 419,
											"end": 428,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 400,
											"end": 429,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 400,
											"end": 429,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 400,
											"end": 429,
											"name": "tag",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 400,
											"end": 429,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 390,
											"end": 429,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 476,
											"end": 478,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 461,
											"end": 479,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 461,
											"end": 479,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 448,
											"end": 480,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 448,
											"end": 480,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 527,
											"end": 529,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 512,
											"end": 530,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 512,
											"end": 530,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 512,
											"end": 530,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 499,
											"end": 531,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 499,
											"end": 531,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 215,
											"end": 537,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 215,
											"end": 537,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1370,
											"end": 1556,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 1370,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1435,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 1484,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1470,
											"end": 1479,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1461,
											"end": 1468,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1457,
											"end": 1480,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1453,
											"end": 1485,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1502,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1502,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 1450,
											"end": 1502,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1498,
											"end": 1499,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1495,
											"end": 1496,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1488,
											"end": 1500,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1450,
											"end": 1502,
											"name": "tag",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 1450,
											"end": 1502,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1550,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "326"
										},
										{
											"begin": 1540,
											"end": 1549,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1521,
											"end": 1550,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 1521,
											"end": 1550,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2208,
											"end": 2388,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2208,
											"end": 2388,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2267,
											"end": 2273,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2320,
											"end": 2322,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2308,
											"end": 2317,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2299,
											"end": 2306,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2295,
											"end": 2318,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2291,
											"end": 2323,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2288,
											"end": 2340,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2288,
											"end": 2340,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 2288,
											"end": 2340,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2336,
											"end": 2337,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2333,
											"end": 2334,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2326,
											"end": 2338,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2288,
											"end": 2340,
											"name": "tag",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 2288,
											"end": 2340,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2359,
											"end": 2382,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2359,
											"end": 2382,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2208,
											"end": 2388,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2208,
											"end": 2388,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2984,
											"end": 3168,
											"name": "tag",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 2984,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3033,
											"end": 3034,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3026,
											"end": 3114,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3133,
											"end": 3137,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 3130,
											"end": 3131,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3123,
											"end": 3138,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3157,
											"end": 3161,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3154,
											"end": 3155,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3147,
											"end": 3162,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3173,
											"end": 3298,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 3173,
											"end": 3298,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3217,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3241,
											"end": 3242,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3238,
											"end": 3239,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3235,
											"end": 3243,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3232,
											"end": 3266,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3232,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3232,
											"end": 3266,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3246,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3246,
											"end": 3264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 3246,
											"end": 3264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3246,
											"end": 3264,
											"name": "tag",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 3246,
											"end": 3264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3283,
											"end": 3292,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3283,
											"end": 3292,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3173,
											"end": 3298,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3664,
											"end": 3792,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 3664,
											"end": 3792,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3704,
											"end": 3707,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3735,
											"end": 3736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3731,
											"end": 3737,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3729,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3725,
											"end": 3738,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3722,
											"end": 3761,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3722,
											"end": 3761,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "382"
										},
										{
											"begin": 3722,
											"end": 3761,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3741,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "382"
										},
										{
											"begin": 3741,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 3741,
											"end": 3759,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3741,
											"end": 3759,
											"name": "tag",
											"source": 7,
											"value": "382"
										},
										{
											"begin": 3741,
											"end": 3759,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3777,
											"end": 3786,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3777,
											"end": 3786,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3664,
											"end": 3792,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4121,
											"end": 4289,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 4121,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4161,
											"end": 4168,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4227,
											"end": 4228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4223,
											"end": 4224,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4219,
											"end": 4225,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 4215,
											"end": 4229,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4212,
											"end": 4213,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4209,
											"end": 4230,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4204,
											"end": 4205,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4197,
											"end": 4206,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4190,
											"end": 4207,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4186,
											"end": 4231,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4183,
											"end": 4254,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4183,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "386"
										},
										{
											"begin": 4183,
											"end": 4254,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4234,
											"end": 4252,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "386"
										},
										{
											"begin": 4234,
											"end": 4252,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 4234,
											"end": 4252,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4234,
											"end": 4252,
											"name": "tag",
											"source": 7,
											"value": "386"
										},
										{
											"begin": 4234,
											"end": 4252,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4274,
											"end": 4283,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4274,
											"end": 4283,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4121,
											"end": 4289,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4294,
											"end": 4568,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 4294,
											"end": 4568,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4334,
											"end": 4335,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4360,
											"end": 4361,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4539,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "388"
										},
										{
											"begin": 4350,
											"end": 4539,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4392,
											"end": 4393,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4385,
											"end": 4473,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4496,
											"end": 4500,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 4493,
											"end": 4494,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4486,
											"end": 4501,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4524,
											"end": 4528,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4521,
											"end": 4522,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4514,
											"end": 4529,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4539,
											"name": "tag",
											"source": 7,
											"value": "388"
										},
										{
											"begin": 4350,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4553,
											"end": 4562,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4553,
											"end": 4562,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4294,
											"end": 4568,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5685,
											"end": 5962,
											"name": "tag",
											"source": 7,
											"value": "318"
										},
										{
											"begin": 5685,
											"end": 5962,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5752,
											"end": 5758,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5805,
											"end": 5807,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5793,
											"end": 5802,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5784,
											"end": 5791,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5780,
											"end": 5803,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5776,
											"end": 5808,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5773,
											"end": 5825,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5773,
											"end": 5825,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 5773,
											"end": 5825,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5821,
											"end": 5822,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5818,
											"end": 5819,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5811,
											"end": 5823,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5773,
											"end": 5825,
											"name": "tag",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 5773,
											"end": 5825,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5853,
											"end": 5862,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5847,
											"end": 5863,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5906,
											"end": 5911,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 5912,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5892,
											"end": 5913,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5885,
											"end": 5890,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5882,
											"end": 5914,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5872,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "326"
										},
										{
											"begin": 5872,
											"end": 5932,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5928,
											"end": 5929,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5925,
											"end": 5926,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5918,
											"end": 5930,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7143,
											"end": 7401,
											"name": "tag",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 7143,
											"end": 7401,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7215,
											"end": 7216,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "tag",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7239,
											"end": 7245,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7236,
											"end": 7237,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7233,
											"end": 7246,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7315,
											"end": 7326,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7315,
											"end": 7326,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7315,
											"end": 7326,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7309,
											"end": 7327,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7296,
											"end": 7307,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7296,
											"end": 7307,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7296,
											"end": 7307,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7289,
											"end": 7328,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7261,
											"end": 7263,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7254,
											"end": 7264,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "tag",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 7225,
											"end": 7338,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7356,
											"end": 7362,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7353,
											"end": 7354,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7350,
											"end": 7363,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7347,
											"end": 7395,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7347,
											"end": 7395,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 7347,
											"end": 7395,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7391,
											"end": 7392,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7373,
											"end": 7389,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7373,
											"end": 7389,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7366,
											"end": 7393,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7143,
											"end": 7401,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7406,
											"end": 7680,
											"name": "tag",
											"source": 7,
											"value": "339"
										},
										{
											"begin": 7406,
											"end": 7680,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7535,
											"end": 7538,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7573,
											"end": 7579,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7567,
											"end": 7580,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7589,
											"end": 7642,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 7635,
											"end": 7641,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7630,
											"end": 7633,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7623,
											"end": 7627,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7615,
											"end": 7621,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7611,
											"end": 7628,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7589,
											"end": 7642,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 7589,
											"end": 7642,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7589,
											"end": 7642,
											"name": "tag",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 7589,
											"end": 7642,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7658,
											"end": 7674,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7658,
											"end": 7674,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7658,
											"end": 7674,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7658,
											"end": 7674,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7658,
											"end": 7674,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7406,
											"end": 7680,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7406,
											"end": 7680,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7685,
											"end": 8068,
											"name": "tag",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 7685,
											"end": 8068,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7834,
											"end": 7836,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7823,
											"end": 7832,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7816,
											"end": 7837,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7797,
											"end": 7801,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7866,
											"end": 7872,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7860,
											"end": 7873,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7909,
											"end": 7915,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7904,
											"end": 7906,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7893,
											"end": 7902,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7889,
											"end": 7907,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7882,
											"end": 7916,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7925,
											"end": 7991,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 7984,
											"end": 7990,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7979,
											"end": 7981,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7968,
											"end": 7977,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7959,
											"end": 7961,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7951,
											"end": 7957,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7947,
											"end": 7962,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7925,
											"end": 7991,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 7925,
											"end": 7991,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7925,
											"end": 7991,
											"name": "tag",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 7925,
											"end": 7991,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8052,
											"end": 8054,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 8031,
											"end": 8046,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8027,
											"end": 8056,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8012,
											"end": 8057,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8012,
											"end": 8057,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8012,
											"end": 8057,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8012,
											"end": 8057,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8059,
											"end": 8061,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8008,
											"end": 8062,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8008,
											"end": 8062,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7685,
											"end": 8068,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7685,
											"end": 8068,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_blockTimestamp()": "c63aa3e7",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop(address)": "65f8c6c5",
							"getVoters(address)": "2d15cc04",
							"getVotingResult()": "671d2b75",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"retractVote()": "070c8b74",
							"stake(address,uint256,uint256)": "0c51b88f",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"startVoting()": "1ec6b60a",
							"stopVoting()": "fab2f86b",
							"token_address()": "8c8e8fee",
							"totalVoters()": "5f5300ff",
							"transferOwnership(address)": "f2fde38b",
							"vote()": "632a9a52",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__notAVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Function__votingNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__cannotStakeNothing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__alreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notEnoughVoters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__notYetVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Voting__votingIsRunning\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getVoters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotingResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retractVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}],\"Staking__cannotStakeNothing()\":[{\"notice\":\"Error handling message for Staking functions\"}],\"Voting__votingIsRunning()\":[{\"notice\":\"Error handling message for Voting functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(address,uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stakable-2.0.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Stakable-2.0.sol\":{\"keccak256\":\"0x5109fa58fad29fdc0f670e8ecdd4e721eccff5e80695135da35572e093b0f315\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://7a8d0ec8e1ae16a183f38ce969adf746fb5a847282bbf271809bd9a0c6fec291\",\"dweb:/ipfs/QmYq41nAogi4ggpisnj3sAVSXbcscBbbL6hmfPyz2wxM1U\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 815,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 817,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 819,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 821,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 823,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 825,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "_votingId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 827,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "totalVoters",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 832,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "voters",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(Voter)811_storage)"
							},
							{
								"astId": 836,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "votedUsers",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 838,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "token_address",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							},
							{
								"astId": 903,
								"contract": "contracts/Stakable-2.0.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_struct(Stake)889_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)889_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)889_storage"
							},
							"t_mapping(t_address,t_struct(Voter)811_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)811_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)889_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 876,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 878,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 880,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 882,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 884,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 886,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 888,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)811_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Voter",
								"members": [
									{
										"astId": 806,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 810,
										"contract": "contracts/Stakable-2.0.sol:Staking",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							],
							"Staking__cannotStakeNothing()": [
								{
									"notice": "Error handling message for Staking functions"
								}
							],
							"Voting__votingIsRunning()": [
								{
									"notice": "Error handling message for Voting functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(address,uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Stakable-2.0.sol": {
				"ast": {
					"absolutePath": "contracts/Stakable-2.0.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Airdrop__claimableOnceAWeek": [
							791
						],
						"Context": [
							763
						],
						"Function__notAVoter": [
							773
						],
						"Function__notAuthorized": [
							771
						],
						"Function__votingNotAvailable": [
							775
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Staking": [
							1699
						],
						"Staking__airdropExceed20Percent": [
							784
						],
						"Staking__cannotStakeNothing": [
							778
						],
						"Staking__noStakingFound": [
							786
						],
						"Staking__penaltyExceed3Percent": [
							782
						],
						"Staking__userIsStaker": [
							780
						],
						"Staking_noStakingPackageFound": [
							788
						],
						"Voting__alreadyVoted": [
							796
						],
						"Voting__notEnoughVoters": [
							800
						],
						"Voting__notYetVoted": [
							798
						],
						"Voting__votingIsRunning": [
							794
						]
					},
					"id": 1700,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1700,
							"sourceUnit": 447,
							"src": "64:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1700,
							"sourceUnit": 145,
							"src": "130:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1700,
							"sourceUnit": 105,
							"src": "193:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "247:54:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "308:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "331:2:6"
							},
							"src": "302:32:6"
						},
						{
							"id": 773,
							"name": "Function__notAVoter",
							"nameLocation": "341:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 772,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "360:2:6"
							},
							"src": "335:28:6"
						},
						{
							"id": 775,
							"name": "Function__votingNotAvailable",
							"nameLocation": "370:28:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 774,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "398:2:6"
							},
							"src": "364:37:6"
						},
						{
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "403:63:6",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 778,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "473:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "500:2:6"
							},
							"src": "467:36:6"
						},
						{
							"id": 780,
							"name": "Staking__userIsStaker",
							"nameLocation": "510:21:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 779,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "531:2:6"
							},
							"src": "504:30:6"
						},
						{
							"id": 782,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "541:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 781,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "571:2:6"
							},
							"src": "535:39:6"
						},
						{
							"id": 784,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "581:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 783,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "612:2:6"
							},
							"src": "575:40:6"
						},
						{
							"id": 786,
							"name": "Staking__noStakingFound",
							"nameLocation": "622:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 785,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "645:2:6"
							},
							"src": "616:32:6"
						},
						{
							"id": 788,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "655:29:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 787,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "684:2:6"
							},
							"src": "649:38:6"
						},
						{
							"documentation": {
								"id": 789,
								"nodeType": "StructuredDocumentation",
								"src": "689:63:6",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 791,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "759:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 790,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "786:2:6"
							},
							"src": "753:36:6"
						},
						{
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "791:62:6",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 794,
							"name": "Voting__votingIsRunning",
							"nameLocation": "860:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 793,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "883:2:6"
							},
							"src": "854:32:6"
						},
						{
							"id": 796,
							"name": "Voting__alreadyVoted",
							"nameLocation": "893:20:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 795,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "913:2:6"
							},
							"src": "887:29:6"
						},
						{
							"id": 798,
							"name": "Voting__notYetVoted",
							"nameLocation": "923:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 797,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "942:2:6"
							},
							"src": "917:28:6"
						},
						{
							"id": 800,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "952:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 799,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "975:2:6"
							},
							"src": "946:32:6"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 801,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "1000:15:6"
									},
									"id": 802,
									"nodeType": "InheritanceSpecifier",
									"src": "1000:15:6"
								},
								{
									"baseName": {
										"id": 803,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "1017:7:6"
									},
									"id": 804,
									"nodeType": "InheritanceSpecifier",
									"src": "1017:7:6"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1699,
							"linearizedBaseContracts": [
								1699,
								104,
								763,
								144
							],
							"name": "Staking",
							"nameLocation": "989:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Staking.Voter",
									"id": 811,
									"members": [
										{
											"constant": false,
											"id": 806,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1224:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1219:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 805,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1219:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 810,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1270:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1245:30:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 809,
												"keyType": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1253:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1245:24:6",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 808,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1264:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1203:5:6",
									"nodeType": "StructDefinition",
									"scope": 1699,
									"src": "1196:86:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 815,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1325:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1288:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 814,
										"keyType": {
											"id": 812,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1296:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1288:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 813,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1307:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 817,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1361:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1346:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 816,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1346:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 819,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1400:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1385:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 818,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1385:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 821,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1432:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1417:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 820,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1417:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 823,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1465:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1451:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 822,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1451:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 825,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1501:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1484:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 824,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1484:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 827,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1531:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1516:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 826,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1516:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 832,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1581:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1548:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
										"typeString": "mapping(address => struct Staking.Voter)"
									},
									"typeName": {
										"id": 831,
										"keyType": {
											"id": 828,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1556:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1548:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
											"typeString": "mapping(address => struct Staking.Voter)"
										},
										"valueType": {
											"id": 830,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 829,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 811,
												"src": "1567:5:6"
											},
											"referencedDeclaration": 811,
											"src": "1567:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$811_storage_ptr",
												"typeString": "struct Staking.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 836,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1628:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1593:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 835,
										"keyType": {
											"id": 833,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1601:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1593:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 834,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1612:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 838,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1660:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "1645:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 837,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1645:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "1707:274:6",
										"statements": [
											{
												"expression": {
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 843,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "1779:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1800:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1779:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 846,
												"nodeType": "ExpressionStatement",
												"src": "1779:23:6"
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 847,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "1812:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 848,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1826:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1812:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "1812:16:6"
											},
											{
												"expression": {
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 851,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "1839:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 852,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "1855:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1839:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "1839:21:6"
											},
											{
												"expression": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 855,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1871:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 857,
														"indexExpression": {
															"hexValue": "3930",
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1886:7:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1871:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 858,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1897:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1871:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 860,
												"nodeType": "ExpressionStatement",
												"src": "1871:27:6"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 861,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1908:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 863,
														"indexExpression": {
															"hexValue": "313830",
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1923:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1908:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1935:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1908:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "1908:28:6"
											},
											{
												"expression": {
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 867,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1946:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 869,
														"indexExpression": {
															"hexValue": "333635",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1961:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1946:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1973:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "1946:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 872,
												"nodeType": "ExpressionStatement",
												"src": "1946:28:6"
											}
										]
									},
									"id": 874,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1700:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1692:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1691:15:6"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1707:0:6"
									},
									"scope": 1699,
									"src": "1680:301:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 889,
									"members": [
										{
											"constant": false,
											"id": 876,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2245:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2237:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 875,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2237:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 878,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2269:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2261:13:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2261:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 880,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2292:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2284:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 879,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2284:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 882,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2319:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2311:19:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2311:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 884,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2447:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2439:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 883,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2439:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 886,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2474:16:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2466:24:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 885,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2466:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 888,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2508:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2500:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 887,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2500:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2221:5:6",
									"nodeType": "StructDefinition",
									"scope": 1699,
									"src": "2214:316:6",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 897,
									"members": [
										{
											"constant": false,
											"id": 891,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2707:12:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2699:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 890,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2699:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 893,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2737:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2729:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 892,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2729:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 896,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2760:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2754:11:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 895,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 894,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 889,
													"src": "2754:5:6"
												},
												"referencedDeclaration": 889,
												"src": "2754:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2674:14:6",
									"nodeType": "StructDefinition",
									"scope": 1699,
									"src": "2667:105:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "2778:111:6",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 903,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2929:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1699,
									"src": "2894:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 902,
										"keyType": {
											"id": 899,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2902:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2894:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 901,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 900,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 889,
												"src": "2913:5:6"
											},
											"referencedDeclaration": 889,
											"src": "2913:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "2948:124:6",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 914,
									"name": "Staked",
									"nameLocation": "3083:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3115:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3099:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3137:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3129:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3129:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3161:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3153:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3153:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "3188:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3180:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3089:116:6"
									},
									"src": "3077:129:6"
								},
								{
									"anonymous": false,
									"id": 918,
									"name": "PenaltyChanged",
									"nameLocation": "3218:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3241:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "3233:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:6"
									},
									"src": "3212:37:6"
								},
								{
									"anonymous": false,
									"id": 922,
									"name": "AirdropChanged",
									"nameLocation": "3260:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3283:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3275:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3275:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:16:6"
									},
									"src": "3254:37:6"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "3437:197:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 925,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "3534:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 928,
															"indexExpression": {
																"expression": {
																	"id": 926,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3541:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3541:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3534:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "3534:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3568:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3534:39:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 936,
												"nodeType": "IfStatement",
												"src": "3530:98:6",
												"trueBody": {
													"id": 935,
													"nodeType": "Block",
													"src": "3575:53:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 932,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "3596:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3596:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 934,
															"nodeType": "RevertStatement",
															"src": "3589:28:6"
														}
													]
												}
											}
										]
									},
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3412:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3420:2:6"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3437:0:6"
									},
									"scope": 1699,
									"src": "3403:231:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 944,
										"nodeType": "Block",
										"src": "3659:38:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 940,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 938,
														"src": "3669:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3669:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "3669:10:6"
											},
											{
												"id": 943,
												"nodeType": "PlaceholderStatement",
												"src": "3689:1:6"
											}
										]
									},
									"id": 945,
									"name": "isVoter",
									"nameLocation": "3649:7:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3656:2:6"
									},
									"src": "3640:57:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "3747:160:6",
										"statements": [
											{
												"condition": {
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3823:14:6",
													"subExpression": {
														"id": 948,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "3824:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 954,
												"nodeType": "IfStatement",
												"src": "3819:82:6",
												"trueBody": {
													"id": 953,
													"nodeType": "Block",
													"src": "3839:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 950,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "3860:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3860:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 952,
															"nodeType": "RevertStatement",
															"src": "3853:37:6"
														}
													]
												}
											}
										]
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "3712:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3730:2:6"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3747:0:6"
									},
									"scope": 1699,
									"src": "3703:204:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "3941:48:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 958,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 956,
														"src": "3951:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3951:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "3951:20:6"
											},
											{
												"id": 961,
												"nodeType": "PlaceholderStatement",
												"src": "3981:1:6"
											}
										]
									},
									"id": 963,
									"name": "votingStatusTrue",
									"nameLocation": "3922:16:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3938:2:6"
									},
									"src": "3913:76:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "4434:1299:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 977,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 968,
														"src": "4558:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4568:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4558:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 984,
												"nodeType": "IfStatement",
												"src": "4554:78:6",
												"trueBody": {
													"id": 983,
													"nodeType": "Block",
													"src": "4571:61:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 980,
																	"name": "Staking__cannotStakeNothing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "4592:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4592:29:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 982,
															"nodeType": "RevertStatement",
															"src": "4585:36:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 985,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "4717:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 987,
															"indexExpression": {
																"id": 986,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 966,
																"src": "4730:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4717:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "4717:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 989,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4746:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4717:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 995,
												"nodeType": "IfStatement",
												"src": "4713:91:6",
												"trueBody": {
													"id": 994,
													"nodeType": "Block",
													"src": "4749:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 991,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "4770:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4770:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 993,
															"nodeType": "RevertStatement",
															"src": "4763:30:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 996,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "4818:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 998,
														"indexExpression": {
															"id": 997,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 970,
															"src": "4833:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4818:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 999,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4849:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4818:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1005,
												"nodeType": "IfStatement",
												"src": "4814:101:6",
												"trueBody": {
													"id": 1004,
													"nodeType": "Block",
													"src": "4852:63:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1001,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "4873:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4873:31:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1003,
															"nodeType": "RevertStatement",
															"src": "4866:38:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1008,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1006,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "4925:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1007,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4940:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4925:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1009,
												"nodeType": "ExpressionStatement",
												"src": "4925:16:6"
											},
											{
												"expression": {
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 1010,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "4951:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 1012,
															"indexExpression": {
																"id": 1011,
																"name": "user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 966,
																"src": "4958:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4951:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 1013,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "4951:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1014,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4978:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4951:31:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1016,
												"nodeType": "ExpressionStatement",
												"src": "4951:31:6"
											},
											{
												"assignments": [
													1018
												],
												"declarations": [
													{
														"constant": false,
														"id": 1018,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "5088:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1066,
														"src": "5080:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1017,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5080:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1021,
												"initialValue": {
													"expression": {
														"id": 1019,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "5100:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "5100:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5080:35:6"
											},
											{
												"expression": {
													"id": 1039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1022,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "5244:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1024,
														"indexExpression": {
															"id": 1023,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5257:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5244:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1026,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 968,
																"src": "5284:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1027,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1018,
																"src": "5304:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1028,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 815,
																	"src": "5327:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1030,
																"indexExpression": {
																	"id": 1029,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 970,
																	"src": "5342:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5327:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1031,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 970,
																			"src": "5369:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1032,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1018,
																			"src": "5383:9:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5369:23:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1034,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5368:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1035,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5407:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1036,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5422:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1037,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5437:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1025,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "5265:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$889_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1038,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5265:183:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "5244:204:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1040,
												"nodeType": "ExpressionStatement",
												"src": "5244:204:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1045,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "5506:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1044,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5499:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1046,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5499:21:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1047,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5534:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1048,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5534:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1051,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5566:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1699",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1699",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1050,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5558:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1049,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5558:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1052,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5558:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1053,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "5585:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1041,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "5459:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1043,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "5459:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1054,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5459:142:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1055,
												"nodeType": "ExpressionStatement",
												"src": "5459:142:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1057,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5675:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1058,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "5681:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1059,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1018,
															"src": "5689:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1060,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 970,
																		"src": "5701:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1061,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1018,
																		"src": "5715:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5701:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1063,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5700:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1056,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "5668:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5668:58:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1065,
												"nodeType": "EmitStatement",
												"src": "5663:63:6"
											}
										]
									},
									"documentation": {
										"id": 964,
										"nodeType": "StructuredDocumentation",
										"src": "4101:200:6",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "0c51b88f",
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 973,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 972,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "4411:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4411:12:6"
										},
										{
											"id": 975,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 974,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4424:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4424:9:6"
										}
									],
									"name": "stake",
									"nameLocation": "4315:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4338:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "4330:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4330:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4360:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "4352:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4352:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4384:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "4376:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4376:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4320:81:6"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4434:0:6"
									},
									"scope": 1699,
									"src": "4306:1427:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1090,
										"nodeType": "Block",
										"src": "5800:245:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1074,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "5888:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 1075,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5897:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "5888:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1081,
												"nodeType": "IfStatement",
												"src": "5884:81:6",
												"trueBody": {
													"id": 1080,
													"nodeType": "Block",
													"src": "5901:64:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1077,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "5922:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1078,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5922:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1079,
															"nodeType": "RevertStatement",
															"src": "5915:39:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1082,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "5974:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1083,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1069,
														"src": "5995:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5974:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1085,
												"nodeType": "ExpressionStatement",
												"src": "5974:27:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1087,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1069,
															"src": "6031:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1086,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "6016:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6016:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1089,
												"nodeType": "EmitStatement",
												"src": "6011:27:6"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1091,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1072,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1071,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "5790:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5790:9:6"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5748:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5773:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "5765:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5765:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5764:16:6"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5800:0:6"
									},
									"scope": 1699,
									"src": "5739:306:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1109,
										"nodeType": "Block",
										"src": "6161:121:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1101,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1098,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6232:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1099,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6232:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1100,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1093,
																				"src": "6250:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6232:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1102,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6231:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1103,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6259:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "6231:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1105,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6230:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6267:8:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "6230:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1097,
												"id": 1108,
												"nodeType": "Return",
												"src": "6223:52:6"
											}
										]
									},
									"id": 1110,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "6060:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "6094:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "6086:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6086:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6085:15:6"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1110,
												"src": "6148:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6148:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6147:9:6"
									},
									"scope": 1699,
									"src": "6051:231:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1140,
										"nodeType": "Block",
										"src": "6404:321:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1118,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1113,
															"src": "6418:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1119,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "6418:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1120,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6439:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6418:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1125,
												"nodeType": "IfStatement",
												"src": "6414:61:6",
												"trueBody": {
													"id": 1124,
													"nodeType": "Block",
													"src": "6442:33:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1122,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6463:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1117,
															"id": 1123,
															"nodeType": "Return",
															"src": "6456:8:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1135,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1126,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1113,
																			"src": "6592:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1127,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "6592:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1128,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1113,
																			"src": "6628:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1129,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 880,
																		"src": "6628:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6592:56:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1132,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1113,
																				"src": "6693:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1133,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 878,
																			"src": "6693:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1131,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1110,
																		"src": "6667:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1134,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6667:43:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6592:118:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1136,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6591:120:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1137,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6714:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6591:127:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1117,
												"id": 1139,
												"nodeType": "Return",
												"src": "6572:146:6"
											}
										]
									},
									"id": 1141,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6297:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6332:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "6319:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1112,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1111,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 889,
														"src": "6319:5:6"
													},
													"referencedDeclaration": 889,
													"src": "6319:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6318:25:6"
									},
									"returnParameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1141,
												"src": "6391:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6391:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6390:9:6"
									},
									"scope": 1699,
									"src": "6288:437:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1181,
										"nodeType": "Block",
										"src": "6870:220:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1152,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1143,
														"src": "6884:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6894:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6884:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1160,
												"nodeType": "IfStatement",
												"src": "6880:55:6",
												"trueBody": {
													"id": 1159,
													"nodeType": "Block",
													"src": "6897:38:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 1155,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6919:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 1156,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6922:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1157,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6918:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 1151,
															"id": 1158,
															"nodeType": "Return",
															"src": "6911:13:6"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1161,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "6965:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1167,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1164,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1162,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1143,
																						"src": "6976:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1163,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "6985:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6976:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1165,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6975:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1166,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7007:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "6975:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1168,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6974:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6965:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1178,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1170,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1145,
																"src": "7026:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1176,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1173,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1171,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1145,
																						"src": "7037:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1172,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "7046:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7037:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1174,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7036:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1175,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7068:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "7036:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1177,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7035:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7026:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1179,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6951:132:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1151,
												"id": 1180,
												"nodeType": "Return",
												"src": "6944:139:6"
											}
										]
									},
									"id": 1182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "6740:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6777:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "6769:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6769:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "6793:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "6785:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6785:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6768:32:6"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "6848:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6848:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "6857:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6857:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6847:18:6"
									},
									"scope": 1699,
									"src": "6731:359:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1268,
										"nodeType": "Block",
										"src": "7593:937:6",
										"statements": [
											{
												"assignments": [
													1190
												],
												"declarations": [
													{
														"constant": false,
														"id": 1190,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "7724:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1268,
														"src": "7711:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1189,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1188,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "7711:5:6"
															},
															"referencedDeclaration": 889,
															"src": "7711:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1195,
												"initialValue": {
													"baseExpression": {
														"id": 1191,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "7737:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1194,
													"indexExpression": {
														"expression": {
															"id": 1192,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7750:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1193,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7750:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7737:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7711:50:6"
											},
											{
												"assignments": [
													1197
												],
												"declarations": [
													{
														"constant": false,
														"id": 1197,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7779:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1268,
														"src": "7771:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1196,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7771:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1201,
												"initialValue": {
													"arguments": [
														{
															"id": 1199,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1190,
															"src": "7810:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1198,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "7788:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7788:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7771:50:6"
											},
											{
												"expression": {
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7832:31:6",
													"subExpression": {
														"baseExpression": {
															"id": 1202,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "7839:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1205,
														"indexExpression": {
															"expression": {
																"id": 1203,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7852:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7852:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7839:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1207,
												"nodeType": "ExpressionStatement",
												"src": "7832:31:6"
											},
											{
												"expression": {
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1208,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "7873:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7888:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7873:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1211,
												"nodeType": "ExpressionStatement",
												"src": "7873:16:6"
											},
											{
												"expression": {
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7899:42:6",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1212,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "7906:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1215,
																"indexExpression": {
																	"expression": {
																		"id": 1213,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7913:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1214,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7913:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7906:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1216,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "7906:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1218,
														"indexExpression": {
															"id": 1217,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "7931:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7906:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1220,
												"nodeType": "ExpressionStatement",
												"src": "7899:42:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1221,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1190,
															"src": "7956:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1222,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "7956:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1223,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7981:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1224,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7981:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7956:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1266,
													"nodeType": "Block",
													"src": "8350:174:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1255,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "8411:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1254,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8404:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1256,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8404:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1257,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8443:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8443:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1262,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1259,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1190,
																						"src": "8472:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1260,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 876,
																					"src": "8472:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1261,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1197,
																					"src": "8492:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8472:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1263,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8471:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1251,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8364:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8364:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8364:149:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1265,
															"nodeType": "ExpressionStatement",
															"src": "8364:149:6"
														}
													]
												},
												"id": 1267,
												"nodeType": "IfStatement",
												"src": "7952:572:6",
												"trueBody": {
													"id": 1250,
													"nodeType": "Block",
													"src": "7998:346:6",
													"statements": [
														{
															"assignments": [
																1227,
																1229
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1227,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "8038:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1250,
																	"src": "8030:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1226,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8030:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1229,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "8078:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1250,
																	"src": "8070:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1228,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8070:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1235,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1231,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1190,
																			"src": "8138:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1232,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "8138:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1233,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1197,
																		"src": "8157:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1230,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1182,
																	"src": "8109:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1234,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8109:55:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8012:152:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1240,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "8226:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1239,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8219:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8219:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1242,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8258:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1243,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8258:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1246,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1244,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1227,
																					"src": "8287:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1245,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1229,
																					"src": "8304:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8287:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1247,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8286:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1236,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8179:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1238,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8179:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8179:154:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1249,
															"nodeType": "ExpressionStatement",
															"src": "8179:154:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1183,
										"nodeType": "StructuredDocumentation",
										"src": "7096:335:6",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1269,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1186,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1185,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "7580:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "7580:12:6"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7555:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7568:2:6"
									},
									"returnParameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7593:0:6"
									},
									"scope": 1699,
									"src": "7546:984:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1385,
										"nodeType": "Block",
										"src": "8602:958:6",
										"statements": [
											{
												"assignments": [
													1277
												],
												"declarations": [
													{
														"constant": false,
														"id": 1277,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8625:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1385,
														"src": "8612:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1276,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1275,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "8612:5:6"
															},
															"referencedDeclaration": 889,
															"src": "8612:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1282,
												"initialValue": {
													"baseExpression": {
														"id": 1278,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "8638:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1281,
													"indexExpression": {
														"expression": {
															"id": 1279,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8651:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1280,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8651:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8638:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8612:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1283,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1277,
															"src": "8737:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1284,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "8737:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1285,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8758:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8737:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1291,
												"nodeType": "IfStatement",
												"src": "8733:85:6",
												"trueBody": {
													"id": 1290,
													"nodeType": "Block",
													"src": "8761:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1287,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "8782:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1288,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8782:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1289,
															"nodeType": "RevertStatement",
															"src": "8775:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1294
												],
												"declarations": [
													{
														"constant": false,
														"id": 1294,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "8849:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1385,
														"src": "8827:29:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1293,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1292,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 897,
																"src": "8827:14:6"
															},
															"referencedDeclaration": 897,
															"src": "8827:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1300,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1296,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8874:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1297,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8877:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1298,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1277,
															"src": "8880:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1295,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "8859:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$897_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8859:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8827:64:6"
											},
											{
												"assignments": [
													1302
												],
												"declarations": [
													{
														"constant": false,
														"id": 1302,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8910:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1385,
														"src": "8902:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1301,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8902:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1306,
												"initialValue": {
													"arguments": [
														{
															"id": 1304,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1277,
															"src": "8941:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1303,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1141,
														"src": "8919:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8919:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8902:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1307,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1294,
																"src": "8967:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "8967:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1309,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "8967:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1310,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8995:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8995:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8967:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1335,
												"nodeType": "IfStatement",
												"src": "8963:214:6",
												"trueBody": {
													"id": 1334,
													"nodeType": "Block",
													"src": "9012:165:6",
													"statements": [
														{
															"expression": {
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1313,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1294,
																		"src": "9026:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1315,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 893,
																	"src": "9026:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1319,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1316,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1277,
																									"src": "9062:10:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1317,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 876,
																								"src": "9062:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1318,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "9082:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9062:38:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1320,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9061:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1321,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9104:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9061:47:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1323,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9060:49:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1329,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1326,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1324,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1302,
																								"src": "9130:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1325,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "9139:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9130:27:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1327,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9129:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1328,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9161:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9129:36:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1330,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9128:38:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9060:106:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9026:140:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1333,
															"nodeType": "ExpressionStatement",
															"src": "9026:140:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1337,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1277,
																	"src": "9205:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1338,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 888,
																"src": "9205:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1336,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1446,
															"src": "9191:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1339,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9191:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9235:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9191:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1366,
													"nodeType": "Block",
													"src": "9377:59:6",
													"statements": [
														{
															"expression": {
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1358,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1294,
																			"src": "9391:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1361,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "9391:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "9391:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9424:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9391:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1365,
															"nodeType": "ExpressionStatement",
															"src": "9391:34:6"
														}
													]
												},
												"id": 1367,
												"nodeType": "IfStatement",
												"src": "9187:249:6",
												"trueBody": {
													"id": 1357,
													"nodeType": "Block",
													"src": "9238:133:6",
													"statements": [
														{
															"assignments": [
																1343
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1343,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "9260:7:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1357,
																	"src": "9252:15:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1342,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9252:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1348,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1345,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1277,
																			"src": "9288:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1346,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "9288:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1344,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1464,
																	"src": "9270:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9270:36:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9252:54:6"
														},
														{
															"expression": {
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1349,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1294,
																			"src": "9320:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1352,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "9320:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1353,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "9320:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1354,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1343,
																	"src": "9353:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9320:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1356,
															"nodeType": "ExpressionStatement",
															"src": "9320:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1368,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1294,
																"src": "9446:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1371,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "9446:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1372,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "9446:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1373,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "9472:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9446:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1375,
												"nodeType": "ExpressionStatement",
												"src": "9446:32:6"
											},
											{
												"expression": {
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1376,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1294,
															"src": "9488:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1378,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 891,
														"src": "9488:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1379,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1277,
															"src": "9511:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1380,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "9511:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9488:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1382,
												"nodeType": "ExpressionStatement",
												"src": "9488:40:6"
											},
											{
												"expression": {
													"id": 1383,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1294,
													"src": "9546:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1274,
												"id": 1384,
												"nodeType": "Return",
												"src": "9539:14:6"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1386,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8545:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8553:2:6"
									},
									"returnParameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1386,
												"src": "8579:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1272,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1271,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "8579:14:6"
													},
													"referencedDeclaration": 897,
													"src": "8579:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8578:23:6"
									},
									"scope": 1699,
									"src": "8536:1024:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1396,
										"nodeType": "Block",
										"src": "9715:47:6",
										"statements": [
											{
												"expression": {
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1391,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "9725:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1392,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9740:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9740:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9725:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1395,
												"nodeType": "ExpressionStatement",
												"src": "9725:30:6"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1397,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1389,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1388,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9705:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9705:9:6"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "9681:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9693:2:6"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9715:0:6"
									},
									"scope": 1699,
									"src": "9672:90:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1420,
										"nodeType": "Block",
										"src": "9836:166:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1404,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1399,
														"src": "9850:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 1405,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9859:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "9850:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1411,
												"nodeType": "IfStatement",
												"src": "9846:83:6",
												"trueBody": {
													"id": 1410,
													"nodeType": "Block",
													"src": "9864:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1407,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "9885:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9885:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1409,
															"nodeType": "RevertStatement",
															"src": "9878:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1412,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "9938:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1413,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1399,
														"src": "9952:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9938:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1415,
												"nodeType": "ExpressionStatement",
												"src": "9938:20:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1417,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "9988:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1416,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "9973:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9973:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1419,
												"nodeType": "EmitStatement",
												"src": "9968:27:6"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1421,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1402,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1401,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9826:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9826:9:6"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "9777:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9809:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "9801:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9801:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9800:16:6"
									},
									"returnParameters": {
										"id": 1403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9836:0:6"
									},
									"scope": 1699,
									"src": "9768:234:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1429,
										"nodeType": "Block",
										"src": "10065:39:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1426,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "10082:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "10082:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1425,
												"id": 1428,
												"nodeType": "Return",
												"src": "10075:22:6"
											}
										]
									},
									"functionSelector": "c63aa3e7",
									"id": 1430,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nameLocation": "10017:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10032:2:6"
									},
									"returnParameters": {
										"id": 1425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1430,
												"src": "10056:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10056:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10055:9:6"
									},
									"scope": 1699,
									"src": "10008:96:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1445,
										"nodeType": "Block",
										"src": "10182:62:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1437,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10200:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10200:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1439,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1432,
																	"src": "10218:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10200:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1441,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10199:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1442,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10231:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "10199:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1436,
												"id": 1444,
												"nodeType": "Return",
												"src": "10192:45:6"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "10119:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "10141:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "10133:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10133:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10132:19:6"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "10173:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10173:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10172:9:6"
									},
									"scope": 1699,
									"src": "10110:134:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1463,
										"nodeType": "Block",
										"src": "10358:71:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1458,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1455,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1453,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1448,
																				"src": "10377:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1454,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "10391:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10377:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1456,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10376:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1457,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10406:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10376:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1459,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10375:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10414:8:6",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10375:47:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1452,
												"id": 1462,
												"nodeType": "Return",
												"src": "10368:54:6"
											}
										]
									},
									"id": 1464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "10259:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1448,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "10285:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "10277:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10277:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10276:21:6"
									},
									"returnParameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1464,
												"src": "10345:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1450,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10345:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10344:9:6"
									},
									"scope": 1699,
									"src": "10250:179:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1520,
										"nodeType": "Block",
										"src": "10480:548:6",
										"statements": [
											{
												"assignments": [
													1471
												],
												"declarations": [
													{
														"constant": false,
														"id": 1471,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10556:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1520,
														"src": "10542:20:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1470,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1469,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "10542:5:6"
															},
															"referencedDeclaration": 889,
															"src": "10542:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1475,
												"initialValue": {
													"baseExpression": {
														"id": 1472,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "10565:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1474,
													"indexExpression": {
														"id": 1473,
														"name": "user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1466,
														"src": "10578:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10565:18:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10542:41:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1476,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1471,
															"src": "10598:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1477,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "10598:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1478,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10614:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10598:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1519,
												"nodeType": "IfStatement",
												"src": "10594:428:6",
												"trueBody": {
													"id": 1518,
													"nodeType": "Block",
													"src": "10617:405:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1485,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1481,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1471,
																				"src": "10649:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 1482,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 888,
																			"src": "10649:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1480,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1446,
																		"src": "10635:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10635:37:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10676:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10635:42:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1490,
															"nodeType": "IfStatement",
															"src": "10631:117:6",
															"trueBody": {
																"id": 1489,
																"nodeType": "Block",
																"src": "10679:69:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1486,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 791,
																				"src": "10704:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10704:29:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1488,
																		"nodeType": "RevertStatement",
																		"src": "10697:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1491,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1471,
																		"src": "10762:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1493,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "10762:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1494,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10788:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10762:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1496,
															"nodeType": "ExpressionStatement",
															"src": "10762:27:6"
														},
														{
															"expression": {
																"id": 1502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1497,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1471,
																		"src": "10803:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1499,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "10803:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1500,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10828:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1501,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10828:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10803:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1503,
															"nodeType": "ExpressionStatement",
															"src": "10803:40:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1508,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "10905:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1507,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "10898:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10898:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1510,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10937:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10937:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1513,
																					"name": "staker",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1471,
																					"src": "10983:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1514,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 876,
																				"src": "10983:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1512,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1464,
																			"src": "10965:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1515,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10965:32:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1504,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "10858:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1506,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "10858:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1516,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10858:153:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1517,
															"nodeType": "ExpressionStatement",
															"src": "10858:153:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "65f8c6c5",
									"id": 1521,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimAirdrop",
									"nameLocation": "10444:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1466,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "10465:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1521,
												"src": "10457:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10457:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10456:14:6"
									},
									"returnParameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10480:0:6"
									},
									"scope": 1699,
									"src": "10435:593:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1542,
										"nodeType": "Block",
										"src": "11251:81:6",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"expression": {
																"baseExpression": {
																	"id": 1530,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "11269:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1532,
																"indexExpression": {
																	"id": 1531,
																	"name": "user",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1523,
																	"src": "11276:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11269:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1533,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "votingRight",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 806,
															"src": "11269:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"baseExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 1534,
																		"name": "voters",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 832,
																		"src": "11295:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																			"typeString": "mapping(address => struct Staking.Voter storage ref)"
																		}
																	},
																	"id": 1536,
																	"indexExpression": {
																		"id": 1535,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1523,
																		"src": "11302:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11295:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Voter_$811_storage",
																		"typeString": "struct Staking.Voter storage ref"
																	}
																},
																"id": 1537,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "voted",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 810,
																"src": "11295:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																	"typeString": "mapping(uint256 => bool)"
																}
															},
															"id": 1539,
															"indexExpression": {
																"id": 1538,
																"name": "_votingId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 825,
																"src": "11314:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11295:29:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 1540,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "11268:57:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$",
														"typeString": "tuple(bool,bool)"
													}
												},
												"functionReturnParameters": 1529,
												"id": 1541,
												"nodeType": "Return",
												"src": "11261:64:6"
											}
										]
									},
									"functionSelector": "2d15cc04",
									"id": 1543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getVoters",
									"nameLocation": "11192:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "11210:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "11202:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1522,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11202:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11201:14:6"
									},
									"returnParameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "11239:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1525,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11239:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1543,
												"src": "11245:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1527,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11245:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11238:12:6"
									},
									"scope": 1699,
									"src": "11183:149:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1566,
										"nodeType": "Block",
										"src": "11453:155:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1550,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "11467:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1551,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11484:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11467:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1557,
												"nodeType": "IfStatement",
												"src": "11463:84:6",
												"trueBody": {
													"id": 1556,
													"nodeType": "Block",
													"src": "11490:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1553,
																	"name": "Voting__votingIsRunning",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 794,
																	"src": "11511:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11511:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1555,
															"nodeType": "RevertStatement",
															"src": "11504:32:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1558,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "11557:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1559,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11573:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11557:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1561,
												"nodeType": "ExpressionStatement",
												"src": "11557:20:6"
											},
											{
												"expression": {
													"id": 1564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1562,
														"name": "_votingId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "11587:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1563,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11600:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "11587:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1565,
												"nodeType": "ExpressionStatement",
												"src": "11587:14:6"
											}
										]
									},
									"functionSelector": "1ec6b60a",
									"id": 1567,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1546,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1545,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "11430:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11430:12:6"
										},
										{
											"id": 1548,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1547,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "11443:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11443:9:6"
										}
									],
									"name": "startVoting",
									"nameLocation": "11407:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11418:2:6"
									},
									"returnParameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11453:0:6"
									},
									"scope": 1699,
									"src": "11398:210:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1606,
										"nodeType": "Block",
										"src": "11675:208:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1576,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "11689:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1579,
																"indexExpression": {
																	"expression": {
																		"id": 1577,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11696:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1578,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11696:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11689:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1580,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "11689:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1582,
														"indexExpression": {
															"id": 1581,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "11714:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11689:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 1583,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11728:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11689:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1589,
												"nodeType": "IfStatement",
												"src": "11685:103:6",
												"trueBody": {
													"id": 1588,
													"nodeType": "Block",
													"src": "11734:54:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1585,
																	"name": "Voting__alreadyVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 796,
																	"src": "11755:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1586,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11755:22:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1587,
															"nodeType": "RevertStatement",
															"src": "11748:29:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1590,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "11798:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1593,
																"indexExpression": {
																	"expression": {
																		"id": 1591,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11805:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11805:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11798:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1594,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "11798:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1596,
														"indexExpression": {
															"id": 1595,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "11823:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11798:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1597,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11836:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "11798:42:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1599,
												"nodeType": "ExpressionStatement",
												"src": "11798:42:6"
											},
											{
												"expression": {
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1600,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 836,
															"src": "11850:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1602,
														"indexExpression": {
															"id": 1601,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "11861:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11850:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1603,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11875:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "11850:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1605,
												"nodeType": "ExpressionStatement",
												"src": "11850:26:6"
											}
										]
									},
									"functionSelector": "632a9a52",
									"id": 1607,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1570,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1569,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "11637:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11637:12:6"
										},
										{
											"id": 1572,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1571,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 963,
												"src": "11650:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11650:16:6"
										},
										{
											"id": 1574,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1573,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 945,
												"src": "11667:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11667:7:6"
										}
									],
									"name": "vote",
									"nameLocation": "11623:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11627:2:6"
									},
									"returnParameters": {
										"id": 1575,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11675:0:6"
									},
									"scope": 1699,
									"src": "11614:269:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1646,
										"nodeType": "Block",
										"src": "11957:210:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1616,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "11971:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1619,
																"indexExpression": {
																	"expression": {
																		"id": 1617,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "11978:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1618,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "11978:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "11971:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1620,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "11971:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1622,
														"indexExpression": {
															"id": 1621,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "11996:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11971:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1623,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12010:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "11971:44:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1629,
												"nodeType": "IfStatement",
												"src": "11967:103:6",
												"trueBody": {
													"id": 1628,
													"nodeType": "Block",
													"src": "12017:53:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1625,
																	"name": "Voting__notYetVoted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 798,
																	"src": "12038:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1626,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12038:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1627,
															"nodeType": "RevertStatement",
															"src": "12031:28:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1630,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "12080:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1633,
																"indexExpression": {
																	"expression": {
																		"id": 1631,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "12087:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "12087:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "12080:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1634,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "12080:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1636,
														"indexExpression": {
															"id": 1635,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "12105:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12080:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 1637,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12119:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12080:44:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1639,
												"nodeType": "ExpressionStatement",
												"src": "12080:44:6"
											},
											{
												"expression": {
													"id": 1644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1640,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 836,
															"src": "12134:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1642,
														"indexExpression": {
															"id": 1641,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "12145:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12134:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12159:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12134:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1645,
												"nodeType": "ExpressionStatement",
												"src": "12134:26:6"
											}
										]
									},
									"functionSelector": "070c8b74",
									"id": 1647,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1610,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1609,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "11919:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11919:12:6"
										},
										{
											"id": 1612,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1611,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 963,
												"src": "11932:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11932:16:6"
										},
										{
											"id": 1614,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1613,
												"name": "isVoter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 945,
												"src": "11949:7:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "11949:7:6"
										}
									],
									"name": "retractVote",
									"nameLocation": "11898:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11909:2:6"
									},
									"returnParameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11957:0:6"
									},
									"scope": 1699,
									"src": "11889:278:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1685,
										"nodeType": "Block",
										"src": "12300:279:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1656,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "12314:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "31",
														"id": 1657,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12329:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "12314:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1663,
												"nodeType": "IfStatement",
												"src": "12310:79:6",
												"trueBody": {
													"id": 1662,
													"nodeType": "Block",
													"src": "12332:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1659,
																	"name": "Voting__notEnoughVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 800,
																	"src": "12353:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12353:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1661,
															"nodeType": "RevertStatement",
															"src": "12346:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1665
												],
												"declarations": [
													{
														"constant": false,
														"id": 1665,
														"mutability": "mutable",
														"name": "half_voters",
														"nameLocation": "12406:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 1685,
														"src": "12398:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1664,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12398:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1672,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1668,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1666,
																	"name": "totalVoters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 827,
																	"src": "12421:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "35",
																	"id": 1667,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12435:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_5_by_1",
																		"typeString": "int_const 5"
																	},
																	"value": "5"
																},
																"src": "12421:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1669,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "12420:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3130",
														"id": 1670,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12440:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10_by_1",
															"typeString": "int_const 10"
														},
														"value": "10"
													},
													"src": "12420:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12398:44:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1673,
															"name": "votedUsers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 836,
															"src": "12457:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1675,
														"indexExpression": {
															"id": 1674,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "12468:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "12457:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1676,
														"name": "half_voters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1665,
														"src": "12481:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12457:35:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1683,
													"nodeType": "Block",
													"src": "12536:37:6",
													"statements": [
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 1681,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12557:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 1655,
															"id": 1682,
															"nodeType": "Return",
															"src": "12550:12:6"
														}
													]
												},
												"id": 1684,
												"nodeType": "IfStatement",
												"src": "12453:120:6",
												"trueBody": {
													"id": 1680,
													"nodeType": "Block",
													"src": "12494:36:6",
													"statements": [
														{
															"expression": {
																"hexValue": "74727565",
																"id": 1678,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12515:4:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 1655,
															"id": 1679,
															"nodeType": "Return",
															"src": "12508:11:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "671d2b75",
									"id": 1686,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1650,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1649,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "12238:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12238:9:6"
										},
										{
											"id": 1652,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1651,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 963,
												"src": "12256:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12256:16:6"
										}
									],
									"name": "getVotingResult",
									"nameLocation": "12182:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12197:2:6"
									},
									"returnParameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "12290:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1653,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12290:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12289:6:6"
									},
									"scope": 1699,
									"src": "12173:406:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1697,
										"nodeType": "Block",
										"src": "12643:38:6",
										"statements": [
											{
												"expression": {
													"id": 1695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1693,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "12653:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1694,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "12669:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "12653:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1696,
												"nodeType": "ExpressionStatement",
												"src": "12653:21:6"
											}
										]
									},
									"functionSelector": "fab2f86b",
									"id": 1698,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1689,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1688,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "12616:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12616:9:6"
										},
										{
											"id": 1691,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1690,
												"name": "votingStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 963,
												"src": "12626:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "12626:16:6"
										}
									],
									"name": "stopVoting",
									"nameLocation": "12594:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12604:2:6"
									},
									"returnParameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12643:0:6"
									},
									"scope": 1699,
									"src": "12585:96:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1700,
							"src": "980:11703:6",
							"usedErrors": [
								773,
								775,
								778,
								780,
								782,
								784,
								786,
								788,
								791,
								794,
								796,
								798,
								800
							]
						}
					],
					"src": "39:12645:6"
				},
				"id": 6
			}
		}
	}
}