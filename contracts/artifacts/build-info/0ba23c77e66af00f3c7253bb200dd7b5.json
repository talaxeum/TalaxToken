{
	"id": "0ba23c77e66af00f3c7253bb200dd7b5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stake-2.0.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @notice Error handling message for Modifier\r\n */\r\nerror Function__notAuthorized();\r\nerror Function__notAVoter();\r\nerror Function__votingNotAvailable();\r\n\r\n/**\r\n * @notice Error handling message for Staking functions\r\n */\r\nerror Staking__cannotStakeNothing();\r\nerror Staking__userIsStaker();\r\nerror Staking__penaltyExceed3Percent();\r\nerror Staking__airdropExceed20Percent();\r\nerror Staking__noStakingFound();\r\nerror Staking_noStakingPackageFound();\r\n\r\n/**\r\n * @notice Error handling message for Airdrop functions\r\n */\r\nerror Airdrop__claimableOnceAWeek();\r\n\r\n/**\r\n * @notice Error handling message for Voting functions\r\n */\r\nerror Voting__votingIsRunning();\r\nerror Voting__alreadyVoted();\r\nerror Voting__notYetVoted();\r\nerror Voting__notEnoughVoters();\r\n\r\ncontract Staking is ReentrancyGuard, Ownable {\r\n    /**\r\n     * @notice Constructor since this contract is not meant to be used without inheritance\r\n     * push once to stakeholders for it to work properly\r\n     */\r\n\r\n    struct Voter {\r\n        bool votingRight;\r\n        mapping(uint256 => bool) voted;\r\n    }\r\n\r\n    mapping(uint256 => uint256) internal stakingPackage;\r\n\r\n    uint256 public stakingPenaltyRate;\r\n    uint256 public airdropRate;\r\n    uint256 public airdropSince;\r\n\r\n    bool internal _votingStatus;\r\n    uint256 internal _votingId;\r\n    uint256 public totalVoters;\r\n    mapping(address => Voter) public voters;\r\n    mapping(uint256 => uint256) public votedUsers;\r\n\r\n    address public token_address;\r\n\r\n    constructor(address token) {\r\n        //Staking penalty and Airdrop in 0.1 times percentage\r\n        stakingPenaltyRate = 15;\r\n        airdropRate = 80;\r\n\r\n        token_address = token;\r\n\r\n        stakingPackage[90 days] = 6;\r\n        stakingPackage[180 days] = 7;\r\n        stakingPackage[365 days] = 8;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * A stake struct is used to represent the way we store stakes,\r\n     * A Stake will contain the users address, the amount staked and a timestamp,\r\n     * Since which is when the stake was made\r\n     */\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 since;\r\n        uint256 rewardAPY;\r\n        uint256 releaseTime;\r\n        // This claimable field is new and used to tell how big of a reward is currently available\r\n        uint256 claimable;\r\n        uint256 claimableAirdrop;\r\n        uint256 latestClaimDrop;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\r\n     */\r\n    struct StakingSummary {\r\n        uint256 total_amount;\r\n        uint256 penalty;\r\n        Stake stake;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\r\n     */\r\n    mapping(address => Stake) internal stakeholders;\r\n\r\n    /**\r\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\r\n     */\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 timestamp,\r\n        uint256 releaseTime\r\n    );\r\n\r\n    event PenaltyChanged(uint256 amount);\r\n    event AirdropChanged(uint256 amount);\r\n\r\n    /* ------------------------------------------ Modifier ------------------------------------------ */\r\n\r\n    function _isVoter() internal view {\r\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\r\n        if (voters[msg.sender].votingRight == false) {\r\n            revert Function__notAVoter();\r\n        }\r\n    }\r\n\r\n    modifier isVoter() {\r\n        _isVoter();\r\n        _;\r\n    }\r\n\r\n    function _checkVotingStatus() internal view {\r\n        // require(_votingStatus, \"Voting is not available\");\r\n        if (!_votingStatus) {\r\n            revert Function__votingNotAvailable();\r\n        }\r\n    }\r\n\r\n    modifier votingStatusTrue() {\r\n        _checkVotingStatus();\r\n        _;\r\n    }\r\n\r\n    /* ---------------------------------------------- - --------------------------------------------- */\r\n\r\n    /**\r\n     * @notice\r\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\r\n     * StakeID\r\n     */\r\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\r\n        // Simple check so that user does not stake 0\r\n        // require(amount > 0, \"Cannot stake nothing\");\r\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\r\n        if (stakeholders[msg.sender].amount != 0) {\r\n            revert Staking__userIsStaker();\r\n        }\r\n\r\n        if (stakingPackage[stakePeriod] == 0) {\r\n            revert Staking_noStakingPackageFound();\r\n        }\r\n\r\n        totalVoters += 1;\r\n        voters[msg.sender].votingRight = true;\r\n\r\n        // block.timestamp = timestamp of the current block in seconds since the epoch\r\n        uint256 timestamp = block.timestamp;\r\n\r\n        // Use the index to push a new Stake\r\n        // push a newly created Stake with the current block timestamp.\r\n\r\n        stakeholders[msg.sender] = Stake(\r\n            amount,\r\n            timestamp,\r\n            stakingPackage[stakePeriod],\r\n            (stakePeriod + timestamp),\r\n            0,\r\n            0,\r\n            0\r\n        );\r\n\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(token_address),\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        // Emit an event that the stake has occured\r\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\r\n    }\r\n\r\n    function changePenaltyFee(uint256 amount) external onlyOwner {\r\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\r\n        if (amount > 30) {\r\n            revert Staking__penaltyExceed3Percent();\r\n        }\r\n        stakingPenaltyRate = amount;\r\n        emit PenaltyChanged(amount);\r\n    }\r\n\r\n    function _calculateStakingDuration(uint256 since)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // times by 1e24 so theres no missing value\r\n        return ((block.timestamp - since) * 1e24) / 365 days;\r\n    }\r\n\r\n    function _calculateStakeReward(Stake memory user_stake)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (user_stake.amount == 0) {\r\n            return 0;\r\n        }\r\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\r\n        return\r\n            (user_stake.amount *\r\n                user_stake.rewardAPY *\r\n                _calculateStakingDuration(user_stake.since)) / 1e26;\r\n    }\r\n\r\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (amount == 0) {\r\n            return (0, 0);\r\n        }\r\n        return (\r\n            amount - ((amount * stakingPenaltyRate) / 1000),\r\n            reward - ((reward * stakingPenaltyRate) / 1000)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\r\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\r\n     * Will return the amount to MINT onto the account\r\n     * Will also _calculateStakeReward and reset timer\r\n     */\r\n\r\n    function withdrawStake() external nonReentrant {\r\n        // TODO: can be simplified\r\n        // Grab user_index which is the index to use to grab the Stake[]\r\n        Stake memory user_stake = stakeholders[msg.sender];\r\n        uint256 reward = _calculateStakeReward(user_stake);\r\n\r\n        delete stakeholders[msg.sender];\r\n        totalVoters -= 1;\r\n        delete voters[msg.sender].voted[_votingId];\r\n\r\n        if (user_stake.releaseTime > block.timestamp) {\r\n            (\r\n                uint256 amount_reduced,\r\n                uint256 reward_reduced\r\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\r\n\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                (amount_reduced + reward_reduced)\r\n            );\r\n        } else {\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                (user_stake.amount + reward)\r\n            );\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function hasStake() external view returns (StakingSummary memory) {\r\n        Stake memory user_stake = stakeholders[msg.sender];\r\n        // require(user_stake.amount > 0, \"No Stake Found\");\r\n        if (user_stake.amount <= 0) {\r\n            revert Staking__noStakingFound();\r\n        }\r\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\r\n\r\n        uint256 reward = _calculateStakeReward(user_stake);\r\n\r\n        if (summary.stake.releaseTime > block.timestamp) {\r\n            summary.penalty =\r\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\r\n                ((reward * stakingPenaltyRate) / 1000);\r\n        }\r\n\r\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\r\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\r\n            summary.stake.claimableAirdrop = airdrop;\r\n        } else {\r\n            summary.stake.claimableAirdrop = 0;\r\n        }\r\n\r\n        summary.stake.claimable = reward;\r\n        summary.total_amount = user_stake.amount;\r\n\r\n        return summary;\r\n    }\r\n\r\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\r\n\r\n    function startAirdrop() external onlyOwner {\r\n        airdropSince = block.timestamp;\r\n    }\r\n\r\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\r\n        if (amount > 200) {\r\n            revert Staking__airdropExceed20Percent();\r\n        }\r\n        airdropRate = amount;\r\n        emit AirdropChanged(amount);\r\n    }\r\n\r\n    function _blockTimestamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\r\n        return (block.timestamp - timestamp) / 7 days;\r\n    }\r\n\r\n    function _calculateAirdrop(uint256 stakeAmount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\r\n    }\r\n\r\n    function claimAirdrop() external {\r\n        // TODO: can be simplified if using address\r\n        Stake storage staker = stakeholders[msg.sender];\r\n\r\n        if (staker.amount > 0) {\r\n            if (calculateWeek(staker.latestClaimDrop) == 0) {\r\n                revert Airdrop__claimableOnceAWeek();\r\n            }\r\n\r\n            staker.claimableAirdrop = 0;\r\n            staker.latestClaimDrop = block.timestamp;\r\n\r\n            SafeERC20.safeTransfer(\r\n                IERC20(token_address),\r\n                msg.sender,\r\n                _calculateAirdrop(staker.amount)\r\n            );\r\n        }\r\n    }\r\n\r\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\r\n    // ! Replaceable with Governance token\r\n\r\n    // function getVoters(address user) external view returns (bool, bool) {\r\n    //     return (voters[user].votingRight, voters[user].voted[_votingId]);\r\n    // }\r\n\r\n    // // TODO: can be simplified since not connected directly\r\n    // function startVoting() external nonReentrant onlyOwner {\r\n    //     if (_votingStatus == true) {\r\n    //         revert Voting__votingIsRunning();\r\n    //     }\r\n\r\n    //     _votingStatus = true;\r\n    //     _votingId += 1;\r\n    // }\r\n\r\n    // function vote() public nonReentrant votingStatusTrue isVoter {\r\n    //     if (voters[msg.sender].voted[_votingId] == true) {\r\n    //         revert Voting__alreadyVoted();\r\n    //     }\r\n\r\n    //     voters[msg.sender].voted[_votingId] = true;\r\n    //     votedUsers[_votingId] += 1;\r\n    // }\r\n\r\n    // function retractVote() public nonReentrant votingStatusTrue isVoter {\r\n    //     if (voters[msg.sender].voted[_votingId] == false) {\r\n    //         revert Voting__notYetVoted();\r\n    //     }\r\n\r\n    //     voters[msg.sender].voted[_votingId] == false;\r\n    //     votedUsers[_votingId] -= 1;\r\n    // }\r\n\r\n    // function getVotingResult()\r\n    //     external\r\n    //     view\r\n    //     onlyOwner\r\n    //     votingStatusTrue\r\n    //     returns (bool)\r\n    // {\r\n    //     if (totalVoters <= 1) {\r\n    //         revert Voting__notEnoughVoters();\r\n    //     }\r\n    //     uint256 half_voters = (totalVoters * 5) / 10;\r\n\r\n    //     if (votedUsers[_votingId] > half_voters) {\r\n    //         return true;\r\n    //     } else {\r\n    //         return false;\r\n    //     }\r\n    // }\r\n\r\n    // function stopVoting() external onlyOwner votingStatusTrue {\r\n    //     _votingStatus = false;\r\n    // }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xBF PUSH20 0xC3865EAAF80D277DD1C60B6B2E822B5A3D224D47 DUP14 DUP5 0xE6 EQ SWAP10 0xCE SWAP9 SUB DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xBF PUSH20 0xC3865EAAF80D277DD1C60B6B2E822B5A3D224D47 DUP14 DUP5 0xE6 EQ SWAP10 0xCE SWAP9 SUB DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD SWAP13 0xC SUB 0x4A DUP11 0xC SWAP13 BLOCKHASH 0xEB BALANCE PUSH7 0xD9FB5A40DC6087 SLOAD DUP4 SWAP3 EQ BYTE PUSH16 0xF32CC1C40F87B764736F6C634300080B STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD SWAP13 0xC SUB 0x4A DUP11 0xC SWAP13 BLOCKHASH 0xEB BALANCE PUSH7 0xD9FB5A40DC6087 SLOAD DUP4 SWAP3 EQ BYTE PUSH16 0xF32CC1C40F87B764736F6C634300080B STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stake-2.0.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stake-2.0.sol\":1017:13009  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stake-2.0.sol\":1742:2053  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:950  _msgSender */\n  shl(0x20, tag_11)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  shl(0x20, tag_12)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"contracts/Stake-2.0.sol\":1864:1866  15 */\n  0x0f\n    /* \"contracts/Stake-2.0.sol\":1843:1861  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Stake-2.0.sol\":1843:1866  stakingPenaltyRate = 15 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":1891:1893  80 */\n  0x50\n    /* \"contracts/Stake-2.0.sol\":1877:1888  airdropRate */\n  0x04\n    /* \"contracts/Stake-2.0.sol\":1877:1893  airdropRate = 80 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":1922:1927  token */\n  dup1\n    /* \"contracts/Stake-2.0.sol\":1906:1919  token_address */\n  0x0b\n  0x00\n    /* \"contracts/Stake-2.0.sol\":1906:1927  token_address = token */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":1966:1967  6 */\n  0x06\n    /* \"contracts/Stake-2.0.sol\":1940:1954  stakingPackage */\n  0x02\n    /* \"contracts/Stake-2.0.sol\":1940:1963  stakingPackage[90 days] */\n  0x00\n    /* \"contracts/Stake-2.0.sol\":1955:1962  90 days */\n  0x76a700\n    /* \"contracts/Stake-2.0.sol\":1940:1963  stakingPackage[90 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Stake-2.0.sol\":1940:1967  stakingPackage[90 days] = 6 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":2005:2006  7 */\n  0x07\n    /* \"contracts/Stake-2.0.sol\":1978:1992  stakingPackage */\n  0x02\n    /* \"contracts/Stake-2.0.sol\":1978:2002  stakingPackage[180 days] */\n  0x00\n    /* \"contracts/Stake-2.0.sol\":1993:2001  180 days */\n  0xed4e00\n    /* \"contracts/Stake-2.0.sol\":1978:2002  stakingPackage[180 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Stake-2.0.sol\":1978:2006  stakingPackage[180 days] = 7 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":2044:2045  8 */\n  0x08\n    /* \"contracts/Stake-2.0.sol\":2017:2031  stakingPackage */\n  0x02\n    /* \"contracts/Stake-2.0.sol\":2017:2041  stakingPackage[365 days] */\n  0x00\n    /* \"contracts/Stake-2.0.sol\":2032:2040  365 days */\n  0x01e13380\n    /* \"contracts/Stake-2.0.sol\":2017:2041  stakingPackage[365 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Stake-2.0.sol\":2017:2045  stakingPackage[365 days] = 8 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Stake-2.0.sol\":1742:2053  constructor(address token) {... */\n  pop\n    /* \"contracts/Stake-2.0.sol\":1017:13009  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_11:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2368  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2387:2395  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2384  _owner */\n  0x01\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2441:2449  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2431:2439  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_18:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_20:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_21:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_30\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_20\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_22:\n    /* \"#utility.yul\":641:665   */\n  tag_32\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_21\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_33\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_33:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_23:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_35\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_22\n  jump\t// in\ntag_35:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_38\n  tag_18\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":932:1051   */\ntag_37:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_39\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_23\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Stake-2.0.sol\":1017:13009  contract Staking is ReentrancyGuard, Ownable {... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stake-2.0.sol\":1017:13009  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa143a5f2\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xc63aa3e7\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xc63aa3e7\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_21\n      jumpi\n      jump(tag_2)\n    tag_23:\n      dup1\n      0xa143a5f2\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_16\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x7b0472f0\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_24:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8597:9648  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":10555:11160  function claimAirdrop() external {... */\n    tag_4:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      stop\n        /* \"contracts/Stake-2.0.sol\":1572:1598  uint256 public totalVoters */\n    tag_5:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/Stake-2.0.sol\":4459:5808  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n    tag_37:\n      stop\n        /* \"contracts/Stake-2.0.sol\":1436:1462  uint256 public airdropRate */\n    tag_8:\n      tag_41\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_43\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_43:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":5816:6129  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_44\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_45\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n    tag_44:\n      stop\n        /* \"contracts/Stake-2.0.sol\":1705:1733  address public token_address */\n    tag_10:\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_50\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_11:\n      tag_52\n      tag_53\n      jump\t// in\n    tag_52:\n      mload(0x40)\n      tag_54\n      swap2\n      swap1\n      tag_51\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":1651:1696  mapping(uint256 => uint256) public votedUsers */\n    tag_12:\n      tag_55\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_56\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n    tag_55:\n      mload(0x40)\n      tag_58\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":1605:1644  mapping(address => Voter) public voters */\n    tag_13:\n      tag_59\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_60\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n      tag_62\n      jump\t// in\n    tag_59:\n      mload(0x40)\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":10218:10354  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_14:\n      tag_65\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_66\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      tag_68\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":1469:1496  uint256 public airdropSince */\n    tag_15:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":7569:8581  function withdrawStake() external nonReentrant {... */\n    tag_16:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      stop\n        /* \"contracts/Stake-2.0.sol\":10112:10210  function _blockTimestamp() public view returns (uint256) {... */\n    tag_17:\n      tag_74\n      tag_75\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      tag_76\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":1396:1429  uint256 public stakingPenaltyRate */\n    tag_18:\n      tag_77\n      tag_78\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      tag_79\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_79:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":9764:9856  function startAirdrop() external onlyOwner {... */\n    tag_19:\n      tag_80\n      tag_81\n      jump\t// in\n    tag_80:\n      stop\n        /* \"contracts/Stake-2.0.sol\":9864:10104  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_20:\n      tag_82\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_83\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n    tag_82:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_21:\n      tag_85\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_86\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n    tag_85:\n      stop\n        /* \"contracts/Stake-2.0.sol\":8597:9648  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_26:\n        /* \"contracts/Stake-2.0.sol\":8640:8661  StakingSummary memory */\n      tag_88\n      tag_89\n      jump\t// in\n    tag_88:\n        /* \"contracts/Stake-2.0.sol\":8674:8697  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8700:8712  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":8700:8724  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8713:8723  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":8700:8724  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":8674:8724  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":8822:8823  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8801:8811  user_stake */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":8801:8818  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8801:8823  user_stake.amount <= 0 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":8797:8884  if (user_stake.amount <= 0) {... */\n      tag_91\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8847:8872  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8797:8884  if (user_stake.amount <= 0) {... */\n    tag_91:\n        /* \"contracts/Stake-2.0.sol\":8894:8923  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8926:8958  StakingSummary(0, 0, user_stake) */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Stake-2.0.sol\":8941:8942  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8926:8958  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":8944:8945  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8926:8958  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":8947:8957  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8926:8958  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":8894:8958  StakingSummary memory summary = StakingSummary(0, 0, user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":8971:8985  uint256 reward */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8988:9021  _calculateStakeReward(user_stake) */\n      tag_92\n        /* \"contracts/Stake-2.0.sol\":9010:9020  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8988:9009  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":8988:9021  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_92:\n        /* \"contracts/Stake-2.0.sol\":8971:9021  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":9066:9081  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9038:9045  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9038:9051  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9038:9063  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9038:9081  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stake-2.0.sol\":9034:9252  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":9235:9239  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":9213:9231  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":9204:9210  reward */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9204:9231  reward * stakingPenaltyRate */\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n        /* \"contracts/Stake-2.0.sol\":9203:9239  (reward * stakingPenaltyRate) / 1000 */\n      tag_97\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n        /* \"contracts/Stake-2.0.sol\":9177:9181  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":9155:9173  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":9135:9145  user_stake */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":9135:9152  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9135:9173  user_stake.amount * stakingPenaltyRate */\n      tag_99\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_99:\n        /* \"contracts/Stake-2.0.sol\":9134:9181  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_100\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_100:\n        /* \"contracts/Stake-2.0.sol\":9133:9240  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_101\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n        /* \"contracts/Stake-2.0.sol\":9098:9105  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9098:9113  summary.penalty */\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":9098:9240  summary.penalty =... */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":9034:9252  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_94:\n        /* \"contracts/Stake-2.0.sol\":9312:9313  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9268:9309  calculateWeek(user_stake.latestClaimDrop) */\n      tag_103\n        /* \"contracts/Stake-2.0.sol\":9282:9292  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":9282:9308  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9268:9281  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":9268:9309  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_103:\n        /* \"contracts/Stake-2.0.sol\":9268:9313  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":9264:9518  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":9330:9345  uint256 airdrop */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9348:9384  _calculateAirdrop(user_stake.amount) */\n      tag_105\n        /* \"contracts/Stake-2.0.sol\":9366:9376  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":9366:9383  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9348:9365  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":9348:9384  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_105:\n        /* \"contracts/Stake-2.0.sol\":9330:9384  uint256 airdrop = _calculateAirdrop(user_stake.amount) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":9432:9439  airdrop */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":9399:9406  summary */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":9399:9412  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9399:9429  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stake-2.0.sol\":9399:9439  summary.stake.claimableAirdrop = airdrop */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":9315:9451  {... */\n      pop\n        /* \"contracts/Stake-2.0.sol\":9264:9518  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_107)\n    tag_104:\n        /* \"contracts/Stake-2.0.sol\":9505:9506  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9472:9479  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9472:9485  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9472:9502  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stake-2.0.sol\":9472:9506  summary.stake.claimableAirdrop = 0 */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":9264:9518  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_107:\n        /* \"contracts/Stake-2.0.sol\":9556:9562  reward */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":9530:9537  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9530:9543  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9530:9553  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stake-2.0.sol\":9530:9562  summary.stake.claimable = reward */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":9596:9606  user_stake */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9596:9613  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9573:9580  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":9573:9593  summary.total_amount */\n      0x00\n      add\n        /* \"contracts/Stake-2.0.sol\":9573:9613  summary.total_amount = user_stake.amount */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":9633:9640  summary */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":9626:9640  return summary */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":8597:9648  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10555:11160  function claimAirdrop() external {... */\n    tag_30:\n        /* \"contracts/Stake-2.0.sol\":10652:10672  Stake storage staker */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10675:10687  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":10675:10699  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10688:10698  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":10675:10699  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":10652:10699  Stake storage staker = stakeholders[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":10732:10733  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10716:10722  staker */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10716:10729  staker.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":10716:10733  staker.amount > 0 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":10712:11153  if (staker.amount > 0) {... */\n      iszero\n      tag_109\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10795:10796  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10754:10791  calculateWeek(staker.latestClaimDrop) */\n      tag_110\n        /* \"contracts/Stake-2.0.sol\":10768:10774  staker */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":10768:10790  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":10754:10767  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":10754:10791  calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_110:\n        /* \"contracts/Stake-2.0.sol\":10754:10796  calculateWeek(staker.latestClaimDrop) == 0 */\n      eq\n        /* \"contracts/Stake-2.0.sol\":10750:10869  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n      iszero\n      tag_111\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10824:10853  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      0xdd8456cc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":10750:10869  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_111:\n        /* \"contracts/Stake-2.0.sol\":10911:10912  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10885:10891  staker */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10885:10908  staker.claimableAirdrop */\n      0x05\n      add\n        /* \"contracts/Stake-2.0.sol\":10885:10912  staker.claimableAirdrop = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":10952:10967  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":10927:10933  staker */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10927:10949  staker.latestClaimDrop */\n      0x06\n      add\n        /* \"contracts/Stake-2.0.sol\":10927:10967  staker.latestClaimDrop = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":10984:11141  SafeERC20.safeTransfer(... */\n      tag_112\n        /* \"contracts/Stake-2.0.sol\":11032:11045  token_address */\n      0x0b\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Stake-2.0.sol\":11065:11075  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":11094:11126  _calculateAirdrop(staker.amount) */\n      tag_113\n        /* \"contracts/Stake-2.0.sol\":11112:11118  staker */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":11112:11125  staker.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":11094:11111  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":11094:11126  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_113:\n        /* \"contracts/Stake-2.0.sol\":10984:11006  SafeERC20.safeTransfer */\n      tag_114\n        /* \"contracts/Stake-2.0.sol\":10984:11141  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_112:\n        /* \"contracts/Stake-2.0.sol\":10712:11153  if (staker.amount > 0) {... */\n    tag_109:\n        /* \"contracts/Stake-2.0.sol\":10588:11160  {... */\n      pop\n        /* \"contracts/Stake-2.0.sol\":10555:11160  function claimAirdrop() external {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1572:1598  uint256 public totalVoters */\n    tag_32:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_116\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_116:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_53\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_120\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_123\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_124\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_123:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":4459:5808  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_127\n      swap1\n      tag_128\n      jump\t// in\n    tag_127:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_126:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":4768:4769  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4733:4745  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":4733:4757  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4746:4756  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4733:4757  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4733:4764  stakeholders[msg.sender].amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":4733:4769  stakeholders[msg.sender].amount != 0 */\n      eq\n        /* \"contracts/Stake-2.0.sol\":4729:4828  if (stakeholders[msg.sender].amount != 0) {... */\n      tag_130\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4793:4816  Staking__userIsStaker() */\n      mload(0x40)\n      0x04462d2700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4729:4828  if (stakeholders[msg.sender].amount != 0) {... */\n    tag_130:\n        /* \"contracts/Stake-2.0.sol\":4875:4876  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4844:4858  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":4844:4871  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4859:4870  stakePeriod */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":4844:4871  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":4844:4876  stakingPackage[stakePeriod] == 0 */\n      eq\n        /* \"contracts/Stake-2.0.sol\":4840:4943  if (stakingPackage[stakePeriod] == 0) {... */\n      iszero\n      tag_131\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4900:4931  Staking_noStakingPackageFound() */\n      mload(0x40)\n      0x95377be400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4840:4943  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_131:\n        /* \"contracts/Stake-2.0.sol\":4970:4971  1 */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4955:4966  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4955:4971  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_132\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_132:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":5015:5019  true */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4982:4988  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":4982:5000  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4989:4999  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4982:5000  voters[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4982:5012  voters[msg.sender].votingRight */\n      0x00\n      add\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4982:5019  voters[msg.sender].votingRight = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":5120:5137  uint256 timestamp */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5140:5155  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":5120:5155  uint256 timestamp = block.timestamp */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Stake-2.0.sol\":5336:5342  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5357:5366  timestamp */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5381:5395  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":5381:5408  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5396:5407  stakePeriod */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":5381:5408  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5438:5447  timestamp */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":5424:5435  stakePeriod */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5424:5447  stakePeriod + timestamp */\n      tag_133\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_133:\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5463:5464  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5479:5480  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stake-2.0.sol\":5495:5496  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5316:5507  Stake(... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":5289:5301  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":5289:5313  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5302:5312  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5289:5313  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":5289:5507  stakeholders[msg.sender] = Stake(... */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      sstore\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      sstore\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      sstore\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      sstore\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      sstore\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x06\n      add\n      sstore\n      swap1\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":5520:5667  SafeERC20.safeTransferFrom(... */\n      tag_134\n        /* \"contracts/Stake-2.0.sol\":5568:5581  token_address */\n      0x0b\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Stake-2.0.sol\":5597:5607  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5630:5634  this */\n      address\n        /* \"contracts/Stake-2.0.sol\":5650:5656  amount */\n      dup7\n        /* \"contracts/Stake-2.0.sol\":5520:5546  SafeERC20.safeTransferFrom */\n      tag_135\n        /* \"contracts/Stake-2.0.sol\":5520:5667  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_134:\n        /* \"contracts/Stake-2.0.sol\":5743:5753  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5736:5800  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stake-2.0.sol\":5755:5761  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5763:5772  timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":5789:5798  timestamp */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5775:5786  stakePeriod */\n      dup7\n        /* \"contracts/Stake-2.0.sol\":5775:5798  stakePeriod + timestamp */\n      tag_136\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_136:\n        /* \"contracts/Stake-2.0.sol\":5736:5800  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      tag_137\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Stake-2.0.sol\":4533:5808  {... */\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":4459:5808  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1436:1462  uint256 public airdropRate */\n    tag_42:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":5816:6129  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_140\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_140:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_141\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_53\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_141:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_142\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_143\n      swap1\n      tag_121\n      jump\t// in\n    tag_143:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_142:\n        /* \"contracts/Stake-2.0.sol\":5976:5978  30 */\n      0x1e\n        /* \"contracts/Stake-2.0.sol\":5967:5973  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":5967:5978  amount > 30 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":5963:6046  if (amount > 30) {... */\n      iszero\n      tag_145\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":6002:6034  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      0xf1a470d700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":5963:6046  if (amount > 30) {... */\n    tag_145:\n        /* \"contracts/Stake-2.0.sol\":6077:6083  amount */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6056:6074  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Stake-2.0.sol\":6056:6083  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":6099:6121  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n        /* \"contracts/Stake-2.0.sol\":6114:6120  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":6099:6121  PenaltyChanged(amount) */\n      mload(0x40)\n      tag_146\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_146:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stake-2.0.sol\":5816:6129  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1705:1733  address public token_address */\n    tag_49:\n      0x0b\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1101:1114  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1651:1696  mapping(uint256 => uint256) public votedUsers */\n    tag_57:\n      mstore(0x20, 0x0a)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1605:1644  mapping(address => Voter) public voters */\n    tag_62:\n      mstore(0x20, 0x09)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      dup1\n      0x00\n      add\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10218:10354  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_67:\n        /* \"contracts/Stake-2.0.sol\":10281:10288  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10340:10346  7 days */\n      0x093a80\n        /* \"contracts/Stake-2.0.sol\":10327:10336  timestamp */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":10309:10324  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":10309:10336  block.timestamp - timestamp */\n      tag_149\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_149:\n        /* \"contracts/Stake-2.0.sol\":10308:10346  (block.timestamp - timestamp) / 7 days */\n      tag_151\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_151:\n        /* \"contracts/Stake-2.0.sol\":10301:10346  return (block.timestamp - timestamp) / 7 days */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":10218:10354  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1469:1496  uint256 public airdropSince */\n    tag_70:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":7569:8581  function withdrawStake() external nonReentrant {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_153\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_154\n      swap1\n      tag_128\n      jump\t// in\n    tag_154:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_153:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":7737:7760  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7763:7775  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7763:7787  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7776:7786  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7763:7787  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7737:7787  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":7798:7812  uint256 reward */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7815:7848  _calculateStakeReward(user_stake) */\n      tag_156\n        /* \"contracts/Stake-2.0.sol\":7837:7847  user_stake */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":7815:7836  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":7815:7848  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/Stake-2.0.sol\":7798:7848  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":7868:7880  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7868:7892  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7881:7891  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7868:7892  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7861:7892  delete stakeholders[msg.sender] */\n      dup1\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x06\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7918:7919  1 */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":7903:7914  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7903:7919  totalVoters -= 1 */\n      dup3\n      dup3\n      sload\n      tag_157\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_157:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":7937:7943  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":7937:7955  voters[msg.sender] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7944:7954  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7937:7955  voters[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7937:7961  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stake-2.0.sol\":7937:7972  voters[msg.sender].voted[_votingId] */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7962:7971  _votingId */\n      sload(0x07)\n        /* \"contracts/Stake-2.0.sol\":7937:7972  voters[msg.sender].voted[_votingId] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7930:7972  delete voters[msg.sender].voted[_votingId] */\n      0x0100\n      exp\n      dup2\n      sload\n      swap1\n      0xff\n      mul\n      not\n      and\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":8014:8029  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":7989:7999  user_stake */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":7989:8011  user_stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":7989:8029  user_stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stake-2.0.sol\":7985:8574  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_158\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8065:8087  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8106:8128  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":8146:8201  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_159\n        /* \"contracts/Stake-2.0.sol\":8175:8185  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8175:8192  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8194:8200  reward */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8146:8174  _calculateStakingWithPenalty */\n      tag_160\n        /* \"contracts/Stake-2.0.sol\":8146:8201  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_159:\n        /* \"contracts/Stake-2.0.sol\":8046:8201  (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stake-2.0.sol\":8218:8376  SafeERC20.safeTransfer(... */\n      tag_161\n        /* \"contracts/Stake-2.0.sol\":8266:8279  token_address */\n      0x0b\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Stake-2.0.sol\":8299:8309  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":8346:8360  reward_reduced */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8329:8343  amount_reduced */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":8329:8360  amount_reduced + reward_reduced */\n      tag_162\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_162:\n        /* \"contracts/Stake-2.0.sol\":8218:8240  SafeERC20.safeTransfer */\n      tag_114\n        /* \"contracts/Stake-2.0.sol\":8218:8376  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_161:\n        /* \"contracts/Stake-2.0.sol\":8031:8388  {... */\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7985:8574  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_163)\n    tag_158:\n        /* \"contracts/Stake-2.0.sol\":8409:8562  SafeERC20.safeTransfer(... */\n      tag_164\n        /* \"contracts/Stake-2.0.sol\":8457:8470  token_address */\n      0x0b\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Stake-2.0.sol\":8490:8500  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":8540:8546  reward */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8520:8530  user_stake */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":8520:8537  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8520:8546  user_stake.amount + reward */\n      tag_165\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_165:\n        /* \"contracts/Stake-2.0.sol\":8409:8431  SafeERC20.safeTransfer */\n      tag_114\n        /* \"contracts/Stake-2.0.sol\":8409:8562  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_164:\n        /* \"contracts/Stake-2.0.sol\":7985:8574  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_163:\n        /* \"contracts/Stake-2.0.sol\":7616:8581  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":7569:8581  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10112:10210  function _blockTimestamp() public view returns (uint256) {... */\n    tag_75:\n        /* \"contracts/Stake-2.0.sol\":10160:10167  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10187:10202  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":10180:10202  return block.timestamp */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":10112:10210  function _blockTimestamp() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":1396:1429  uint256 public stakingPenaltyRate */\n    tag_78:\n      sload(0x03)\n      dup2\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9764:9856  function startAirdrop() external onlyOwner {... */\n    tag_81:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_169\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_53\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_169:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_170\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_171\n      swap1\n      tag_121\n      jump\t// in\n    tag_171:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_170:\n        /* \"contracts/Stake-2.0.sol\":9833:9848  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9818:9830  airdropSince */\n      0x05\n        /* \"contracts/Stake-2.0.sol\":9818:9848  airdropSince = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":9764:9856  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9864:10104  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_174\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_174:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_175\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_53\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_176\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_177\n      swap1\n      tag_121\n      jump\t// in\n    tag_177:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_176:\n        /* \"contracts/Stake-2.0.sol\":9956:9959  200 */\n      0xc8\n        /* \"contracts/Stake-2.0.sol\":9947:9953  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":9947:9959  amount > 200 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":9943:10028  if (amount > 200) {... */\n      iszero\n      tag_179\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":9983:10016  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      0xa552cf1000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":9943:10028  if (amount > 200) {... */\n    tag_179:\n        /* \"contracts/Stake-2.0.sol\":10052:10058  amount */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":10038:10049  airdropRate */\n      0x04\n        /* \"contracts/Stake-2.0.sol\":10038:10058  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":10074:10096  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n        /* \"contracts/Stake-2.0.sol\":10089:10095  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10074:10096  AirdropChanged(amount) */\n      mload(0x40)\n      tag_180\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_180:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stake-2.0.sol\":9864:10104  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_182\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_183\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_53\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_183:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_185\n      swap1\n      tag_121\n      jump\t// in\n    tag_185:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_184:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2026:2027  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2014  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_187\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_188\n      swap1\n      tag_189\n      jump\t// in\n    tag_188:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_187:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_190\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_124\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6383:6833  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_93:\n        /* \"contracts/Stake-2.0.sol\":6489:6496  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6539:6540  0 */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6518:6528  user_stake */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":6518:6535  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6518:6540  user_stake.amount == 0 */\n      eq\n        /* \"contracts/Stake-2.0.sol\":6514:6577  if (user_stake.amount == 0) {... */\n      iszero\n      tag_192\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":6564:6565  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6557:6565  return 0 */\n      swap1\n      pop\n      jump(tag_191)\n        /* \"contracts/Stake-2.0.sol\":6514:6577  if (user_stake.amount == 0) {... */\n    tag_192:\n        /* \"contracts/Stake-2.0.sol\":6821:6825  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stake-2.0.sol\":6774:6817  _calculateStakingDuration(user_stake.since) */\n      tag_193\n        /* \"contracts/Stake-2.0.sol\":6800:6810  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6800:6816  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6774:6799  _calculateStakingDuration */\n      tag_194\n        /* \"contracts/Stake-2.0.sol\":6774:6817  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/Stake-2.0.sol\":6734:6744  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6734:6754  user_stake.rewardAPY */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6697:6707  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":6697:6714  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6697:6754  user_stake.amount *... */\n      tag_195\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_195:\n        /* \"contracts/Stake-2.0.sol\":6697:6817  user_stake.amount *... */\n      tag_196\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_196:\n        /* \"contracts/Stake-2.0.sol\":6696:6825  (user_stake.amount *... */\n      tag_197\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_197:\n        /* \"contracts/Stake-2.0.sol\":6676:6825  return... */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":6383:6833  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_191:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10362:10547  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_106:\n        /* \"contracts/Stake-2.0.sol\":10460:10467  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10531:10539  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stake-2.0.sol\":10523:10527  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":10508:10519  airdropRate */\n      sload(0x04)\n        /* \"contracts/Stake-2.0.sol\":10494:10505  stakeAmount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":10494:10519  stakeAmount * airdropRate */\n      tag_199\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_199:\n        /* \"contracts/Stake-2.0.sol\":10493:10527  (stakeAmount * airdropRate) / 1000 */\n      tag_200\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_200:\n        /* \"contracts/Stake-2.0.sol\":10492:10539  ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      tag_201\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_201:\n        /* \"contracts/Stake-2.0.sol\":10485:10539  return ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":10362:10547  function _calculateAirdrop(uint256 stakeAmount)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_114:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_203\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":888:890  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":892:897  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_204\n      swap3\n      swap2\n      swap1\n      tag_205\n      jump\t// in\n    tag_204:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:832  _callOptionalReturn */\n      tag_206\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_117:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_124:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2368  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2387:2395  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2384  _owner */\n      0x01\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2441:2449  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2431:2439  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n    tag_135:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_210\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1070:1075  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1100:1127  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1129:1133  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1135:1137  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1144  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_211\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_212\n      jump\t// in\n    tag_211:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1069  _callOptionalReturn */\n      tag_206\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_210:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6841:7212  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_160:\n        /* \"contracts/Stake-2.0.sol\":6961:6968  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6970:6977  uint256 */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":7009:7010  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6999:7005  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":6999:7010  amount == 0 */\n      eq\n        /* \"contracts/Stake-2.0.sol\":6995:7052  if (amount == 0) {... */\n      iszero\n      tag_214\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":7035:7036  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7038:7039  0 */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":7027:7040  return (0, 0) */\n      swap2\n      pop\n      swap2\n      pop\n      jump(tag_213)\n        /* \"contracts/Stake-2.0.sol\":6995:7052  if (amount == 0) {... */\n    tag_214:\n        /* \"contracts/Stake-2.0.sol\":7126:7130  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":7104:7122  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":7095:7101  amount */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":7095:7122  amount * stakingPenaltyRate */\n      tag_215\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_215:\n        /* \"contracts/Stake-2.0.sol\":7094:7130  (amount * stakingPenaltyRate) / 1000 */\n      tag_216\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_216:\n        /* \"contracts/Stake-2.0.sol\":7084:7090  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7084:7131  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_217\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_217:\n        /* \"contracts/Stake-2.0.sol\":7188:7192  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":7166:7184  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":7157:7163  reward */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":7157:7184  reward * stakingPenaltyRate */\n      tag_218\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_218:\n        /* \"contracts/Stake-2.0.sol\":7156:7192  (reward * stakingPenaltyRate) / 1000 */\n      tag_219\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_219:\n        /* \"contracts/Stake-2.0.sol\":7146:7152  reward */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7146:7193  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_220\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_220:\n        /* \"contracts/Stake-2.0.sol\":7062:7204  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stake-2.0.sol\":6841:7212  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_213:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6137:6375  function _calculateStakingDuration(uint256 since)... */\n    tag_194:\n        /* \"contracts/Stake-2.0.sol\":6237:6244  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6359:6367  365 days */\n      0x01e13380\n        /* \"contracts/Stake-2.0.sol\":6351:6355  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stake-2.0.sol\":6342:6347  since */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6324:6339  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":6324:6347  block.timestamp - since */\n      tag_222\n      swap2\n      swap1\n      tag_150\n      jump\t// in\n    tag_222:\n        /* \"contracts/Stake-2.0.sol\":6323:6355  (block.timestamp - since) * 1e24 */\n      tag_223\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_223:\n        /* \"contracts/Stake-2.0.sol\":6322:6367  ((block.timestamp - since) * 1e24) / 365 days */\n      tag_224\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_224:\n        /* \"contracts/Stake-2.0.sol\":6315:6367  return ((block.timestamp - since) * 1e24) / 365 days */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":6137:6375  function _calculateStakingDuration(uint256 since)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_206:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_226\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_227\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_226:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3755:3756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3745  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_229\n      swap2\n      swap1\n      tag_230\n      jump\t// in\n    tag_229:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_231\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_232\n      swap1\n      tag_233\n      jump\t// in\n    tag_232:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_231:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n    tag_228:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3277:3913  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_227:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_235\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_236\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_236:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_238\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_239\n      swap1\n      tag_240\n      jump\t// in\n    tag_239:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_238:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5254  isContract(target) */\n      tag_241\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5247:5253  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5246  isContract */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5254  isContract(target) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_243\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_244\n      swap1\n      tag_245\n      jump\t// in\n    tag_244:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_243:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_246\n      swap2\n      swap1\n      tag_247\n      jump\t// in\n    tag_246:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_250\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_249)\n    tag_250:\n      0x60\n      swap2\n      pop\n    tag_249:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_251\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_252\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_252:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_255\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      swap1\n      pop\n      jump(tag_254)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7896:7897  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7886  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      iszero\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_257:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_259\n      swap2\n      swap1\n      tag_260\n      jump\t// in\n    tag_259:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_254:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_89:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_261\n      tag_262\n      jump\t// in\n    tag_261:\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_262:\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:84   */\n    tag_263:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:198   */\n    tag_264:\n        /* \"#utility.yul\":167:191   */\n      tag_307\n        /* \"#utility.yul\":185:190   */\n      dup2\n        /* \"#utility.yul\":167:191   */\n      tag_263\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":162:165   */\n      dup3\n        /* \"#utility.yul\":155:192   */\n      mstore\n        /* \"#utility.yul\":90:198   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":256:1660   */\n    tag_265:\n        /* \"#utility.yul\":387:391   */\n      0xe0\n        /* \"#utility.yul\":382:385   */\n      dup3\n        /* \"#utility.yul\":378:392   */\n      add\n        /* \"#utility.yul\":476:480   */\n      0x00\n        /* \"#utility.yul\":469:474   */\n      dup3\n        /* \"#utility.yul\":465:481   */\n      add\n        /* \"#utility.yul\":459:482   */\n      mload\n        /* \"#utility.yul\":495:558   */\n      tag_309\n        /* \"#utility.yul\":552:556   */\n      0x00\n        /* \"#utility.yul\":547:550   */\n      dup6\n        /* \"#utility.yul\":543:557   */\n      add\n        /* \"#utility.yul\":529:541   */\n      dup3\n        /* \"#utility.yul\":495:558   */\n      tag_264\n      jump\t// in\n    tag_309:\n        /* \"#utility.yul\":402:568   */\n      pop\n        /* \"#utility.yul\":651:655   */\n      0x20\n        /* \"#utility.yul\":644:649   */\n      dup3\n        /* \"#utility.yul\":640:656   */\n      add\n        /* \"#utility.yul\":634:657   */\n      mload\n        /* \"#utility.yul\":670:733   */\n      tag_310\n        /* \"#utility.yul\":727:731   */\n      0x20\n        /* \"#utility.yul\":722:725   */\n      dup6\n        /* \"#utility.yul\":718:732   */\n      add\n        /* \"#utility.yul\":704:716   */\n      dup3\n        /* \"#utility.yul\":670:733   */\n      tag_264\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":578:743   */\n      pop\n        /* \"#utility.yul\":830:834   */\n      0x40\n        /* \"#utility.yul\":823:828   */\n      dup3\n        /* \"#utility.yul\":819:835   */\n      add\n        /* \"#utility.yul\":813:836   */\n      mload\n        /* \"#utility.yul\":849:912   */\n      tag_311\n        /* \"#utility.yul\":906:910   */\n      0x40\n        /* \"#utility.yul\":901:904   */\n      dup6\n        /* \"#utility.yul\":897:911   */\n      add\n        /* \"#utility.yul\":883:895   */\n      dup3\n        /* \"#utility.yul\":849:912   */\n      tag_264\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":753:922   */\n      pop\n        /* \"#utility.yul\":1011:1015   */\n      0x60\n        /* \"#utility.yul\":1004:1009   */\n      dup3\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":994:1017   */\n      mload\n        /* \"#utility.yul\":1030:1093   */\n      tag_312\n        /* \"#utility.yul\":1087:1091   */\n      0x60\n        /* \"#utility.yul\":1082:1085   */\n      dup6\n        /* \"#utility.yul\":1078:1092   */\n      add\n        /* \"#utility.yul\":1064:1076   */\n      dup3\n        /* \"#utility.yul\":1030:1093   */\n      tag_264\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":932:1103   */\n      pop\n        /* \"#utility.yul\":1190:1194   */\n      0x80\n        /* \"#utility.yul\":1183:1188   */\n      dup3\n        /* \"#utility.yul\":1179:1195   */\n      add\n        /* \"#utility.yul\":1173:1196   */\n      mload\n        /* \"#utility.yul\":1209:1272   */\n      tag_313\n        /* \"#utility.yul\":1266:1270   */\n      0x80\n        /* \"#utility.yul\":1261:1264   */\n      dup6\n        /* \"#utility.yul\":1257:1271   */\n      add\n        /* \"#utility.yul\":1243:1255   */\n      dup3\n        /* \"#utility.yul\":1209:1272   */\n      tag_264\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":1113:1282   */\n      pop\n        /* \"#utility.yul\":1376:1380   */\n      0xa0\n        /* \"#utility.yul\":1369:1374   */\n      dup3\n        /* \"#utility.yul\":1365:1381   */\n      add\n        /* \"#utility.yul\":1359:1382   */\n      mload\n        /* \"#utility.yul\":1395:1458   */\n      tag_314\n        /* \"#utility.yul\":1452:1456   */\n      0xa0\n        /* \"#utility.yul\":1447:1450   */\n      dup6\n        /* \"#utility.yul\":1443:1457   */\n      add\n        /* \"#utility.yul\":1429:1441   */\n      dup3\n        /* \"#utility.yul\":1395:1458   */\n      tag_264\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":1292:1468   */\n      pop\n        /* \"#utility.yul\":1561:1565   */\n      0xc0\n        /* \"#utility.yul\":1554:1559   */\n      dup3\n        /* \"#utility.yul\":1550:1566   */\n      add\n        /* \"#utility.yul\":1544:1567   */\n      mload\n        /* \"#utility.yul\":1580:1643   */\n      tag_315\n        /* \"#utility.yul\":1637:1641   */\n      0xc0\n        /* \"#utility.yul\":1632:1635   */\n      dup6\n        /* \"#utility.yul\":1628:1642   */\n      add\n        /* \"#utility.yul\":1614:1626   */\n      dup3\n        /* \"#utility.yul\":1580:1643   */\n      tag_264\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":1478:1653   */\n      pop\n        /* \"#utility.yul\":356:1660   */\n      pop\n        /* \"#utility.yul\":256:1660   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:2487   */\n    tag_266:\n        /* \"#utility.yul\":1895:1901   */\n      0x0120\n        /* \"#utility.yul\":1890:1893   */\n      dup3\n        /* \"#utility.yul\":1886:1902   */\n      add\n        /* \"#utility.yul\":1992:1996   */\n      0x00\n        /* \"#utility.yul\":1985:1990   */\n      dup3\n        /* \"#utility.yul\":1981:1997   */\n      add\n        /* \"#utility.yul\":1975:1998   */\n      mload\n        /* \"#utility.yul\":2011:2074   */\n      tag_317\n        /* \"#utility.yul\":2068:2072   */\n      0x00\n        /* \"#utility.yul\":2063:2066   */\n      dup6\n        /* \"#utility.yul\":2059:2073   */\n      add\n        /* \"#utility.yul\":2045:2057   */\n      dup3\n        /* \"#utility.yul\":2011:2074   */\n      tag_264\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":1912:2084   */\n      pop\n        /* \"#utility.yul\":2169:2173   */\n      0x20\n        /* \"#utility.yul\":2162:2167   */\n      dup3\n        /* \"#utility.yul\":2158:2174   */\n      add\n        /* \"#utility.yul\":2152:2175   */\n      mload\n        /* \"#utility.yul\":2188:2251   */\n      tag_318\n        /* \"#utility.yul\":2245:2249   */\n      0x20\n        /* \"#utility.yul\":2240:2243   */\n      dup6\n        /* \"#utility.yul\":2236:2250   */\n      add\n        /* \"#utility.yul\":2222:2234   */\n      dup3\n        /* \"#utility.yul\":2188:2251   */\n      tag_264\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":2094:2261   */\n      pop\n        /* \"#utility.yul\":2344:2348   */\n      0x40\n        /* \"#utility.yul\":2337:2342   */\n      dup3\n        /* \"#utility.yul\":2333:2349   */\n      add\n        /* \"#utility.yul\":2327:2350   */\n      mload\n        /* \"#utility.yul\":2363:2470   */\n      tag_319\n        /* \"#utility.yul\":2464:2468   */\n      0x40\n        /* \"#utility.yul\":2459:2462   */\n      dup6\n        /* \"#utility.yul\":2455:2469   */\n      add\n        /* \"#utility.yul\":2441:2453   */\n      dup3\n        /* \"#utility.yul\":2363:2470   */\n      tag_265\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":2271:2480   */\n      pop\n        /* \"#utility.yul\":1864:2487   */\n      pop\n        /* \"#utility.yul\":1736:2487   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2493:2840   */\n    tag_28:\n        /* \"#utility.yul\":2648:2652   */\n      0x00\n        /* \"#utility.yul\":2686:2689   */\n      0x0120\n        /* \"#utility.yul\":2675:2684   */\n      dup3\n        /* \"#utility.yul\":2671:2690   */\n      add\n        /* \"#utility.yul\":2663:2690   */\n      swap1\n      pop\n        /* \"#utility.yul\":2700:2833   */\n      tag_321\n        /* \"#utility.yul\":2830:2831   */\n      0x00\n        /* \"#utility.yul\":2819:2828   */\n      dup4\n        /* \"#utility.yul\":2815:2832   */\n      add\n        /* \"#utility.yul\":2806:2812   */\n      dup5\n        /* \"#utility.yul\":2700:2833   */\n      tag_266\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":2493:2840   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2846:2964   */\n    tag_267:\n        /* \"#utility.yul\":2933:2957   */\n      tag_323\n        /* \"#utility.yul\":2951:2956   */\n      dup2\n        /* \"#utility.yul\":2933:2957   */\n      tag_263\n      jump\t// in\n    tag_323:\n        /* \"#utility.yul\":2928:2931   */\n      dup3\n        /* \"#utility.yul\":2921:2958   */\n      mstore\n        /* \"#utility.yul\":2846:2964   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2970:3192   */\n    tag_34:\n        /* \"#utility.yul\":3063:3067   */\n      0x00\n        /* \"#utility.yul\":3101:3103   */\n      0x20\n        /* \"#utility.yul\":3090:3099   */\n      dup3\n        /* \"#utility.yul\":3086:3104   */\n      add\n        /* \"#utility.yul\":3078:3104   */\n      swap1\n      pop\n        /* \"#utility.yul\":3114:3185   */\n      tag_325\n        /* \"#utility.yul\":3182:3183   */\n      0x00\n        /* \"#utility.yul\":3171:3180   */\n      dup4\n        /* \"#utility.yul\":3167:3184   */\n      add\n        /* \"#utility.yul\":3158:3164   */\n      dup5\n        /* \"#utility.yul\":3114:3185   */\n      tag_267\n      jump\t// in\n    tag_325:\n        /* \"#utility.yul\":2970:3192   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3279:3396   */\n    tag_269:\n        /* \"#utility.yul\":3388:3389   */\n      0x00\n        /* \"#utility.yul\":3385:3386   */\n      dup1\n        /* \"#utility.yul\":3378:3390   */\n      revert\n        /* \"#utility.yul\":3525:3647   */\n    tag_271:\n        /* \"#utility.yul\":3598:3622   */\n      tag_330\n        /* \"#utility.yul\":3616:3621   */\n      dup2\n        /* \"#utility.yul\":3598:3622   */\n      tag_263\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":3591:3596   */\n      dup2\n        /* \"#utility.yul\":3588:3623   */\n      eq\n        /* \"#utility.yul\":3578:3641   */\n      tag_331\n      jumpi\n        /* \"#utility.yul\":3637:3638   */\n      0x00\n        /* \"#utility.yul\":3634:3635   */\n      dup1\n        /* \"#utility.yul\":3627:3639   */\n      revert\n        /* \"#utility.yul\":3578:3641   */\n    tag_331:\n        /* \"#utility.yul\":3525:3647   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3653:3792   */\n    tag_272:\n        /* \"#utility.yul\":3699:3704   */\n      0x00\n        /* \"#utility.yul\":3737:3743   */\n      dup2\n        /* \"#utility.yul\":3724:3744   */\n      calldataload\n        /* \"#utility.yul\":3715:3744   */\n      swap1\n      pop\n        /* \"#utility.yul\":3753:3786   */\n      tag_333\n        /* \"#utility.yul\":3780:3785   */\n      dup2\n        /* \"#utility.yul\":3753:3786   */\n      tag_271\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":3653:3792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3798:4272   */\n    tag_39:\n        /* \"#utility.yul\":3866:3872   */\n      0x00\n        /* \"#utility.yul\":3874:3880   */\n      dup1\n        /* \"#utility.yul\":3923:3925   */\n      0x40\n        /* \"#utility.yul\":3911:3920   */\n      dup4\n        /* \"#utility.yul\":3902:3909   */\n      dup6\n        /* \"#utility.yul\":3898:3921   */\n      sub\n        /* \"#utility.yul\":3894:3926   */\n      slt\n        /* \"#utility.yul\":3891:4010   */\n      iszero\n      tag_335\n      jumpi\n        /* \"#utility.yul\":3929:4008   */\n      tag_336\n      tag_269\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":3891:4010   */\n    tag_335:\n        /* \"#utility.yul\":4049:4050   */\n      0x00\n        /* \"#utility.yul\":4074:4127   */\n      tag_337\n        /* \"#utility.yul\":4119:4126   */\n      dup6\n        /* \"#utility.yul\":4110:4116   */\n      dup3\n        /* \"#utility.yul\":4099:4108   */\n      dup7\n        /* \"#utility.yul\":4095:4117   */\n      add\n        /* \"#utility.yul\":4074:4127   */\n      tag_272\n      jump\t// in\n    tag_337:\n        /* \"#utility.yul\":4064:4127   */\n      swap3\n      pop\n        /* \"#utility.yul\":4020:4137   */\n      pop\n        /* \"#utility.yul\":4176:4178   */\n      0x20\n        /* \"#utility.yul\":4202:4255   */\n      tag_338\n        /* \"#utility.yul\":4247:4254   */\n      dup6\n        /* \"#utility.yul\":4238:4244   */\n      dup3\n        /* \"#utility.yul\":4227:4236   */\n      dup7\n        /* \"#utility.yul\":4223:4245   */\n      add\n        /* \"#utility.yul\":4202:4255   */\n      tag_272\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":4192:4255   */\n      swap2\n      pop\n        /* \"#utility.yul\":4147:4265   */\n      pop\n        /* \"#utility.yul\":3798:4272   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4278:4607   */\n    tag_46:\n        /* \"#utility.yul\":4337:4343   */\n      0x00\n        /* \"#utility.yul\":4386:4388   */\n      0x20\n        /* \"#utility.yul\":4374:4383   */\n      dup3\n        /* \"#utility.yul\":4365:4372   */\n      dup5\n        /* \"#utility.yul\":4361:4384   */\n      sub\n        /* \"#utility.yul\":4357:4389   */\n      slt\n        /* \"#utility.yul\":4354:4473   */\n      iszero\n      tag_340\n      jumpi\n        /* \"#utility.yul\":4392:4471   */\n      tag_341\n      tag_269\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":4354:4473   */\n    tag_340:\n        /* \"#utility.yul\":4512:4513   */\n      0x00\n        /* \"#utility.yul\":4537:4590   */\n      tag_342\n        /* \"#utility.yul\":4582:4589   */\n      dup5\n        /* \"#utility.yul\":4573:4579   */\n      dup3\n        /* \"#utility.yul\":4562:4571   */\n      dup6\n        /* \"#utility.yul\":4558:4580   */\n      add\n        /* \"#utility.yul\":4537:4590   */\n      tag_272\n      jump\t// in\n    tag_342:\n        /* \"#utility.yul\":4527:4590   */\n      swap2\n      pop\n        /* \"#utility.yul\":4483:4600   */\n      pop\n        /* \"#utility.yul\":4278:4607   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4613:4739   */\n    tag_273:\n        /* \"#utility.yul\":4650:4657   */\n      0x00\n        /* \"#utility.yul\":4690:4732   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":4683:4688   */\n      dup3\n        /* \"#utility.yul\":4679:4733   */\n      and\n        /* \"#utility.yul\":4668:4733   */\n      swap1\n      pop\n        /* \"#utility.yul\":4613:4739   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4745:4841   */\n    tag_274:\n        /* \"#utility.yul\":4782:4789   */\n      0x00\n        /* \"#utility.yul\":4811:4835   */\n      tag_345\n        /* \"#utility.yul\":4829:4834   */\n      dup3\n        /* \"#utility.yul\":4811:4835   */\n      tag_273\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":4800:4835   */\n      swap1\n      pop\n        /* \"#utility.yul\":4745:4841   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4847:4965   */\n    tag_275:\n        /* \"#utility.yul\":4934:4958   */\n      tag_347\n        /* \"#utility.yul\":4952:4957   */\n      dup2\n        /* \"#utility.yul\":4934:4958   */\n      tag_274\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":4929:4932   */\n      dup3\n        /* \"#utility.yul\":4922:4959   */\n      mstore\n        /* \"#utility.yul\":4847:4965   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4971:5193   */\n    tag_51:\n        /* \"#utility.yul\":5064:5068   */\n      0x00\n        /* \"#utility.yul\":5102:5104   */\n      0x20\n        /* \"#utility.yul\":5091:5100   */\n      dup3\n        /* \"#utility.yul\":5087:5105   */\n      add\n        /* \"#utility.yul\":5079:5105   */\n      swap1\n      pop\n        /* \"#utility.yul\":5115:5186   */\n      tag_349\n        /* \"#utility.yul\":5183:5184   */\n      0x00\n        /* \"#utility.yul\":5172:5181   */\n      dup4\n        /* \"#utility.yul\":5168:5185   */\n      add\n        /* \"#utility.yul\":5159:5165   */\n      dup5\n        /* \"#utility.yul\":5115:5186   */\n      tag_275\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":4971:5193   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5199:5321   */\n    tag_276:\n        /* \"#utility.yul\":5272:5296   */\n      tag_351\n        /* \"#utility.yul\":5290:5295   */\n      dup2\n        /* \"#utility.yul\":5272:5296   */\n      tag_274\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":5265:5270   */\n      dup2\n        /* \"#utility.yul\":5262:5297   */\n      eq\n        /* \"#utility.yul\":5252:5315   */\n      tag_352\n      jumpi\n        /* \"#utility.yul\":5311:5312   */\n      0x00\n        /* \"#utility.yul\":5308:5309   */\n      dup1\n        /* \"#utility.yul\":5301:5313   */\n      revert\n        /* \"#utility.yul\":5252:5315   */\n    tag_352:\n        /* \"#utility.yul\":5199:5321   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5327:5466   */\n    tag_277:\n        /* \"#utility.yul\":5373:5378   */\n      0x00\n        /* \"#utility.yul\":5411:5417   */\n      dup2\n        /* \"#utility.yul\":5398:5418   */\n      calldataload\n        /* \"#utility.yul\":5389:5418   */\n      swap1\n      pop\n        /* \"#utility.yul\":5427:5460   */\n      tag_354\n        /* \"#utility.yul\":5454:5459   */\n      dup2\n        /* \"#utility.yul\":5427:5460   */\n      tag_276\n      jump\t// in\n    tag_354:\n        /* \"#utility.yul\":5327:5466   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5472:5801   */\n    tag_61:\n        /* \"#utility.yul\":5531:5537   */\n      0x00\n        /* \"#utility.yul\":5580:5582   */\n      0x20\n        /* \"#utility.yul\":5568:5577   */\n      dup3\n        /* \"#utility.yul\":5559:5566   */\n      dup5\n        /* \"#utility.yul\":5555:5578   */\n      sub\n        /* \"#utility.yul\":5551:5583   */\n      slt\n        /* \"#utility.yul\":5548:5667   */\n      iszero\n      tag_356\n      jumpi\n        /* \"#utility.yul\":5586:5665   */\n      tag_357\n      tag_269\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":5548:5667   */\n    tag_356:\n        /* \"#utility.yul\":5706:5707   */\n      0x00\n        /* \"#utility.yul\":5731:5784   */\n      tag_358\n        /* \"#utility.yul\":5776:5783   */\n      dup5\n        /* \"#utility.yul\":5767:5773   */\n      dup3\n        /* \"#utility.yul\":5756:5765   */\n      dup6\n        /* \"#utility.yul\":5752:5774   */\n      add\n        /* \"#utility.yul\":5731:5784   */\n      tag_277\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":5721:5784   */\n      swap2\n      pop\n        /* \"#utility.yul\":5677:5794   */\n      pop\n        /* \"#utility.yul\":5472:5801   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5807:5897   */\n    tag_278:\n        /* \"#utility.yul\":5841:5848   */\n      0x00\n        /* \"#utility.yul\":5884:5889   */\n      dup2\n        /* \"#utility.yul\":5877:5890   */\n      iszero\n        /* \"#utility.yul\":5870:5891   */\n      iszero\n        /* \"#utility.yul\":5859:5891   */\n      swap1\n      pop\n        /* \"#utility.yul\":5807:5897   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5903:6012   */\n    tag_279:\n        /* \"#utility.yul\":5984:6005   */\n      tag_361\n        /* \"#utility.yul\":5999:6004   */\n      dup2\n        /* \"#utility.yul\":5984:6005   */\n      tag_278\n      jump\t// in\n    tag_361:\n        /* \"#utility.yul\":5979:5982   */\n      dup3\n        /* \"#utility.yul\":5972:6006   */\n      mstore\n        /* \"#utility.yul\":5903:6012   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6018:6228   */\n    tag_64:\n        /* \"#utility.yul\":6105:6109   */\n      0x00\n        /* \"#utility.yul\":6143:6145   */\n      0x20\n        /* \"#utility.yul\":6132:6141   */\n      dup3\n        /* \"#utility.yul\":6128:6146   */\n      add\n        /* \"#utility.yul\":6120:6146   */\n      swap1\n      pop\n        /* \"#utility.yul\":6156:6221   */\n      tag_363\n        /* \"#utility.yul\":6218:6219   */\n      0x00\n        /* \"#utility.yul\":6207:6216   */\n      dup4\n        /* \"#utility.yul\":6203:6220   */\n      add\n        /* \"#utility.yul\":6194:6200   */\n      dup5\n        /* \"#utility.yul\":6156:6221   */\n      tag_279\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":6018:6228   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6234:6414   */\n    tag_280:\n        /* \"#utility.yul\":6282:6359   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6279:6280   */\n      0x00\n        /* \"#utility.yul\":6272:6360   */\n      mstore\n        /* \"#utility.yul\":6379:6383   */\n      0x11\n        /* \"#utility.yul\":6376:6377   */\n      0x04\n        /* \"#utility.yul\":6369:6384   */\n      mstore\n        /* \"#utility.yul\":6403:6407   */\n      0x24\n        /* \"#utility.yul\":6400:6401   */\n      0x00\n        /* \"#utility.yul\":6393:6408   */\n      revert\n        /* \"#utility.yul\":6420:6768   */\n    tag_96:\n        /* \"#utility.yul\":6460:6467   */\n      0x00\n        /* \"#utility.yul\":6483:6503   */\n      tag_366\n        /* \"#utility.yul\":6501:6502   */\n      dup3\n        /* \"#utility.yul\":6483:6503   */\n      tag_263\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":6478:6503   */\n      swap2\n      pop\n        /* \"#utility.yul\":6517:6537   */\n      tag_367\n        /* \"#utility.yul\":6535:6536   */\n      dup4\n        /* \"#utility.yul\":6517:6537   */\n      tag_263\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":6512:6537   */\n      swap3\n      pop\n        /* \"#utility.yul\":6705:6706   */\n      dup2\n        /* \"#utility.yul\":6637:6703   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":6633:6707   */\n      div\n        /* \"#utility.yul\":6630:6631   */\n      dup4\n        /* \"#utility.yul\":6627:6708   */\n      gt\n        /* \"#utility.yul\":6622:6623   */\n      dup3\n        /* \"#utility.yul\":6615:6624   */\n      iszero\n        /* \"#utility.yul\":6608:6625   */\n      iszero\n        /* \"#utility.yul\":6604:6709   */\n      and\n        /* \"#utility.yul\":6601:6732   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":6712:6730   */\n      tag_369\n      tag_280\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":6601:6732   */\n    tag_368:\n        /* \"#utility.yul\":6760:6761   */\n      dup3\n        /* \"#utility.yul\":6757:6758   */\n      dup3\n        /* \"#utility.yul\":6753:6762   */\n      mul\n        /* \"#utility.yul\":6742:6762   */\n      swap1\n      pop\n        /* \"#utility.yul\":6420:6768   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6774:6954   */\n    tag_281:\n        /* \"#utility.yul\":6822:6899   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6819:6820   */\n      0x00\n        /* \"#utility.yul\":6812:6900   */\n      mstore\n        /* \"#utility.yul\":6919:6923   */\n      0x12\n        /* \"#utility.yul\":6916:6917   */\n      0x04\n        /* \"#utility.yul\":6909:6924   */\n      mstore\n        /* \"#utility.yul\":6943:6947   */\n      0x24\n        /* \"#utility.yul\":6940:6941   */\n      0x00\n        /* \"#utility.yul\":6933:6948   */\n      revert\n        /* \"#utility.yul\":6960:7145   */\n    tag_98:\n        /* \"#utility.yul\":7000:7001   */\n      0x00\n        /* \"#utility.yul\":7017:7037   */\n      tag_372\n        /* \"#utility.yul\":7035:7036   */\n      dup3\n        /* \"#utility.yul\":7017:7037   */\n      tag_263\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":7012:7037   */\n      swap2\n      pop\n        /* \"#utility.yul\":7051:7071   */\n      tag_373\n        /* \"#utility.yul\":7069:7070   */\n      dup4\n        /* \"#utility.yul\":7051:7071   */\n      tag_263\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":7046:7071   */\n      swap3\n      pop\n        /* \"#utility.yul\":7090:7091   */\n      dup3\n        /* \"#utility.yul\":7080:7115   */\n      tag_374\n      jumpi\n        /* \"#utility.yul\":7095:7113   */\n      tag_375\n      tag_281\n      jump\t// in\n    tag_375:\n        /* \"#utility.yul\":7080:7115   */\n    tag_374:\n        /* \"#utility.yul\":7137:7138   */\n      dup3\n        /* \"#utility.yul\":7134:7135   */\n      dup3\n        /* \"#utility.yul\":7130:7139   */\n      div\n        /* \"#utility.yul\":7125:7139   */\n      swap1\n      pop\n        /* \"#utility.yul\":6960:7145   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7151:7456   */\n    tag_102:\n        /* \"#utility.yul\":7191:7194   */\n      0x00\n        /* \"#utility.yul\":7210:7230   */\n      tag_377\n        /* \"#utility.yul\":7228:7229   */\n      dup3\n        /* \"#utility.yul\":7210:7230   */\n      tag_263\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":7205:7230   */\n      swap2\n      pop\n        /* \"#utility.yul\":7244:7264   */\n      tag_378\n        /* \"#utility.yul\":7262:7263   */\n      dup4\n        /* \"#utility.yul\":7244:7264   */\n      tag_263\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":7239:7264   */\n      swap3\n      pop\n        /* \"#utility.yul\":7398:7399   */\n      dup3\n        /* \"#utility.yul\":7330:7396   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":7326:7400   */\n      sub\n        /* \"#utility.yul\":7323:7324   */\n      dup3\n        /* \"#utility.yul\":7320:7401   */\n      gt\n        /* \"#utility.yul\":7317:7424   */\n      iszero\n      tag_379\n      jumpi\n        /* \"#utility.yul\":7404:7422   */\n      tag_380\n      tag_280\n      jump\t// in\n    tag_380:\n        /* \"#utility.yul\":7317:7424   */\n    tag_379:\n        /* \"#utility.yul\":7448:7449   */\n      dup3\n        /* \"#utility.yul\":7445:7446   */\n      dup3\n        /* \"#utility.yul\":7441:7450   */\n      add\n        /* \"#utility.yul\":7434:7450   */\n      swap1\n      pop\n        /* \"#utility.yul\":7151:7456   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7462:7631   */\n    tag_282:\n        /* \"#utility.yul\":7546:7557   */\n      0x00\n        /* \"#utility.yul\":7580:7586   */\n      dup3\n        /* \"#utility.yul\":7575:7578   */\n      dup3\n        /* \"#utility.yul\":7568:7587   */\n      mstore\n        /* \"#utility.yul\":7620:7624   */\n      0x20\n        /* \"#utility.yul\":7615:7618   */\n      dup3\n        /* \"#utility.yul\":7611:7625   */\n      add\n        /* \"#utility.yul\":7596:7625   */\n      swap1\n      pop\n        /* \"#utility.yul\":7462:7631   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7637:7819   */\n    tag_283:\n        /* \"#utility.yul\":7777:7811   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7773:7774   */\n      0x00\n        /* \"#utility.yul\":7765:7771   */\n      dup3\n        /* \"#utility.yul\":7761:7775   */\n      add\n        /* \"#utility.yul\":7754:7812   */\n      mstore\n        /* \"#utility.yul\":7637:7819   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7825:8191   */\n    tag_284:\n        /* \"#utility.yul\":7967:7970   */\n      0x00\n        /* \"#utility.yul\":7988:8055   */\n      tag_384\n        /* \"#utility.yul\":8052:8054   */\n      0x20\n        /* \"#utility.yul\":8047:8050   */\n      dup4\n        /* \"#utility.yul\":7988:8055   */\n      tag_282\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":7981:8055   */\n      swap2\n      pop\n        /* \"#utility.yul\":8064:8157   */\n      tag_385\n        /* \"#utility.yul\":8153:8156   */\n      dup3\n        /* \"#utility.yul\":8064:8157   */\n      tag_283\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":8182:8184   */\n      0x20\n        /* \"#utility.yul\":8177:8180   */\n      dup3\n        /* \"#utility.yul\":8173:8185   */\n      add\n        /* \"#utility.yul\":8166:8185   */\n      swap1\n      pop\n        /* \"#utility.yul\":7825:8191   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8197:8616   */\n    tag_121:\n        /* \"#utility.yul\":8363:8367   */\n      0x00\n        /* \"#utility.yul\":8401:8403   */\n      0x20\n        /* \"#utility.yul\":8390:8399   */\n      dup3\n        /* \"#utility.yul\":8386:8404   */\n      add\n        /* \"#utility.yul\":8378:8404   */\n      swap1\n      pop\n        /* \"#utility.yul\":8450:8459   */\n      dup2\n        /* \"#utility.yul\":8444:8448   */\n      dup2\n        /* \"#utility.yul\":8440:8460   */\n      sub\n        /* \"#utility.yul\":8436:8437   */\n      0x00\n        /* \"#utility.yul\":8425:8434   */\n      dup4\n        /* \"#utility.yul\":8421:8438   */\n      add\n        /* \"#utility.yul\":8414:8461   */\n      mstore\n        /* \"#utility.yul\":8478:8609   */\n      tag_387\n        /* \"#utility.yul\":8604:8608   */\n      dup2\n        /* \"#utility.yul\":8478:8609   */\n      tag_284\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":8470:8609   */\n      swap1\n      pop\n        /* \"#utility.yul\":8197:8616   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8622:8803   */\n    tag_285:\n        /* \"#utility.yul\":8762:8795   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":8758:8759   */\n      0x00\n        /* \"#utility.yul\":8750:8756   */\n      dup3\n        /* \"#utility.yul\":8746:8760   */\n      add\n        /* \"#utility.yul\":8739:8796   */\n      mstore\n        /* \"#utility.yul\":8622:8803   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8809:9175   */\n    tag_286:\n        /* \"#utility.yul\":8951:8954   */\n      0x00\n        /* \"#utility.yul\":8972:9039   */\n      tag_390\n        /* \"#utility.yul\":9036:9038   */\n      0x1f\n        /* \"#utility.yul\":9031:9034   */\n      dup4\n        /* \"#utility.yul\":8972:9039   */\n      tag_282\n      jump\t// in\n    tag_390:\n        /* \"#utility.yul\":8965:9039   */\n      swap2\n      pop\n        /* \"#utility.yul\":9048:9141   */\n      tag_391\n        /* \"#utility.yul\":9137:9140   */\n      dup3\n        /* \"#utility.yul\":9048:9141   */\n      tag_285\n      jump\t// in\n    tag_391:\n        /* \"#utility.yul\":9166:9168   */\n      0x20\n        /* \"#utility.yul\":9161:9164   */\n      dup3\n        /* \"#utility.yul\":9157:9169   */\n      add\n        /* \"#utility.yul\":9150:9169   */\n      swap1\n      pop\n        /* \"#utility.yul\":8809:9175   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9181:9600   */\n    tag_128:\n        /* \"#utility.yul\":9347:9351   */\n      0x00\n        /* \"#utility.yul\":9385:9387   */\n      0x20\n        /* \"#utility.yul\":9374:9383   */\n      dup3\n        /* \"#utility.yul\":9370:9388   */\n      add\n        /* \"#utility.yul\":9362:9388   */\n      swap1\n      pop\n        /* \"#utility.yul\":9434:9443   */\n      dup2\n        /* \"#utility.yul\":9428:9432   */\n      dup2\n        /* \"#utility.yul\":9424:9444   */\n      sub\n        /* \"#utility.yul\":9420:9421   */\n      0x00\n        /* \"#utility.yul\":9409:9418   */\n      dup4\n        /* \"#utility.yul\":9405:9422   */\n      add\n        /* \"#utility.yul\":9398:9445   */\n      mstore\n        /* \"#utility.yul\":9462:9593   */\n      tag_393\n        /* \"#utility.yul\":9588:9592   */\n      dup2\n        /* \"#utility.yul\":9462:9593   */\n      tag_286\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":9454:9593   */\n      swap1\n      pop\n        /* \"#utility.yul\":9181:9600   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9606:10048   */\n    tag_138:\n        /* \"#utility.yul\":9755:9759   */\n      0x00\n        /* \"#utility.yul\":9793:9795   */\n      0x60\n        /* \"#utility.yul\":9782:9791   */\n      dup3\n        /* \"#utility.yul\":9778:9796   */\n      add\n        /* \"#utility.yul\":9770:9796   */\n      swap1\n      pop\n        /* \"#utility.yul\":9806:9877   */\n      tag_395\n        /* \"#utility.yul\":9874:9875   */\n      0x00\n        /* \"#utility.yul\":9863:9872   */\n      dup4\n        /* \"#utility.yul\":9859:9876   */\n      add\n        /* \"#utility.yul\":9850:9856   */\n      dup7\n        /* \"#utility.yul\":9806:9877   */\n      tag_267\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":9887:9959   */\n      tag_396\n        /* \"#utility.yul\":9955:9957   */\n      0x20\n        /* \"#utility.yul\":9944:9953   */\n      dup4\n        /* \"#utility.yul\":9940:9958   */\n      add\n        /* \"#utility.yul\":9931:9937   */\n      dup6\n        /* \"#utility.yul\":9887:9959   */\n      tag_267\n      jump\t// in\n    tag_396:\n        /* \"#utility.yul\":9969:10041   */\n      tag_397\n        /* \"#utility.yul\":10037:10039   */\n      0x40\n        /* \"#utility.yul\":10026:10035   */\n      dup4\n        /* \"#utility.yul\":10022:10040   */\n      add\n        /* \"#utility.yul\":10013:10019   */\n      dup5\n        /* \"#utility.yul\":9969:10041   */\n      tag_267\n      jump\t// in\n    tag_397:\n        /* \"#utility.yul\":9606:10048   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10054:10245   */\n    tag_150:\n        /* \"#utility.yul\":10094:10098   */\n      0x00\n        /* \"#utility.yul\":10114:10134   */\n      tag_399\n        /* \"#utility.yul\":10132:10133   */\n      dup3\n        /* \"#utility.yul\":10114:10134   */\n      tag_263\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":10109:10134   */\n      swap2\n      pop\n        /* \"#utility.yul\":10148:10168   */\n      tag_400\n        /* \"#utility.yul\":10166:10167   */\n      dup4\n        /* \"#utility.yul\":10148:10168   */\n      tag_263\n      jump\t// in\n    tag_400:\n        /* \"#utility.yul\":10143:10168   */\n      swap3\n      pop\n        /* \"#utility.yul\":10187:10188   */\n      dup3\n        /* \"#utility.yul\":10184:10185   */\n      dup3\n        /* \"#utility.yul\":10181:10189   */\n      lt\n        /* \"#utility.yul\":10178:10212   */\n      iszero\n      tag_401\n      jumpi\n        /* \"#utility.yul\":10192:10210   */\n      tag_402\n      tag_280\n      jump\t// in\n    tag_402:\n        /* \"#utility.yul\":10178:10212   */\n    tag_401:\n        /* \"#utility.yul\":10237:10238   */\n      dup3\n        /* \"#utility.yul\":10234:10235   */\n      dup3\n        /* \"#utility.yul\":10230:10239   */\n      sub\n        /* \"#utility.yul\":10222:10239   */\n      swap1\n      pop\n        /* \"#utility.yul\":10054:10245   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10251:10476   */\n    tag_287:\n        /* \"#utility.yul\":10391:10425   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":10387:10388   */\n      0x00\n        /* \"#utility.yul\":10379:10385   */\n      dup3\n        /* \"#utility.yul\":10375:10389   */\n      add\n        /* \"#utility.yul\":10368:10426   */\n      mstore\n        /* \"#utility.yul\":10460:10468   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10455:10457   */\n      0x20\n        /* \"#utility.yul\":10447:10453   */\n      dup3\n        /* \"#utility.yul\":10443:10458   */\n      add\n        /* \"#utility.yul\":10436:10469   */\n      mstore\n        /* \"#utility.yul\":10251:10476   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10482:10848   */\n    tag_288:\n        /* \"#utility.yul\":10624:10627   */\n      0x00\n        /* \"#utility.yul\":10645:10712   */\n      tag_405\n        /* \"#utility.yul\":10709:10711   */\n      0x26\n        /* \"#utility.yul\":10704:10707   */\n      dup4\n        /* \"#utility.yul\":10645:10712   */\n      tag_282\n      jump\t// in\n    tag_405:\n        /* \"#utility.yul\":10638:10712   */\n      swap2\n      pop\n        /* \"#utility.yul\":10721:10814   */\n      tag_406\n        /* \"#utility.yul\":10810:10813   */\n      dup3\n        /* \"#utility.yul\":10721:10814   */\n      tag_287\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":10839:10841   */\n      0x40\n        /* \"#utility.yul\":10834:10837   */\n      dup3\n        /* \"#utility.yul\":10830:10842   */\n      add\n        /* \"#utility.yul\":10823:10842   */\n      swap1\n      pop\n        /* \"#utility.yul\":10482:10848   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10854:11273   */\n    tag_189:\n        /* \"#utility.yul\":11020:11024   */\n      0x00\n        /* \"#utility.yul\":11058:11060   */\n      0x20\n        /* \"#utility.yul\":11047:11056   */\n      dup3\n        /* \"#utility.yul\":11043:11061   */\n      add\n        /* \"#utility.yul\":11035:11061   */\n      swap1\n      pop\n        /* \"#utility.yul\":11107:11116   */\n      dup2\n        /* \"#utility.yul\":11101:11105   */\n      dup2\n        /* \"#utility.yul\":11097:11117   */\n      sub\n        /* \"#utility.yul\":11093:11094   */\n      0x00\n        /* \"#utility.yul\":11082:11091   */\n      dup4\n        /* \"#utility.yul\":11078:11095   */\n      add\n        /* \"#utility.yul\":11071:11118   */\n      mstore\n        /* \"#utility.yul\":11135:11266   */\n      tag_408\n        /* \"#utility.yul\":11261:11265   */\n      dup2\n        /* \"#utility.yul\":11135:11266   */\n      tag_288\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":11127:11266   */\n      swap1\n      pop\n        /* \"#utility.yul\":10854:11273   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11279:11611   */\n    tag_205:\n        /* \"#utility.yul\":11400:11404   */\n      0x00\n        /* \"#utility.yul\":11438:11440   */\n      0x40\n        /* \"#utility.yul\":11427:11436   */\n      dup3\n        /* \"#utility.yul\":11423:11441   */\n      add\n        /* \"#utility.yul\":11415:11441   */\n      swap1\n      pop\n        /* \"#utility.yul\":11451:11522   */\n      tag_410\n        /* \"#utility.yul\":11519:11520   */\n      0x00\n        /* \"#utility.yul\":11508:11517   */\n      dup4\n        /* \"#utility.yul\":11504:11521   */\n      add\n        /* \"#utility.yul\":11495:11501   */\n      dup6\n        /* \"#utility.yul\":11451:11522   */\n      tag_275\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":11532:11604   */\n      tag_411\n        /* \"#utility.yul\":11600:11602   */\n      0x20\n        /* \"#utility.yul\":11589:11598   */\n      dup4\n        /* \"#utility.yul\":11585:11603   */\n      add\n        /* \"#utility.yul\":11576:11582   */\n      dup5\n        /* \"#utility.yul\":11532:11604   */\n      tag_267\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":11279:11611   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11617:12059   */\n    tag_212:\n        /* \"#utility.yul\":11766:11770   */\n      0x00\n        /* \"#utility.yul\":11804:11806   */\n      0x60\n        /* \"#utility.yul\":11793:11802   */\n      dup3\n        /* \"#utility.yul\":11789:11807   */\n      add\n        /* \"#utility.yul\":11781:11807   */\n      swap1\n      pop\n        /* \"#utility.yul\":11817:11888   */\n      tag_413\n        /* \"#utility.yul\":11885:11886   */\n      0x00\n        /* \"#utility.yul\":11874:11883   */\n      dup4\n        /* \"#utility.yul\":11870:11887   */\n      add\n        /* \"#utility.yul\":11861:11867   */\n      dup7\n        /* \"#utility.yul\":11817:11888   */\n      tag_275\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":11898:11970   */\n      tag_414\n        /* \"#utility.yul\":11966:11968   */\n      0x20\n        /* \"#utility.yul\":11955:11964   */\n      dup4\n        /* \"#utility.yul\":11951:11969   */\n      add\n        /* \"#utility.yul\":11942:11948   */\n      dup6\n        /* \"#utility.yul\":11898:11970   */\n      tag_275\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":11980:12052   */\n      tag_415\n        /* \"#utility.yul\":12048:12050   */\n      0x40\n        /* \"#utility.yul\":12037:12046   */\n      dup4\n        /* \"#utility.yul\":12033:12051   */\n      add\n        /* \"#utility.yul\":12024:12030   */\n      dup5\n        /* \"#utility.yul\":11980:12052   */\n      tag_267\n      jump\t// in\n    tag_415:\n        /* \"#utility.yul\":11617:12059   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12065:12181   */\n    tag_289:\n        /* \"#utility.yul\":12135:12156   */\n      tag_417\n        /* \"#utility.yul\":12150:12155   */\n      dup2\n        /* \"#utility.yul\":12135:12156   */\n      tag_278\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":12128:12133   */\n      dup2\n        /* \"#utility.yul\":12125:12157   */\n      eq\n        /* \"#utility.yul\":12115:12175   */\n      tag_418\n      jumpi\n        /* \"#utility.yul\":12171:12172   */\n      0x00\n        /* \"#utility.yul\":12168:12169   */\n      dup1\n        /* \"#utility.yul\":12161:12173   */\n      revert\n        /* \"#utility.yul\":12115:12175   */\n    tag_418:\n        /* \"#utility.yul\":12065:12181   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12187:12324   */\n    tag_290:\n        /* \"#utility.yul\":12241:12246   */\n      0x00\n        /* \"#utility.yul\":12272:12278   */\n      dup2\n        /* \"#utility.yul\":12266:12279   */\n      mload\n        /* \"#utility.yul\":12257:12279   */\n      swap1\n      pop\n        /* \"#utility.yul\":12288:12318   */\n      tag_420\n        /* \"#utility.yul\":12312:12317   */\n      dup2\n        /* \"#utility.yul\":12288:12318   */\n      tag_289\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":12187:12324   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12330:12675   */\n    tag_230:\n        /* \"#utility.yul\":12397:12403   */\n      0x00\n        /* \"#utility.yul\":12446:12448   */\n      0x20\n        /* \"#utility.yul\":12434:12443   */\n      dup3\n        /* \"#utility.yul\":12425:12432   */\n      dup5\n        /* \"#utility.yul\":12421:12444   */\n      sub\n        /* \"#utility.yul\":12417:12449   */\n      slt\n        /* \"#utility.yul\":12414:12533   */\n      iszero\n      tag_422\n      jumpi\n        /* \"#utility.yul\":12452:12531   */\n      tag_423\n      tag_269\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":12414:12533   */\n    tag_422:\n        /* \"#utility.yul\":12572:12573   */\n      0x00\n        /* \"#utility.yul\":12597:12658   */\n      tag_424\n        /* \"#utility.yul\":12650:12657   */\n      dup5\n        /* \"#utility.yul\":12641:12647   */\n      dup3\n        /* \"#utility.yul\":12630:12639   */\n      dup6\n        /* \"#utility.yul\":12626:12648   */\n      add\n        /* \"#utility.yul\":12597:12658   */\n      tag_290\n      jump\t// in\n    tag_424:\n        /* \"#utility.yul\":12587:12658   */\n      swap2\n      pop\n        /* \"#utility.yul\":12543:12668   */\n      pop\n        /* \"#utility.yul\":12330:12675   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12681:12910   */\n    tag_291:\n        /* \"#utility.yul\":12821:12855   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":12817:12818   */\n      0x00\n        /* \"#utility.yul\":12809:12815   */\n      dup3\n        /* \"#utility.yul\":12805:12819   */\n      add\n        /* \"#utility.yul\":12798:12856   */\n      mstore\n        /* \"#utility.yul\":12890:12902   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12885:12887   */\n      0x20\n        /* \"#utility.yul\":12877:12883   */\n      dup3\n        /* \"#utility.yul\":12873:12888   */\n      add\n        /* \"#utility.yul\":12866:12903   */\n      mstore\n        /* \"#utility.yul\":12681:12910   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12916:13282   */\n    tag_292:\n        /* \"#utility.yul\":13058:13061   */\n      0x00\n        /* \"#utility.yul\":13079:13146   */\n      tag_427\n        /* \"#utility.yul\":13143:13145   */\n      0x2a\n        /* \"#utility.yul\":13138:13141   */\n      dup4\n        /* \"#utility.yul\":13079:13146   */\n      tag_282\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":13072:13146   */\n      swap2\n      pop\n        /* \"#utility.yul\":13155:13248   */\n      tag_428\n        /* \"#utility.yul\":13244:13247   */\n      dup3\n        /* \"#utility.yul\":13155:13248   */\n      tag_291\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":13273:13275   */\n      0x40\n        /* \"#utility.yul\":13268:13271   */\n      dup3\n        /* \"#utility.yul\":13264:13276   */\n      add\n        /* \"#utility.yul\":13257:13276   */\n      swap1\n      pop\n        /* \"#utility.yul\":12916:13282   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13288:13707   */\n    tag_233:\n        /* \"#utility.yul\":13454:13458   */\n      0x00\n        /* \"#utility.yul\":13492:13494   */\n      0x20\n        /* \"#utility.yul\":13481:13490   */\n      dup3\n        /* \"#utility.yul\":13477:13495   */\n      add\n        /* \"#utility.yul\":13469:13495   */\n      swap1\n      pop\n        /* \"#utility.yul\":13541:13550   */\n      dup2\n        /* \"#utility.yul\":13535:13539   */\n      dup2\n        /* \"#utility.yul\":13531:13551   */\n      sub\n        /* \"#utility.yul\":13527:13528   */\n      0x00\n        /* \"#utility.yul\":13516:13525   */\n      dup4\n        /* \"#utility.yul\":13512:13529   */\n      add\n        /* \"#utility.yul\":13505:13552   */\n      mstore\n        /* \"#utility.yul\":13569:13700   */\n      tag_430\n        /* \"#utility.yul\":13695:13699   */\n      dup2\n        /* \"#utility.yul\":13569:13700   */\n      tag_292\n      jump\t// in\n    tag_430:\n        /* \"#utility.yul\":13561:13700   */\n      swap1\n      pop\n        /* \"#utility.yul\":13288:13707   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13713:13938   */\n    tag_293:\n        /* \"#utility.yul\":13853:13887   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":13849:13850   */\n      0x00\n        /* \"#utility.yul\":13841:13847   */\n      dup3\n        /* \"#utility.yul\":13837:13851   */\n      add\n        /* \"#utility.yul\":13830:13888   */\n      mstore\n        /* \"#utility.yul\":13922:13930   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13917:13919   */\n      0x20\n        /* \"#utility.yul\":13909:13915   */\n      dup3\n        /* \"#utility.yul\":13905:13920   */\n      add\n        /* \"#utility.yul\":13898:13931   */\n      mstore\n        /* \"#utility.yul\":13713:13938   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13944:14310   */\n    tag_294:\n        /* \"#utility.yul\":14086:14089   */\n      0x00\n        /* \"#utility.yul\":14107:14174   */\n      tag_433\n        /* \"#utility.yul\":14171:14173   */\n      0x26\n        /* \"#utility.yul\":14166:14169   */\n      dup4\n        /* \"#utility.yul\":14107:14174   */\n      tag_282\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":14100:14174   */\n      swap2\n      pop\n        /* \"#utility.yul\":14183:14276   */\n      tag_434\n        /* \"#utility.yul\":14272:14275   */\n      dup3\n        /* \"#utility.yul\":14183:14276   */\n      tag_293\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":14301:14303   */\n      0x40\n        /* \"#utility.yul\":14296:14299   */\n      dup3\n        /* \"#utility.yul\":14292:14304   */\n      add\n        /* \"#utility.yul\":14285:14304   */\n      swap1\n      pop\n        /* \"#utility.yul\":13944:14310   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14316:14735   */\n    tag_240:\n        /* \"#utility.yul\":14482:14486   */\n      0x00\n        /* \"#utility.yul\":14520:14522   */\n      0x20\n        /* \"#utility.yul\":14509:14518   */\n      dup3\n        /* \"#utility.yul\":14505:14523   */\n      add\n        /* \"#utility.yul\":14497:14523   */\n      swap1\n      pop\n        /* \"#utility.yul\":14569:14578   */\n      dup2\n        /* \"#utility.yul\":14563:14567   */\n      dup2\n        /* \"#utility.yul\":14559:14579   */\n      sub\n        /* \"#utility.yul\":14555:14556   */\n      0x00\n        /* \"#utility.yul\":14544:14553   */\n      dup4\n        /* \"#utility.yul\":14540:14557   */\n      add\n        /* \"#utility.yul\":14533:14580   */\n      mstore\n        /* \"#utility.yul\":14597:14728   */\n      tag_436\n        /* \"#utility.yul\":14723:14727   */\n      dup2\n        /* \"#utility.yul\":14597:14728   */\n      tag_294\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":14589:14728   */\n      swap1\n      pop\n        /* \"#utility.yul\":14316:14735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14741:14920   */\n    tag_295:\n        /* \"#utility.yul\":14881:14912   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":14877:14878   */\n      0x00\n        /* \"#utility.yul\":14869:14875   */\n      dup3\n        /* \"#utility.yul\":14865:14879   */\n      add\n        /* \"#utility.yul\":14858:14913   */\n      mstore\n        /* \"#utility.yul\":14741:14920   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14926:15292   */\n    tag_296:\n        /* \"#utility.yul\":15068:15071   */\n      0x00\n        /* \"#utility.yul\":15089:15156   */\n      tag_439\n        /* \"#utility.yul\":15153:15155   */\n      0x1d\n        /* \"#utility.yul\":15148:15151   */\n      dup4\n        /* \"#utility.yul\":15089:15156   */\n      tag_282\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":15082:15156   */\n      swap2\n      pop\n        /* \"#utility.yul\":15165:15258   */\n      tag_440\n        /* \"#utility.yul\":15254:15257   */\n      dup3\n        /* \"#utility.yul\":15165:15258   */\n      tag_295\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":15283:15285   */\n      0x20\n        /* \"#utility.yul\":15278:15281   */\n      dup3\n        /* \"#utility.yul\":15274:15286   */\n      add\n        /* \"#utility.yul\":15267:15286   */\n      swap1\n      pop\n        /* \"#utility.yul\":14926:15292   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15298:15717   */\n    tag_245:\n        /* \"#utility.yul\":15464:15468   */\n      0x00\n        /* \"#utility.yul\":15502:15504   */\n      0x20\n        /* \"#utility.yul\":15491:15500   */\n      dup3\n        /* \"#utility.yul\":15487:15505   */\n      add\n        /* \"#utility.yul\":15479:15505   */\n      swap1\n      pop\n        /* \"#utility.yul\":15551:15560   */\n      dup2\n        /* \"#utility.yul\":15545:15549   */\n      dup2\n        /* \"#utility.yul\":15541:15561   */\n      sub\n        /* \"#utility.yul\":15537:15538   */\n      0x00\n        /* \"#utility.yul\":15526:15535   */\n      dup4\n        /* \"#utility.yul\":15522:15539   */\n      add\n        /* \"#utility.yul\":15515:15562   */\n      mstore\n        /* \"#utility.yul\":15579:15710   */\n      tag_442\n        /* \"#utility.yul\":15705:15709   */\n      dup2\n        /* \"#utility.yul\":15579:15710   */\n      tag_296\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":15571:15710   */\n      swap1\n      pop\n        /* \"#utility.yul\":15298:15717   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15723:15821   */\n    tag_297:\n        /* \"#utility.yul\":15774:15780   */\n      0x00\n        /* \"#utility.yul\":15808:15813   */\n      dup2\n        /* \"#utility.yul\":15802:15814   */\n      mload\n        /* \"#utility.yul\":15792:15814   */\n      swap1\n      pop\n        /* \"#utility.yul\":15723:15821   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15827:15974   */\n    tag_298:\n        /* \"#utility.yul\":15928:15939   */\n      0x00\n        /* \"#utility.yul\":15965:15968   */\n      dup2\n        /* \"#utility.yul\":15950:15968   */\n      swap1\n      pop\n        /* \"#utility.yul\":15827:15974   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15980:16287   */\n    tag_299:\n        /* \"#utility.yul\":16048:16049   */\n      0x00\n        /* \"#utility.yul\":16058:16171   */\n    tag_446:\n        /* \"#utility.yul\":16072:16078   */\n      dup4\n        /* \"#utility.yul\":16069:16070   */\n      dup2\n        /* \"#utility.yul\":16066:16079   */\n      lt\n        /* \"#utility.yul\":16058:16171   */\n      iszero\n      tag_448\n      jumpi\n        /* \"#utility.yul\":16157:16158   */\n      dup1\n        /* \"#utility.yul\":16152:16155   */\n      dup3\n        /* \"#utility.yul\":16148:16159   */\n      add\n        /* \"#utility.yul\":16142:16160   */\n      mload\n        /* \"#utility.yul\":16138:16139   */\n      dup2\n        /* \"#utility.yul\":16133:16136   */\n      dup5\n        /* \"#utility.yul\":16129:16140   */\n      add\n        /* \"#utility.yul\":16122:16161   */\n      mstore\n        /* \"#utility.yul\":16094:16096   */\n      0x20\n        /* \"#utility.yul\":16091:16092   */\n      dup2\n        /* \"#utility.yul\":16087:16097   */\n      add\n        /* \"#utility.yul\":16082:16097   */\n      swap1\n      pop\n        /* \"#utility.yul\":16058:16171   */\n      jump(tag_446)\n    tag_448:\n        /* \"#utility.yul\":16189:16195   */\n      dup4\n        /* \"#utility.yul\":16186:16187   */\n      dup2\n        /* \"#utility.yul\":16183:16196   */\n      gt\n        /* \"#utility.yul\":16180:16281   */\n      iszero\n      tag_449\n      jumpi\n        /* \"#utility.yul\":16269:16270   */\n      0x00\n        /* \"#utility.yul\":16260:16266   */\n      dup5\n        /* \"#utility.yul\":16255:16258   */\n      dup5\n        /* \"#utility.yul\":16251:16267   */\n      add\n        /* \"#utility.yul\":16244:16271   */\n      mstore\n        /* \"#utility.yul\":16180:16281   */\n    tag_449:\n        /* \"#utility.yul\":16029:16287   */\n      pop\n        /* \"#utility.yul\":15980:16287   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16293:16666   */\n    tag_300:\n        /* \"#utility.yul\":16397:16400   */\n      0x00\n        /* \"#utility.yul\":16425:16463   */\n      tag_451\n        /* \"#utility.yul\":16457:16462   */\n      dup3\n        /* \"#utility.yul\":16425:16463   */\n      tag_297\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":16479:16567   */\n      tag_452\n        /* \"#utility.yul\":16560:16566   */\n      dup2\n        /* \"#utility.yul\":16555:16558   */\n      dup6\n        /* \"#utility.yul\":16479:16567   */\n      tag_298\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":16472:16567   */\n      swap4\n      pop\n        /* \"#utility.yul\":16576:16628   */\n      tag_453\n        /* \"#utility.yul\":16621:16627   */\n      dup2\n        /* \"#utility.yul\":16616:16619   */\n      dup6\n        /* \"#utility.yul\":16609:16613   */\n      0x20\n        /* \"#utility.yul\":16602:16607   */\n      dup7\n        /* \"#utility.yul\":16598:16614   */\n      add\n        /* \"#utility.yul\":16576:16628   */\n      tag_299\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":16653:16659   */\n      dup1\n        /* \"#utility.yul\":16648:16651   */\n      dup5\n        /* \"#utility.yul\":16644:16660   */\n      add\n        /* \"#utility.yul\":16637:16660   */\n      swap2\n      pop\n        /* \"#utility.yul\":16401:16666   */\n      pop\n        /* \"#utility.yul\":16293:16666   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16672:16943   */\n    tag_247:\n        /* \"#utility.yul\":16802:16805   */\n      0x00\n        /* \"#utility.yul\":16824:16917   */\n      tag_455\n        /* \"#utility.yul\":16913:16916   */\n      dup3\n        /* \"#utility.yul\":16904:16910   */\n      dup5\n        /* \"#utility.yul\":16824:16917   */\n      tag_300\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":16817:16917   */\n      swap2\n      pop\n        /* \"#utility.yul\":16934:16937   */\n      dup2\n        /* \"#utility.yul\":16927:16937   */\n      swap1\n      pop\n        /* \"#utility.yul\":16672:16943   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16949:17048   */\n    tag_301:\n        /* \"#utility.yul\":17001:17007   */\n      0x00\n        /* \"#utility.yul\":17035:17040   */\n      dup2\n        /* \"#utility.yul\":17029:17041   */\n      mload\n        /* \"#utility.yul\":17019:17041   */\n      swap1\n      pop\n        /* \"#utility.yul\":16949:17048   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17054:17156   */\n    tag_302:\n        /* \"#utility.yul\":17095:17101   */\n      0x00\n        /* \"#utility.yul\":17146:17148   */\n      0x1f\n        /* \"#utility.yul\":17142:17149   */\n      not\n        /* \"#utility.yul\":17137:17139   */\n      0x1f\n        /* \"#utility.yul\":17130:17135   */\n      dup4\n        /* \"#utility.yul\":17126:17140   */\n      add\n        /* \"#utility.yul\":17122:17150   */\n      and\n        /* \"#utility.yul\":17112:17150   */\n      swap1\n      pop\n        /* \"#utility.yul\":17054:17156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17162:17526   */\n    tag_303:\n        /* \"#utility.yul\":17250:17253   */\n      0x00\n        /* \"#utility.yul\":17278:17317   */\n      tag_459\n        /* \"#utility.yul\":17311:17316   */\n      dup3\n        /* \"#utility.yul\":17278:17317   */\n      tag_301\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":17333:17404   */\n      tag_460\n        /* \"#utility.yul\":17397:17403   */\n      dup2\n        /* \"#utility.yul\":17392:17395   */\n      dup6\n        /* \"#utility.yul\":17333:17404   */\n      tag_282\n      jump\t// in\n    tag_460:\n        /* \"#utility.yul\":17326:17404   */\n      swap4\n      pop\n        /* \"#utility.yul\":17413:17465   */\n      tag_461\n        /* \"#utility.yul\":17458:17464   */\n      dup2\n        /* \"#utility.yul\":17453:17456   */\n      dup6\n        /* \"#utility.yul\":17446:17450   */\n      0x20\n        /* \"#utility.yul\":17439:17444   */\n      dup7\n        /* \"#utility.yul\":17435:17451   */\n      add\n        /* \"#utility.yul\":17413:17465   */\n      tag_299\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":17490:17519   */\n      tag_462\n        /* \"#utility.yul\":17512:17518   */\n      dup2\n        /* \"#utility.yul\":17490:17519   */\n      tag_302\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":17485:17488   */\n      dup5\n        /* \"#utility.yul\":17481:17520   */\n      add\n        /* \"#utility.yul\":17474:17520   */\n      swap2\n      pop\n        /* \"#utility.yul\":17254:17526   */\n      pop\n        /* \"#utility.yul\":17162:17526   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17532:17845   */\n    tag_260:\n        /* \"#utility.yul\":17645:17649   */\n      0x00\n        /* \"#utility.yul\":17683:17685   */\n      0x20\n        /* \"#utility.yul\":17672:17681   */\n      dup3\n        /* \"#utility.yul\":17668:17686   */\n      add\n        /* \"#utility.yul\":17660:17686   */\n      swap1\n      pop\n        /* \"#utility.yul\":17732:17741   */\n      dup2\n        /* \"#utility.yul\":17726:17730   */\n      dup2\n        /* \"#utility.yul\":17722:17742   */\n      sub\n        /* \"#utility.yul\":17718:17719   */\n      0x00\n        /* \"#utility.yul\":17707:17716   */\n      dup4\n        /* \"#utility.yul\":17703:17720   */\n      add\n        /* \"#utility.yul\":17696:17743   */\n      mstore\n        /* \"#utility.yul\":17760:17838   */\n      tag_464\n        /* \"#utility.yul\":17833:17837   */\n      dup2\n        /* \"#utility.yul\":17824:17830   */\n      dup5\n        /* \"#utility.yul\":17760:17838   */\n      tag_303\n      jump\t// in\n    tag_464:\n        /* \"#utility.yul\":17752:17838   */\n      swap1\n      pop\n        /* \"#utility.yul\":17532:17845   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220de3326d9b93652fa9e3600c060ec6931baea4ade6088a5316f3fee6a01b3b2ea64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_874": {
									"entryPoint": null,
									"id": 874,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": 268,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 276,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 557,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 580,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 511,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 479,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 474,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:7",
														"type": ""
													}
												],
												"src": "7:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:7",
														"type": ""
													}
												],
												"src": "334:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:7",
														"type": ""
													}
												],
												"src": "466:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:7"
															},
															"nodeType": "YulIf",
															"src": "621:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:7",
														"type": ""
													}
												],
												"src": "568:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:7"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:7",
														"type": ""
													}
												],
												"src": "696:143:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:7"
															},
															"nodeType": "YulIf",
															"src": "932:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:7",
														"type": ""
													}
												],
												"src": "845:351:7"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200224138038062002241833981810160405281019062000037919062000244565b60016000819055506200005f620000536200010c60201b60201c565b6200011460201b60201c565b600f600381905550605060048190555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600260006276a70081526020019081526020016000208190555060076002600062ed4e008152602001908152602001600020819055506008600260006301e133808152602001908152602001600020819055505062000276565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020c82620001df565b9050919050565b6200021e81620001ff565b81146200022a57600080fd5b50565b6000815190506200023e8162000213565b92915050565b6000602082840312156200025d576200025c620001da565b5b60006200026d848285016200022d565b91505092915050565b611fbb80620002866000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a143a5f2116100ad578063c63aa3e711610071578063c63aa3e7146102c0578063cb79c2e1146102de578063d2a569c3146102fc578063d5dbdf1b14610306578063f2fde38b1461032257610121565b8063a143a5f214610208578063a3ec138d14610238578063b5d9df8314610268578063b87da76d14610298578063bed9d861146102b657610121565b80637b0472f0116100f45780637b0472f0146101765780638891cf0d146101925780638c63f97f146101b05780638c8e8fee146101cc5780638da5cb5b146101ea57610121565b806310486b6a146101265780635b88349d146101445780635f5300ff1461014e578063715018a61461016c575b600080fd5b61012e61033e565b60405161013b9190611740565b60405180910390f35b61014c610513565b005b6101566105fa565b604051610163919061176b565b60405180910390f35b610174610600565b005b610190600480360381019061018b91906117b7565b610688565b005b61019a61098e565b6040516101a7919061176b565b60405180910390f35b6101ca60048036038101906101c591906117f7565b610994565b005b6101d4610a8c565b6040516101e19190611865565b60405180910390f35b6101f2610ab2565b6040516101ff9190611865565b60405180910390f35b610222600480360381019061021d91906117f7565b610adc565b60405161022f919061176b565b60405180910390f35b610252600480360381019061024d91906118ac565b610af4565b60405161025f91906118f4565b60405180910390f35b610282600480360381019061027d91906117f7565b610b1f565b60405161028f919061176b565b60405180910390f35b6102a0610b42565b6040516102ad919061176b565b60405180910390f35b6102be610b48565b005b6102c8610dd9565b6040516102d5919061176b565b60405180910390f35b6102e6610de1565b6040516102f3919061176b565b60405180910390f35b610304610de7565b005b610320600480360381019061031b91906117f7565b610e6c565b005b61033c600480360381019061033791906118ac565b610f64565b005b6103466115f2565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816000015111610418576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060600160405280600081526020016000815260200183815250905060006104448361105c565b90504282604001516060015111156104a4576103e860035482610467919061193e565b61047191906119c7565b6103e86003548560000151610486919061193e565b61049091906119c7565b61049a91906119f8565b8260200181815250505b60006104b38460c00151610b1f565b11156104de5760006104c884600001516110bc565b905080836040015160a0018181525050506104ee565b6000826040015160a00181815250505b8082604001516080018181525050826000015182600001818152505081935050505090565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411156105f75760006105728260060154610b1f565b14156105aa576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600501819055504281600601819055506105f6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336105f184600001546110bc565b6110ef565b5b50565b60085481565b610608611175565b73ffffffffffffffffffffffffffffffffffffffff16610626610ab2565b73ffffffffffffffffffffffffffffffffffffffff161461067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390611aab565b60405180910390fd5b610686600061117d565b565b600260005414156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590611b17565b60405180910390fd5b60026000819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610752576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008381526020019081526020016000205414156107a0576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860008282546107b391906119f8565b925050819055506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060004290506040518060e0016040528084815260200182815260200160026000858152602001908152602001600020548152602001828461085691906119f8565b815260200160008152602001600081526020016000815250600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050610924600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333086611243565b3373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed8483848661096a91906119f8565b60405161097993929190611b37565b60405180910390a25060016000819055505050565b60045481565b61099c611175565b73ffffffffffffffffffffffffffffffffffffffff166109ba610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0790611aab565b60405180910390fd5b601e811115610a4b576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a981604051610a81919061176b565b60405180910390a150565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a6020528060005260406000206000915090505481565b60096020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b600062093a808242610b319190611b6e565b610b3b91906119c7565b9050919050565b60055481565b60026000541415610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590611b17565b60405180910390fd5b60026000819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000610c358261105c565b9050600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090555050600160086000828254610cc49190611b6e565b92505081905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600754815260200190815260200160002060006101000a81549060ff02191690554282606001511115610d9057600080610d4d8460000151846112cc565b91509150610d89600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338385610d8491906119f8565b6110ef565b5050610dcd565b610dcc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838560000151610dc791906119f8565b6110ef565b5b50506001600081905550565b600042905090565b60035481565b610def611175565b73ffffffffffffffffffffffffffffffffffffffff16610e0d610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90611aab565b60405180910390fd5b42600581905550565b610e74611175565b73ffffffffffffffffffffffffffffffffffffffff16610e92610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90611aab565b60405180910390fd5b60c8811115610f23576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e81604051610f59919061176b565b60405180910390a150565b610f6c611175565b73ffffffffffffffffffffffffffffffffffffffff16610f8a610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790611aab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104790611c14565b60405180910390fd5b6110598161117d565b50565b6000808260000151141561107357600090506110b7565b6a52b7d2dcc80cd2e400000061108c836020015161133c565b836040015184600001516110a0919061193e565b6110aa919061193e565b6110b491906119c7565b90505b919050565b60006301dfe2006103e8600454846110d4919061193e565b6110de91906119c7565b6110e891906119c7565b9050919050565b6111708363a9059cbb60e01b848460405160240161110e929190611c34565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611375565b505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112c6846323b872dd60e01b85858560405160240161126493929190611c5d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611375565b50505050565b60008060008414156112e45760008091509150611335565b6103e8600354856112f5919061193e565b6112ff91906119c7565b8461130a9190611b6e565b6103e86003548561131b919061193e565b61132591906119c7565b846113309190611b6e565b915091505b9250929050565b60006301e1338069d3c21bcecceda1000000834261135a9190611b6e565b611364919061193e565b61136e91906119c7565b9050919050565b60006113d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661143c9092919063ffffffff16565b905060008151111561143757808060200190518101906113f79190611cc0565b611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d90611d5f565b60405180910390fd5b5b505050565b606061144b8484600085611454565b90509392505050565b606082471015611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149090611df1565b60405180910390fd5b6114a285611568565b6114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d890611e5d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161150a9190611ef7565b60006040518083038185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b509150915061155c82828661158b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561159b578290506115eb565b6000835111156115ae5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e29190611f63565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001611613611619565b81525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b61166981611656565b82525050565b60e0820160008201516116856000850182611660565b5060208201516116986020850182611660565b5060408201516116ab6040850182611660565b5060608201516116be6060850182611660565b5060808201516116d16080850182611660565b5060a08201516116e460a0850182611660565b5060c08201516116f760c0850182611660565b50505050565b610120820160008201516117146000850182611660565b5060208201516117276020850182611660565b50604082015161173a604085018261166f565b50505050565b60006101208201905061175660008301846116fd565b92915050565b61176581611656565b82525050565b6000602082019050611780600083018461175c565b92915050565b600080fd5b61179481611656565b811461179f57600080fd5b50565b6000813590506117b18161178b565b92915050565b600080604083850312156117ce576117cd611786565b5b60006117dc858286016117a2565b92505060206117ed858286016117a2565b9150509250929050565b60006020828403121561180d5761180c611786565b5b600061181b848285016117a2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061184f82611824565b9050919050565b61185f81611844565b82525050565b600060208201905061187a6000830184611856565b92915050565b61188981611844565b811461189457600080fd5b50565b6000813590506118a681611880565b92915050565b6000602082840312156118c2576118c1611786565b5b60006118d084828501611897565b91505092915050565b60008115159050919050565b6118ee816118d9565b82525050565b600060208201905061190960008301846118e5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194982611656565b915061195483611656565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561198d5761198c61190f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119d282611656565b91506119dd83611656565b9250826119ed576119ec611998565b5b828204905092915050565b6000611a0382611656565b9150611a0e83611656565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a4357611a4261190f565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a95602083611a4e565b9150611aa082611a5f565b602082019050919050565b60006020820190508181036000830152611ac481611a88565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b01601f83611a4e565b9150611b0c82611acb565b602082019050919050565b60006020820190508181036000830152611b3081611af4565b9050919050565b6000606082019050611b4c600083018661175c565b611b59602083018561175c565b611b66604083018461175c565b949350505050565b6000611b7982611656565b9150611b8483611656565b925082821015611b9757611b9661190f565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611bfe602683611a4e565b9150611c0982611ba2565b604082019050919050565b60006020820190508181036000830152611c2d81611bf1565b9050919050565b6000604082019050611c496000830185611856565b611c56602083018461175c565b9392505050565b6000606082019050611c726000830186611856565b611c7f6020830185611856565b611c8c604083018461175c565b949350505050565b611c9d816118d9565b8114611ca857600080fd5b50565b600081519050611cba81611c94565b92915050565b600060208284031215611cd657611cd5611786565b5b6000611ce484828501611cab565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d49602a83611a4e565b9150611d5482611ced565b604082019050919050565b60006020820190508181036000830152611d7881611d3c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ddb602683611a4e565b9150611de682611d7f565b604082019050919050565b60006020820190508181036000830152611e0a81611dce565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e47601d83611a4e565b9150611e5282611e11565b602082019050919050565b60006020820190508181036000830152611e7681611e3a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611eb1578082015181840152602081019050611e96565b83811115611ec0576000848401525b50505050565b6000611ed182611e7d565b611edb8185611e88565b9350611eeb818560208601611e93565b80840191505092915050565b6000611f038284611ec6565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611f3582611f0e565b611f3f8185611a4e565b9350611f4f818560208601611e93565b611f5881611f19565b840191505092915050565b60006020820190508181036000830152611f7d8184611f2a565b90509291505056fea2646970667358221220de3326d9b93652fa9e3600c060ec6931baea4ade6088a5316f3fee6a01b3b2ea64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2241 CODESIZE SUB DUP1 PUSH3 0x2241 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x244 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH3 0x5F PUSH3 0x53 PUSH3 0x10C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x114 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x50 PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6 PUSH1 0x2 PUSH1 0x0 PUSH3 0x76A700 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x2 PUSH1 0x0 PUSH3 0xED4E00 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x2 PUSH1 0x0 PUSH4 0x1E13380 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP PUSH3 0x276 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x20C DUP3 PUSH3 0x1DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x21E DUP2 PUSH3 0x1FF JUMP JUMPDEST DUP2 EQ PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x23E DUP2 PUSH3 0x213 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x25D JUMPI PUSH3 0x25C PUSH3 0x1DA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x26D DUP5 DUP3 DUP6 ADD PUSH3 0x22D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1FBB DUP1 PUSH3 0x286 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2B6 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1EA JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x33E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x1740 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14C PUSH2 0x513 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x156 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x600 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x190 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x17B7 JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19A PUSH2 0x98E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D4 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F2 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x18F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xB1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A0 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BE PUSH2 0xB48 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E6 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x304 PUSH2 0xDE7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xF64 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT PUSH2 0x418 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x444 DUP4 PUSH2 0x105C JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x4A4 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x486 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x49A SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x4B3 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xB1F JUMP JUMPDEST GT ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 PUSH2 0x4C8 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 PUSH2 0x572 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0xB1F JUMP JUMPDEST EQ ISZERO PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5F6 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5F1 DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x608 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x626 PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x67C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x673 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x686 PUSH1 0x0 PUSH2 0x117D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C5 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x752 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7B3 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x856 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x924 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0x1243 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x96A SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x979 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x99C PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9BA PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA07 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xA4B JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xA81 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0xB31 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xB8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB85 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xC35 DUP3 PUSH2 0x105C JUMP JUMPDEST SWAP1 POP PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCC4 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 PUSH2 0xD4D DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x12CC JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xD89 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xD84 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST POP POP PUSH2 0xDCD JUMP JUMPDEST PUSH2 0xDCC PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xDEF PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE0D PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5A SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xE74 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE92 PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xF59 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xF6C PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF8A PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD7 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1047 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1059 DUP2 PUSH2 0x117D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x1073 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x10B7 JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x108C DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x133C JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x10A0 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10AA SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10B4 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x10D4 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10DE SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x10E8 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1170 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x110E SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1375 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12C6 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1264 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1375 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 SWAP2 POP SWAP2 POP PUSH2 0x1335 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x12FF SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST DUP5 PUSH2 0x130A SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x131B SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x1325 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST DUP5 PUSH2 0x1330 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x135A SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x1364 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13D7 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1437 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x13F7 SWAP2 SWAP1 PUSH2 0x1CC0 JUMP JUMPDEST PUSH2 0x1436 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142D SWAP1 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x144B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1454 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1499 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1490 SWAP1 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14A2 DUP6 PUSH2 0x1568 JUMP JUMPDEST PUSH2 0x14E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D8 SWAP1 PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x150A SWAP2 SWAP1 PUSH2 0x1EF7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x154C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x155C DUP3 DUP3 DUP7 PUSH2 0x158B JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x159B JUMPI DUP3 SWAP1 POP PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x15AE JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E2 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1613 PUSH2 0x1619 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1669 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1685 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1698 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x16AB PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x16BE PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x16D1 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x16E4 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x16F7 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1714 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1727 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x173A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x166F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1756 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1765 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1780 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1794 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP2 EQ PUSH2 0x179F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17B1 DUP2 PUSH2 0x178B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17CE JUMPI PUSH2 0x17CD PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17DC DUP6 DUP3 DUP7 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17ED DUP6 DUP3 DUP7 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180D JUMPI PUSH2 0x180C PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x181B DUP5 DUP3 DUP6 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184F DUP3 PUSH2 0x1824 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x185F DUP2 PUSH2 0x1844 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x187A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1856 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1889 DUP2 PUSH2 0x1844 JUMP JUMPDEST DUP2 EQ PUSH2 0x1894 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A6 DUP2 PUSH2 0x1880 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18C2 JUMPI PUSH2 0x18C1 PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18D0 DUP5 DUP3 DUP6 ADD PUSH2 0x1897 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18EE DUP2 PUSH2 0x18D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1909 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1949 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1954 DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x198D JUMPI PUSH2 0x198C PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19D2 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x19DD DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x19ED JUMPI PUSH2 0x19EC PUSH2 0x1998 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A03 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A0E DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1A43 JUMPI PUSH2 0x1A42 PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 PUSH1 0x20 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA0 DUP3 PUSH2 0x1A5F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AC4 DUP2 PUSH2 0x1A88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 PUSH1 0x1F DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0C DUP3 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B30 DUP2 PUSH2 0x1AF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1B4C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1B59 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1B66 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B79 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B84 DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1B97 JUMPI PUSH2 0x1B96 PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BFE PUSH1 0x26 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1C09 DUP3 PUSH2 0x1BA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C2D DUP2 PUSH2 0x1BF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C72 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C7F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C8C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C9D DUP2 PUSH2 0x18D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x1CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1CBA DUP2 PUSH2 0x1C94 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD6 JUMPI PUSH2 0x1CD5 PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CE4 DUP5 DUP3 DUP6 ADD PUSH2 0x1CAB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D49 PUSH1 0x2A DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1D54 DUP3 PUSH2 0x1CED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D78 DUP2 PUSH2 0x1D3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DDB PUSH1 0x26 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE6 DUP3 PUSH2 0x1D7F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E0A DUP2 PUSH2 0x1DCE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E47 PUSH1 0x1D DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1E52 DUP3 PUSH2 0x1E11 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E76 DUP2 PUSH2 0x1E3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EB1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1E96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED1 DUP3 PUSH2 0x1E7D JUMP JUMPDEST PUSH2 0x1EDB DUP2 DUP6 PUSH2 0x1E88 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F03 DUP3 DUP5 PUSH2 0x1EC6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F35 DUP3 PUSH2 0x1F0E JUMP JUMPDEST PUSH2 0x1F3F DUP2 DUP6 PUSH2 0x1A4E JUMP JUMPDEST SWAP4 POP PUSH2 0x1F4F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0x1F58 DUP2 PUSH2 0x1F19 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F7D DUP2 DUP5 PUSH2 0x1F2A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE CALLER 0x26 0xD9 0xB9 CALLDATASIZE MSTORE STATICCALL SWAP15 CALLDATASIZE STOP 0xC0 PUSH1 0xEC PUSH10 0x31BAEA4ADE6088A5316F EXTCODEHASH 0xEE PUSH11 0x1B3B2EA64736F6C634300 ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1017:11992:6:-:0;;;1742:311;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;;;;921:32:0;940:12;:10;;;:12;;:::i;:::-;921:18;;;:32;;:::i;:::-;1864:2:6;1843:18;:23;;;;1891:2;1877:11;:16;;;;1922:5;1906:13;;:21;;;;;;;;;;;;;;;;;;1966:1;1940:14;:23;1955:7;1940:23;;;;;;;;;;;:27;;;;2005:1;1978:14;:24;1993:8;1978:24;;;;;;;;;;;:28;;;;2044:1;2017:14;:24;2032:8;2017:24;;;;;;;;;;;:28;;;;1742:311;1017:11992;;640:96:5;693:7;719:10;712:17;;640:96;:::o;2270:187:0:-;2343:16;2362:6;;;;;;;;;;;2343:25;;2387:8;2378:6;;:17;;;;;;;;;;;;;;;;;;2441:8;2410:40;;2431:8;2410:40;;;;;;;;;;;;2333:124;2270:187;:::o;88:117:7:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1017:11992:6:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_blockTimestamp_1422": {
									"entryPoint": 3545,
									"id": 1422,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_calculateAirdrop_1456": {
									"entryPoint": 4284,
									"id": 1456,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1133": {
									"entryPoint": 4188,
									"id": 1133,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1102": {
									"entryPoint": 4924,
									"id": 1102,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1174": {
									"entryPoint": 4812,
									"id": 1174,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 4981,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": 4469,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 4477,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_819": {
									"entryPoint": 2446,
									"id": 819,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_821": {
									"entryPoint": 2882,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateWeek_1438": {
									"entryPoint": 2847,
									"id": 1438,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1413": {
									"entryPoint": 3692,
									"id": 1413,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1083": {
									"entryPoint": 2452,
									"id": 1083,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1512": {
									"entryPoint": 1299,
									"id": 1512,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_605": {
									"entryPoint": 5204,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 5180,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_1378": {
									"entryPoint": 830,
									"id": 1378,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_464": {
									"entryPoint": 5480,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": 2738,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1536,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_279": {
									"entryPoint": 4675,
									"id": 279,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 4335,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1059": {
									"entryPoint": 1672,
									"id": 1059,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_817": {
									"entryPoint": 3553,
									"id": 817,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1389": {
									"entryPoint": 3559,
									"id": 1389,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_838": {
									"entryPoint": 2700,
									"id": 838,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_827": {
									"entryPoint": 1530,
									"id": 827,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 3940,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 5515,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@votedUsers_836": {
									"entryPoint": 2780,
									"id": 836,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_832": {
									"entryPoint": 2804,
									"id": 832,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_1261": {
									"entryPoint": 2888,
									"id": 1261,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 6295,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 7339,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6050,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6316,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 7360,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 6135,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 6071,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6373,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7878,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7978,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7153,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7630,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6792,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7738,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7484,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6900,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_struct$_Stake_$889_memory_ptr_to_t_struct$_Stake_$889_memory_ptr": {
									"entryPoint": 5743,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_struct$_StakingSummary_$897_memory_ptr_to_t_struct$_StakingSummary_$897_memory_ptr_fromStack": {
									"entryPoint": 5885,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 5728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 5980,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 7927,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6245,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 7261,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 7220,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6388,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 8035,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7188,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7665,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6827,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7773,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7519,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6935,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed": {
									"entryPoint": 5952,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 5995,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 6967,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 7805,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7950,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7816,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6734,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6648,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 6599,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6462,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 7022,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6212,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6361,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6180,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 5718,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 7827,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 6415,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 6552,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6022,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7961,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 7074,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 7551,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 6751,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 7697,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 7405,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
									"entryPoint": 6859,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 6272,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 7316,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6027,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17848:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "52:32:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "62:16:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "73:5:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "34:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "44:7:7",
														"type": ""
													}
												],
												"src": "7:77:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "145:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "162:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "185:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "167:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "167:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "155:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "155:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "133:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "140:3:7",
														"type": ""
													}
												],
												"src": "90:108:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "356:1304:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "366:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "382:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "387:4:7",
																		"type": "",
																		"value": "0xe0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "378:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "378:14:7"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "370:4:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "402:166:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "439:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "469:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "476:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "465:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "465:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "459:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "459:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "443:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "529:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "547:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "552:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "543:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "543:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "495:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "495:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "495:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "578:165:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "614:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "644:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "651:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "640:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "640:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "634:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "634:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "618:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "704:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "722:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "727:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "718:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "718:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "670:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "670:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "670:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "753:169:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "793:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "823:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "830:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "819:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "819:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "813:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "813:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "797:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "883:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "901:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "906:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "897:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "897:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "849:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "849:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "932:171:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "974:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1004:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1011:4:7",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1000:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1000:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "994:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "994:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "978:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1064:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1082:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1087:4:7",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1078:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1078:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1030:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1030:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1030:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1113:169:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1153:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1183:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1190:4:7",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1179:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1179:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1173:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1173:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1157:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1243:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1261:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1266:4:7",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1257:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1257:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1209:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1209:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1209:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1292:176:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1339:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1369:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1376:4:7",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1365:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1365:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1359:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1359:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1343:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1429:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1447:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1452:4:7",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1443:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1443:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1395:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1395:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1395:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1478:175:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1524:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1554:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1561:4:7",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1550:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1550:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1544:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1544:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1528:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1614:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1632:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1637:4:7",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1628:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1628:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1580:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1580:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1580:63:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_Stake_$889_memory_ptr_to_t_struct$_Stake_$889_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "343:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "350:3:7",
														"type": ""
													}
												],
												"src": "256:1404:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1864:623:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1874:28:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1890:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1895:6:7",
																		"type": "",
																		"value": "0x0120"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1886:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1886:16:7"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "1878:4:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1912:172:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1955:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1985:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1992:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1981:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1981:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1975:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1975:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1959:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2045:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2063:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2068:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2059:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2059:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2011:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2011:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2011:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2094:167:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2132:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2162:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2169:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2158:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2158:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "2152:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2152:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "2136:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2222:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2240:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2245:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2236:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2236:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2188:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2188:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2188:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2271:209:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2307:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2337:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2344:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2333:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2333:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "2327:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2327:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "2311:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2441:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2459:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2464:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2455:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2455:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_struct$_Stake_$889_memory_ptr_to_t_struct$_Stake_$889_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2363:77:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:107:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2363:107:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_StakingSummary_$897_memory_ptr_to_t_struct$_StakingSummary_$897_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1851:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1858:3:7",
														"type": ""
													}
												],
												"src": "1736:751:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2653:187:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2663:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:3:7",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2671:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2671:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2663:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2806:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_StakingSummary_$897_memory_ptr_to_t_struct$_StakingSummary_$897_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2700:105:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2700:133:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2700:133:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2625:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2637:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2648:4:7",
														"type": ""
													}
												],
												"src": "2493:347:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2911:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2928:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2951:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2933:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2933:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2921:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2921:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2921:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2899:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2906:3:7",
														"type": ""
													}
												],
												"src": "2846:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3068:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3078:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3090:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3101:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3086:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3086:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3078:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3158:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3171:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3182:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3167:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3167:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3114:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3114:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3114:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3040:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3052:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3063:4:7",
														"type": ""
													}
												],
												"src": "2970:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3238:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3248:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3264:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3258:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3258:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "3248:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "3231:6:7",
														"type": ""
													}
												],
												"src": "3198:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3368:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3385:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3388:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3378:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3378:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3378:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "3279:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3491:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3508:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3511:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3501:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3501:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3501:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "3402:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3568:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3625:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3634:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3637:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3627:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3627:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3627:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3591:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3616:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3598:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3598:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3588:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3588:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3581:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3581:43:7"
															},
															"nodeType": "YulIf",
															"src": "3578:63:7"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3561:5:7",
														"type": ""
													}
												],
												"src": "3525:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3705:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3715:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3737:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3724:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3724:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3715:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3780:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3753:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3753:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3753:33:7"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3683:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3691:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3699:5:7",
														"type": ""
													}
												],
												"src": "3653:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3881:391:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3927:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3929:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3929:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3929:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3902:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3911:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3898:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3898:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3923:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3894:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3894:32:7"
															},
															"nodeType": "YulIf",
															"src": "3891:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "4020:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4035:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4049:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4039:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4064:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4099:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4110:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4095:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4095:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4119:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4074:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4074:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4064:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4147:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4162:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4176:2:7",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4166:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4192:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4227:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4238:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4223:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4223:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4247:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4202:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4202:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4192:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3843:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3854:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3866:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3874:6:7",
														"type": ""
													}
												],
												"src": "3798:474:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4344:263:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4390:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4392:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4392:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4392:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4365:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4374:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4361:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4361:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4386:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4357:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4357:32:7"
															},
															"nodeType": "YulIf",
															"src": "4354:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "4483:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4498:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4512:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4502:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4527:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4562:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4573:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4558:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4558:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4582:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4537:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4537:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4527:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4314:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4325:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4337:6:7",
														"type": ""
													}
												],
												"src": "4278:329:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4658:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4668:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4683:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4690:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4679:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4679:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4668:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4640:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4650:7:7",
														"type": ""
													}
												],
												"src": "4613:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4790:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4800:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4829:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "4811:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4811:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4800:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4772:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4782:7:7",
														"type": ""
													}
												],
												"src": "4745:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4912:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4929:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4952:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4934:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4934:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4922:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4922:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4922:37:7"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4900:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4907:3:7",
														"type": ""
													}
												],
												"src": "4847:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5069:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5079:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5091:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5102:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5087:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5087:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5079:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5159:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5172:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5183:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5168:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5168:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5115:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5115:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5115:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5041:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5053:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5064:4:7",
														"type": ""
													}
												],
												"src": "4971:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5242:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5299:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5308:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5311:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5301:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5301:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5301:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5265:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5290:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "5272:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5272:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5262:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5262:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5255:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5255:43:7"
															},
															"nodeType": "YulIf",
															"src": "5252:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5235:5:7",
														"type": ""
													}
												],
												"src": "5199:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5379:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5389:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5411:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5398:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5398:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5389:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5454:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "5427:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5427:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5427:33:7"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5357:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5365:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5373:5:7",
														"type": ""
													}
												],
												"src": "5327:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5538:263:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5584:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5586:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5586:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5586:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5559:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5568:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5555:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5555:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5580:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5551:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5551:32:7"
															},
															"nodeType": "YulIf",
															"src": "5548:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "5677:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5692:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5706:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5696:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5721:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5756:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5767:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5752:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5752:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5776:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5731:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5731:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5721:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5508:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5519:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5531:6:7",
														"type": ""
													}
												],
												"src": "5472:329:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5849:48:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5859:32:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5884:5:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5877:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5877:13:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5870:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5870:21:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5859:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5831:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5841:7:7",
														"type": ""
													}
												],
												"src": "5807:90:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5962:50:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5979:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5999:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "5984:14:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5984:21:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5972:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5972:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5972:34:7"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5950:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5957:3:7",
														"type": ""
													}
												],
												"src": "5903:109:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6110:118:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6120:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6132:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6143:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6128:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6128:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6120:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6194:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6207:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6218:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6203:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6203:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6156:37:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6156:65:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6156:65:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6082:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6094:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6105:4:7",
														"type": ""
													}
												],
												"src": "6018:210:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6262:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6279:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6282:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6272:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6272:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6272:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6376:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6379:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6369:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6369:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6369:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6400:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6403:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6393:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6393:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6393:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6234:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6468:300:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6478:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6501:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6483:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6483:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6478:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6512:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6535:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6517:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6517:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6512:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6710:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6712:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6712:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6712:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "6622:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6615:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6615:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "6608:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6608:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6630:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6637:66:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "6705:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "6633:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6633:74:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "6627:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6627:81:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6604:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6604:105:7"
															},
															"nodeType": "YulIf",
															"src": "6601:131:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6742:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6757:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6760:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "6753:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6753:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "6742:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6451:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6454:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "6460:7:7",
														"type": ""
													}
												],
												"src": "6420:348:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6802:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6819:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6822:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6812:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6812:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6812:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6916:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6919:4:7",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6909:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6909:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6909:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6940:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6943:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6933:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6933:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6933:15:7"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "6774:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7002:143:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7012:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7035:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7017:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7017:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "7012:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7046:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7069:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7051:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7051:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "7046:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7093:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "7095:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7095:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7095:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7090:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7083:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7083:9:7"
															},
															"nodeType": "YulIf",
															"src": "7080:35:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7125:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7134:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7137:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "7130:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7130:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7125:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6991:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6994:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "7000:1:7",
														"type": ""
													}
												],
												"src": "6960:185:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7195:261:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7205:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7228:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7210:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7210:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "7205:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7239:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7262:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7244:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7244:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "7239:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7402:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7404:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7404:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7404:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7323:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7330:66:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7398:1:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7326:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7326:74:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7320:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7320:81:7"
															},
															"nodeType": "YulIf",
															"src": "7317:107:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7434:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7445:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7448:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7441:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7441:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7434:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7182:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7185:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7191:3:7",
														"type": ""
													}
												],
												"src": "7151:305:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7558:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7575:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7580:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7568:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7568:19:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7568:19:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7596:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7615:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7620:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7611:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7611:14:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7596:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7530:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7535:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7546:11:7",
														"type": ""
													}
												],
												"src": "7462:169:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7743:76:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7765:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7773:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7761:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7761:14:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7777:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7754:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7754:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7754:58:7"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7735:6:7",
														"type": ""
													}
												],
												"src": "7637:182:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7971:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7981:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8047:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8052:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7988:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7988:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7981:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8153:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "8064:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8064:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8064:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8166:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8177:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8182:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8173:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8173:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8166:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7959:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7967:3:7",
														"type": ""
													}
												],
												"src": "7825:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8368:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8378:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8390:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8401:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8386:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8386:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8378:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8425:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8436:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8421:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8421:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8444:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8450:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8440:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8440:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8414:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8414:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8414:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8470:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8604:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8478:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8478:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8470:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8348:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8363:4:7",
														"type": ""
													}
												],
												"src": "8197:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8728:75:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8750:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8758:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8746:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8746:14:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8762:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8739:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8739:57:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8739:57:7"
														}
													]
												},
												"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8720:6:7",
														"type": ""
													}
												],
												"src": "8622:181:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8955:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8965:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9031:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9036:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8972:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8972:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8965:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9137:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																	"nodeType": "YulIdentifier",
																	"src": "9048:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9048:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9048:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9150:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9161:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9166:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9157:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9157:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9150:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8943:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8951:3:7",
														"type": ""
													}
												],
												"src": "8809:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9352:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9362:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9374:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9385:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9370:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9370:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9362:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9409:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9420:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9405:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9405:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9428:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9434:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9424:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9424:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9398:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9398:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9398:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9454:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9588:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9462:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9462:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9454:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9332:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9347:4:7",
														"type": ""
													}
												],
												"src": "9181:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9760:288:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9770:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9782:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9793:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9778:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9778:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9770:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9850:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9863:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9874:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9859:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9859:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9806:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9806:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9806:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9931:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9944:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9955:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9940:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9940:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9887:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9887:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9887:72:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10013:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10026:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10037:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10022:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10022:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9969:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9969:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9969:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9716:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9728:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9736:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9744:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9755:4:7",
														"type": ""
													}
												],
												"src": "9606:442:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10099:146:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10109:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10132:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10114:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10114:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10109:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10143:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10166:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10148:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10148:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10143:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10190:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10192:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10192:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10192:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10184:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10187:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10181:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10181:8:7"
															},
															"nodeType": "YulIf",
															"src": "10178:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10222:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10234:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10237:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10230:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10230:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10222:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10085:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10088:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10094:4:7",
														"type": ""
													}
												],
												"src": "10054:191:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10357:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10379:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10387:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10375:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10375:14:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10391:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10368:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10368:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10368:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10447:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10455:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10443:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10443:15:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10460:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10436:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10436:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10436:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10349:6:7",
														"type": ""
													}
												],
												"src": "10251:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10628:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10638:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10704:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10709:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10645:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10645:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10638:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10810:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "10721:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10721:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10721:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10823:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10834:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10839:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10830:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10830:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10823:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10616:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10624:3:7",
														"type": ""
													}
												],
												"src": "10482:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11025:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11035:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11047:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11058:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11043:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11043:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11035:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11082:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11093:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11078:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11078:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11101:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11107:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11097:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11097:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11071:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11071:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11071:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11127:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11261:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11135:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11135:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11127:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11005:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11020:4:7",
														"type": ""
													}
												],
												"src": "10854:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11405:206:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11415:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11427:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11438:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11423:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11423:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11415:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11495:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11508:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11519:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11504:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11504:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11451:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11451:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11451:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11576:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11589:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11600:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11585:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11585:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11532:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11532:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11532:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11369:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11381:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11389:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11400:4:7",
														"type": ""
													}
												],
												"src": "11279:332:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11771:288:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11781:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11793:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11804:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11789:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11789:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11781:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11861:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11874:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11885:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11870:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11870:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11817:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11817:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11817:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11942:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11955:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11966:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11951:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11951:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11898:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11898:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11898:72:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12024:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12037:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12048:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12033:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12033:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11980:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11980:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11980:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11727:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11739:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11747:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11755:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11766:4:7",
														"type": ""
													}
												],
												"src": "11617:442:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12105:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12159:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12168:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12171:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12161:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12161:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12161:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12128:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12150:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "12135:14:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12135:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12125:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12125:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12118:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12118:40:7"
															},
															"nodeType": "YulIf",
															"src": "12115:60:7"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12098:5:7",
														"type": ""
													}
												],
												"src": "12065:116:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12247:77:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12257:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "12272:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12266:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12266:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "12257:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12312:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "12288:23:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12288:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12288:30:7"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "12225:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12233:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12241:5:7",
														"type": ""
													}
												],
												"src": "12187:137:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12404:271:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12450:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "12452:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12452:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12452:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12425:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12434:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12421:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12421:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12446:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12417:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12417:32:7"
															},
															"nodeType": "YulIf",
															"src": "12414:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "12543:125:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "12558:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12572:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "12562:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "12587:71:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "12630:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "12641:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "12626:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12626:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12650:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "12597:28:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12597:61:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "12587:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12374:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12385:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12397:6:7",
														"type": ""
													}
												],
												"src": "12330:345:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12787:123:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12809:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12817:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12805:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12805:14:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12821:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12798:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12798:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12798:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12877:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12885:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12873:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12873:15:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12890:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12866:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12866:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12866:37:7"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12779:6:7",
														"type": ""
													}
												],
												"src": "12681:229:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13062:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13072:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13138:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13143:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13079:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13079:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13072:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13244:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "13155:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13155:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13155:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13257:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13268:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13273:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13264:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13264:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13257:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13050:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13058:3:7",
														"type": ""
													}
												],
												"src": "12916:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13459:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13469:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13481:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13492:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13477:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13477:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13469:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13516:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13527:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13512:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13512:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13535:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13541:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13531:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13531:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13505:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13505:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13505:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13561:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13695:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13569:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13569:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13561:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13439:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13454:4:7",
														"type": ""
													}
												],
												"src": "13288:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13819:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13841:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13849:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13837:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13837:14:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13853:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13830:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13830:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13830:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13909:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13917:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13905:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13905:15:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13922:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13898:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13898:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13898:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13811:6:7",
														"type": ""
													}
												],
												"src": "13713:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14090:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14100:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14166:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14171:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14107:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14107:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14100:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14272:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "14183:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14183:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14183:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14285:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14296:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14301:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14292:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14292:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14285:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14078:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14086:3:7",
														"type": ""
													}
												],
												"src": "13944:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14487:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14497:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14509:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14520:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14505:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14505:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14497:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14544:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14555:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14540:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14540:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14563:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14569:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14559:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14559:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14533:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14533:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14533:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14589:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14723:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14597:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14597:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14589:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14467:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14482:4:7",
														"type": ""
													}
												],
												"src": "14316:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14847:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14869:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14877:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14865:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14865:14:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14881:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14858:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14858:55:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14858:55:7"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "14839:6:7",
														"type": ""
													}
												],
												"src": "14741:179:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15072:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15082:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15148:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15153:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15089:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15089:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "15082:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15254:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "15165:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15165:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15165:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15267:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15278:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15283:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15274:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15274:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15267:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15060:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15068:3:7",
														"type": ""
													}
												],
												"src": "14926:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15469:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15479:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15491:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15502:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15487:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15487:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15479:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15526:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15537:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15522:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15522:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15545:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15551:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15541:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15541:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15515:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15515:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15515:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15571:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15705:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15579:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15579:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15571:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15449:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15464:4:7",
														"type": ""
													}
												],
												"src": "15298:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15781:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15792:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15808:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15802:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15802:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "15792:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15764:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15774:6:7",
														"type": ""
													}
												],
												"src": "15723:98:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15940:34:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15950:18:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "15965:3:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "15950:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15912:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15917:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "15928:11:7",
														"type": ""
													}
												],
												"src": "15827:147:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16029:258:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16039:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16048:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "16043:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16108:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16133:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "16138:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16129:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16129:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "16152:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "16157:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16148:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16148:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "16142:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16142:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16122:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16122:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16122:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16069:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16072:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16066:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16066:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16080:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16082:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "16091:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16094:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16087:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16087:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "16082:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16062:3:7",
																"statements": []
															},
															"src": "16058:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16205:76:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16255:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "16260:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16251:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16251:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16269:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16244:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16244:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16244:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16186:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16189:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16183:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16183:13:7"
															},
															"nodeType": "YulIf",
															"src": "16180:101:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "16011:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "16016:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16021:6:7",
														"type": ""
													}
												],
												"src": "15980:307:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16401:265:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16411:52:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16457:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "16425:31:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16425:38:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "16415:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16472:95:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16555:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16560:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16479:75:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16479:88:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16472:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "16602:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16609:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16598:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16598:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16616:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16621:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "16576:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16576:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16576:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16637:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16648:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16653:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16644:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16644:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16637:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16382:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16389:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16397:3:7",
														"type": ""
													}
												],
												"src": "16293:373:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16806:137:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16817:100:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16904:6:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16913:3:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16824:79:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16824:93:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16817:3:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16927:10:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "16934:3:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16927:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16785:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16791:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16802:3:7",
														"type": ""
													}
												],
												"src": "16672:271:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17008:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17019:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17035:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17029:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17029:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "17019:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16991:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17001:6:7",
														"type": ""
													}
												],
												"src": "16949:99:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17102:54:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17112:38:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17130:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17137:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17126:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17126:14:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17146:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "17142:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17142:7:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17122:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17122:28:7"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "17112:6:7"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17085:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "17095:6:7",
														"type": ""
													}
												],
												"src": "17054:102:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17254:272:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17264:53:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17311:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "17278:32:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17278:39:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "17268:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17326:78:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17392:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17397:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17333:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17333:71:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "17326:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17439:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17446:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17435:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17435:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17453:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17458:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "17413:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17413:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17413:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17474:46:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17485:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "17512:6:7"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "17490:21:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17490:29:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17481:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17481:39:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17474:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17235:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17242:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17250:3:7",
														"type": ""
													}
												],
												"src": "17162:364:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17650:195:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17660:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17672:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17683:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17668:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17668:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17660:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17707:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17718:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17703:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17703:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "17726:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17732:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17722:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17722:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17696:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17696:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17696:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17752:86:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17824:6:7"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17833:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17760:63:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17760:78:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17752:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17622:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17634:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17645:4:7",
														"type": ""
													}
												],
												"src": "17532:313:7"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct Staking.Stake -> struct Staking.Stake\n    function abi_encode_t_struct$_Stake_$889_memory_ptr_to_t_struct$_Stake_$889_memory_ptr(value, pos)  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // since\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // rewardAPY\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // releaseTime\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // claimable\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // claimableAirdrop\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // latestClaimDrop\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xc0))\n        }\n\n    }\n\n    // struct Staking.StakingSummary -> struct Staking.StakingSummary\n    function abi_encode_t_struct$_StakingSummary_$897_memory_ptr_to_t_struct$_StakingSummary_$897_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // total_amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // penalty\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // stake\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_struct$_Stake_$889_memory_ptr_to_t_struct$_Stake_$889_memory_ptr(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_StakingSummary_$897_memory_ptr_to_t_struct$_StakingSummary_$897_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101215760003560e01c8063a143a5f2116100ad578063c63aa3e711610071578063c63aa3e7146102c0578063cb79c2e1146102de578063d2a569c3146102fc578063d5dbdf1b14610306578063f2fde38b1461032257610121565b8063a143a5f214610208578063a3ec138d14610238578063b5d9df8314610268578063b87da76d14610298578063bed9d861146102b657610121565b80637b0472f0116100f45780637b0472f0146101765780638891cf0d146101925780638c63f97f146101b05780638c8e8fee146101cc5780638da5cb5b146101ea57610121565b806310486b6a146101265780635b88349d146101445780635f5300ff1461014e578063715018a61461016c575b600080fd5b61012e61033e565b60405161013b9190611740565b60405180910390f35b61014c610513565b005b6101566105fa565b604051610163919061176b565b60405180910390f35b610174610600565b005b610190600480360381019061018b91906117b7565b610688565b005b61019a61098e565b6040516101a7919061176b565b60405180910390f35b6101ca60048036038101906101c591906117f7565b610994565b005b6101d4610a8c565b6040516101e19190611865565b60405180910390f35b6101f2610ab2565b6040516101ff9190611865565b60405180910390f35b610222600480360381019061021d91906117f7565b610adc565b60405161022f919061176b565b60405180910390f35b610252600480360381019061024d91906118ac565b610af4565b60405161025f91906118f4565b60405180910390f35b610282600480360381019061027d91906117f7565b610b1f565b60405161028f919061176b565b60405180910390f35b6102a0610b42565b6040516102ad919061176b565b60405180910390f35b6102be610b48565b005b6102c8610dd9565b6040516102d5919061176b565b60405180910390f35b6102e6610de1565b6040516102f3919061176b565b60405180910390f35b610304610de7565b005b610320600480360381019061031b91906117f7565b610e6c565b005b61033c600480360381019061033791906118ac565b610f64565b005b6103466115f2565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816000015111610418576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060600160405280600081526020016000815260200183815250905060006104448361105c565b90504282604001516060015111156104a4576103e860035482610467919061193e565b61047191906119c7565b6103e86003548560000151610486919061193e565b61049091906119c7565b61049a91906119f8565b8260200181815250505b60006104b38460c00151610b1f565b11156104de5760006104c884600001516110bc565b905080836040015160a0018181525050506104ee565b6000826040015160a00181815250505b8082604001516080018181525050826000015182600001818152505081935050505090565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015411156105f75760006105728260060154610b1f565b14156105aa576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600501819055504281600601819055506105f6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336105f184600001546110bc565b6110ef565b5b50565b60085481565b610608611175565b73ffffffffffffffffffffffffffffffffffffffff16610626610ab2565b73ffffffffffffffffffffffffffffffffffffffff161461067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390611aab565b60405180910390fd5b610686600061117d565b565b600260005414156106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590611b17565b60405180910390fd5b60026000819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610752576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008381526020019081526020016000205414156107a0576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600860008282546107b391906119f8565b925050819055506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060004290506040518060e0016040528084815260200182815260200160026000858152602001908152602001600020548152602001828461085691906119f8565b815260200160008152602001600081526020016000815250600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050610924600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333086611243565b3373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed8483848661096a91906119f8565b60405161097993929190611b37565b60405180910390a25060016000819055505050565b60045481565b61099c611175565b73ffffffffffffffffffffffffffffffffffffffff166109ba610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0790611aab565b60405180910390fd5b601e811115610a4b576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a981604051610a81919061176b565b60405180910390a150565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a6020528060005260406000206000915090505481565b60096020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b600062093a808242610b319190611b6e565b610b3b91906119c7565b9050919050565b60055481565b60026000541415610b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8590611b17565b60405180910390fd5b60026000819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000610c358261105c565b9050600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055600282016000905560038201600090556004820160009055600582016000905560068201600090555050600160086000828254610cc49190611b6e565b92505081905550600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600754815260200190815260200160002060006101000a81549060ff02191690554282606001511115610d9057600080610d4d8460000151846112cc565b91509150610d89600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338385610d8491906119f8565b6110ef565b5050610dcd565b610dcc600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838560000151610dc791906119f8565b6110ef565b5b50506001600081905550565b600042905090565b60035481565b610def611175565b73ffffffffffffffffffffffffffffffffffffffff16610e0d610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90611aab565b60405180910390fd5b42600581905550565b610e74611175565b73ffffffffffffffffffffffffffffffffffffffff16610e92610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90611aab565b60405180910390fd5b60c8811115610f23576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e81604051610f59919061176b565b60405180910390a150565b610f6c611175565b73ffffffffffffffffffffffffffffffffffffffff16610f8a610ab2565b73ffffffffffffffffffffffffffffffffffffffff1614610fe0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd790611aab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104790611c14565b60405180910390fd5b6110598161117d565b50565b6000808260000151141561107357600090506110b7565b6a52b7d2dcc80cd2e400000061108c836020015161133c565b836040015184600001516110a0919061193e565b6110aa919061193e565b6110b491906119c7565b90505b919050565b60006301dfe2006103e8600454846110d4919061193e565b6110de91906119c7565b6110e891906119c7565b9050919050565b6111708363a9059cbb60e01b848460405160240161110e929190611c34565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611375565b505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112c6846323b872dd60e01b85858560405160240161126493929190611c5d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611375565b50505050565b60008060008414156112e45760008091509150611335565b6103e8600354856112f5919061193e565b6112ff91906119c7565b8461130a9190611b6e565b6103e86003548561131b919061193e565b61132591906119c7565b846113309190611b6e565b915091505b9250929050565b60006301e1338069d3c21bcecceda1000000834261135a9190611b6e565b611364919061193e565b61136e91906119c7565b9050919050565b60006113d7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661143c9092919063ffffffff16565b905060008151111561143757808060200190518101906113f79190611cc0565b611436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142d90611d5f565b60405180910390fd5b5b505050565b606061144b8484600085611454565b90509392505050565b606082471015611499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149090611df1565b60405180910390fd5b6114a285611568565b6114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d890611e5d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161150a9190611ef7565b60006040518083038185875af1925050503d8060008114611547576040519150601f19603f3d011682016040523d82523d6000602084013e61154c565b606091505b509150915061155c82828661158b565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561159b578290506115eb565b6000835111156115ae5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e29190611f63565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001611613611619565b81525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b61166981611656565b82525050565b60e0820160008201516116856000850182611660565b5060208201516116986020850182611660565b5060408201516116ab6040850182611660565b5060608201516116be6060850182611660565b5060808201516116d16080850182611660565b5060a08201516116e460a0850182611660565b5060c08201516116f760c0850182611660565b50505050565b610120820160008201516117146000850182611660565b5060208201516117276020850182611660565b50604082015161173a604085018261166f565b50505050565b60006101208201905061175660008301846116fd565b92915050565b61176581611656565b82525050565b6000602082019050611780600083018461175c565b92915050565b600080fd5b61179481611656565b811461179f57600080fd5b50565b6000813590506117b18161178b565b92915050565b600080604083850312156117ce576117cd611786565b5b60006117dc858286016117a2565b92505060206117ed858286016117a2565b9150509250929050565b60006020828403121561180d5761180c611786565b5b600061181b848285016117a2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061184f82611824565b9050919050565b61185f81611844565b82525050565b600060208201905061187a6000830184611856565b92915050565b61188981611844565b811461189457600080fd5b50565b6000813590506118a681611880565b92915050565b6000602082840312156118c2576118c1611786565b5b60006118d084828501611897565b91505092915050565b60008115159050919050565b6118ee816118d9565b82525050565b600060208201905061190960008301846118e5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194982611656565b915061195483611656565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561198d5761198c61190f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119d282611656565b91506119dd83611656565b9250826119ed576119ec611998565b5b828204905092915050565b6000611a0382611656565b9150611a0e83611656565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a4357611a4261190f565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611a95602083611a4e565b9150611aa082611a5f565b602082019050919050565b60006020820190508181036000830152611ac481611a88565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b01601f83611a4e565b9150611b0c82611acb565b602082019050919050565b60006020820190508181036000830152611b3081611af4565b9050919050565b6000606082019050611b4c600083018661175c565b611b59602083018561175c565b611b66604083018461175c565b949350505050565b6000611b7982611656565b9150611b8483611656565b925082821015611b9757611b9661190f565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611bfe602683611a4e565b9150611c0982611ba2565b604082019050919050565b60006020820190508181036000830152611c2d81611bf1565b9050919050565b6000604082019050611c496000830185611856565b611c56602083018461175c565b9392505050565b6000606082019050611c726000830186611856565b611c7f6020830185611856565b611c8c604083018461175c565b949350505050565b611c9d816118d9565b8114611ca857600080fd5b50565b600081519050611cba81611c94565b92915050565b600060208284031215611cd657611cd5611786565b5b6000611ce484828501611cab565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611d49602a83611a4e565b9150611d5482611ced565b604082019050919050565b60006020820190508181036000830152611d7881611d3c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ddb602683611a4e565b9150611de682611d7f565b604082019050919050565b60006020820190508181036000830152611e0a81611dce565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611e47601d83611a4e565b9150611e5282611e11565b602082019050919050565b60006020820190508181036000830152611e7681611e3a565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611eb1578082015181840152602081019050611e96565b83811115611ec0576000848401525b50505050565b6000611ed182611e7d565b611edb8185611e88565b9350611eeb818560208601611e93565b80840191505092915050565b6000611f038284611ec6565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611f3582611f0e565b611f3f8185611a4e565b9350611f4f818560208601611e93565b611f5881611f19565b840191505092915050565b60006020820190508181036000830152611f7d8184611f2a565b90509291505056fea2646970667358221220de3326d9b93652fa9e3600c060ec6931baea4ade6088a5316f3fee6a01b3b2ea64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x322 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2B6 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1EA JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x16C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x33E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x1740 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14C PUSH2 0x513 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x156 PUSH2 0x5FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x163 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x174 PUSH2 0x600 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x190 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x18B SWAP2 SWAP1 PUSH2 0x17B7 JUMP JUMPDEST PUSH2 0x688 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x19A PUSH2 0x98E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0x994 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D4 PUSH2 0xA8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F2 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x222 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21D SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xADC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x22F SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x252 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24D SWAP2 SWAP1 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xAF4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25F SWAP2 SWAP1 PUSH2 0x18F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x282 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xB1F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A0 PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BE PUSH2 0xB48 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C8 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E6 PUSH2 0xDE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F3 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x304 PUSH2 0xDE7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x320 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x17F7 JUMP JUMPDEST PUSH2 0xE6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x33C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x337 SWAP2 SWAP1 PUSH2 0x18AC JUMP JUMPDEST PUSH2 0xF64 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x346 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD GT PUSH2 0x418 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x444 DUP4 PUSH2 0x105C JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x4A4 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x471 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x486 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x490 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x49A SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x4B3 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xB1F JUMP JUMPDEST GT ISZERO PUSH2 0x4DE JUMPI PUSH1 0x0 PUSH2 0x4C8 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x10BC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x4EE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5F7 JUMPI PUSH1 0x0 PUSH2 0x572 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0xB1F JUMP JUMPDEST EQ ISZERO PUSH2 0x5AA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5F6 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5F1 DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0x10BC JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x608 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x626 PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x67C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x673 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x686 PUSH1 0x0 PUSH2 0x117D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6C5 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x752 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7B3 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x856 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x924 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0x1243 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x96A SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x979 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x99C PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9BA PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA07 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0xA4B JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0xA81 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0xB31 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xB8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB85 SWAP1 PUSH2 0x1B17 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH2 0xC35 DUP3 PUSH2 0x105C JUMP JUMPDEST SWAP1 POP PUSH1 0xC PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCC4 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x1 ADD PUSH1 0x0 PUSH1 0x7 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xD90 JUMPI PUSH1 0x0 DUP1 PUSH2 0xD4D DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x12CC JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xD89 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xD84 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST POP POP PUSH2 0xDCD JUMP JUMPDEST PUSH2 0xDCC PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xDC7 SWAP2 SWAP1 PUSH2 0x19F8 JUMP JUMPDEST PUSH2 0x10EF JUMP JUMPDEST JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xDEF PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE0D PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE5A SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xE74 PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE92 PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEE8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEDF SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xF59 SWAP2 SWAP1 PUSH2 0x176B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xF6C PUSH2 0x1175 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF8A PUSH2 0xAB2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xFE0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFD7 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1050 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1047 SWAP1 PUSH2 0x1C14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1059 DUP2 PUSH2 0x117D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x1073 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x10B7 JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x108C DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x133C JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0x10A0 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10AA SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10B4 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0x10D4 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x10DE SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST PUSH2 0x10E8 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1170 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x110E SWAP3 SWAP2 SWAP1 PUSH2 0x1C34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1375 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x12C6 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1264 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1375 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 EQ ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 SWAP2 POP SWAP2 POP PUSH2 0x1335 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x12F5 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x12FF SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST DUP5 PUSH2 0x130A SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x131B SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x1325 SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST DUP5 PUSH2 0x1330 SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x135A SWAP2 SWAP1 PUSH2 0x1B6E JUMP JUMPDEST PUSH2 0x1364 SWAP2 SWAP1 PUSH2 0x193E JUMP JUMPDEST PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x19C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13D7 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x143C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1437 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x13F7 SWAP2 SWAP1 PUSH2 0x1CC0 JUMP JUMPDEST PUSH2 0x1436 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x142D SWAP1 PUSH2 0x1D5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x144B DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1454 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1499 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1490 SWAP1 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x14A2 DUP6 PUSH2 0x1568 JUMP JUMPDEST PUSH2 0x14E1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D8 SWAP1 PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x150A SWAP2 SWAP1 PUSH2 0x1EF7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1547 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x154C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x155C DUP3 DUP3 DUP7 PUSH2 0x158B JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x159B JUMPI DUP3 SWAP1 POP PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x15AE JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15E2 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1613 PUSH2 0x1619 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1669 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1685 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1698 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x16AB PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x16BE PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x16D1 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x16E4 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x16F7 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1714 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1727 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x1660 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x173A PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x166F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1756 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16FD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1765 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1780 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1794 DUP2 PUSH2 0x1656 JUMP JUMPDEST DUP2 EQ PUSH2 0x179F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17B1 DUP2 PUSH2 0x178B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17CE JUMPI PUSH2 0x17CD PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17DC DUP6 DUP3 DUP7 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17ED DUP6 DUP3 DUP7 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x180D JUMPI PUSH2 0x180C PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x181B DUP5 DUP3 DUP6 ADD PUSH2 0x17A2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184F DUP3 PUSH2 0x1824 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x185F DUP2 PUSH2 0x1844 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x187A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1856 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1889 DUP2 PUSH2 0x1844 JUMP JUMPDEST DUP2 EQ PUSH2 0x1894 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A6 DUP2 PUSH2 0x1880 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18C2 JUMPI PUSH2 0x18C1 PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18D0 DUP5 DUP3 DUP6 ADD PUSH2 0x1897 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18EE DUP2 PUSH2 0x18D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1909 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18E5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1949 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1954 DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x198D JUMPI PUSH2 0x198C PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x19D2 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x19DD DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x19ED JUMPI PUSH2 0x19EC PUSH2 0x1998 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A03 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A0E DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1A43 JUMPI PUSH2 0x1A42 PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 PUSH1 0x20 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA0 DUP3 PUSH2 0x1A5F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1AC4 DUP2 PUSH2 0x1A88 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B01 PUSH1 0x1F DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1B0C DUP3 PUSH2 0x1ACB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B30 DUP2 PUSH2 0x1AF4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1B4C PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1B59 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x175C JUMP JUMPDEST PUSH2 0x1B66 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B79 DUP3 PUSH2 0x1656 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B84 DUP4 PUSH2 0x1656 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1B97 JUMPI PUSH2 0x1B96 PUSH2 0x190F JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BFE PUSH1 0x26 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1C09 DUP3 PUSH2 0x1BA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C2D DUP2 PUSH2 0x1BF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1C49 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C56 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1C72 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C7F PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1856 JUMP JUMPDEST PUSH2 0x1C8C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x175C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1C9D DUP2 PUSH2 0x18D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x1CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1CBA DUP2 PUSH2 0x1C94 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD6 JUMPI PUSH2 0x1CD5 PUSH2 0x1786 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CE4 DUP5 DUP3 DUP6 ADD PUSH2 0x1CAB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D49 PUSH1 0x2A DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1D54 DUP3 PUSH2 0x1CED JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D78 DUP2 PUSH2 0x1D3C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DDB PUSH1 0x26 DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE6 DUP3 PUSH2 0x1D7F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E0A DUP2 PUSH2 0x1DCE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E47 PUSH1 0x1D DUP4 PUSH2 0x1A4E JUMP JUMPDEST SWAP2 POP PUSH2 0x1E52 DUP3 PUSH2 0x1E11 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E76 DUP2 PUSH2 0x1E3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1EB1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1E96 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1EC0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1ED1 DUP3 PUSH2 0x1E7D JUMP JUMPDEST PUSH2 0x1EDB DUP2 DUP6 PUSH2 0x1E88 JUMP JUMPDEST SWAP4 POP PUSH2 0x1EEB DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F03 DUP3 DUP5 PUSH2 0x1EC6 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F35 DUP3 PUSH2 0x1F0E JUMP JUMPDEST PUSH2 0x1F3F DUP2 DUP6 PUSH2 0x1A4E JUMP JUMPDEST SWAP4 POP PUSH2 0x1F4F DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST PUSH2 0x1F58 DUP2 PUSH2 0x1F19 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F7D DUP2 DUP5 PUSH2 0x1F2A JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE CALLER 0x26 0xD9 0xB9 CALLDATASIZE MSTORE STATICCALL SWAP15 CALLDATASIZE STOP 0xC0 PUSH1 0xEC PUSH10 0x31BAEA4ADE6088A5316F EXTCODEHASH 0xEE PUSH11 0x1B3B2EA64736F6C634300 ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "1017:11992:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8597:1051;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10555:605;;;:::i;:::-;;1572:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1668:101:0;;;:::i;:::-;;4459:1349:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1436:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5816:313;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1705:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1036:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1651:45:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1605:39;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10218:136;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1469:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7569:1012;;;:::i;:::-;;10112:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1396:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9764:92;;;:::i;:::-;;9864:240;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1918:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8597:1051:6;8640:21;;:::i;:::-;8674:23;8700:12;:24;8713:10;8700:24;;;;;;;;;;;;;;;8674:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8822:1;8801:10;:17;;;:22;8797:87;;8847:25;;;;;;;;;;;;;;8797:87;8894:29;8926:32;;;;;;;;8941:1;8926:32;;;;8944:1;8926:32;;;;8947:10;8926:32;;;8894:64;;8971:14;8988:33;9010:10;8988:21;:33::i;:::-;8971:50;;9066:15;9038:7;:13;;;:25;;;:43;9034:218;;;9235:4;9213:18;;9204:6;:27;;;;:::i;:::-;9203:36;;;;:::i;:::-;9177:4;9155:18;;9135:10;:17;;;:38;;;;:::i;:::-;9134:47;;;;:::i;:::-;9133:107;;;;:::i;:::-;9098:7;:15;;:142;;;;;9034:218;9312:1;9268:41;9282:10;:26;;;9268:13;:41::i;:::-;:45;9264:254;;;9330:15;9348:36;9366:10;:17;;;9348;:36::i;:::-;9330:54;;9432:7;9399;:13;;;:30;;:40;;;;;9315:136;9264:254;;;9505:1;9472:7;:13;;;:30;;:34;;;;;9264:254;9556:6;9530:7;:13;;;:23;;:32;;;;;9596:10;:17;;;9573:7;:20;;:40;;;;;9633:7;9626:14;;;;;8597:1051;:::o;10555:605::-;10652:20;10675:12;:24;10688:10;10675:24;;;;;;;;;;;;;;;10652:47;;10732:1;10716:6;:13;;;:17;10712:441;;;10795:1;10754:37;10768:6;:22;;;10754:13;:37::i;:::-;:42;10750:119;;;10824:29;;;;;;;;;;;;;;10750:119;10911:1;10885:6;:23;;:27;;;;10952:15;10927:6;:22;;:40;;;;10984:157;11032:13;;;;;;;;;;;11065:10;11094:32;11112:6;:13;;;11094:17;:32::i;:::-;10984:22;:157::i;:::-;10712:441;10588:572;10555:605::o;1572:26::-;;;;:::o;1668:101:0:-;1259:12;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4459:1349:6:-;1744:1:1;2325:7;;:19;;2317:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;;;;4768:1:6::1;4733:12;:24;4746:10;4733:24;;;;;;;;;;;;;;;:31;;;:36;4729:99;;4793:23;;;;;;;;;;;;;;4729:99;4875:1;4844:14;:27;4859:11;4844:27;;;;;;;;;;;;:32;4840:103;;;4900:31;;;;;;;;;;;;;;4840:103;4970:1;4955:11;;:16;;;;;;;:::i;:::-;;;;;;;;5015:4;4982:6;:18;4989:10;4982:18;;;;;;;;;;;;;;;:30;;;:37;;;;;;;;;;;;;;;;;;5120:17;5140:15;5120:35;;5316:191;;;;;;;;5336:6;5316:191;;;;5357:9;5316:191;;;;5381:14;:27;5396:11;5381:27;;;;;;;;;;;;5316:191;;;;5438:9;5424:11;:23;;;;:::i;:::-;5316:191;;;;5463:1;5316:191;;;;5479:1;5316:191;;;;5495:1;5316:191;;::::0;5289:12:::1;:24;5302:10;5289:24;;;;;;;;;;;;;;;:218;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5520:147;5568:13;;;;;;;;;;;5597:10;5630:4;5650:6;5520:26;:147::i;:::-;5743:10;5736:64;;;5755:6;5763:9;5789;5775:11;:23;;;;:::i;:::-;5736:64;;;;;;;;:::i;:::-;;;;;;;;4533:1275;1701:1:1::0;2628:7;:22;;;;4459:1349:6;;:::o;1436:26::-;;;;:::o;5816:313::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;5976:2:6::1;5967:6;:11;5963:83;;;6002:32;;;;;;;;;;;;;;5963:83;6077:6;6056:18;:27;;;;6099:22;6114:6;6099:22;;;;;;:::i;:::-;;;;;;;;5816:313:::0;:::o;1705:28::-;;;;;;;;;;;;;:::o;1036:85:0:-;1082:7;1108:6;;;;;;;;;;;1101:13;;1036:85;:::o;1651:45:6:-;;;;;;;;;;;;;;;;;:::o;1605:39::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;10218:136::-;10281:7;10340:6;10327:9;10309:15;:27;;;;:::i;:::-;10308:38;;;;:::i;:::-;10301:45;;10218:136;;;:::o;1469:27::-;;;;:::o;7569:1012::-;1744:1:1;2325:7;;:19;;2317:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;;;;7737:23:6::1;7763:12;:24;7776:10;7763:24;;;;;;;;;;;;;;;7737:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;7798:14;7815:33;7837:10;7815:21;:33::i;:::-;7798:50;;7868:12;:24;7881:10;7868:24;;;;;;;;;;;;;;;;7861:31:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7918:1;7903:11;;:16;;;;;;;:::i;:::-;;;;;;;;7937:6;:18;7944:10;7937:18;;;;;;;;;;;;;;;:24;;:35;7962:9;;7937:35;;;;;;;;;;;;7930:42;;;;;;;;;;;8014:15;7989:10;:22;;;:40;7985:589;;;8065:22;8106::::0;8146:55:::1;8175:10;:17;;;8194:6;8146:28;:55::i;:::-;8046:155;;;;8218:158;8266:13;;;;;;;;;;;8299:10;8346:14;8329;:31;;;;:::i;:::-;8218:22;:158::i;:::-;8031:357;;7985:589;;;8409:153;8457:13;;;;;;;;;;;8490:10;8540:6;8520:10;:17;;;:26;;;;:::i;:::-;8409:22;:153::i;:::-;7985:589;7616:965;;1701:1:1::0;2628:7;:22;;;;7569:1012:6:o;10112:98::-;10160:7;10187:15;10180:22;;10112:98;:::o;1396:33::-;;;;:::o;9764:92::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;9833:15:6::1;9818:12;:30;;;;9764:92::o:0;9864:240::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;9956:3:6::1;9947:6;:12;9943:85;;;9983:33;;;;;;;;;;;;;;9943:85;10052:6;10038:11;:20;;;;10074:22;10089:6;10074:22;;;;;;:::i;:::-;;;;;;;;9864:240:::0;:::o;1918:198:0:-;1259:12;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2026:1:::1;2006:22;;:8;:22;;;;1998:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;6383:450:6:-;6489:7;6539:1;6518:10;:17;;;:22;6514:63;;;6564:1;6557:8;;;;6514:63;6821:4;6774:43;6800:10;:16;;;6774:25;:43::i;:::-;6734:10;:20;;;6697:10;:17;;;:57;;;;:::i;:::-;:120;;;;:::i;:::-;6696:129;;;;:::i;:::-;6676:149;;6383:450;;;;:::o;10362:185::-;10460:7;10531:8;10523:4;10508:11;;10494;:25;;;;:::i;:::-;10493:34;;;;:::i;:::-;10492:47;;;;:::i;:::-;10485:54;;10362:185;;;:::o;701:205:3:-;813:86;833:5;863:23;;;888:2;892:5;840:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;813:19;:86::i;:::-;701:205;;;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;2270:187:0:-;2343:16;2362:6;;;;;;;;;;;2343:25;;2387:8;2378:6;;:17;;;;;;;;;;;;;;;;;;2441:8;2410:40;;2431:8;2410:40;;;;;;;;;;;;2333:124;2270:187;:::o;912:241:3:-;1050:96;1070:5;1100:27;;;1129:4;1135:2;1139:5;1077:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1050:19;:96::i;:::-;912:241;;;;:::o;6841:371:6:-;6961:7;6970;7009:1;6999:6;:11;6995:57;;;7035:1;7038;7027:13;;;;;;6995:57;7126:4;7104:18;;7095:6;:27;;;;:::i;:::-;7094:36;;;;:::i;:::-;7084:6;:47;;;;:::i;:::-;7188:4;7166:18;;7157:6;:27;;;;:::i;:::-;7156:36;;;;:::i;:::-;7146:6;:47;;;;:::i;:::-;7062:142;;;;6841:371;;;;;;:::o;6137:238::-;6237:7;6359:8;6351:4;6342:5;6324:15;:23;;;;:::i;:::-;6323:32;;;;:::i;:::-;6322:45;;;;:::i;:::-;6315:52;;6137:238;;;:::o;3207:706:3:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;3652:27;;;;:69;;;;;:::i;:::-;3626:95;;3755:1;3735:10;:17;:21;3731:176;;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3731:176;3277:636;3207:706;;:::o;3861:223:4:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5236:18;5247:6;5236:10;:18::i;:::-;5228:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;5300:12;5314:23;5341:6;:11;;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;;;;4948:499;;;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7561:692::-;7707:12;7735:7;7731:516;;;7765:10;7758:17;;;;7731:516;7896:1;7876:10;:17;:21;7872:365;;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;;;;;;;;;;:::i;:::-;;;;;;;;7561:692;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:77:7:-;44:7;73:5;62:16;;7:77;;;:::o;90:108::-;167:24;185:5;167:24;:::i;:::-;162:3;155:37;90:108;;:::o;256:1404::-;387:4;382:3;378:14;476:4;469:5;465:16;459:23;495:63;552:4;547:3;543:14;529:12;495:63;:::i;:::-;402:166;651:4;644:5;640:16;634:23;670:63;727:4;722:3;718:14;704:12;670:63;:::i;:::-;578:165;830:4;823:5;819:16;813:23;849:63;906:4;901:3;897:14;883:12;849:63;:::i;:::-;753:169;1011:4;1004:5;1000:16;994:23;1030:63;1087:4;1082:3;1078:14;1064:12;1030:63;:::i;:::-;932:171;1190:4;1183:5;1179:16;1173:23;1209:63;1266:4;1261:3;1257:14;1243:12;1209:63;:::i;:::-;1113:169;1376:4;1369:5;1365:16;1359:23;1395:63;1452:4;1447:3;1443:14;1429:12;1395:63;:::i;:::-;1292:176;1561:4;1554:5;1550:16;1544:23;1580:63;1637:4;1632:3;1628:14;1614:12;1580:63;:::i;:::-;1478:175;356:1304;256:1404;;:::o;1736:751::-;1895:6;1890:3;1886:16;1992:4;1985:5;1981:16;1975:23;2011:63;2068:4;2063:3;2059:14;2045:12;2011:63;:::i;:::-;1912:172;2169:4;2162:5;2158:16;2152:23;2188:63;2245:4;2240:3;2236:14;2222:12;2188:63;:::i;:::-;2094:167;2344:4;2337:5;2333:16;2327:23;2363:107;2464:4;2459:3;2455:14;2441:12;2363:107;:::i;:::-;2271:209;1864:623;1736:751;;:::o;2493:347::-;2648:4;2686:3;2675:9;2671:19;2663:27;;2700:133;2830:1;2819:9;2815:17;2806:6;2700:133;:::i;:::-;2493:347;;;;:::o;2846:118::-;2933:24;2951:5;2933:24;:::i;:::-;2928:3;2921:37;2846:118;;:::o;2970:222::-;3063:4;3101:2;3090:9;3086:18;3078:26;;3114:71;3182:1;3171:9;3167:17;3158:6;3114:71;:::i;:::-;2970:222;;;;:::o;3279:117::-;3388:1;3385;3378:12;3525:122;3598:24;3616:5;3598:24;:::i;:::-;3591:5;3588:35;3578:63;;3637:1;3634;3627:12;3578:63;3525:122;:::o;3653:139::-;3699:5;3737:6;3724:20;3715:29;;3753:33;3780:5;3753:33;:::i;:::-;3653:139;;;;:::o;3798:474::-;3866:6;3874;3923:2;3911:9;3902:7;3898:23;3894:32;3891:119;;;3929:79;;:::i;:::-;3891:119;4049:1;4074:53;4119:7;4110:6;4099:9;4095:22;4074:53;:::i;:::-;4064:63;;4020:117;4176:2;4202:53;4247:7;4238:6;4227:9;4223:22;4202:53;:::i;:::-;4192:63;;4147:118;3798:474;;;;;:::o;4278:329::-;4337:6;4386:2;4374:9;4365:7;4361:23;4357:32;4354:119;;;4392:79;;:::i;:::-;4354:119;4512:1;4537:53;4582:7;4573:6;4562:9;4558:22;4537:53;:::i;:::-;4527:63;;4483:117;4278:329;;;;:::o;4613:126::-;4650:7;4690:42;4683:5;4679:54;4668:65;;4613:126;;;:::o;4745:96::-;4782:7;4811:24;4829:5;4811:24;:::i;:::-;4800:35;;4745:96;;;:::o;4847:118::-;4934:24;4952:5;4934:24;:::i;:::-;4929:3;4922:37;4847:118;;:::o;4971:222::-;5064:4;5102:2;5091:9;5087:18;5079:26;;5115:71;5183:1;5172:9;5168:17;5159:6;5115:71;:::i;:::-;4971:222;;;;:::o;5199:122::-;5272:24;5290:5;5272:24;:::i;:::-;5265:5;5262:35;5252:63;;5311:1;5308;5301:12;5252:63;5199:122;:::o;5327:139::-;5373:5;5411:6;5398:20;5389:29;;5427:33;5454:5;5427:33;:::i;:::-;5327:139;;;;:::o;5472:329::-;5531:6;5580:2;5568:9;5559:7;5555:23;5551:32;5548:119;;;5586:79;;:::i;:::-;5548:119;5706:1;5731:53;5776:7;5767:6;5756:9;5752:22;5731:53;:::i;:::-;5721:63;;5677:117;5472:329;;;;:::o;5807:90::-;5841:7;5884:5;5877:13;5870:21;5859:32;;5807:90;;;:::o;5903:109::-;5984:21;5999:5;5984:21;:::i;:::-;5979:3;5972:34;5903:109;;:::o;6018:210::-;6105:4;6143:2;6132:9;6128:18;6120:26;;6156:65;6218:1;6207:9;6203:17;6194:6;6156:65;:::i;:::-;6018:210;;;;:::o;6234:180::-;6282:77;6279:1;6272:88;6379:4;6376:1;6369:15;6403:4;6400:1;6393:15;6420:348;6460:7;6483:20;6501:1;6483:20;:::i;:::-;6478:25;;6517:20;6535:1;6517:20;:::i;:::-;6512:25;;6705:1;6637:66;6633:74;6630:1;6627:81;6622:1;6615:9;6608:17;6604:105;6601:131;;;6712:18;;:::i;:::-;6601:131;6760:1;6757;6753:9;6742:20;;6420:348;;;;:::o;6774:180::-;6822:77;6819:1;6812:88;6919:4;6916:1;6909:15;6943:4;6940:1;6933:15;6960:185;7000:1;7017:20;7035:1;7017:20;:::i;:::-;7012:25;;7051:20;7069:1;7051:20;:::i;:::-;7046:25;;7090:1;7080:35;;7095:18;;:::i;:::-;7080:35;7137:1;7134;7130:9;7125:14;;6960:185;;;;:::o;7151:305::-;7191:3;7210:20;7228:1;7210:20;:::i;:::-;7205:25;;7244:20;7262:1;7244:20;:::i;:::-;7239:25;;7398:1;7330:66;7326:74;7323:1;7320:81;7317:107;;;7404:18;;:::i;:::-;7317:107;7448:1;7445;7441:9;7434:16;;7151:305;;;;:::o;7462:169::-;7546:11;7580:6;7575:3;7568:19;7620:4;7615:3;7611:14;7596:29;;7462:169;;;;:::o;7637:182::-;7777:34;7773:1;7765:6;7761:14;7754:58;7637:182;:::o;7825:366::-;7967:3;7988:67;8052:2;8047:3;7988:67;:::i;:::-;7981:74;;8064:93;8153:3;8064:93;:::i;:::-;8182:2;8177:3;8173:12;8166:19;;7825:366;;;:::o;8197:419::-;8363:4;8401:2;8390:9;8386:18;8378:26;;8450:9;8444:4;8440:20;8436:1;8425:9;8421:17;8414:47;8478:131;8604:4;8478:131;:::i;:::-;8470:139;;8197:419;;;:::o;8622:181::-;8762:33;8758:1;8750:6;8746:14;8739:57;8622:181;:::o;8809:366::-;8951:3;8972:67;9036:2;9031:3;8972:67;:::i;:::-;8965:74;;9048:93;9137:3;9048:93;:::i;:::-;9166:2;9161:3;9157:12;9150:19;;8809:366;;;:::o;9181:419::-;9347:4;9385:2;9374:9;9370:18;9362:26;;9434:9;9428:4;9424:20;9420:1;9409:9;9405:17;9398:47;9462:131;9588:4;9462:131;:::i;:::-;9454:139;;9181:419;;;:::o;9606:442::-;9755:4;9793:2;9782:9;9778:18;9770:26;;9806:71;9874:1;9863:9;9859:17;9850:6;9806:71;:::i;:::-;9887:72;9955:2;9944:9;9940:18;9931:6;9887:72;:::i;:::-;9969;10037:2;10026:9;10022:18;10013:6;9969:72;:::i;:::-;9606:442;;;;;;:::o;10054:191::-;10094:4;10114:20;10132:1;10114:20;:::i;:::-;10109:25;;10148:20;10166:1;10148:20;:::i;:::-;10143:25;;10187:1;10184;10181:8;10178:34;;;10192:18;;:::i;:::-;10178:34;10237:1;10234;10230:9;10222:17;;10054:191;;;;:::o;10251:225::-;10391:34;10387:1;10379:6;10375:14;10368:58;10460:8;10455:2;10447:6;10443:15;10436:33;10251:225;:::o;10482:366::-;10624:3;10645:67;10709:2;10704:3;10645:67;:::i;:::-;10638:74;;10721:93;10810:3;10721:93;:::i;:::-;10839:2;10834:3;10830:12;10823:19;;10482:366;;;:::o;10854:419::-;11020:4;11058:2;11047:9;11043:18;11035:26;;11107:9;11101:4;11097:20;11093:1;11082:9;11078:17;11071:47;11135:131;11261:4;11135:131;:::i;:::-;11127:139;;10854:419;;;:::o;11279:332::-;11400:4;11438:2;11427:9;11423:18;11415:26;;11451:71;11519:1;11508:9;11504:17;11495:6;11451:71;:::i;:::-;11532:72;11600:2;11589:9;11585:18;11576:6;11532:72;:::i;:::-;11279:332;;;;;:::o;11617:442::-;11766:4;11804:2;11793:9;11789:18;11781:26;;11817:71;11885:1;11874:9;11870:17;11861:6;11817:71;:::i;:::-;11898:72;11966:2;11955:9;11951:18;11942:6;11898:72;:::i;:::-;11980;12048:2;12037:9;12033:18;12024:6;11980:72;:::i;:::-;11617:442;;;;;;:::o;12065:116::-;12135:21;12150:5;12135:21;:::i;:::-;12128:5;12125:32;12115:60;;12171:1;12168;12161:12;12115:60;12065:116;:::o;12187:137::-;12241:5;12272:6;12266:13;12257:22;;12288:30;12312:5;12288:30;:::i;:::-;12187:137;;;;:::o;12330:345::-;12397:6;12446:2;12434:9;12425:7;12421:23;12417:32;12414:119;;;12452:79;;:::i;:::-;12414:119;12572:1;12597:61;12650:7;12641:6;12630:9;12626:22;12597:61;:::i;:::-;12587:71;;12543:125;12330:345;;;;:::o;12681:229::-;12821:34;12817:1;12809:6;12805:14;12798:58;12890:12;12885:2;12877:6;12873:15;12866:37;12681:229;:::o;12916:366::-;13058:3;13079:67;13143:2;13138:3;13079:67;:::i;:::-;13072:74;;13155:93;13244:3;13155:93;:::i;:::-;13273:2;13268:3;13264:12;13257:19;;12916:366;;;:::o;13288:419::-;13454:4;13492:2;13481:9;13477:18;13469:26;;13541:9;13535:4;13531:20;13527:1;13516:9;13512:17;13505:47;13569:131;13695:4;13569:131;:::i;:::-;13561:139;;13288:419;;;:::o;13713:225::-;13853:34;13849:1;13841:6;13837:14;13830:58;13922:8;13917:2;13909:6;13905:15;13898:33;13713:225;:::o;13944:366::-;14086:3;14107:67;14171:2;14166:3;14107:67;:::i;:::-;14100:74;;14183:93;14272:3;14183:93;:::i;:::-;14301:2;14296:3;14292:12;14285:19;;13944:366;;;:::o;14316:419::-;14482:4;14520:2;14509:9;14505:18;14497:26;;14569:9;14563:4;14559:20;14555:1;14544:9;14540:17;14533:47;14597:131;14723:4;14597:131;:::i;:::-;14589:139;;14316:419;;;:::o;14741:179::-;14881:31;14877:1;14869:6;14865:14;14858:55;14741:179;:::o;14926:366::-;15068:3;15089:67;15153:2;15148:3;15089:67;:::i;:::-;15082:74;;15165:93;15254:3;15165:93;:::i;:::-;15283:2;15278:3;15274:12;15267:19;;14926:366;;;:::o;15298:419::-;15464:4;15502:2;15491:9;15487:18;15479:26;;15551:9;15545:4;15541:20;15537:1;15526:9;15522:17;15515:47;15579:131;15705:4;15579:131;:::i;:::-;15571:139;;15298:419;;;:::o;15723:98::-;15774:6;15808:5;15802:12;15792:22;;15723:98;;;:::o;15827:147::-;15928:11;15965:3;15950:18;;15827:147;;;;:::o;15980:307::-;16048:1;16058:113;16072:6;16069:1;16066:13;16058:113;;;16157:1;16152:3;16148:11;16142:18;16138:1;16133:3;16129:11;16122:39;16094:2;16091:1;16087:10;16082:15;;16058:113;;;16189:6;16186:1;16183:13;16180:101;;;16269:1;16260:6;16255:3;16251:16;16244:27;16180:101;16029:258;15980:307;;;:::o;16293:373::-;16397:3;16425:38;16457:5;16425:38;:::i;:::-;16479:88;16560:6;16555:3;16479:88;:::i;:::-;16472:95;;16576:52;16621:6;16616:3;16609:4;16602:5;16598:16;16576:52;:::i;:::-;16653:6;16648:3;16644:16;16637:23;;16401:265;16293:373;;;;:::o;16672:271::-;16802:3;16824:93;16913:3;16904:6;16824:93;:::i;:::-;16817:100;;16934:3;16927:10;;16672:271;;;;:::o;16949:99::-;17001:6;17035:5;17029:12;17019:22;;16949:99;;;:::o;17054:102::-;17095:6;17146:2;17142:7;17137:2;17130:5;17126:14;17122:28;17112:38;;17054:102;;;:::o;17162:364::-;17250:3;17278:39;17311:5;17278:39;:::i;:::-;17333:71;17397:6;17392:3;17333:71;:::i;:::-;17326:78;;17413:52;17458:6;17453:3;17446:4;17439:5;17435:16;17413:52;:::i;:::-;17490:29;17512:6;17490:29;:::i;:::-;17485:3;17481:39;17474:46;;17254:272;17162:364;;;;:::o;17532:313::-;17645:4;17683:2;17672:9;17668:18;17660:26;;17732:9;17726:4;17722:20;17718:1;17707:9;17703:17;17696:47;17760:78;17833:4;17824:6;17760:78;:::i;:::-;17752:86;;17532:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1624600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_blockTimestamp()": "358",
								"airdropRate()": "2474",
								"airdropSince()": "2518",
								"calculateWeek(uint256)": "infinite",
								"changeAirdropPercentage(uint256)": "infinite",
								"changePenaltyFee(uint256)": "infinite",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2633",
								"renounceOwnership()": "30464",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2473",
								"startAirdrop()": "24563",
								"token_address()": "2603",
								"totalVoters()": "2497",
								"transferOwnership(address)": "30833",
								"votedUsers(uint256)": "infinite",
								"voters(address)": "2915",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "infinite",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 940,
									"end": 952,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 921,
									"end": 939,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1864,
									"end": 1866,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1843,
									"end": 1861,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1843,
									"end": 1866,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1843,
									"end": 1866,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1843,
									"end": 1866,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1843,
									"end": 1866,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1891,
									"end": 1893,
									"name": "PUSH",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1877,
									"end": 1888,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1877,
									"end": 1893,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1877,
									"end": 1893,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1877,
									"end": 1893,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1877,
									"end": 1893,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1922,
									"end": 1927,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1919,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1906,
									"end": 1919,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "PUSH",
									"source": 6,
									"value": "100"
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "EXP",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "MUL",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "MUL",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1906,
									"end": 1927,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1966,
									"end": 1967,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1940,
									"end": 1954,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1955,
									"end": 1962,
									"name": "PUSH",
									"source": 6,
									"value": "76A700"
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1940,
									"end": 1963,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1967,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1967,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1967,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1940,
									"end": 1967,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2005,
									"end": 2006,
									"name": "PUSH",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 1978,
									"end": 1992,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1993,
									"end": 2001,
									"name": "PUSH",
									"source": 6,
									"value": "ED4E00"
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1978,
									"end": 2002,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2006,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2006,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2006,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1978,
									"end": 2006,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 2044,
									"end": 2045,
									"name": "PUSH",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 2017,
									"end": 2031,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2032,
									"end": 2040,
									"name": "PUSH",
									"source": 6,
									"value": "1E13380"
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 2017,
									"end": 2041,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2045,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2045,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2045,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 2017,
									"end": 2045,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1742,
									"end": 2053,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2368,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2387,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2384,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2378,
									"end": 2384,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2441,
									"end": 2449,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2431,
									"end": 2439,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 7,
									"value": "21"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "30"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 7,
									"value": "30"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "32"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "21"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 7,
									"value": "32"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "33"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 7,
									"value": "33"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "35"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 7,
									"value": "35"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "37"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "38"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 7,
									"value": "38"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 7,
									"value": "37"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "39"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 7,
									"value": "39"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1017,
									"end": 13009,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220de3326d9b93652fa9e3600c060ec6931baea4ade6088a5316f3fee6a01b3b2ea64736f6c634300080b0033",
									".code": [
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "CB79C2E1"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "D5DBDF1B"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "B5D9DF83"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "B87DA76D"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "8891CF0D"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "8C63F97F"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "10486B6A"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "5B88349D"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "5F5300FF"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1017,
											"end": 13009,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "tag",
											"source": 6,
											"value": "33"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "tag",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "tag",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "tag",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "tag",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "tag",
											"source": 6,
											"value": "74"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "tag",
											"source": 6,
											"value": "76"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "tag",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "tag",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "tag",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8640,
											"end": 8661,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 8640,
											"end": 8661,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 8640,
											"end": 8661,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8640,
											"end": 8661,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 8640,
											"end": 8661,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8697,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8700,
											"end": 8712,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8713,
											"end": 8723,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8700,
											"end": 8724,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8674,
											"end": 8724,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8822,
											"end": 8823,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8801,
											"end": 8811,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8801,
											"end": 8818,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8801,
											"end": 8818,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8801,
											"end": 8818,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8801,
											"end": 8823,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8797,
											"end": 8884,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8797,
											"end": 8884,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8847,
											"end": 8872,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8797,
											"end": 8884,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8797,
											"end": 8884,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8894,
											"end": 8923,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8941,
											"end": 8942,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8944,
											"end": 8945,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8947,
											"end": 8957,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8926,
											"end": 8958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8894,
											"end": 8958,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8894,
											"end": 8958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8971,
											"end": 8985,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8988,
											"end": 9021,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 9010,
											"end": 9020,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8988,
											"end": 9009,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 8988,
											"end": 9021,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8988,
											"end": 9021,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 8988,
											"end": 9021,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8971,
											"end": 9021,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8971,
											"end": 9021,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9066,
											"end": 9081,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9045,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9051,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9038,
											"end": 9051,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9051,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9063,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 9038,
											"end": 9063,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9063,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9038,
											"end": 9081,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9034,
											"end": 9252,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9034,
											"end": 9252,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 9034,
											"end": 9252,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9235,
											"end": 9239,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9213,
											"end": 9231,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9213,
											"end": 9231,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9204,
											"end": 9210,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 9204,
											"end": 9231,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 9203,
											"end": 9239,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9177,
											"end": 9181,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9155,
											"end": 9173,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 9155,
											"end": 9173,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9145,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9152,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9135,
											"end": 9152,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9152,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 9135,
											"end": 9173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 9134,
											"end": 9181,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 9133,
											"end": 9240,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9105,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9113,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9098,
											"end": 9113,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9240,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9240,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9240,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9240,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9098,
											"end": 9240,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9034,
											"end": 9252,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 9034,
											"end": 9252,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9312,
											"end": 9313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9268,
											"end": 9309,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 9282,
											"end": 9292,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9282,
											"end": 9308,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 9282,
											"end": 9308,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9282,
											"end": 9308,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9268,
											"end": 9281,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 9268,
											"end": 9309,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9268,
											"end": 9309,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 9268,
											"end": 9309,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9268,
											"end": 9313,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9330,
											"end": 9345,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 9366,
											"end": 9376,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9366,
											"end": 9383,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9366,
											"end": 9383,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9366,
											"end": 9383,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9348,
											"end": 9365,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9330,
											"end": 9384,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9330,
											"end": 9384,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9432,
											"end": 9439,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9406,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9412,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9399,
											"end": 9412,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9412,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9429,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9399,
											"end": 9429,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9439,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9439,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9439,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9439,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9439,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9315,
											"end": 9451,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9505,
											"end": 9506,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9472,
											"end": 9479,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9485,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9472,
											"end": 9485,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9485,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9502,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9472,
											"end": 9502,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9506,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9506,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9506,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9506,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9472,
											"end": 9506,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 9264,
											"end": 9518,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9556,
											"end": 9562,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9537,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9543,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9530,
											"end": 9543,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9543,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9553,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9530,
											"end": 9553,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9562,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9562,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9562,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9530,
											"end": 9562,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9596,
											"end": 9606,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9596,
											"end": 9613,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9596,
											"end": 9613,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9596,
											"end": 9613,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9580,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9593,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9573,
											"end": 9593,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9613,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9613,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9573,
											"end": 9613,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9633,
											"end": 9640,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9626,
											"end": 9640,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 9626,
											"end": 9640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9626,
											"end": 9640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9626,
											"end": 9640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9626,
											"end": 9640,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8597,
											"end": 9648,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10652,
											"end": 10672,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10675,
											"end": 10687,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10688,
											"end": 10698,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10675,
											"end": 10699,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10652,
											"end": 10699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10652,
											"end": 10699,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10732,
											"end": 10733,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10716,
											"end": 10722,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10716,
											"end": 10729,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10716,
											"end": 10729,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10716,
											"end": 10729,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10716,
											"end": 10733,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 10712,
											"end": 11153,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10712,
											"end": 11153,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10712,
											"end": 11153,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10795,
											"end": 10796,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10754,
											"end": 10791,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10768,
											"end": 10774,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10768,
											"end": 10790,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10768,
											"end": 10790,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10768,
											"end": 10790,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10754,
											"end": 10767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 10754,
											"end": 10791,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10754,
											"end": 10791,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10754,
											"end": 10791,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10754,
											"end": 10796,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 10750,
											"end": 10869,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10750,
											"end": 10869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 10750,
											"end": 10869,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "PUSH",
											"source": 6,
											"value": "DD8456CC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10824,
											"end": 10853,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10750,
											"end": 10869,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 10750,
											"end": 10869,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10911,
											"end": 10912,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10885,
											"end": 10891,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10885,
											"end": 10908,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 10885,
											"end": 10908,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10885,
											"end": 10912,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10885,
											"end": 10912,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10885,
											"end": 10912,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10885,
											"end": 10912,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10952,
											"end": 10967,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10933,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10949,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10927,
											"end": 10949,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10967,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10967,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10967,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10927,
											"end": 10967,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10984,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11032,
											"end": 11045,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 11065,
											"end": 11075,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 11094,
											"end": 11126,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 11112,
											"end": 11118,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 11112,
											"end": 11125,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 11112,
											"end": 11125,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 11112,
											"end": 11125,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 11094,
											"end": 11111,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 11094,
											"end": 11126,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 11094,
											"end": 11126,
											"name": "tag",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 11094,
											"end": 11126,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10984,
											"end": 11006,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 10984,
											"end": 11141,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10984,
											"end": 11141,
											"name": "tag",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 10984,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10712,
											"end": 11153,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10712,
											"end": 11153,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10588,
											"end": 11160,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10555,
											"end": 11160,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1572,
											"end": 1598,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "126"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4768,
											"end": 4769,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4733,
											"end": 4745,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4746,
											"end": 4756,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4733,
											"end": 4757,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4764,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4733,
											"end": 4764,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4764,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4733,
											"end": 4769,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4729,
											"end": 4828,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 4729,
											"end": 4828,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "PUSH",
											"source": 6,
											"value": "4462D2700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 4816,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4729,
											"end": 4828,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 4729,
											"end": 4828,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4875,
											"end": 4876,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4844,
											"end": 4858,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4859,
											"end": 4870,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4871,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4844,
											"end": 4876,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4840,
											"end": 4943,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4840,
											"end": 4943,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 4840,
											"end": 4943,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "PUSH",
											"source": 6,
											"value": "95377BE400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4900,
											"end": 4931,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4840,
											"end": 4943,
											"name": "tag",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 4840,
											"end": 4943,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4970,
											"end": 4971,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4955,
											"end": 4966,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4955,
											"end": 4966,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "tag",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4955,
											"end": 4971,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5015,
											"end": 5019,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4982,
											"end": 4988,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4989,
											"end": 4999,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4982,
											"end": 5000,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5012,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4982,
											"end": 5012,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5012,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4982,
											"end": 5019,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5120,
											"end": 5137,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5140,
											"end": 5155,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 5120,
											"end": 5155,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5120,
											"end": 5155,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5336,
											"end": 5342,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5357,
											"end": 5366,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5395,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5396,
											"end": 5407,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5381,
											"end": 5408,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5438,
											"end": 5447,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5424,
											"end": 5435,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 5424,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5463,
											"end": 5464,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5479,
											"end": 5480,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5495,
											"end": 5496,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5316,
											"end": 5507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5301,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5302,
											"end": 5312,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5289,
											"end": 5313,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5289,
											"end": 5507,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5520,
											"end": 5667,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5568,
											"end": 5581,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5597,
											"end": 5607,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5630,
											"end": 5634,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5650,
											"end": 5656,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5520,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 5520,
											"end": 5667,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5520,
											"end": 5667,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 5520,
											"end": 5667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5753,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH",
											"source": 6,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5755,
											"end": 5761,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5763,
											"end": 5772,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5789,
											"end": 5798,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5786,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 5775,
											"end": 5798,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5736,
											"end": 5800,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 4533,
											"end": 5808,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 5808,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1436,
											"end": 1462,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5976,
											"end": 5978,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 5967,
											"end": 5973,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5967,
											"end": 5978,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5963,
											"end": 6046,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5963,
											"end": 6046,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 5963,
											"end": 6046,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "PUSH",
											"source": 6,
											"value": "F1A470D700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6002,
											"end": 6034,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5963,
											"end": 6046,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 5963,
											"end": 6046,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6077,
											"end": 6083,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6056,
											"end": 6074,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6056,
											"end": 6083,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6056,
											"end": 6083,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6056,
											"end": 6083,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6056,
											"end": 6083,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "PUSH",
											"source": 6,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 6114,
											"end": 6120,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6099,
											"end": 6121,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5816,
											"end": 6129,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1705,
											"end": 1733,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1101,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1101,
											"end": 1114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1651,
											"end": 1696,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1605,
											"end": 1644,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10281,
											"end": 10288,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10340,
											"end": 10346,
											"name": "PUSH",
											"source": 6,
											"value": "93A80"
										},
										{
											"begin": 10327,
											"end": 10336,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10309,
											"end": 10324,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 10309,
											"end": 10336,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 10308,
											"end": 10346,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10301,
											"end": 10346,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10301,
											"end": 10346,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10218,
											"end": 10354,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "tag",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1469,
											"end": 1496,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "128"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7737,
											"end": 7760,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7763,
											"end": 7775,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7776,
											"end": 7786,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7763,
											"end": 7787,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7737,
											"end": 7787,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7812,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7815,
											"end": 7848,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 7837,
											"end": 7847,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7815,
											"end": 7836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 7815,
											"end": 7848,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7815,
											"end": 7848,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 7815,
											"end": 7848,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7848,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7798,
											"end": 7848,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7880,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7881,
											"end": 7891,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7868,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7892,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7918,
											"end": 7919,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7903,
											"end": 7914,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 7903,
											"end": 7914,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7903,
											"end": 7919,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7943,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7944,
											"end": 7954,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7937,
											"end": 7955,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7961,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7937,
											"end": 7961,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7962,
											"end": 7971,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7962,
											"end": 7971,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7930,
											"end": 7972,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8014,
											"end": 8029,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 7989,
											"end": 7999,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7989,
											"end": 8011,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7989,
											"end": 8011,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7989,
											"end": 8011,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7989,
											"end": 8029,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8065,
											"end": 8087,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8106,
											"end": 8128,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8146,
											"end": 8201,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 8175,
											"end": 8185,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8192,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8175,
											"end": 8192,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8175,
											"end": 8192,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8194,
											"end": 8200,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8146,
											"end": 8174,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 8146,
											"end": 8201,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8146,
											"end": 8201,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 8146,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8046,
											"end": 8201,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8046,
											"end": 8201,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8046,
											"end": 8201,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8046,
											"end": 8201,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8218,
											"end": 8376,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8266,
											"end": 8279,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8299,
											"end": 8309,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8346,
											"end": 8360,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8329,
											"end": 8343,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 8329,
											"end": 8360,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8218,
											"end": 8240,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 8218,
											"end": 8376,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8218,
											"end": 8376,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 8218,
											"end": 8376,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8031,
											"end": 8388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8031,
											"end": 8388,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8409,
											"end": 8562,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8457,
											"end": 8470,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8500,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8540,
											"end": 8546,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8530,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8537,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8520,
											"end": 8537,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8537,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 8520,
											"end": 8546,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8409,
											"end": 8431,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 8409,
											"end": 8562,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8409,
											"end": 8562,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 8409,
											"end": 8562,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 7985,
											"end": 8574,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7616,
											"end": 8581,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7616,
											"end": 8581,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7569,
											"end": 8581,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "tag",
											"source": 6,
											"value": "75"
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10160,
											"end": 10167,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10187,
											"end": 10202,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10180,
											"end": 10202,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10180,
											"end": 10202,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10112,
											"end": 10210,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1429,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9833,
											"end": 9848,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9818,
											"end": 9830,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 9818,
											"end": 9848,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9818,
											"end": 9848,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9818,
											"end": 9848,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9818,
											"end": 9848,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9764,
											"end": 9856,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9956,
											"end": 9959,
											"name": "PUSH",
											"source": 6,
											"value": "C8"
										},
										{
											"begin": 9947,
											"end": 9953,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9947,
											"end": 9959,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9943,
											"end": 10028,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9943,
											"end": 10028,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 9943,
											"end": 10028,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "PUSH",
											"source": 6,
											"value": "A552CF1000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9983,
											"end": 10016,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9943,
											"end": 10028,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 9943,
											"end": 10028,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10052,
											"end": 10058,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10038,
											"end": 10049,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10038,
											"end": 10058,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10038,
											"end": 10058,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10038,
											"end": 10058,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10038,
											"end": 10058,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "PUSH",
											"source": 6,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 10089,
											"end": 10095,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "tag",
											"source": 6,
											"value": "180"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10074,
											"end": 10096,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9864,
											"end": 10104,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2026,
											"end": 2027,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2014,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6489,
											"end": 6496,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6539,
											"end": 6540,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6528,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6535,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6518,
											"end": 6535,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6535,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6518,
											"end": 6540,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 6514,
											"end": 6577,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6514,
											"end": 6577,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 6514,
											"end": 6577,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6564,
											"end": 6565,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6557,
											"end": 6565,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6557,
											"end": 6565,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6557,
											"end": 6565,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 6557,
											"end": 6565,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6514,
											"end": 6577,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 6514,
											"end": 6577,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6821,
											"end": 6825,
											"name": "PUSH",
											"source": 6,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6774,
											"end": 6817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 6800,
											"end": 6810,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6800,
											"end": 6816,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6800,
											"end": 6816,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6800,
											"end": 6816,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6774,
											"end": 6799,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 6774,
											"end": 6817,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6774,
											"end": 6817,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 6774,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6734,
											"end": 6744,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6734,
											"end": 6754,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6734,
											"end": 6754,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6734,
											"end": 6754,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6707,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6714,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6697,
											"end": 6714,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6714,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 6697,
											"end": 6754,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 6697,
											"end": 6817,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 6696,
											"end": 6825,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6676,
											"end": 6825,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6676,
											"end": 6825,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6383,
											"end": 6833,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10460,
											"end": 10467,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10531,
											"end": 10539,
											"name": "PUSH",
											"source": 6,
											"value": "1DFE200"
										},
										{
											"begin": 10523,
											"end": 10527,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 10508,
											"end": 10519,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10508,
											"end": 10519,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10494,
											"end": 10505,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 10494,
											"end": 10519,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 10493,
											"end": 10527,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 10492,
											"end": 10539,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10485,
											"end": 10539,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10485,
											"end": 10539,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10362,
											"end": 10547,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 888,
											"end": 890,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 892,
											"end": 897,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 813,
											"end": 832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2387,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2384,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2378,
											"end": 2384,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2449,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2431,
											"end": 2439,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "tag",
											"source": 3,
											"value": "135"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1129,
											"end": 1133,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1135,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1144,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "tag",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6961,
											"end": 6968,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6970,
											"end": 6977,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7009,
											"end": 7010,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6999,
											"end": 7005,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6999,
											"end": 7010,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 6995,
											"end": 7052,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6995,
											"end": 7052,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 6995,
											"end": 7052,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7035,
											"end": 7036,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7038,
											"end": 7039,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 7027,
											"end": 7040,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6995,
											"end": 7052,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 6995,
											"end": 7052,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7126,
											"end": 7130,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7104,
											"end": 7122,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7104,
											"end": 7122,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7095,
											"end": 7101,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 7095,
											"end": 7122,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 7094,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7084,
											"end": 7090,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 7084,
											"end": 7131,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7188,
											"end": 7192,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7166,
											"end": 7184,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7166,
											"end": 7184,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7157,
											"end": 7163,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7157,
											"end": 7184,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "tag",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 7156,
											"end": 7192,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7146,
											"end": 7152,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7146,
											"end": 7193,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7062,
											"end": 7204,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7062,
											"end": 7204,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7062,
											"end": 7204,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7062,
											"end": 7204,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 7212,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6237,
											"end": 6244,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6359,
											"end": 6367,
											"name": "PUSH",
											"source": 6,
											"value": "1E13380"
										},
										{
											"begin": 6351,
											"end": 6355,
											"name": "PUSH",
											"source": 6,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6342,
											"end": 6347,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6324,
											"end": 6339,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6324,
											"end": 6347,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 6323,
											"end": 6355,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "tag",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6322,
											"end": 6367,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6315,
											"end": 6367,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6315,
											"end": 6367,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6137,
											"end": 6375,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "227"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3755,
											"end": 3756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3735,
											"end": 3745,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "230"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "231"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "232"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "tag",
											"source": 3,
											"value": "232"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "tag",
											"source": 3,
											"value": "231"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "tag",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "227"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 5247,
											"end": 5253,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5236,
											"end": 5246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "tag",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "245"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "247"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7896,
											"end": 7897,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7876,
											"end": 7886,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "260"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "tag",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "254"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "261"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "262"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "261"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "262"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 90,
											"end": 198,
											"name": "tag",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 90,
											"end": 198,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 167,
											"end": 191,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 185,
											"end": 190,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 167,
											"end": 191,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "tag",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 162,
											"end": 165,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 155,
											"end": 192,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "tag",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 387,
											"end": 391,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 382,
											"end": 385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 378,
											"end": 392,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 476,
											"end": 480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 474,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 465,
											"end": 481,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 459,
											"end": 482,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 495,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "309"
										},
										{
											"begin": 552,
											"end": 556,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 547,
											"end": 550,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 543,
											"end": 557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 529,
											"end": 541,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 495,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "tag",
											"source": 7,
											"value": "309"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 402,
											"end": 568,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 651,
											"end": 655,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 644,
											"end": 649,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 640,
											"end": 656,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 670,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 722,
											"end": 725,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 718,
											"end": 732,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 704,
											"end": 716,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 670,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "tag",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 578,
											"end": 743,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 830,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 819,
											"end": 835,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 813,
											"end": 836,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 849,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 906,
											"end": 910,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 901,
											"end": 904,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 897,
											"end": 911,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 883,
											"end": 895,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 849,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "tag",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 753,
											"end": 922,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 994,
											"end": 1017,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "312"
										},
										{
											"begin": 1087,
											"end": 1091,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1082,
											"end": 1085,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1092,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1076,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "tag",
											"source": 7,
											"value": "312"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 1103,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1190,
											"end": 1194,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1183,
											"end": 1188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1179,
											"end": 1195,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1173,
											"end": 1196,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 1266,
											"end": 1270,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1261,
											"end": 1264,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1257,
											"end": 1271,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1243,
											"end": 1255,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "tag",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1113,
											"end": 1282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1376,
											"end": 1380,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1369,
											"end": 1374,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1365,
											"end": 1381,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1359,
											"end": 1382,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 1452,
											"end": 1456,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1447,
											"end": 1450,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1443,
											"end": 1457,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "tag",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1468,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1561,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1554,
											"end": 1559,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1544,
											"end": 1567,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 1637,
											"end": 1641,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1632,
											"end": 1635,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1614,
											"end": 1626,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "tag",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1478,
											"end": 1653,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 356,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "tag",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1895,
											"end": 1901,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 1890,
											"end": 1893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1886,
											"end": 1902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1992,
											"end": 1996,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1985,
											"end": 1990,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1981,
											"end": 1997,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1975,
											"end": 1998,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 2068,
											"end": 2072,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2063,
											"end": 2066,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2059,
											"end": 2073,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2045,
											"end": 2057,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "tag",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1912,
											"end": 2084,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2169,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2162,
											"end": 2167,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2175,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "318"
										},
										{
											"begin": 2245,
											"end": 2249,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2240,
											"end": 2243,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2236,
											"end": 2250,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2222,
											"end": 2234,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "264"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "tag",
											"source": 7,
											"value": "318"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2094,
											"end": 2261,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2344,
											"end": 2348,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2337,
											"end": 2342,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2333,
											"end": 2349,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "319"
										},
										{
											"begin": 2464,
											"end": 2468,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2459,
											"end": 2462,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2455,
											"end": 2469,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2441,
											"end": 2453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "tag",
											"source": 7,
											"value": "319"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2271,
											"end": 2480,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1864,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2648,
											"end": 2652,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2689,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 2675,
											"end": 2684,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2671,
											"end": 2690,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2663,
											"end": 2690,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2663,
											"end": 2690,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 2830,
											"end": 2831,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2819,
											"end": 2828,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2832,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2806,
											"end": 2812,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "tag",
											"source": 7,
											"value": "321"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2846,
											"end": 2964,
											"name": "tag",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 2846,
											"end": 2964,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 2951,
											"end": 2956,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 2933,
											"end": 2957,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2933,
											"end": 2957,
											"name": "tag",
											"source": 7,
											"value": "323"
										},
										{
											"begin": 2933,
											"end": 2957,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2928,
											"end": 2931,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2921,
											"end": 2958,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2964,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2964,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2964,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3063,
											"end": 3067,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3101,
											"end": 3103,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3090,
											"end": 3099,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3086,
											"end": 3104,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3078,
											"end": 3104,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3078,
											"end": 3104,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 3182,
											"end": 3183,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3171,
											"end": 3180,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3167,
											"end": 3184,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3158,
											"end": 3164,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3114,
											"end": 3185,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 3114,
											"end": 3185,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3114,
											"end": 3185,
											"name": "tag",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 3114,
											"end": 3185,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2970,
											"end": 3192,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3279,
											"end": 3396,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 3279,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3388,
											"end": 3389,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3385,
											"end": 3386,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3378,
											"end": 3390,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3525,
											"end": 3647,
											"name": "tag",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 3525,
											"end": 3647,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3598,
											"end": 3622,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 3616,
											"end": 3621,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3598,
											"end": 3622,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 3598,
											"end": 3622,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3598,
											"end": 3622,
											"name": "tag",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 3598,
											"end": 3622,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3591,
											"end": 3596,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3588,
											"end": 3623,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3578,
											"end": 3641,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 3578,
											"end": 3641,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3637,
											"end": 3638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3634,
											"end": 3635,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3627,
											"end": 3639,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3578,
											"end": 3641,
											"name": "tag",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 3578,
											"end": 3641,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3525,
											"end": 3647,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3525,
											"end": 3647,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "tag",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3699,
											"end": 3704,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3737,
											"end": 3743,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3724,
											"end": 3744,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 3744,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3715,
											"end": 3744,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3753,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "333"
										},
										{
											"begin": 3780,
											"end": 3785,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3753,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 3753,
											"end": 3786,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3753,
											"end": 3786,
											"name": "tag",
											"source": 7,
											"value": "333"
										},
										{
											"begin": 3753,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3792,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3866,
											"end": 3872,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3874,
											"end": 3880,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3923,
											"end": 3925,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3911,
											"end": 3920,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3902,
											"end": 3909,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3898,
											"end": 3921,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3894,
											"end": 3926,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3891,
											"end": 4010,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3891,
											"end": 4010,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 3891,
											"end": 4010,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 3929,
											"end": 4008,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 3929,
											"end": 4008,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 4008,
											"name": "tag",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 3929,
											"end": 4008,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3891,
											"end": 4010,
											"name": "tag",
											"source": 7,
											"value": "335"
										},
										{
											"begin": 3891,
											"end": 4010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4049,
											"end": 4050,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4074,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "337"
										},
										{
											"begin": 4119,
											"end": 4126,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4110,
											"end": 4116,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4099,
											"end": 4108,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4095,
											"end": 4117,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4074,
											"end": 4127,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 4074,
											"end": 4127,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4074,
											"end": 4127,
											"name": "tag",
											"source": 7,
											"value": "337"
										},
										{
											"begin": 4074,
											"end": 4127,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4127,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4064,
											"end": 4127,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4020,
											"end": 4137,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4176,
											"end": 4178,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4202,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 4247,
											"end": 4254,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4238,
											"end": 4244,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4227,
											"end": 4236,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4223,
											"end": 4245,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4202,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 4202,
											"end": 4255,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4202,
											"end": 4255,
											"name": "tag",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 4202,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4192,
											"end": 4255,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4192,
											"end": 4255,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4147,
											"end": 4265,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3798,
											"end": 4272,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4337,
											"end": 4343,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4386,
											"end": 4388,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4374,
											"end": 4383,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4365,
											"end": 4372,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4361,
											"end": 4384,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4357,
											"end": 4389,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 4354,
											"end": 4473,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4354,
											"end": 4473,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 4354,
											"end": 4473,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4392,
											"end": 4471,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "341"
										},
										{
											"begin": 4392,
											"end": 4471,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 4392,
											"end": 4471,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4392,
											"end": 4471,
											"name": "tag",
											"source": 7,
											"value": "341"
										},
										{
											"begin": 4392,
											"end": 4471,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4354,
											"end": 4473,
											"name": "tag",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 4354,
											"end": 4473,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4512,
											"end": 4513,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4537,
											"end": 4590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "342"
										},
										{
											"begin": 4582,
											"end": 4589,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4573,
											"end": 4579,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4562,
											"end": 4571,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4558,
											"end": 4580,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4537,
											"end": 4590,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 4537,
											"end": 4590,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4537,
											"end": 4590,
											"name": "tag",
											"source": 7,
											"value": "342"
										},
										{
											"begin": 4537,
											"end": 4590,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4527,
											"end": 4590,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4527,
											"end": 4590,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4483,
											"end": 4600,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4278,
											"end": 4607,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "tag",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4650,
											"end": 4657,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4690,
											"end": 4732,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4683,
											"end": 4688,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4679,
											"end": 4733,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4668,
											"end": 4733,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4668,
											"end": 4733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4613,
											"end": 4739,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "tag",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4782,
											"end": 4789,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4811,
											"end": 4835,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 4829,
											"end": 4834,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4811,
											"end": 4835,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 4811,
											"end": 4835,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4811,
											"end": 4835,
											"name": "tag",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 4811,
											"end": 4835,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4800,
											"end": 4835,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4800,
											"end": 4835,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4841,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4934,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "347"
										},
										{
											"begin": 4952,
											"end": 4957,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4934,
											"end": 4958,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 4934,
											"end": 4958,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4934,
											"end": 4958,
											"name": "tag",
											"source": 7,
											"value": "347"
										},
										{
											"begin": 4934,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4929,
											"end": 4932,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4922,
											"end": 4959,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4847,
											"end": 4965,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5064,
											"end": 5068,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5102,
											"end": 5104,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5091,
											"end": 5100,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5087,
											"end": 5105,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5079,
											"end": 5105,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5079,
											"end": 5105,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5115,
											"end": 5186,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "349"
										},
										{
											"begin": 5183,
											"end": 5184,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5172,
											"end": 5181,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5168,
											"end": 5185,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5159,
											"end": 5165,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5115,
											"end": 5186,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 5115,
											"end": 5186,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5115,
											"end": 5186,
											"name": "tag",
											"source": 7,
											"value": "349"
										},
										{
											"begin": 5115,
											"end": 5186,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4971,
											"end": 5193,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5199,
											"end": 5321,
											"name": "tag",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 5199,
											"end": 5321,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5272,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 5290,
											"end": 5295,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5272,
											"end": 5296,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 5272,
											"end": 5296,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5272,
											"end": 5296,
											"name": "tag",
											"source": 7,
											"value": "351"
										},
										{
											"begin": 5272,
											"end": 5296,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5265,
											"end": 5270,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5262,
											"end": 5297,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5252,
											"end": 5315,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 5252,
											"end": 5315,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5311,
											"end": 5312,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5308,
											"end": 5309,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5301,
											"end": 5313,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5252,
											"end": 5315,
											"name": "tag",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 5252,
											"end": 5315,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5199,
											"end": 5321,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5199,
											"end": 5321,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "tag",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5373,
											"end": 5378,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5411,
											"end": 5417,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5418,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5389,
											"end": 5418,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5389,
											"end": 5418,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5427,
											"end": 5460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 5454,
											"end": 5459,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5427,
											"end": 5460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 5427,
											"end": 5460,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5427,
											"end": 5460,
											"name": "tag",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 5427,
											"end": 5460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5327,
											"end": 5466,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5531,
											"end": 5537,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5580,
											"end": 5582,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5568,
											"end": 5577,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5559,
											"end": 5566,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5555,
											"end": 5578,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5551,
											"end": 5583,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5548,
											"end": 5667,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5548,
											"end": 5667,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 5548,
											"end": 5667,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5586,
											"end": 5665,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 5586,
											"end": 5665,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5586,
											"end": 5665,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5586,
											"end": 5665,
											"name": "tag",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 5586,
											"end": 5665,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5548,
											"end": 5667,
											"name": "tag",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 5548,
											"end": 5667,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5706,
											"end": 5707,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5731,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "358"
										},
										{
											"begin": 5776,
											"end": 5783,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5767,
											"end": 5773,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5756,
											"end": 5765,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5752,
											"end": 5774,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5731,
											"end": 5784,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 5731,
											"end": 5784,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5731,
											"end": 5784,
											"name": "tag",
											"source": 7,
											"value": "358"
										},
										{
											"begin": 5731,
											"end": 5784,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5721,
											"end": 5784,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5721,
											"end": 5784,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5677,
											"end": 5794,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5472,
											"end": 5801,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "tag",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5841,
											"end": 5848,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5889,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5877,
											"end": 5890,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5870,
											"end": 5891,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5859,
											"end": 5891,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5859,
											"end": 5891,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5807,
											"end": 5897,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5903,
											"end": 6012,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 5903,
											"end": 6012,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5984,
											"end": 6005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 5999,
											"end": 6004,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5984,
											"end": 6005,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 5984,
											"end": 6005,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5984,
											"end": 6005,
											"name": "tag",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 5984,
											"end": 6005,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5979,
											"end": 5982,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5972,
											"end": 6006,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5903,
											"end": 6012,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5903,
											"end": 6012,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5903,
											"end": 6012,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "tag",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6105,
											"end": 6109,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6143,
											"end": 6145,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6132,
											"end": 6141,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6128,
											"end": 6146,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6120,
											"end": 6146,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6120,
											"end": 6146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6156,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 6218,
											"end": 6219,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6207,
											"end": 6216,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6203,
											"end": 6220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6194,
											"end": 6200,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6156,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 6156,
											"end": 6221,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6156,
											"end": 6221,
											"name": "tag",
											"source": 7,
											"value": "363"
										},
										{
											"begin": 6156,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6018,
											"end": 6228,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6234,
											"end": 6414,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 6234,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6282,
											"end": 6359,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6279,
											"end": 6280,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6272,
											"end": 6360,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6379,
											"end": 6383,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6369,
											"end": 6384,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6403,
											"end": 6407,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6400,
											"end": 6401,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6393,
											"end": 6408,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6460,
											"end": 6467,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 6501,
											"end": 6502,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "tag",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6478,
											"end": 6503,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6478,
											"end": 6503,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 6535,
											"end": 6536,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "tag",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6512,
											"end": 6537,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6512,
											"end": 6537,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6705,
											"end": 6706,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6637,
											"end": 6703,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6633,
											"end": 6707,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 6630,
											"end": 6631,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6627,
											"end": 6708,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6622,
											"end": 6623,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6615,
											"end": 6624,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6608,
											"end": 6625,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6604,
											"end": 6709,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "368"
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "369"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "tag",
											"source": 7,
											"value": "369"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "tag",
											"source": 7,
											"value": "368"
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6760,
											"end": 6761,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6757,
											"end": 6758,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6753,
											"end": 6762,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 6742,
											"end": 6762,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6742,
											"end": 6762,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6774,
											"end": 6954,
											"name": "tag",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 6774,
											"end": 6954,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6822,
											"end": 6899,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6819,
											"end": 6820,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6900,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6919,
											"end": 6923,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 6916,
											"end": 6917,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6909,
											"end": 6924,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6943,
											"end": 6947,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6940,
											"end": 6941,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6933,
											"end": 6948,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7000,
											"end": 7001,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 7035,
											"end": 7036,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "tag",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7012,
											"end": 7037,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7012,
											"end": 7037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 7069,
											"end": 7070,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "tag",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7046,
											"end": 7071,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7046,
											"end": 7071,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7090,
											"end": 7091,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "374"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "375"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "tag",
											"source": 7,
											"value": "375"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "tag",
											"source": 7,
											"value": "374"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7137,
											"end": 7138,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7135,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7130,
											"end": 7139,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 7125,
											"end": 7139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7125,
											"end": 7139,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7191,
											"end": 7194,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "377"
										},
										{
											"begin": 7228,
											"end": 7229,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "tag",
											"source": 7,
											"value": "377"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7230,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 7262,
											"end": 7263,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "tag",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7239,
											"end": 7264,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7239,
											"end": 7264,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7398,
											"end": 7399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7330,
											"end": 7396,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7326,
											"end": 7400,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7323,
											"end": 7324,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7320,
											"end": 7401,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "379"
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "tag",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "tag",
											"source": 7,
											"value": "379"
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7448,
											"end": 7449,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7445,
											"end": 7446,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7441,
											"end": 7450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7434,
											"end": 7450,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7434,
											"end": 7450,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7546,
											"end": 7557,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7580,
											"end": 7586,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7575,
											"end": 7578,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7568,
											"end": 7587,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7620,
											"end": 7624,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7615,
											"end": 7618,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7611,
											"end": 7625,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7596,
											"end": 7625,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7596,
											"end": 7625,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "tag",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7777,
											"end": 7811,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7773,
											"end": 7774,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7765,
											"end": 7771,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7754,
											"end": 7812,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7967,
											"end": 7970,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 8052,
											"end": 8054,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8047,
											"end": 8050,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "tag",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7981,
											"end": 8055,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7981,
											"end": 8055,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 8153,
											"end": 8156,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "tag",
											"source": 7,
											"value": "385"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8182,
											"end": 8184,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8177,
											"end": 8180,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8173,
											"end": 8185,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8166,
											"end": 8185,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8166,
											"end": 8185,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8363,
											"end": 8367,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8401,
											"end": 8403,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8386,
											"end": 8404,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8378,
											"end": 8404,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8378,
											"end": 8404,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8450,
											"end": 8459,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8444,
											"end": 8448,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8440,
											"end": 8460,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8425,
											"end": 8434,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8421,
											"end": 8438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8414,
											"end": 8461,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "387"
										},
										{
											"begin": 8604,
											"end": 8608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "tag",
											"source": 7,
											"value": "387"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8470,
											"end": 8609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8470,
											"end": 8609,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "tag",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8762,
											"end": 8795,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 8758,
											"end": 8759,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8750,
											"end": 8756,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8746,
											"end": 8760,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8739,
											"end": 8796,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8951,
											"end": 8954,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "390"
										},
										{
											"begin": 9036,
											"end": 9038,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 9031,
											"end": 9034,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "tag",
											"source": 7,
											"value": "390"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8965,
											"end": 9039,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8965,
											"end": 9039,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "391"
										},
										{
											"begin": 9137,
											"end": 9140,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "tag",
											"source": 7,
											"value": "391"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9166,
											"end": 9168,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9161,
											"end": 9164,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9157,
											"end": 9169,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9150,
											"end": 9169,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9150,
											"end": 9169,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9347,
											"end": 9351,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9385,
											"end": 9387,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9374,
											"end": 9383,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9370,
											"end": 9388,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9362,
											"end": 9388,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9362,
											"end": 9388,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9434,
											"end": 9443,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9428,
											"end": 9432,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9424,
											"end": 9444,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9420,
											"end": 9421,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9409,
											"end": 9418,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9405,
											"end": 9422,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9398,
											"end": 9445,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 9588,
											"end": 9592,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "tag",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9454,
											"end": 9593,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9454,
											"end": 9593,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9755,
											"end": 9759,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9793,
											"end": 9795,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 9782,
											"end": 9791,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9778,
											"end": 9796,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9796,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9796,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 9874,
											"end": 9875,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9863,
											"end": 9872,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9876,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9850,
											"end": 9856,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "tag",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 9955,
											"end": 9957,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9944,
											"end": 9953,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9931,
											"end": 9937,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "tag",
											"source": 7,
											"value": "396"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "397"
										},
										{
											"begin": 10037,
											"end": 10039,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10026,
											"end": 10035,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10022,
											"end": 10040,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10013,
											"end": 10019,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "tag",
											"source": 7,
											"value": "397"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10094,
											"end": 10098,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "tag",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10109,
											"end": 10134,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10109,
											"end": 10134,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "400"
										},
										{
											"begin": 10166,
											"end": 10167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "tag",
											"source": 7,
											"value": "400"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10143,
											"end": 10168,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10143,
											"end": 10168,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10187,
											"end": 10188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10184,
											"end": 10185,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10181,
											"end": 10189,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "402"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "tag",
											"source": 7,
											"value": "402"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "tag",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10237,
											"end": 10238,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10234,
											"end": 10235,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10230,
											"end": 10239,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "tag",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10391,
											"end": 10425,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 10387,
											"end": 10388,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10379,
											"end": 10385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10375,
											"end": 10389,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10368,
											"end": 10426,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10460,
											"end": 10468,
											"name": "PUSH",
											"source": 7,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10455,
											"end": 10457,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10447,
											"end": 10453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10443,
											"end": 10458,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10436,
											"end": 10469,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "tag",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10624,
											"end": 10627,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "405"
										},
										{
											"begin": 10709,
											"end": 10711,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 10704,
											"end": 10707,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "tag",
											"source": 7,
											"value": "405"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10638,
											"end": 10712,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10638,
											"end": 10712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 10810,
											"end": 10813,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "tag",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10839,
											"end": 10841,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10834,
											"end": 10837,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10830,
											"end": 10842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10823,
											"end": 10842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10823,
											"end": 10842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11020,
											"end": 11024,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11058,
											"end": 11060,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11047,
											"end": 11056,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11043,
											"end": 11061,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11035,
											"end": 11061,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11035,
											"end": 11061,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11107,
											"end": 11116,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11101,
											"end": 11105,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11097,
											"end": 11117,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11093,
											"end": 11094,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11082,
											"end": 11091,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11078,
											"end": 11095,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11071,
											"end": 11118,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "408"
										},
										{
											"begin": 11261,
											"end": 11265,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "tag",
											"source": 7,
											"value": "408"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11127,
											"end": 11266,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11127,
											"end": 11266,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "tag",
											"source": 7,
											"value": "205"
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11400,
											"end": 11404,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11438,
											"end": 11440,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11427,
											"end": 11436,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11423,
											"end": 11441,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11415,
											"end": 11441,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11415,
											"end": 11441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "410"
										},
										{
											"begin": 11519,
											"end": 11520,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11508,
											"end": 11517,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11504,
											"end": 11521,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11495,
											"end": 11501,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "tag",
											"source": 7,
											"value": "410"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "411"
										},
										{
											"begin": 11600,
											"end": 11602,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11589,
											"end": 11598,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11585,
											"end": 11603,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11576,
											"end": 11582,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "tag",
											"source": 7,
											"value": "411"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "tag",
											"source": 7,
											"value": "212"
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11766,
											"end": 11770,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11804,
											"end": 11806,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 11793,
											"end": 11802,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11789,
											"end": 11807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11781,
											"end": 11807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11781,
											"end": 11807,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 11885,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11874,
											"end": 11883,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11870,
											"end": 11887,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11861,
											"end": 11867,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "tag",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "414"
										},
										{
											"begin": 11966,
											"end": 11968,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11955,
											"end": 11964,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11951,
											"end": 11969,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11942,
											"end": 11948,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "tag",
											"source": 7,
											"value": "414"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "415"
										},
										{
											"begin": 12048,
											"end": 12050,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 12037,
											"end": 12046,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12033,
											"end": 12051,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12024,
											"end": 12030,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "tag",
											"source": 7,
											"value": "415"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "tag",
											"source": 7,
											"value": "289"
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "417"
										},
										{
											"begin": 12150,
											"end": 12155,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "tag",
											"source": 7,
											"value": "417"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12128,
											"end": 12133,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12125,
											"end": 12157,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "418"
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12171,
											"end": 12172,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12168,
											"end": 12169,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12161,
											"end": 12173,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "tag",
											"source": 7,
											"value": "418"
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "tag",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12241,
											"end": 12246,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12272,
											"end": 12278,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12266,
											"end": 12279,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12257,
											"end": 12279,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12257,
											"end": 12279,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 12312,
											"end": 12317,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "289"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "tag",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "tag",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12397,
											"end": 12403,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12446,
											"end": 12448,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12434,
											"end": 12443,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12425,
											"end": 12432,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12421,
											"end": 12444,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12417,
											"end": 12449,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "422"
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "tag",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "tag",
											"source": 7,
											"value": "422"
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12572,
											"end": 12573,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "424"
										},
										{
											"begin": 12650,
											"end": 12657,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12641,
											"end": 12647,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12630,
											"end": 12639,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 12626,
											"end": 12648,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "tag",
											"source": 7,
											"value": "424"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12587,
											"end": 12658,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12587,
											"end": 12658,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12543,
											"end": 12668,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "tag",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12821,
											"end": 12855,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 12817,
											"end": 12818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12809,
											"end": 12815,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12805,
											"end": 12819,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12798,
											"end": 12856,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12890,
											"end": 12902,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 12885,
											"end": 12887,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12877,
											"end": 12883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12873,
											"end": 12888,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12866,
											"end": 12903,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "tag",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13058,
											"end": 13061,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "427"
										},
										{
											"begin": 13143,
											"end": 13145,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 13138,
											"end": 13141,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "tag",
											"source": 7,
											"value": "427"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13072,
											"end": 13146,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13072,
											"end": 13146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "428"
										},
										{
											"begin": 13244,
											"end": 13247,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "tag",
											"source": 7,
											"value": "428"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13273,
											"end": 13275,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13268,
											"end": 13271,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13264,
											"end": 13276,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13257,
											"end": 13276,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13257,
											"end": 13276,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "tag",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13454,
											"end": 13458,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13492,
											"end": 13494,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13481,
											"end": 13490,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13477,
											"end": 13495,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13469,
											"end": 13495,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13469,
											"end": 13495,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13541,
											"end": 13550,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13535,
											"end": 13539,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13531,
											"end": 13551,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13527,
											"end": 13528,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13516,
											"end": 13525,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13512,
											"end": 13529,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13505,
											"end": 13552,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "430"
										},
										{
											"begin": 13695,
											"end": 13699,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "tag",
											"source": 7,
											"value": "430"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13561,
											"end": 13700,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13561,
											"end": 13700,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "tag",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13853,
											"end": 13887,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 13849,
											"end": 13850,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13841,
											"end": 13847,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13837,
											"end": 13851,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13830,
											"end": 13888,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13922,
											"end": 13930,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13917,
											"end": 13919,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13909,
											"end": 13915,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13905,
											"end": 13920,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13898,
											"end": 13931,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "tag",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14086,
											"end": 14089,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "433"
										},
										{
											"begin": 14171,
											"end": 14173,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 14166,
											"end": 14169,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "tag",
											"source": 7,
											"value": "433"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14100,
											"end": 14174,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14100,
											"end": 14174,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "434"
										},
										{
											"begin": 14272,
											"end": 14275,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "tag",
											"source": 7,
											"value": "434"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14301,
											"end": 14303,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 14296,
											"end": 14299,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14292,
											"end": 14304,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14285,
											"end": 14304,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14285,
											"end": 14304,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "tag",
											"source": 7,
											"value": "240"
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14482,
											"end": 14486,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14520,
											"end": 14522,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 14509,
											"end": 14518,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14505,
											"end": 14523,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14497,
											"end": 14523,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14497,
											"end": 14523,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14569,
											"end": 14578,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14563,
											"end": 14567,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14559,
											"end": 14579,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 14555,
											"end": 14556,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14544,
											"end": 14553,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 14540,
											"end": 14557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14533,
											"end": 14580,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "436"
										},
										{
											"begin": 14723,
											"end": 14727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "tag",
											"source": 7,
											"value": "436"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14589,
											"end": 14728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14589,
											"end": 14728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "tag",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14881,
											"end": 14912,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 14877,
											"end": 14878,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14869,
											"end": 14875,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14865,
											"end": 14879,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14858,
											"end": 14913,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "tag",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15068,
											"end": 15071,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "439"
										},
										{
											"begin": 15153,
											"end": 15155,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 15148,
											"end": 15151,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "tag",
											"source": 7,
											"value": "439"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15082,
											"end": 15156,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15082,
											"end": 15156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "440"
										},
										{
											"begin": 15254,
											"end": 15257,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "tag",
											"source": 7,
											"value": "440"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15283,
											"end": 15285,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 15278,
											"end": 15281,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15274,
											"end": 15286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15267,
											"end": 15286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15267,
											"end": 15286,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "tag",
											"source": 7,
											"value": "245"
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15464,
											"end": 15468,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15502,
											"end": 15504,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 15491,
											"end": 15500,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15487,
											"end": 15505,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15479,
											"end": 15505,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15479,
											"end": 15505,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15551,
											"end": 15560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15545,
											"end": 15549,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15541,
											"end": 15561,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 15537,
											"end": 15538,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15526,
											"end": 15535,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 15522,
											"end": 15539,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15515,
											"end": 15562,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "442"
										},
										{
											"begin": 15705,
											"end": 15709,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "tag",
											"source": 7,
											"value": "442"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15571,
											"end": 15710,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15571,
											"end": 15710,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "tag",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15774,
											"end": 15780,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15808,
											"end": 15813,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15802,
											"end": 15814,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 15792,
											"end": 15814,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15792,
											"end": 15814,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "tag",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15928,
											"end": 15939,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15965,
											"end": 15968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15950,
											"end": 15968,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15950,
											"end": 15968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "tag",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16048,
											"end": 16049,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "tag",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16072,
											"end": 16078,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 16069,
											"end": 16070,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16066,
											"end": 16079,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "448"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 16157,
											"end": 16158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 16152,
											"end": 16155,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16148,
											"end": 16159,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16142,
											"end": 16160,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 16138,
											"end": 16139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16133,
											"end": 16136,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16129,
											"end": 16140,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16122,
											"end": 16161,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 16094,
											"end": 16096,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 16091,
											"end": 16092,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16087,
											"end": 16097,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16082,
											"end": 16097,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16082,
											"end": 16097,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "tag",
											"source": 7,
											"value": "448"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16189,
											"end": 16195,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 16186,
											"end": 16187,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16183,
											"end": 16196,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "449"
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 16269,
											"end": 16270,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16260,
											"end": 16266,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16255,
											"end": 16258,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16251,
											"end": 16267,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16244,
											"end": 16271,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "tag",
											"source": 7,
											"value": "449"
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16029,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "tag",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16397,
											"end": 16400,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "451"
										},
										{
											"begin": 16457,
											"end": 16462,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "297"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "tag",
											"source": 7,
											"value": "451"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "452"
										},
										{
											"begin": 16560,
											"end": 16566,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16555,
											"end": 16558,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "298"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "tag",
											"source": 7,
											"value": "452"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16472,
											"end": 16567,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 16472,
											"end": 16567,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "453"
										},
										{
											"begin": 16621,
											"end": 16627,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16616,
											"end": 16619,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 16609,
											"end": 16613,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 16602,
											"end": 16607,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 16598,
											"end": 16614,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "tag",
											"source": 7,
											"value": "453"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16653,
											"end": 16659,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 16648,
											"end": 16651,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16644,
											"end": 16660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16637,
											"end": 16660,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16637,
											"end": 16660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16401,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "tag",
											"source": 7,
											"value": "247"
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16802,
											"end": 16805,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "455"
										},
										{
											"begin": 16913,
											"end": 16916,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16904,
											"end": 16910,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "tag",
											"source": 7,
											"value": "455"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16817,
											"end": 16917,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16817,
											"end": 16917,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16934,
											"end": 16937,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16927,
											"end": 16937,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16927,
											"end": 16937,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "tag",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17001,
											"end": 17007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17035,
											"end": 17040,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17029,
											"end": 17041,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 17019,
											"end": 17041,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17019,
											"end": 17041,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "tag",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17095,
											"end": 17101,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17146,
											"end": 17148,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 17142,
											"end": 17149,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 17137,
											"end": 17139,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 17130,
											"end": 17135,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 17126,
											"end": 17140,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17122,
											"end": 17150,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 17112,
											"end": 17150,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17112,
											"end": 17150,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "tag",
											"source": 7,
											"value": "303"
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17250,
											"end": 17253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "459"
										},
										{
											"begin": 17311,
											"end": 17316,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "tag",
											"source": 7,
											"value": "459"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "460"
										},
										{
											"begin": 17397,
											"end": 17403,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17392,
											"end": 17395,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "tag",
											"source": 7,
											"value": "460"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17326,
											"end": 17404,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 17326,
											"end": 17404,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "461"
										},
										{
											"begin": 17458,
											"end": 17464,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17453,
											"end": 17456,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 17446,
											"end": 17450,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 17439,
											"end": 17444,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 17435,
											"end": 17451,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "299"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "tag",
											"source": 7,
											"value": "461"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "462"
										},
										{
											"begin": 17512,
											"end": 17518,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "tag",
											"source": 7,
											"value": "462"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17485,
											"end": 17488,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 17481,
											"end": 17520,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17474,
											"end": 17520,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17474,
											"end": 17520,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17254,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "tag",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17645,
											"end": 17649,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17683,
											"end": 17685,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 17672,
											"end": 17681,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 17668,
											"end": 17686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17660,
											"end": 17686,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17660,
											"end": 17686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17732,
											"end": 17741,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17726,
											"end": 17730,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17722,
											"end": 17742,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 17718,
											"end": 17719,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17707,
											"end": 17716,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 17703,
											"end": 17720,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17696,
											"end": 17743,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "464"
										},
										{
											"begin": 17833,
											"end": 17837,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17824,
											"end": 17830,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "303"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "tag",
											"source": 7,
											"value": "464"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17752,
											"end": 17838,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17752,
											"end": 17838,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_blockTimestamp()": "c63aa3e7",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"totalVoters()": "5f5300ff",
							"transferOwnership(address)": "f2fde38b",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stake-2.0.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Stake-2.0.sol\":{\"keccak256\":\"0x123cdfe452804e0d27055921d9b2cf226b1eb3e6d709bdba07ef3f7d6a1762d7\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b4a41e888f83811f2eb2892e625295eb0b23f98bebd87eda5a4490adf170d9f2\",\"dweb:/ipfs/QmbH15ZTFF597sDC7VRfYZ22E7LLaRDKQn8R2RxgKdTw67\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 815,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 817,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 819,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 821,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 823,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 825,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 827,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "totalVoters",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 832,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "voters",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(Voter)811_storage)"
							},
							{
								"astId": 836,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "votedUsers",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 838,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "token_address",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							},
							{
								"astId": 903,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_struct(Stake)889_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)889_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)889_storage"
							},
							"t_mapping(t_address,t_struct(Voter)811_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)811_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)889_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 876,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 878,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 880,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 882,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 884,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 886,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 888,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)811_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Voter",
								"members": [
									{
										"astId": 806,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 810,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Stake-2.0.sol": {
				"ast": {
					"absolutePath": "contracts/Stake-2.0.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Airdrop__claimableOnceAWeek": [
							791
						],
						"Context": [
							763
						],
						"Function__notAVoter": [
							773
						],
						"Function__notAuthorized": [
							771
						],
						"Function__votingNotAvailable": [
							775
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Staking": [
							1513
						],
						"Staking__airdropExceed20Percent": [
							784
						],
						"Staking__cannotStakeNothing": [
							778
						],
						"Staking__noStakingFound": [
							786
						],
						"Staking__penaltyExceed3Percent": [
							782
						],
						"Staking__userIsStaker": [
							780
						],
						"Staking_noStakingPackageFound": [
							788
						],
						"Voting__alreadyVoted": [
							796
						],
						"Voting__notEnoughVoters": [
							800
						],
						"Voting__notYetVoted": [
							798
						],
						"Voting__votingIsRunning": [
							794
						]
					},
					"id": 1514,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1514,
							"sourceUnit": 447,
							"src": "67:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1514,
							"sourceUnit": 145,
							"src": "134:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1514,
							"sourceUnit": 105,
							"src": "198:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "254:56:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "318:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "341:2:6"
							},
							"src": "312:32:6"
						},
						{
							"id": 773,
							"name": "Function__notAVoter",
							"nameLocation": "352:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 772,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "371:2:6"
							},
							"src": "346:28:6"
						},
						{
							"id": 775,
							"name": "Function__votingNotAvailable",
							"nameLocation": "382:28:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 774,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "410:2:6"
							},
							"src": "376:37:6"
						},
						{
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "417:65:6",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 778,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "490:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "517:2:6"
							},
							"src": "484:36:6"
						},
						{
							"id": 780,
							"name": "Staking__userIsStaker",
							"nameLocation": "528:21:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 779,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "549:2:6"
							},
							"src": "522:30:6"
						},
						{
							"id": 782,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "560:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 781,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "590:2:6"
							},
							"src": "554:39:6"
						},
						{
							"id": 784,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "601:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 783,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "632:2:6"
							},
							"src": "595:40:6"
						},
						{
							"id": 786,
							"name": "Staking__noStakingFound",
							"nameLocation": "643:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 785,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "666:2:6"
							},
							"src": "637:32:6"
						},
						{
							"id": 788,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "677:29:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 787,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "706:2:6"
							},
							"src": "671:38:6"
						},
						{
							"documentation": {
								"id": 789,
								"nodeType": "StructuredDocumentation",
								"src": "713:65:6",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 791,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "786:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 790,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "813:2:6"
							},
							"src": "780:36:6"
						},
						{
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "820:64:6",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 794,
							"name": "Voting__votingIsRunning",
							"nameLocation": "892:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 793,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "915:2:6"
							},
							"src": "886:32:6"
						},
						{
							"id": 796,
							"name": "Voting__alreadyVoted",
							"nameLocation": "926:20:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 795,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "946:2:6"
							},
							"src": "920:29:6"
						},
						{
							"id": 798,
							"name": "Voting__notYetVoted",
							"nameLocation": "957:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 797,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "976:2:6"
							},
							"src": "951:28:6"
						},
						{
							"id": 800,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "987:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 799,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1010:2:6"
							},
							"src": "981:32:6"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 801,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "1037:15:6"
									},
									"id": 802,
									"nodeType": "InheritanceSpecifier",
									"src": "1037:15:6"
								},
								{
									"baseName": {
										"id": 803,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "1054:7:6"
									},
									"id": 804,
									"nodeType": "InheritanceSpecifier",
									"src": "1054:7:6"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1513,
							"linearizedBaseContracts": [
								1513,
								104,
								763,
								144
							],
							"name": "Staking",
							"nameLocation": "1026:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Staking.Voter",
									"id": 811,
									"members": [
										{
											"constant": false,
											"id": 806,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1268:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1263:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 805,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1263:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 810,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1315:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1290:30:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 809,
												"keyType": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1290:24:6",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 808,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1309:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1246:5:6",
									"nodeType": "StructDefinition",
									"scope": 1513,
									"src": "1239:89:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 815,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1373:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1336:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 814,
										"keyType": {
											"id": 812,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1344:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1336:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 813,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1355:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 817,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1411:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1396:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 816,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1396:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 819,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1451:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1436:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 818,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1436:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 821,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1484:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1469:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 820,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1469:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 823,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1519:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1505:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 822,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1505:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 825,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1556:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1539:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 824,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1539:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 827,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1587:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1572:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 826,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1572:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 832,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1638:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1605:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
										"typeString": "mapping(address => struct Staking.Voter)"
									},
									"typeName": {
										"id": 831,
										"keyType": {
											"id": 828,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1613:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1605:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
											"typeString": "mapping(address => struct Staking.Voter)"
										},
										"valueType": {
											"id": 830,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 829,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 811,
												"src": "1624:5:6"
											},
											"referencedDeclaration": 811,
											"src": "1624:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$811_storage_ptr",
												"typeString": "struct Staking.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 836,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1686:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1651:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 835,
										"keyType": {
											"id": 833,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1659:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1651:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 834,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1670:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 838,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1720:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "1705:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 837,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1705:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "1769:284:6",
										"statements": [
											{
												"expression": {
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 843,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "1843:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1864:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1843:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 846,
												"nodeType": "ExpressionStatement",
												"src": "1843:23:6"
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 847,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "1877:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 848,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1891:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1877:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "1877:16:6"
											},
											{
												"expression": {
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 851,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "1906:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 852,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "1922:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1906:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "1906:21:6"
											},
											{
												"expression": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 855,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1940:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 857,
														"indexExpression": {
															"hexValue": "3930",
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1955:7:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1940:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 858,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1966:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1940:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 860,
												"nodeType": "ExpressionStatement",
												"src": "1940:27:6"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 861,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1978:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 863,
														"indexExpression": {
															"hexValue": "313830",
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1993:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1978:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2005:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1978:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "1978:28:6"
											},
											{
												"expression": {
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 867,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "2017:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 869,
														"indexExpression": {
															"hexValue": "333635",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2032:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2017:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2044:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "2017:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 872,
												"nodeType": "ExpressionStatement",
												"src": "2017:28:6"
											}
										]
									},
									"id": 874,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1762:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1754:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1754:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1753:15:6"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1769:0:6"
									},
									"scope": 1513,
									"src": "1742:311:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 889,
									"members": [
										{
											"constant": false,
											"id": 876,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2326:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2318:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 875,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2318:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 878,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2351:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2343:13:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2343:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 880,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2375:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2367:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 879,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2367:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 882,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2403:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2395:19:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2395:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 884,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2533:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2525:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 883,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2525:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 886,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2561:16:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2553:24:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 885,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2553:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 888,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2596:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2588:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 887,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2588:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2301:5:6",
									"nodeType": "StructDefinition",
									"scope": 1513,
									"src": "2294:325:6",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 897,
									"members": [
										{
											"constant": false,
											"id": 891,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2803:12:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2795:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 890,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2795:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 893,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2834:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2826:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 892,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2826:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 896,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2858:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2852:11:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 895,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 894,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 889,
													"src": "2852:5:6"
												},
												"referencedDeclaration": 889,
												"src": "2852:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2769:14:6",
									"nodeType": "StructDefinition",
									"scope": 1513,
									"src": "2762:109:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "2879:114:6",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 903,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "3034:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1513,
									"src": "2999:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 902,
										"keyType": {
											"id": 899,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "3007:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2999:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 901,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 900,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 889,
												"src": "3018:5:6"
											},
											"referencedDeclaration": 889,
											"src": "3018:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "3055:126:6",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 914,
									"name": "Staked",
									"nameLocation": "3193:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3226:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3210:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3249:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3241:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3241:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3274:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3266:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3266:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "3302:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3294:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3199:121:6"
									},
									"src": "3187:134:6"
								},
								{
									"anonymous": false,
									"id": 918,
									"name": "PenaltyChanged",
									"nameLocation": "3335:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3358:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "3350:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3350:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3349:16:6"
									},
									"src": "3329:37:6"
								},
								{
									"anonymous": false,
									"id": 922,
									"name": "AirdropChanged",
									"nameLocation": "3378:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3401:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3393:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3393:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3392:16:6"
									},
									"src": "3372:37:6"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "3559:202:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 925,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "3658:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 928,
															"indexExpression": {
																"expression": {
																	"id": 926,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3665:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3665:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3658:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "3658:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3692:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3658:39:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 936,
												"nodeType": "IfStatement",
												"src": "3654:100:6",
												"trueBody": {
													"id": 935,
													"nodeType": "Block",
													"src": "3699:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 932,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "3721:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3721:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 934,
															"nodeType": "RevertStatement",
															"src": "3714:28:6"
														}
													]
												}
											}
										]
									},
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3534:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3542:2:6"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3559:0:6"
									},
									"scope": 1513,
									"src": "3525:236:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 944,
										"nodeType": "Block",
										"src": "3788:41:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 940,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 938,
														"src": "3799:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3799:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "3799:10:6"
											},
											{
												"id": 943,
												"nodeType": "PlaceholderStatement",
												"src": "3820:1:6"
											}
										]
									},
									"id": 945,
									"name": "isVoter",
									"nameLocation": "3778:7:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3785:2:6"
									},
									"src": "3769:60:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "3881:165:6",
										"statements": [
											{
												"condition": {
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3959:14:6",
													"subExpression": {
														"id": 948,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "3960:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 954,
												"nodeType": "IfStatement",
												"src": "3955:84:6",
												"trueBody": {
													"id": 953,
													"nodeType": "Block",
													"src": "3975:64:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 950,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "3997:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3997:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 952,
															"nodeType": "RevertStatement",
															"src": "3990:37:6"
														}
													]
												}
											}
										]
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "3846:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3864:2:6"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3881:0:6"
									},
									"scope": 1513,
									"src": "3837:209:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "4082:51:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 958,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 956,
														"src": "4093:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4093:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "4093:20:6"
											},
											{
												"id": 961,
												"nodeType": "PlaceholderStatement",
												"src": "4124:1:6"
											}
										]
									},
									"id": 963,
									"name": "votingStatusTrue",
									"nameLocation": "4063:16:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4079:2:6"
									},
									"src": "4054:79:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "4533:1275:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 973,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "4733:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 976,
															"indexExpression": {
																"expression": {
																	"id": 974,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4746:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4746:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4733:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 977,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "4733:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4768:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4733:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 984,
												"nodeType": "IfStatement",
												"src": "4729:99:6",
												"trueBody": {
													"id": 983,
													"nodeType": "Block",
													"src": "4771:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 980,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "4793:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4793:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 982,
															"nodeType": "RevertStatement",
															"src": "4786:30:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 985,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "4844:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 987,
														"indexExpression": {
															"id": 986,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "4859:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4844:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4875:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4844:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"nodeType": "IfStatement",
												"src": "4840:103:6",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "4878:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 990,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "4900:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4900:31:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 992,
															"nodeType": "RevertStatement",
															"src": "4893:38:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 995,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "4955:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4970:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4955:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 998,
												"nodeType": "ExpressionStatement",
												"src": "4955:16:6"
											},
											{
												"expression": {
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 999,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "4982:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 1002,
															"indexExpression": {
																"expression": {
																	"id": 1000,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4989:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4989:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4982:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 1003,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "4982:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5015:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4982:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "4982:37:6"
											},
											{
												"assignments": [
													1008
												],
												"declarations": [
													{
														"constant": false,
														"id": 1008,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "5128:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "5120:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1007,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5120:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1011,
												"initialValue": {
													"expression": {
														"id": 1009,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "5140:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "5140:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5120:35:6"
											},
											{
												"expression": {
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1012,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "5289:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1015,
														"indexExpression": {
															"expression": {
																"id": 1013,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5302:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5302:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5289:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1017,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 966,
																"src": "5336:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1018,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1008,
																"src": "5357:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1019,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 815,
																	"src": "5381:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1021,
																"indexExpression": {
																	"id": 1020,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 968,
																	"src": "5396:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5381:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1022,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 968,
																			"src": "5424:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1023,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1008,
																			"src": "5438:9:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5424:23:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1025,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5423:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5463:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5479:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1028,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5495:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1016,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "5316:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$889_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5316:191:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "5289:218:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "5289:218:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1036,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "5568:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1035,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5561:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5561:21:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1038,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5597:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5597:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1042,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5630:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1513",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1513",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1041,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5622:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1040,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5622:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5622:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1044,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5650:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1032,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "5520:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1034,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "5520:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5520:147:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1046,
												"nodeType": "ExpressionStatement",
												"src": "5520:147:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1048,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5743:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5743:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1050,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5755:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1051,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1008,
															"src": "5763:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1054,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1052,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 968,
																		"src": "5775:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1053,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1008,
																		"src": "5789:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5775:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1055,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5774:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1047,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "5736:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5736:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1057,
												"nodeType": "EmitStatement",
												"src": "5731:69:6"
											}
										]
									},
									"documentation": {
										"id": 964,
										"nodeType": "StructuredDocumentation",
										"src": "4249:204:6",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 971,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 970,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "4520:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4520:12:6"
										}
									],
									"name": "stake",
									"nameLocation": "4468:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4482:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4474:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4474:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4498:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4490:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4490:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4473:37:6"
									},
									"returnParameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4533:0:6"
									},
									"scope": 1513,
									"src": "4459:1349:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "5877:252:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1066,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "5967:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 1067,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5976:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "5967:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1073,
												"nodeType": "IfStatement",
												"src": "5963:83:6",
												"trueBody": {
													"id": 1072,
													"nodeType": "Block",
													"src": "5980:66:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1069,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "6002:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1070,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6002:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1071,
															"nodeType": "RevertStatement",
															"src": "5995:39:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1074,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "6056:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1075,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "6077:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6056:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1077,
												"nodeType": "ExpressionStatement",
												"src": "6056:27:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1079,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "6114:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1078,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "6099:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1081,
												"nodeType": "EmitStatement",
												"src": "6094:27:6"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1064,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1063,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "5867:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5867:9:6"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5825:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5850:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "5842:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5842:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5841:16:6"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5877:0:6"
									},
									"scope": 1513,
									"src": "5816:313:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1101,
										"nodeType": "Block",
										"src": "6251:124:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1096,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1090,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6324:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1091,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6324:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1092,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1085,
																				"src": "6342:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6324:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1094,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6323:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1095,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6351:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "6323:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1097,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6322:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1098,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6359:8:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "6322:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1089,
												"id": 1100,
												"nodeType": "Return",
												"src": "6315:52:6"
											}
										]
									},
									"id": 1102,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "6146:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "6180:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "6172:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6172:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6171:15:6"
									},
									"returnParameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "6237:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6237:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6236:9:6"
									},
									"scope": 1513,
									"src": "6137:238:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1132,
										"nodeType": "Block",
										"src": "6503:330:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1110,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1105,
															"src": "6518:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1111,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "6518:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1112,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6539:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6518:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1117,
												"nodeType": "IfStatement",
												"src": "6514:63:6",
												"trueBody": {
													"id": 1116,
													"nodeType": "Block",
													"src": "6542:35:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1114,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6564:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1109,
															"id": 1115,
															"nodeType": "Return",
															"src": "6557:8:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1122,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1118,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "6697:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "6697:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1120,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "6734:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1121,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 880,
																		"src": "6734:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6697:57:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1124,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1105,
																				"src": "6800:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1125,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 878,
																			"src": "6800:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1123,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1102,
																		"src": "6774:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6774:43:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6697:120:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1128,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6696:122:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1129,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6821:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6696:129:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1109,
												"id": 1131,
												"nodeType": "Return",
												"src": "6676:149:6"
											}
										]
									},
									"id": 1133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6392:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6427:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "6414:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1104,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1103,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 889,
														"src": "6414:5:6"
													},
													"referencedDeclaration": 889,
													"src": "6414:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6413:25:6"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "6489:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6488:9:6"
									},
									"scope": 1513,
									"src": "6383:450:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1173,
										"nodeType": "Block",
										"src": "6984:228:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1144,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "6999:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1145,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7009:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6999:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1152,
												"nodeType": "IfStatement",
												"src": "6995:57:6",
												"trueBody": {
													"id": 1151,
													"nodeType": "Block",
													"src": "7012:40:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7035:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 1148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7038:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7034:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 1143,
															"id": 1150,
															"nodeType": "Return",
															"src": "7027:13:6"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1153,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1135,
																"src": "7084:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1156,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1154,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1135,
																						"src": "7095:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1155,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "7104:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7095:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1157,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7094:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7126:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "7094:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7093:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7084:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1162,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1137,
																"src": "7146:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1165,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1163,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1137,
																						"src": "7157:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1164,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "7166:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "7157:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1166,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "7156:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7188:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "7156:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1169,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7155:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7146:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1171,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7069:135:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1143,
												"id": 1172,
												"nodeType": "Return",
												"src": "7062:142:6"
											}
										]
									},
									"id": 1174,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "6850:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6887:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6879:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6879:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "6903:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6895:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6895:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6878:32:6"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6961:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6961:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6970:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6970:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6960:18:6"
									},
									"scope": 1513,
									"src": "6841:371:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "7616:965:6",
										"statements": [
											{
												"assignments": [
													1182
												],
												"declarations": [
													{
														"constant": false,
														"id": 1182,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "7750:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1260,
														"src": "7737:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1181,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1180,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "7737:5:6"
															},
															"referencedDeclaration": 889,
															"src": "7737:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1187,
												"initialValue": {
													"baseExpression": {
														"id": 1183,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "7763:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1186,
													"indexExpression": {
														"expression": {
															"id": 1184,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7776:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7776:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7763:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7737:50:6"
											},
											{
												"assignments": [
													1189
												],
												"declarations": [
													{
														"constant": false,
														"id": 1189,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7806:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1260,
														"src": "7798:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1188,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7798:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1193,
												"initialValue": {
													"arguments": [
														{
															"id": 1191,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "7837:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1190,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "7815:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7815:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7798:50:6"
											},
											{
												"expression": {
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7861:31:6",
													"subExpression": {
														"baseExpression": {
															"id": 1194,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "7868:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1197,
														"indexExpression": {
															"expression": {
																"id": 1195,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7881:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7881:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7868:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1199,
												"nodeType": "ExpressionStatement",
												"src": "7861:31:6"
											},
											{
												"expression": {
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1200,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "7903:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1201,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7918:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7903:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "7903:16:6"
											},
											{
												"expression": {
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7930:42:6",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1204,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "7937:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1207,
																"indexExpression": {
																	"expression": {
																		"id": 1205,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7944:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7944:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7937:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1208,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "7937:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1210,
														"indexExpression": {
															"id": 1209,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "7962:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7937:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1212,
												"nodeType": "ExpressionStatement",
												"src": "7930:42:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1213,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "7989:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "7989:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1215,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8014:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8014:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7989:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1258,
													"nodeType": "Block",
													"src": "8394:180:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1247,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "8457:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1246,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8450:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1248,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8450:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1249,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8490:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1250,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8490:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1254,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1251,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1182,
																						"src": "8520:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1252,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 876,
																					"src": "8520:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1253,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1189,
																					"src": "8540:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8520:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1255,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8519:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1243,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8409:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8409:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8409:153:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1257,
															"nodeType": "ExpressionStatement",
															"src": "8409:153:6"
														}
													]
												},
												"id": 1259,
												"nodeType": "IfStatement",
												"src": "7985:589:6",
												"trueBody": {
													"id": 1242,
													"nodeType": "Block",
													"src": "8031:357:6",
													"statements": [
														{
															"assignments": [
																1219,
																1221
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1219,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "8073:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1242,
																	"src": "8065:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1218,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8065:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1221,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "8114:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1242,
																	"src": "8106:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1220,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8106:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1227,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1223,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1182,
																			"src": "8175:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1224,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "8175:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1225,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1189,
																		"src": "8194:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1222,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1174,
																	"src": "8146:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8146:55:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8046:155:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1232,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "8266:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1231,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8259:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8259:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1234,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8299:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1235,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8299:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1238,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1236,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1219,
																					"src": "8329:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1237,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1221,
																					"src": "8346:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8329:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1239,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8328:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1228,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "8218:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "8218:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8218:158:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1241,
															"nodeType": "ExpressionStatement",
															"src": "8218:158:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1175,
										"nodeType": "StructuredDocumentation",
										"src": "7220:341:6",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1178,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1177,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "7603:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "7603:12:6"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7578:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7591:2:6"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7616:0:6"
									},
									"scope": 1513,
									"src": "7569:1012:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1377,
										"nodeType": "Block",
										"src": "8663:985:6",
										"statements": [
											{
												"assignments": [
													1269
												],
												"declarations": [
													{
														"constant": false,
														"id": 1269,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8687:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1377,
														"src": "8674:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1268,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1267,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "8674:5:6"
															},
															"referencedDeclaration": 889,
															"src": "8674:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1274,
												"initialValue": {
													"baseExpression": {
														"id": 1270,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "8700:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1273,
													"indexExpression": {
														"expression": {
															"id": 1271,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8713:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1272,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8713:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8700:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8674:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1275,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1269,
															"src": "8801:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1276,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "8801:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1277,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8822:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8801:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1283,
												"nodeType": "IfStatement",
												"src": "8797:87:6",
												"trueBody": {
													"id": 1282,
													"nodeType": "Block",
													"src": "8825:59:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1279,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "8847:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1280,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8847:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1281,
															"nodeType": "RevertStatement",
															"src": "8840:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1286
												],
												"declarations": [
													{
														"constant": false,
														"id": 1286,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "8916:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1377,
														"src": "8894:29:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1285,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1284,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 897,
																"src": "8894:14:6"
															},
															"referencedDeclaration": 897,
															"src": "8894:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1292,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1288,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8941:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8944:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1290,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1269,
															"src": "8947:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1287,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "8926:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$897_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8926:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8894:64:6"
											},
											{
												"assignments": [
													1294
												],
												"declarations": [
													{
														"constant": false,
														"id": 1294,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8979:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1377,
														"src": "8971:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1293,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8971:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1298,
												"initialValue": {
													"arguments": [
														{
															"id": 1296,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1269,
															"src": "9010:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1295,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "8988:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8988:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8971:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1299,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1286,
																"src": "9038:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1300,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "9038:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1301,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "9038:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1302,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9066:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1303,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9066:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9038:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1327,
												"nodeType": "IfStatement",
												"src": "9034:218:6",
												"trueBody": {
													"id": 1326,
													"nodeType": "Block",
													"src": "9083:169:6",
													"statements": [
														{
															"expression": {
																"id": 1324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1305,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1286,
																		"src": "9098:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1307,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 893,
																	"src": "9098:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1314,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1311,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1308,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1269,
																									"src": "9135:10:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1309,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 876,
																								"src": "9135:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1310,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "9155:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9135:38:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1312,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9134:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1313,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9177:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9134:47:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1315,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9133:49:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1321,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1318,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1316,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1294,
																								"src": "9204:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1317,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "9213:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "9204:27:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1319,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "9203:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1320,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "9235:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "9203:36:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1322,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "9202:38:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "9133:107:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9098:142:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1325,
															"nodeType": "ExpressionStatement",
															"src": "9098:142:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1329,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1269,
																	"src": "9282:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1330,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 888,
																"src": "9282:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1328,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1438,
															"src": "9268:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1331,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9268:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9312:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9268:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1358,
													"nodeType": "Block",
													"src": "9457:61:6",
													"statements": [
														{
															"expression": {
																"id": 1356,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1350,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1286,
																			"src": "9472:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1353,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "9472:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "9472:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1355,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9505:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9472:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1357,
															"nodeType": "ExpressionStatement",
															"src": "9472:34:6"
														}
													]
												},
												"id": 1359,
												"nodeType": "IfStatement",
												"src": "9264:254:6",
												"trueBody": {
													"id": 1349,
													"nodeType": "Block",
													"src": "9315:136:6",
													"statements": [
														{
															"assignments": [
																1335
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1335,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "9338:7:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1349,
																	"src": "9330:15:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1334,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "9330:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1340,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1337,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1269,
																			"src": "9366:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1338,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "9366:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1336,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1456,
																	"src": "9348:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9348:36:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "9330:54:6"
														},
														{
															"expression": {
																"id": 1347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1341,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1286,
																			"src": "9399:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1344,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "9399:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1345,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "9399:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1346,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1335,
																	"src": "9432:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9399:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1348,
															"nodeType": "ExpressionStatement",
															"src": "9399:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1360,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1286,
																"src": "9530:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1363,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "9530:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1364,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "9530:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1365,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1294,
														"src": "9556:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9530:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1367,
												"nodeType": "ExpressionStatement",
												"src": "9530:32:6"
											},
											{
												"expression": {
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1368,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1286,
															"src": "9573:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1370,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 891,
														"src": "9573:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1371,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1269,
															"src": "9596:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1372,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "9596:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9573:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1374,
												"nodeType": "ExpressionStatement",
												"src": "9573:40:6"
											},
											{
												"expression": {
													"id": 1375,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1286,
													"src": "9633:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1266,
												"id": 1376,
												"nodeType": "Return",
												"src": "9626:14:6"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1378,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8606:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8614:2:6"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1265,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1378,
												"src": "8640:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1264,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1263,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "8640:14:6"
													},
													"referencedDeclaration": 897,
													"src": "8640:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8639:23:6"
									},
									"scope": 1513,
									"src": "8597:1051:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1388,
										"nodeType": "Block",
										"src": "9807:49:6",
										"statements": [
											{
												"expression": {
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1383,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "9818:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1384,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9833:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1385,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9833:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9818:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1387,
												"nodeType": "ExpressionStatement",
												"src": "9818:30:6"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1389,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1381,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1380,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9797:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9797:9:6"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "9773:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9785:2:6"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9807:0:6"
									},
									"scope": 1513,
									"src": "9764:92:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1412,
										"nodeType": "Block",
										"src": "9932:172:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1396,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "9947:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 1397,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9956:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "9947:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1403,
												"nodeType": "IfStatement",
												"src": "9943:85:6",
												"trueBody": {
													"id": 1402,
													"nodeType": "Block",
													"src": "9961:67:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1399,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "9983:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9983:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1401,
															"nodeType": "RevertStatement",
															"src": "9976:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1404,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "10038:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1405,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1391,
														"src": "10052:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10038:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1407,
												"nodeType": "ExpressionStatement",
												"src": "10038:20:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1409,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1391,
															"src": "10089:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1408,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "10074:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1410,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10074:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1411,
												"nodeType": "EmitStatement",
												"src": "10069:27:6"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1413,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1394,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1393,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9922:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9922:9:6"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "9873:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1391,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9905:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1413,
												"src": "9897:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9897:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9896:16:6"
									},
									"returnParameters": {
										"id": 1395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9932:0:6"
									},
									"scope": 1513,
									"src": "9864:240:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1421,
										"nodeType": "Block",
										"src": "10169:41:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1418,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "10187:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "10187:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1417,
												"id": 1420,
												"nodeType": "Return",
												"src": "10180:22:6"
											}
										]
									},
									"functionSelector": "c63aa3e7",
									"id": 1422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nameLocation": "10121:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10136:2:6"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "10160:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10160:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10159:9:6"
									},
									"scope": 1513,
									"src": "10112:98:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1437,
										"nodeType": "Block",
										"src": "10290:64:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1429,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10309:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10309:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1431,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1424,
																	"src": "10327:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10309:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1433,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10308:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10340:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "10308:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1428,
												"id": 1436,
												"nodeType": "Return",
												"src": "10301:45:6"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "10227:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "10249:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "10241:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10241:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10240:19:6"
									},
									"returnParameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1427,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1438,
												"src": "10281:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10281:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10280:9:6"
									},
									"scope": 1513,
									"src": "10218:136:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1455,
										"nodeType": "Block",
										"src": "10474:73:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1450,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1445,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1440,
																				"src": "10494:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1446,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "10508:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10494:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1448,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10493:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10523:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10493:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1451,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10492:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1452,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10531:8:6",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10492:47:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1444,
												"id": 1454,
												"nodeType": "Return",
												"src": "10485:54:6"
											}
										]
									},
									"id": 1456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "10371:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "10397:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "10389:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1439,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10389:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10388:21:6"
									},
									"returnParameters": {
										"id": 1444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1443,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "10460:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10460:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10459:9:6"
									},
									"scope": 1513,
									"src": "10362:185:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1511,
										"nodeType": "Block",
										"src": "10588:572:6",
										"statements": [
											{
												"assignments": [
													1461
												],
												"declarations": [
													{
														"constant": false,
														"id": 1461,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10666:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1511,
														"src": "10652:20:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1460,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1459,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "10652:5:6"
															},
															"referencedDeclaration": 889,
															"src": "10652:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1466,
												"initialValue": {
													"baseExpression": {
														"id": 1462,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "10675:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1465,
													"indexExpression": {
														"expression": {
															"id": 1463,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "10688:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1464,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "10688:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10675:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10652:47:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1467,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "10716:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1468,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "10716:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1469,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10732:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10716:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1510,
												"nodeType": "IfStatement",
												"src": "10712:441:6",
												"trueBody": {
													"id": 1509,
													"nodeType": "Block",
													"src": "10735:418:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1472,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1461,
																				"src": "10768:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 1473,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 888,
																			"src": "10768:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1471,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1438,
																		"src": "10754:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1474,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10754:37:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10795:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10754:42:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1481,
															"nodeType": "IfStatement",
															"src": "10750:119:6",
															"trueBody": {
																"id": 1480,
																"nodeType": "Block",
																"src": "10798:71:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1477,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 791,
																				"src": "10824:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1478,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10824:29:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1479,
																		"nodeType": "RevertStatement",
																		"src": "10817:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1486,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1482,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1461,
																		"src": "10885:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1484,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "10885:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1485,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10911:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10885:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1487,
															"nodeType": "ExpressionStatement",
															"src": "10885:27:6"
														},
														{
															"expression": {
																"id": 1493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1488,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1461,
																		"src": "10927:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1490,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "10927:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1491,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10952:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1492,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10952:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10927:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1494,
															"nodeType": "ExpressionStatement",
															"src": "10927:40:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1499,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "11032:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1498,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "11025:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1500,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11025:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1501,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "11065:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "11065:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1504,
																					"name": "staker",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1461,
																					"src": "11112:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1505,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 876,
																				"src": "11112:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1503,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1456,
																			"src": "11094:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11094:32:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1495,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "10984:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1497,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "10984:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10984:157:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1508,
															"nodeType": "ExpressionStatement",
															"src": "10984:157:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 1512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimAirdrop",
									"nameLocation": "10564:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10576:2:6"
									},
									"returnParameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10588:0:6"
									},
									"scope": 1513,
									"src": "10555:605:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1514,
							"src": "1017:11992:6",
							"usedErrors": [
								780,
								782,
								784,
								786,
								788,
								791
							]
						}
					],
					"src": "40:12971:6"
				},
				"id": 6
			}
		}
	}
}