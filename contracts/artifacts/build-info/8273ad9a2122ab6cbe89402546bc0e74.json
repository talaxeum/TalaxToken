{
	"id": "8273ad9a2122ab6cbe89402546bc0e74",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Staking.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Error handling message for Modifier\n */\nerror Function__notAuthorized();\n\n/**\n * @notice Error handling message for Staking functions\n */\nerror Staking__cannotStakeNothing();\nerror Staking__userIsStaker();\nerror Staking__penaltyExceed3Percent();\nerror Staking__airdropExceed20Percent();\nerror Staking__noStakingFound();\nerror Staking_noStakingPackageFound();\n\n/**\n * @notice Error handling message for Airdrop functions\n */\nerror Airdrop__notStarted();\nerror Airdrop__claimableOnceAWeek();\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n    bool public airdropStatus;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _checkAirdropStatus() internal view {\n        if (!airdropStatus) {\n            revert Airdrop__notStarted();\n        }\n    }\n\n    modifier airdropStatusTrue() {\n        _checkAirdropStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n        if (stakeholders[msg.sender].amount != 0) {\n            revert Staking__userIsStaker();\n        }\n\n        if (stakingPackage[stakePeriod] == 0) {\n            revert Staking_noStakingPackageFound();\n        }\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[msg.sender] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n\n        SafeERC20.safeTransferFrom(\n            IERC20(token_address),\n            msg.sender,\n            address(this),\n            amount\n        );\n        // Emit an event that the stake has occured\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        if (amount > 30) {\n            revert Staking__penaltyExceed3Percent();\n        }\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        if (user_stake.amount == 0) {\n            revert Staking__noStakingFound();\n        }\n\n        uint256 reward = _calculateStakeReward(user_stake);\n        delete stakeholders[msg.sender];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (amount_reduced + reward_reduced)\n            );\n        } else {\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        // require(user_stake.amount > 0, \"No Stake Found\");\n        if (user_stake.amount == 0) {\n            revert Staking__noStakingFound();\n        }\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n        airdropStatus = true;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        if (amount > 200) {\n            revert Staking__airdropExceed20Percent();\n        }\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop() external airdropStatusTrue {\n        // TODO: can be simplified if using address\n        Stake storage user_stake = stakeholders[msg.sender];\n        if (user_stake.amount == 0) {\n            revert Staking__noStakingFound();\n        }\n\n        if (user_stake.amount > 0) {\n            if (calculateWeek(user_stake.latestClaimDrop) == 0) {\n                revert Airdrop__claimableOnceAWeek();\n            }\n\n            user_stake.claimableAirdrop = 0;\n            user_stake.latestClaimDrop = block.timestamp;\n\n            SafeERC20.safeTransfer(\n                IERC20(token_address),\n                msg.sender,\n                _calculateAirdrop(user_stake.amount)\n            );\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xBF PUSH20 0xC3865EAAF80D277DD1C60B6B2E822B5A3D224D47 DUP14 DUP5 0xE6 EQ SWAP10 0xCE SWAP9 SUB DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xBF PUSH20 0xC3865EAAF80D277DD1C60B6B2E822B5A3D224D47 DUP14 DUP5 0xE6 EQ SWAP10 0xCE SWAP9 SUB DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122006bf73c3865eaaf80d277dd1c60b6b2e822b5a3d224d478d84e61499ce98038064736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD SWAP13 0xC SUB 0x4A DUP11 0xC SWAP13 BLOCKHASH 0xEB BALANCE PUSH7 0xD9FB5A40DC6087 SLOAD DUP4 SWAP3 EQ BYTE PUSH16 0xF32CC1C40F87B764736F6C634300080B STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD SWAP13 0xC SUB 0x4A DUP11 0xC SWAP13 BLOCKHASH 0xEB BALANCE PUSH7 0xD9FB5A40DC6087 SLOAD DUP4 SWAP3 EQ BYTE PUSH16 0xF32CC1C40F87B764736F6C634300080B STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220079c0c034a8a0c9c40eb3166d9fb5a40dc6087548392141a6ff32cc1c40f87b764736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Staking.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Airdrop__notStarted",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropStatus",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Staking.sol\":753:9921  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Staking.sol\":1198:1499  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:950  _msgSender */\n  shl(0x20, tag_11)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":940:952  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  shl(0x20, tag_12)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  0x20\n  shr\n  jump\t// in\ntag_9:\n    /* \"contracts/Staking.sol\":1318:1320  15 */\n  0x0f\n    /* \"contracts/Staking.sol\":1297:1315  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Staking.sol\":1297:1320  stakingPenaltyRate = 15 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1344:1346  80 */\n  0x50\n    /* \"contracts/Staking.sol\":1330:1341  airdropRate */\n  0x04\n    /* \"contracts/Staking.sol\":1330:1346  airdropRate = 80 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1373:1378  token */\n  dup1\n    /* \"contracts/Staking.sol\":1357:1370  token_address */\n  0x06\n  0x01\n    /* \"contracts/Staking.sol\":1357:1378  token_address = token */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1415:1416  6 */\n  0x06\n    /* \"contracts/Staking.sol\":1389:1403  stakingPackage */\n  0x02\n    /* \"contracts/Staking.sol\":1389:1412  stakingPackage[90 days] */\n  0x00\n    /* \"contracts/Staking.sol\":1404:1411  90 days */\n  0x76a700\n    /* \"contracts/Staking.sol\":1389:1412  stakingPackage[90 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Staking.sol\":1389:1416  stakingPackage[90 days] = 6 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1453:1454  7 */\n  0x07\n    /* \"contracts/Staking.sol\":1426:1440  stakingPackage */\n  0x02\n    /* \"contracts/Staking.sol\":1426:1450  stakingPackage[180 days] */\n  0x00\n    /* \"contracts/Staking.sol\":1441:1449  180 days */\n  0xed4e00\n    /* \"contracts/Staking.sol\":1426:1450  stakingPackage[180 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Staking.sol\":1426:1454  stakingPackage[180 days] = 7 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1491:1492  8 */\n  0x08\n    /* \"contracts/Staking.sol\":1464:1478  stakingPackage */\n  0x02\n    /* \"contracts/Staking.sol\":1464:1488  stakingPackage[365 days] */\n  0x00\n    /* \"contracts/Staking.sol\":1479:1487  365 days */\n  0x01e13380\n    /* \"contracts/Staking.sol\":1464:1488  stakingPackage[365 days] */\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/Staking.sol\":1464:1492  stakingPackage[365 days] = 8 */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/Staking.sol\":1198:1499  constructor(address token) {... */\n  pop\n    /* \"contracts/Staking.sol\":753:9921  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_14)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_11:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2368  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2387:2395  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2384  _owner */\n  0x01\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2441:2449  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2431:2439  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_18:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_20:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_21:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_30\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_20\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_22:\n    /* \"#utility.yul\":641:665   */\n  tag_32\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_21\n  jump\t// in\ntag_32:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_33\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_33:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_23:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_35\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_22\n  jump\t// in\ntag_35:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_38\n  tag_18\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":932:1051   */\ntag_37:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_39\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_23\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Staking.sol\":753:9921  contract Staking is ReentrancyGuard, Ownable {... */\ntag_14:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Staking.sol\":753:9921  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xbed9d861\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xadb61832\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x7b0472f0\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2cf1a5fb\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Staking.sol\":7268:8292  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":1131:1156  bool public airdropStatus */\n    tag_4:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_29\n      swap2\n      swap1\n      tag_30\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":9196:9919  function claimAirdrop() external airdropStatusTrue {... */\n    tag_5:\n      tag_31\n      tag_32\n      jump\t// in\n    tag_31:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      stop\n        /* \"contracts/Staking.sol\":3456:4692  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      stop\n        /* \"contracts/Staking.sol\":1066:1092  uint256 public airdropRate */\n    tag_8:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_41\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":4698:5004  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_43\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_44\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_44:\n      tag_46\n      jump\t// in\n    tag_43:\n      stop\n        /* \"contracts/Staking.sol\":1163:1191  address public token_address */\n    tag_10:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_11:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":8770:8865  function blockTimestamp() public view returns (uint256) {... */\n    tag_12:\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_56\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":8871:9005  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_13:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_60\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":1098:1125  uint256 public airdropSince */\n    tag_14:\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      tag_63\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":6262:7262  function withdrawStake() external nonReentrant {... */\n    tag_15:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      stop\n        /* \"contracts/Staking.sol\":1027:1060  uint256 public stakingPenaltyRate */\n    tag_16:\n      tag_66\n      tag_67\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      tag_68\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_68:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Staking.sol\":8404:8524  function startAirdrop() external onlyOwner {... */\n    tag_17:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      stop\n        /* \"contracts/Staking.sol\":8530:8764  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_18:\n      tag_71\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_72\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n    tag_71:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_19:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_76\n      jump\t// in\n    tag_75:\n      tag_77\n      jump\t// in\n    tag_74:\n      stop\n        /* \"contracts/Staking.sol\":7268:8292  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_24:\n        /* \"contracts/Staking.sol\":7311:7332  StakingSummary memory */\n      tag_78\n      tag_79\n      jump\t// in\n    tag_78:\n        /* \"contracts/Staking.sol\":7344:7367  Stake memory user_stake */\n      0x00\n        /* \"contracts/Staking.sol\":7370:7382  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":7370:7394  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":7383:7393  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":7370:7394  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking.sol\":7344:7394  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":7490:7491  0 */\n      0x00\n        /* \"contracts/Staking.sol\":7469:7479  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":7469:7486  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":7469:7491  user_stake.amount == 0 */\n      eq\n        /* \"contracts/Staking.sol\":7465:7550  if (user_stake.amount == 0) {... */\n      iszero\n      tag_81\n      jumpi\n        /* \"contracts/Staking.sol\":7514:7539  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":7465:7550  if (user_stake.amount == 0) {... */\n    tag_81:\n        /* \"contracts/Staking.sol\":7559:7588  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Staking.sol\":7591:7623  StakingSummary(0, 0, user_stake) */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Staking.sol\":7606:7607  0 */\n      0x00\n        /* \"contracts/Staking.sol\":7591:7623  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":7609:7610  0 */\n      0x00\n        /* \"contracts/Staking.sol\":7591:7623  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":7612:7622  user_stake */\n      dup4\n        /* \"contracts/Staking.sol\":7591:7623  StakingSummary(0, 0, user_stake) */\n      dup2\n      mstore\n      pop\n        /* \"contracts/Staking.sol\":7559:7623  StakingSummary memory summary = StakingSummary(0, 0, user_stake) */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":7634:7648  uint256 reward */\n      0x00\n        /* \"contracts/Staking.sol\":7651:7684  _calculateStakeReward(user_stake) */\n      tag_82\n        /* \"contracts/Staking.sol\":7673:7683  user_stake */\n      dup4\n        /* \"contracts/Staking.sol\":7651:7672  _calculateStakeReward */\n      tag_83\n        /* \"contracts/Staking.sol\":7651:7684  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_82:\n        /* \"contracts/Staking.sol\":7634:7684  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":7727:7742  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":7699:7706  summary */\n      dup3\n        /* \"contracts/Staking.sol\":7699:7712  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Staking.sol\":7699:7724  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Staking.sol\":7699:7742  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Staking.sol\":7695:7909  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_84\n      jumpi\n        /* \"contracts/Staking.sol\":7893:7897  1000 */\n      0x03e8\n        /* \"contracts/Staking.sol\":7871:7889  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Staking.sol\":7862:7868  reward */\n      dup3\n        /* \"contracts/Staking.sol\":7862:7889  reward * stakingPenaltyRate */\n      tag_85\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n        /* \"contracts/Staking.sol\":7861:7897  (reward * stakingPenaltyRate) / 1000 */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"contracts/Staking.sol\":7836:7840  1000 */\n      0x03e8\n        /* \"contracts/Staking.sol\":7814:7832  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Staking.sol\":7794:7804  user_stake */\n      dup6\n        /* \"contracts/Staking.sol\":7794:7811  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":7794:7832  user_stake.amount * stakingPenaltyRate */\n      tag_89\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_89:\n        /* \"contracts/Staking.sol\":7793:7840  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_90\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_90:\n        /* \"contracts/Staking.sol\":7792:7898  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_91\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n        /* \"contracts/Staking.sol\":7758:7765  summary */\n      dup3\n        /* \"contracts/Staking.sol\":7758:7773  summary.penalty */\n      0x20\n      add\n        /* \"contracts/Staking.sol\":7758:7898  summary.penalty =... */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":7695:7909  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_84:\n        /* \"contracts/Staking.sol\":7967:7968  0 */\n      0x00\n        /* \"contracts/Staking.sol\":7923:7964  calculateWeek(user_stake.latestClaimDrop) */\n      tag_93\n        /* \"contracts/Staking.sol\":7937:7947  user_stake */\n      dup5\n        /* \"contracts/Staking.sol\":7937:7963  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Staking.sol\":7923:7936  calculateWeek */\n      tag_59\n        /* \"contracts/Staking.sol\":7923:7964  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_93:\n        /* \"contracts/Staking.sol\":7923:7968  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Staking.sol\":7919:8168  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/Staking.sol\":7984:7999  uint256 airdrop */\n      0x00\n        /* \"contracts/Staking.sol\":8002:8038  _calculateAirdrop(user_stake.amount) */\n      tag_95\n        /* \"contracts/Staking.sol\":8020:8030  user_stake */\n      dup5\n        /* \"contracts/Staking.sol\":8020:8037  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":8002:8019  _calculateAirdrop */\n      tag_96\n        /* \"contracts/Staking.sol\":8002:8038  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_95:\n        /* \"contracts/Staking.sol\":7984:8038  uint256 airdrop = _calculateAirdrop(user_stake.amount) */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":8085:8092  airdrop */\n      dup1\n        /* \"contracts/Staking.sol\":8052:8059  summary */\n      dup4\n        /* \"contracts/Staking.sol\":8052:8065  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Staking.sol\":8052:8082  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Staking.sol\":8052:8092  summary.stake.claimableAirdrop = airdrop */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":7970:8103  {... */\n      pop\n        /* \"contracts/Staking.sol\":7919:8168  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_97)\n    tag_94:\n        /* \"contracts/Staking.sol\":8156:8157  0 */\n      0x00\n        /* \"contracts/Staking.sol\":8123:8130  summary */\n      dup3\n        /* \"contracts/Staking.sol\":8123:8136  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Staking.sol\":8123:8153  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Staking.sol\":8123:8157  summary.stake.claimableAirdrop = 0 */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":7919:8168  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_97:\n        /* \"contracts/Staking.sol\":8204:8210  reward */\n      dup1\n        /* \"contracts/Staking.sol\":8178:8185  summary */\n      dup3\n        /* \"contracts/Staking.sol\":8178:8191  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Staking.sol\":8178:8201  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Staking.sol\":8178:8210  summary.stake.claimable = reward */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":8243:8253  user_stake */\n      dup3\n        /* \"contracts/Staking.sol\":8243:8260  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":8220:8227  summary */\n      dup3\n        /* \"contracts/Staking.sol\":8220:8240  summary.total_amount */\n      0x00\n      add\n        /* \"contracts/Staking.sol\":8220:8260  summary.total_amount = user_stake.amount */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":8278:8285  summary */\n      dup2\n        /* \"contracts/Staking.sol\":8271:8285  return summary */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Staking.sol\":7268:8292  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Staking.sol\":1131:1156  bool public airdropStatus */\n    tag_28:\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Staking.sol\":9196:9919  function claimAirdrop() external airdropStatusTrue {... */\n    tag_32:\n        /* \"contracts/Staking.sol\":3100:3121  _checkAirdropStatus() */\n      tag_99\n        /* \"contracts/Staking.sol\":3100:3119  _checkAirdropStatus */\n      tag_100\n        /* \"contracts/Staking.sol\":3100:3121  _checkAirdropStatus() */\n      jump\t// in\n    tag_99:\n        /* \"contracts/Staking.sol\":9309:9333  Stake storage user_stake */\n      0x00\n        /* \"contracts/Staking.sol\":9336:9348  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":9336:9360  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":9349:9359  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":9336:9360  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking.sol\":9309:9360  Stake storage user_stake = stakeholders[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":9395:9396  0 */\n      0x00\n        /* \"contracts/Staking.sol\":9374:9384  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":9374:9391  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking.sol\":9374:9396  user_stake.amount == 0 */\n      eq\n        /* \"contracts/Staking.sol\":9370:9455  if (user_stake.amount == 0) {... */\n      iszero\n      tag_102\n      jumpi\n        /* \"contracts/Staking.sol\":9419:9444  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":9370:9455  if (user_stake.amount == 0) {... */\n    tag_102:\n        /* \"contracts/Staking.sol\":9489:9490  0 */\n      0x00\n        /* \"contracts/Staking.sol\":9469:9479  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":9469:9486  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking.sol\":9469:9490  user_stake.amount > 0 */\n      gt\n        /* \"contracts/Staking.sol\":9465:9913  if (user_stake.amount > 0) {... */\n      iszero\n      tag_103\n      jumpi\n        /* \"contracts/Staking.sol\":9555:9556  0 */\n      0x00\n        /* \"contracts/Staking.sol\":9510:9551  calculateWeek(user_stake.latestClaimDrop) */\n      tag_104\n        /* \"contracts/Staking.sol\":9524:9534  user_stake */\n      dup3\n        /* \"contracts/Staking.sol\":9524:9550  user_stake.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Staking.sol\":9510:9523  calculateWeek */\n      tag_59\n        /* \"contracts/Staking.sol\":9510:9551  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_104:\n        /* \"contracts/Staking.sol\":9510:9556  calculateWeek(user_stake.latestClaimDrop) == 0 */\n      eq\n        /* \"contracts/Staking.sol\":9506:9627  if (calculateWeek(user_stake.latestClaimDrop) == 0) {... */\n      iszero\n      tag_105\n      jumpi\n        /* \"contracts/Staking.sol\":9583:9612  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      0xdd8456cc00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":9506:9627  if (calculateWeek(user_stake.latestClaimDrop) == 0) {... */\n    tag_105:\n        /* \"contracts/Staking.sol\":9671:9672  0 */\n      0x00\n        /* \"contracts/Staking.sol\":9641:9651  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":9641:9668  user_stake.claimableAirdrop */\n      0x05\n      add\n        /* \"contracts/Staking.sol\":9641:9672  user_stake.claimableAirdrop = 0 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":9715:9730  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":9686:9696  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":9686:9712  user_stake.latestClaimDrop */\n      0x06\n      add\n        /* \"contracts/Staking.sol\":9686:9730  user_stake.latestClaimDrop = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":9745:9902  SafeERC20.safeTransfer(... */\n      tag_106\n        /* \"contracts/Staking.sol\":9792:9805  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking.sol\":9824:9834  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":9852:9888  _calculateAirdrop(user_stake.amount) */\n      tag_107\n        /* \"contracts/Staking.sol\":9870:9880  user_stake */\n      dup5\n        /* \"contracts/Staking.sol\":9870:9887  user_stake.amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking.sol\":9852:9869  _calculateAirdrop */\n      tag_96\n        /* \"contracts/Staking.sol\":9852:9888  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_107:\n        /* \"contracts/Staking.sol\":9745:9767  SafeERC20.safeTransfer */\n      tag_108\n        /* \"contracts/Staking.sol\":9745:9902  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_106:\n        /* \"contracts/Staking.sol\":9465:9913  if (user_stake.amount > 0) {... */\n    tag_103:\n        /* \"contracts/Staking.sol\":9247:9919  {... */\n      pop\n        /* \"contracts/Staking.sol\":9196:9919  function claimAirdrop() external airdropStatusTrue {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_110\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_110:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_112\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_112:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_113\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_114\n      swap1\n      tag_115\n      jump\t// in\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_113:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_117\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Staking.sol\":3456:4692  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_120\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_121\n      swap1\n      tag_122\n      jump\t// in\n    tag_121:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_120:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":3761:3762  0 */\n      0x00\n        /* \"contracts/Staking.sol\":3726:3738  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":3726:3750  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":3739:3749  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":3726:3750  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking.sol\":3726:3757  stakeholders[msg.sender].amount */\n      0x00\n      add\n      sload\n        /* \"contracts/Staking.sol\":3726:3762  stakeholders[msg.sender].amount != 0 */\n      eq\n        /* \"contracts/Staking.sol\":3722:3819  if (stakeholders[msg.sender].amount != 0) {... */\n      tag_124\n      jumpi\n        /* \"contracts/Staking.sol\":3785:3808  Staking__userIsStaker() */\n      mload(0x40)\n      0x04462d2700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":3722:3819  if (stakeholders[msg.sender].amount != 0) {... */\n    tag_124:\n        /* \"contracts/Staking.sol\":3864:3865  0 */\n      0x00\n        /* \"contracts/Staking.sol\":3833:3847  stakingPackage */\n      0x02\n        /* \"contracts/Staking.sol\":3833:3860  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/Staking.sol\":3848:3859  stakePeriod */\n      dup4\n        /* \"contracts/Staking.sol\":3833:3860  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Staking.sol\":3833:3865  stakingPackage[stakePeriod] == 0 */\n      eq\n        /* \"contracts/Staking.sol\":3829:3930  if (stakingPackage[stakePeriod] == 0) {... */\n      iszero\n      tag_125\n      jumpi\n        /* \"contracts/Staking.sol\":3888:3919  Staking_noStakingPackageFound() */\n      mload(0x40)\n      0x95377be400000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":3829:3930  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_125:\n        /* \"contracts/Staking.sol\":4027:4044  uint256 timestamp */\n      0x00\n        /* \"contracts/Staking.sol\":4047:4062  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":4027:4062  uint256 timestamp = block.timestamp */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Staking.sol\":4237:4243  amount */\n      dup5\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4257:4266  timestamp */\n      dup3\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4280:4294  stakingPackage */\n      0x02\n        /* \"contracts/Staking.sol\":4280:4307  stakingPackage[stakePeriod] */\n      0x00\n        /* \"contracts/Staking.sol\":4295:4306  stakePeriod */\n      dup6\n        /* \"contracts/Staking.sol\":4280:4307  stakingPackage[stakePeriod] */\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4336:4345  timestamp */\n      dup3\n        /* \"contracts/Staking.sol\":4322:4333  stakePeriod */\n      dup5\n        /* \"contracts/Staking.sol\":4322:4345  stakePeriod + timestamp */\n      tag_126\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_126:\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4360:4361  0 */\n      0x00\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4375:4376  0 */\n      0x00\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Staking.sol\":4390:4391  0 */\n      0x00\n        /* \"contracts/Staking.sol\":4218:4401  Stake(... */\n      dup2\n      mstore\n      pop\n        /* \"contracts/Staking.sol\":4191:4203  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":4191:4215  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":4204:4214  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":4191:4215  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking.sol\":4191:4401  stakeholders[msg.sender] = Stake(... */\n      0x00\n      dup3\n      add\n      mload\n      dup2\n      0x00\n      add\n      sstore\n      0x20\n      dup3\n      add\n      mload\n      dup2\n      0x01\n      add\n      sstore\n      0x40\n      dup3\n      add\n      mload\n      dup2\n      0x02\n      add\n      sstore\n      0x60\n      dup3\n      add\n      mload\n      dup2\n      0x03\n      add\n      sstore\n      0x80\n      dup3\n      add\n      mload\n      dup2\n      0x04\n      add\n      sstore\n      0xa0\n      dup3\n      add\n      mload\n      dup2\n      0x05\n      add\n      sstore\n      0xc0\n      dup3\n      add\n      mload\n      dup2\n      0x06\n      add\n      sstore\n      swap1\n      pop\n      pop\n        /* \"contracts/Staking.sol\":4412:4554  SafeERC20.safeTransferFrom(... */\n      tag_127\n        /* \"contracts/Staking.sol\":4459:4472  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking.sol\":4487:4497  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":4519:4523  this */\n      address\n        /* \"contracts/Staking.sol\":4538:4544  amount */\n      dup7\n        /* \"contracts/Staking.sol\":4412:4438  SafeERC20.safeTransferFrom */\n      tag_128\n        /* \"contracts/Staking.sol\":4412:4554  SafeERC20.safeTransferFrom(... */\n      jump\t// in\n    tag_127:\n        /* \"contracts/Staking.sol\":4628:4638  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":4621:4685  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Staking.sol\":4640:4646  amount */\n      dup5\n        /* \"contracts/Staking.sol\":4648:4657  timestamp */\n      dup4\n        /* \"contracts/Staking.sol\":4674:4683  timestamp */\n      dup5\n        /* \"contracts/Staking.sol\":4660:4671  stakePeriod */\n      dup7\n        /* \"contracts/Staking.sol\":4660:4683  stakePeriod + timestamp */\n      tag_129\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_129:\n        /* \"contracts/Staking.sol\":4621:4685  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      tag_130\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_130:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/Staking.sol\":3530:4692  {... */\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":3456:4692  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":1066:1092  uint256 public airdropRate */\n    tag_40:\n      sload(0x04)\n      dup2\n      jump\t// out\n        /* \"contracts/Staking.sol\":4698:5004  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_46:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_133\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_133:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_134\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_134:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_135\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_136\n      swap1\n      tag_115\n      jump\t// in\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_135:\n        /* \"contracts/Staking.sol\":4856:4858  30 */\n      0x1e\n        /* \"contracts/Staking.sol\":4847:4853  amount */\n      dup2\n        /* \"contracts/Staking.sol\":4847:4858  amount > 30 */\n      gt\n        /* \"contracts/Staking.sol\":4843:4924  if (amount > 30) {... */\n      iszero\n      tag_138\n      jumpi\n        /* \"contracts/Staking.sol\":4881:4913  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      0xf1a470d700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":4843:4924  if (amount > 30) {... */\n    tag_138:\n        /* \"contracts/Staking.sol\":4954:4960  amount */\n      dup1\n        /* \"contracts/Staking.sol\":4933:4951  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Staking.sol\":4933:4960  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":4975:4997  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n        /* \"contracts/Staking.sol\":4990:4996  amount */\n      dup2\n        /* \"contracts/Staking.sol\":4975:4997  PenaltyChanged(amount) */\n      mload(0x40)\n      tag_139\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Staking.sol\":4698:5004  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":1163:1191  address public token_address */\n    tag_48:\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1082:1089  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1101:1114  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Staking.sol\":8770:8865  function blockTimestamp() public view returns (uint256) {... */\n    tag_55:\n        /* \"contracts/Staking.sol\":8817:8824  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":8843:8858  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":8836:8858  return block.timestamp */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":8770:8865  function blockTimestamp() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Staking.sol\":8871:9005  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_59:\n        /* \"contracts/Staking.sol\":8934:8941  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":8992:8998  7 days */\n      0x093a80\n        /* \"contracts/Staking.sol\":8979:8988  timestamp */\n      dup3\n        /* \"contracts/Staking.sol\":8961:8976  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":8961:8988  block.timestamp - timestamp */\n      tag_143\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_143:\n        /* \"contracts/Staking.sol\":8960:8998  (block.timestamp - timestamp) / 7 days */\n      tag_145\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_145:\n        /* \"contracts/Staking.sol\":8953:8998  return (block.timestamp - timestamp) / 7 days */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":8871:9005  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":1098:1125  uint256 public airdropSince */\n    tag_62:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/Staking.sol\":6262:7262  function withdrawStake() external nonReentrant {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_147\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_148\n      swap1\n      tag_122\n      jump\t// in\n    tag_148:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_147:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":6427:6450  Stake memory user_stake */\n      0x00\n        /* \"contracts/Staking.sol\":6453:6465  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":6453:6477  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":6466:6476  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":6453:6477  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/Staking.sol\":6427:6477  Stake memory user_stake = stakeholders[msg.sender] */\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      swap1\n      dup2\n      0x00\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x01\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x02\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x03\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x04\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x05\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      0x06\n      dup3\n      add\n      sload\n      dup2\n      mstore\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":6512:6513  0 */\n      0x00\n        /* \"contracts/Staking.sol\":6491:6501  user_stake */\n      dup2\n        /* \"contracts/Staking.sol\":6491:6508  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":6491:6513  user_stake.amount == 0 */\n      eq\n        /* \"contracts/Staking.sol\":6487:6572  if (user_stake.amount == 0) {... */\n      iszero\n      tag_150\n      jumpi\n        /* \"contracts/Staking.sol\":6536:6561  Staking__noStakingFound() */\n      mload(0x40)\n      0xb018f08700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":6487:6572  if (user_stake.amount == 0) {... */\n    tag_150:\n        /* \"contracts/Staking.sol\":6582:6596  uint256 reward */\n      0x00\n        /* \"contracts/Staking.sol\":6599:6632  _calculateStakeReward(user_stake) */\n      tag_151\n        /* \"contracts/Staking.sol\":6621:6631  user_stake */\n      dup3\n        /* \"contracts/Staking.sol\":6599:6620  _calculateStakeReward */\n      tag_83\n        /* \"contracts/Staking.sol\":6599:6632  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_151:\n        /* \"contracts/Staking.sol\":6582:6632  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":6649:6661  stakeholders */\n      0x07\n        /* \"contracts/Staking.sol\":6649:6673  stakeholders[msg.sender] */\n      0x00\n        /* \"contracts/Staking.sol\":6662:6672  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":6649:6673  stakeholders[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Staking.sol\":6642:6673  delete stakeholders[msg.sender] */\n      dup1\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x01\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      0x06\n      dup3\n      add\n      0x00\n      swap1\n      sstore\n      pop\n      pop\n        /* \"contracts/Staking.sol\":6713:6728  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":6688:6698  user_stake */\n      dup3\n        /* \"contracts/Staking.sol\":6688:6710  user_stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Staking.sol\":6688:6728  user_stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Staking.sol\":6684:7256  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_152\n      jumpi\n        /* \"contracts/Staking.sol\":6762:6784  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Staking.sol\":6802:6824  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Staking.sol\":6841:6896  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_153\n        /* \"contracts/Staking.sol\":6870:6880  user_stake */\n      dup5\n        /* \"contracts/Staking.sol\":6870:6887  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":6889:6895  reward */\n      dup5\n        /* \"contracts/Staking.sol\":6841:6869  _calculateStakingWithPenalty */\n      tag_154\n        /* \"contracts/Staking.sol\":6841:6896  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_153:\n        /* \"contracts/Staking.sol\":6744:6896  (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Staking.sol\":6911:7065  SafeERC20.safeTransfer(... */\n      tag_155\n        /* \"contracts/Staking.sol\":6958:6971  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking.sol\":6990:7000  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":7036:7050  reward_reduced */\n      dup4\n        /* \"contracts/Staking.sol\":7019:7033  amount_reduced */\n      dup6\n        /* \"contracts/Staking.sol\":7019:7050  amount_reduced + reward_reduced */\n      tag_156\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_156:\n        /* \"contracts/Staking.sol\":6911:6933  SafeERC20.safeTransfer */\n      tag_108\n        /* \"contracts/Staking.sol\":6911:7065  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_155:\n        /* \"contracts/Staking.sol\":6730:7076  {... */\n      pop\n      pop\n        /* \"contracts/Staking.sol\":6684:7256  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_157)\n    tag_152:\n        /* \"contracts/Staking.sol\":7096:7245  SafeERC20.safeTransfer(... */\n      tag_158\n        /* \"contracts/Staking.sol\":7143:7156  token_address */\n      0x06\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Staking.sol\":7175:7185  msg.sender */\n      caller\n        /* \"contracts/Staking.sol\":7224:7230  reward */\n      dup4\n        /* \"contracts/Staking.sol\":7204:7214  user_stake */\n      dup6\n        /* \"contracts/Staking.sol\":7204:7221  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":7204:7230  user_stake.amount + reward */\n      tag_159\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_159:\n        /* \"contracts/Staking.sol\":7096:7118  SafeERC20.safeTransfer */\n      tag_108\n        /* \"contracts/Staking.sol\":7096:7245  SafeERC20.safeTransfer(... */\n      jump\t// in\n    tag_158:\n        /* \"contracts/Staking.sol\":6684:7256  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_157:\n        /* \"contracts/Staking.sol\":6309:7262  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":6262:7262  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Staking.sol\":1027:1060  uint256 public stakingPenaltyRate */\n    tag_67:\n      sload(0x03)\n      dup2\n      jump\t// out\n        /* \"contracts/Staking.sol\":8404:8524  function startAirdrop() external onlyOwner {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_161\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_162\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_162:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_164\n      swap1\n      tag_115\n      jump\t// in\n    tag_164:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_163:\n        /* \"contracts/Staking.sol\":8472:8487  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":8457:8469  airdropSince */\n      0x05\n        /* \"contracts/Staking.sol\":8457:8487  airdropSince = block.timestamp */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":8513:8517  true */\n      0x01\n        /* \"contracts/Staking.sol\":8497:8510  airdropStatus */\n      0x06\n      0x00\n        /* \"contracts/Staking.sol\":8497:8517  airdropStatus = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":8404:8524  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Staking.sol\":8530:8764  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_167\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_167:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_168\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_170\n      swap1\n      tag_115\n      jump\t// in\n    tag_170:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_169:\n        /* \"contracts/Staking.sol\":8621:8624  200 */\n      0xc8\n        /* \"contracts/Staking.sol\":8612:8618  amount */\n      dup2\n        /* \"contracts/Staking.sol\":8612:8624  amount > 200 */\n      gt\n        /* \"contracts/Staking.sol\":8608:8691  if (amount > 200) {... */\n      iszero\n      tag_172\n      jumpi\n        /* \"contracts/Staking.sol\":8647:8680  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      0xa552cf1000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":8608:8691  if (amount > 200) {... */\n    tag_172:\n        /* \"contracts/Staking.sol\":8714:8720  amount */\n      dup1\n        /* \"contracts/Staking.sol\":8700:8711  airdropRate */\n      0x04\n        /* \"contracts/Staking.sol\":8700:8720  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Staking.sol\":8735:8757  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n        /* \"contracts/Staking.sol\":8750:8756  amount */\n      dup2\n        /* \"contracts/Staking.sol\":8735:8757  AirdropChanged(amount) */\n      mload(0x40)\n      tag_173\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n    tag_173:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Staking.sol\":8530:8764  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_77:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      tag_175\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1269  _msgSender */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1259:1271  _msgSender() */\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      tag_176\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1253  owner */\n      tag_52\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1255  owner() */\n      jump\t// in\n    tag_176:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_178\n      swap1\n      tag_115\n      jump\t// in\n    tag_178:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_177:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2026:2027  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2014  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_180\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_181\n      swap1\n      tag_182\n      jump\t// in\n    tag_181:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_180:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_183\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_118\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_183:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":5247:5614  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_83:\n        /* \"contracts/Staking.sol\":5350:5357  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":5603:5607  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Staking.sol\":5556:5599  _calculateStakingDuration(user_stake.since) */\n      tag_185\n        /* \"contracts/Staking.sol\":5582:5592  user_stake */\n      dup4\n        /* \"contracts/Staking.sol\":5582:5598  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Staking.sol\":5556:5581  _calculateStakingDuration */\n      tag_186\n        /* \"contracts/Staking.sol\":5556:5599  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_185:\n        /* \"contracts/Staking.sol\":5517:5527  user_stake */\n      dup4\n        /* \"contracts/Staking.sol\":5517:5537  user_stake.rewardAPY */\n      0x40\n      add\n      mload\n        /* \"contracts/Staking.sol\":5481:5491  user_stake */\n      dup5\n        /* \"contracts/Staking.sol\":5481:5498  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Staking.sol\":5481:5537  user_stake.amount *... */\n      tag_187\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_187:\n        /* \"contracts/Staking.sol\":5481:5599  user_stake.amount *... */\n      tag_188\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_188:\n        /* \"contracts/Staking.sol\":5480:5607  (user_stake.amount *... */\n      tag_189\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_189:\n        /* \"contracts/Staking.sol\":5461:5607  return... */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":5247:5614  function _calculateStakeReward(Stake memory user_stake)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":9011:9190  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_96:\n        /* \"contracts/Staking.sol\":9106:9113  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":9175:9183  52 weeks */\n      0x01dfe200\n        /* \"contracts/Staking.sol\":9167:9171  1000 */\n      0x03e8\n        /* \"contracts/Staking.sol\":9152:9163  airdropRate */\n      sload(0x04)\n        /* \"contracts/Staking.sol\":9138:9149  stakeAmount */\n      dup5\n        /* \"contracts/Staking.sol\":9138:9163  stakeAmount * airdropRate */\n      tag_191\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_191:\n        /* \"contracts/Staking.sol\":9137:9171  (stakeAmount * airdropRate) / 1000 */\n      tag_192\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_192:\n        /* \"contracts/Staking.sol\":9136:9183  ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      tag_193\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_193:\n        /* \"contracts/Staking.sol\":9129:9183  return ((stakeAmount * airdropRate) / 1000) / 52 weeks */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":9011:9190  function _calculateAirdrop(uint256 stakeAmount)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":2921:3055  function _checkAirdropStatus() internal view {... */\n    tag_100:\n        /* \"contracts/Staking.sol\":2981:2994  airdropStatus */\n      0x06\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/Staking.sol\":2976:3049  if (!airdropStatus) {... */\n      tag_195\n      jumpi\n        /* \"contracts/Staking.sol\":3017:3038  Airdrop__notStarted() */\n      mload(0x40)\n      0xd4a7cb1900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Staking.sol\":2976:3049  if (!airdropStatus) {... */\n    tag_195:\n        /* \"contracts/Staking.sol\":2921:3055  function _checkAirdropStatus() internal view {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_108:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_197\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":888:890  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":892:897  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_198\n      swap3\n      swap2\n      swap1\n      tag_199\n      jump\t// in\n    tag_198:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:832  _callOptionalReturn */\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_111:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":693:700  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":712:729  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_118:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2368  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2387:2395  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2384  _owner */\n      0x01\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2441:2449  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2431:2439  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n    tag_128:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_204\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1070:1075  token */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1100:1127  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1129:1133  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1135:1137  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1139:1144  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_205\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_206\n      jump\t// in\n    tag_205:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1069  _callOptionalReturn */\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_204:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":5620:5915  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_154:\n        /* \"contracts/Staking.sol\":5737:5744  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":5746:5753  uint256 */\n      dup1\n        /* \"contracts/Staking.sol\":5832:5836  1000 */\n      0x03e8\n        /* \"contracts/Staking.sol\":5810:5828  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Staking.sol\":5801:5807  amount */\n      dup6\n        /* \"contracts/Staking.sol\":5801:5828  amount * stakingPenaltyRate */\n      tag_208\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_208:\n        /* \"contracts/Staking.sol\":5800:5836  (amount * stakingPenaltyRate) / 1000 */\n      tag_209\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_209:\n        /* \"contracts/Staking.sol\":5790:5796  amount */\n      dup5\n        /* \"contracts/Staking.sol\":5790:5837  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_210\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_210:\n        /* \"contracts/Staking.sol\":5893:5897  1000 */\n      0x03e8\n        /* \"contracts/Staking.sol\":5871:5889  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Staking.sol\":5862:5868  reward */\n      dup6\n        /* \"contracts/Staking.sol\":5862:5889  reward * stakingPenaltyRate */\n      tag_211\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_211:\n        /* \"contracts/Staking.sol\":5861:5897  (reward * stakingPenaltyRate) / 1000 */\n      tag_212\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_212:\n        /* \"contracts/Staking.sol\":5851:5857  reward */\n      dup5\n        /* \"contracts/Staking.sol\":5851:5898  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_213\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_213:\n        /* \"contracts/Staking.sol\":5769:5908  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Staking.sol\":5620:5915  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Staking.sol\":5010:5241  function _calculateStakingDuration(uint256 since)... */\n    tag_186:\n        /* \"contracts/Staking.sol\":5107:5114  uint256 */\n      0x00\n        /* \"contracts/Staking.sol\":5226:5234  365 days */\n      0x01e13380\n        /* \"contracts/Staking.sol\":5218:5222  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Staking.sol\":5209:5214  since */\n      dup4\n        /* \"contracts/Staking.sol\":5191:5206  block.timestamp */\n      timestamp\n        /* \"contracts/Staking.sol\":5191:5214  block.timestamp - since */\n      tag_215\n      swap2\n      swap1\n      tag_144\n      jump\t// in\n    tag_215:\n        /* \"contracts/Staking.sol\":5190:5222  (block.timestamp - since) * 1e24 */\n      tag_216\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_216:\n        /* \"contracts/Staking.sol\":5189:5234  ((block.timestamp - since) * 1e24) / 365 days */\n      tag_217\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_217:\n        /* \"contracts/Staking.sol\":5182:5234  return ((block.timestamp - since) * 1e24) / 365 days */\n      swap1\n      pop\n        /* \"contracts/Staking.sol\":5010:5241  function _calculateStakingDuration(uint256 since)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_200:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_219\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_220\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3755:3756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3745  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      iszero\n      tag_221\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_222\n      swap2\n      swap1\n      tag_223\n      jump\t// in\n    tag_222:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_224\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_225\n      swap1\n      tag_226\n      jump\t// in\n    tag_225:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_224:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n    tag_221:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3277:3913  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_220:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_228\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_229\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_228:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_229:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_231\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_232\n      swap1\n      tag_233\n      jump\t// in\n    tag_232:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_231:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5254  isContract(target) */\n      tag_234\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5247:5253  target */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5246  isContract */\n      tag_235\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5236:5254  isContract(target) */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_236\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap1\n      tag_238\n      jump\t// in\n    tag_237:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_236:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_239\n      swap2\n      swap1\n      tag_240\n      jump\t// in\n    tag_239:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_243\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_242)\n    tag_243:\n      0x60\n      swap2\n      pop\n    tag_242:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_244\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_245\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_244:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n    tag_235:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1235:1239  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1487:1488  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1472  account */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1488  account.code.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1458:1488  return account.code.length > 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1175:1495  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_245:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_248\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      swap1\n      pop\n      jump(tag_247)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_248:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7896:7897  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7886  returndata */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      iszero\n      tag_250\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_250:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_252\n      swap2\n      swap1\n      tag_253\n      jump\t// in\n    tag_252:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_247:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    tag_79:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_254\n      tag_255\n      jump\t// in\n    tag_254:\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n    tag_255:\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:84   */\n    tag_256:\n        /* \"#utility.yul\":44:51   */\n      0x00\n        /* \"#utility.yul\":73:78   */\n      dup2\n        /* \"#utility.yul\":62:78   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:84   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":90:198   */\n    tag_257:\n        /* \"#utility.yul\":167:191   */\n      tag_300\n        /* \"#utility.yul\":185:190   */\n      dup2\n        /* \"#utility.yul\":167:191   */\n      tag_256\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":162:165   */\n      dup3\n        /* \"#utility.yul\":155:192   */\n      mstore\n        /* \"#utility.yul\":90:198   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":256:1660   */\n    tag_258:\n        /* \"#utility.yul\":387:391   */\n      0xe0\n        /* \"#utility.yul\":382:385   */\n      dup3\n        /* \"#utility.yul\":378:392   */\n      add\n        /* \"#utility.yul\":476:480   */\n      0x00\n        /* \"#utility.yul\":469:474   */\n      dup3\n        /* \"#utility.yul\":465:481   */\n      add\n        /* \"#utility.yul\":459:482   */\n      mload\n        /* \"#utility.yul\":495:558   */\n      tag_302\n        /* \"#utility.yul\":552:556   */\n      0x00\n        /* \"#utility.yul\":547:550   */\n      dup6\n        /* \"#utility.yul\":543:557   */\n      add\n        /* \"#utility.yul\":529:541   */\n      dup3\n        /* \"#utility.yul\":495:558   */\n      tag_257\n      jump\t// in\n    tag_302:\n        /* \"#utility.yul\":402:568   */\n      pop\n        /* \"#utility.yul\":651:655   */\n      0x20\n        /* \"#utility.yul\":644:649   */\n      dup3\n        /* \"#utility.yul\":640:656   */\n      add\n        /* \"#utility.yul\":634:657   */\n      mload\n        /* \"#utility.yul\":670:733   */\n      tag_303\n        /* \"#utility.yul\":727:731   */\n      0x20\n        /* \"#utility.yul\":722:725   */\n      dup6\n        /* \"#utility.yul\":718:732   */\n      add\n        /* \"#utility.yul\":704:716   */\n      dup3\n        /* \"#utility.yul\":670:733   */\n      tag_257\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":578:743   */\n      pop\n        /* \"#utility.yul\":830:834   */\n      0x40\n        /* \"#utility.yul\":823:828   */\n      dup3\n        /* \"#utility.yul\":819:835   */\n      add\n        /* \"#utility.yul\":813:836   */\n      mload\n        /* \"#utility.yul\":849:912   */\n      tag_304\n        /* \"#utility.yul\":906:910   */\n      0x40\n        /* \"#utility.yul\":901:904   */\n      dup6\n        /* \"#utility.yul\":897:911   */\n      add\n        /* \"#utility.yul\":883:895   */\n      dup3\n        /* \"#utility.yul\":849:912   */\n      tag_257\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":753:922   */\n      pop\n        /* \"#utility.yul\":1011:1015   */\n      0x60\n        /* \"#utility.yul\":1004:1009   */\n      dup3\n        /* \"#utility.yul\":1000:1016   */\n      add\n        /* \"#utility.yul\":994:1017   */\n      mload\n        /* \"#utility.yul\":1030:1093   */\n      tag_305\n        /* \"#utility.yul\":1087:1091   */\n      0x60\n        /* \"#utility.yul\":1082:1085   */\n      dup6\n        /* \"#utility.yul\":1078:1092   */\n      add\n        /* \"#utility.yul\":1064:1076   */\n      dup3\n        /* \"#utility.yul\":1030:1093   */\n      tag_257\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":932:1103   */\n      pop\n        /* \"#utility.yul\":1190:1194   */\n      0x80\n        /* \"#utility.yul\":1183:1188   */\n      dup3\n        /* \"#utility.yul\":1179:1195   */\n      add\n        /* \"#utility.yul\":1173:1196   */\n      mload\n        /* \"#utility.yul\":1209:1272   */\n      tag_306\n        /* \"#utility.yul\":1266:1270   */\n      0x80\n        /* \"#utility.yul\":1261:1264   */\n      dup6\n        /* \"#utility.yul\":1257:1271   */\n      add\n        /* \"#utility.yul\":1243:1255   */\n      dup3\n        /* \"#utility.yul\":1209:1272   */\n      tag_257\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":1113:1282   */\n      pop\n        /* \"#utility.yul\":1376:1380   */\n      0xa0\n        /* \"#utility.yul\":1369:1374   */\n      dup3\n        /* \"#utility.yul\":1365:1381   */\n      add\n        /* \"#utility.yul\":1359:1382   */\n      mload\n        /* \"#utility.yul\":1395:1458   */\n      tag_307\n        /* \"#utility.yul\":1452:1456   */\n      0xa0\n        /* \"#utility.yul\":1447:1450   */\n      dup6\n        /* \"#utility.yul\":1443:1457   */\n      add\n        /* \"#utility.yul\":1429:1441   */\n      dup3\n        /* \"#utility.yul\":1395:1458   */\n      tag_257\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":1292:1468   */\n      pop\n        /* \"#utility.yul\":1561:1565   */\n      0xc0\n        /* \"#utility.yul\":1554:1559   */\n      dup3\n        /* \"#utility.yul\":1550:1566   */\n      add\n        /* \"#utility.yul\":1544:1567   */\n      mload\n        /* \"#utility.yul\":1580:1643   */\n      tag_308\n        /* \"#utility.yul\":1637:1641   */\n      0xc0\n        /* \"#utility.yul\":1632:1635   */\n      dup6\n        /* \"#utility.yul\":1628:1642   */\n      add\n        /* \"#utility.yul\":1614:1626   */\n      dup3\n        /* \"#utility.yul\":1580:1643   */\n      tag_257\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":1478:1653   */\n      pop\n        /* \"#utility.yul\":356:1660   */\n      pop\n        /* \"#utility.yul\":256:1660   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1736:2487   */\n    tag_259:\n        /* \"#utility.yul\":1895:1901   */\n      0x0120\n        /* \"#utility.yul\":1890:1893   */\n      dup3\n        /* \"#utility.yul\":1886:1902   */\n      add\n        /* \"#utility.yul\":1992:1996   */\n      0x00\n        /* \"#utility.yul\":1985:1990   */\n      dup3\n        /* \"#utility.yul\":1981:1997   */\n      add\n        /* \"#utility.yul\":1975:1998   */\n      mload\n        /* \"#utility.yul\":2011:2074   */\n      tag_310\n        /* \"#utility.yul\":2068:2072   */\n      0x00\n        /* \"#utility.yul\":2063:2066   */\n      dup6\n        /* \"#utility.yul\":2059:2073   */\n      add\n        /* \"#utility.yul\":2045:2057   */\n      dup3\n        /* \"#utility.yul\":2011:2074   */\n      tag_257\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":1912:2084   */\n      pop\n        /* \"#utility.yul\":2169:2173   */\n      0x20\n        /* \"#utility.yul\":2162:2167   */\n      dup3\n        /* \"#utility.yul\":2158:2174   */\n      add\n        /* \"#utility.yul\":2152:2175   */\n      mload\n        /* \"#utility.yul\":2188:2251   */\n      tag_311\n        /* \"#utility.yul\":2245:2249   */\n      0x20\n        /* \"#utility.yul\":2240:2243   */\n      dup6\n        /* \"#utility.yul\":2236:2250   */\n      add\n        /* \"#utility.yul\":2222:2234   */\n      dup3\n        /* \"#utility.yul\":2188:2251   */\n      tag_257\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":2094:2261   */\n      pop\n        /* \"#utility.yul\":2344:2348   */\n      0x40\n        /* \"#utility.yul\":2337:2342   */\n      dup3\n        /* \"#utility.yul\":2333:2349   */\n      add\n        /* \"#utility.yul\":2327:2350   */\n      mload\n        /* \"#utility.yul\":2363:2470   */\n      tag_312\n        /* \"#utility.yul\":2464:2468   */\n      0x40\n        /* \"#utility.yul\":2459:2462   */\n      dup6\n        /* \"#utility.yul\":2455:2469   */\n      add\n        /* \"#utility.yul\":2441:2453   */\n      dup3\n        /* \"#utility.yul\":2363:2470   */\n      tag_258\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":2271:2480   */\n      pop\n        /* \"#utility.yul\":1864:2487   */\n      pop\n        /* \"#utility.yul\":1736:2487   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2493:2840   */\n    tag_26:\n        /* \"#utility.yul\":2648:2652   */\n      0x00\n        /* \"#utility.yul\":2686:2689   */\n      0x0120\n        /* \"#utility.yul\":2675:2684   */\n      dup3\n        /* \"#utility.yul\":2671:2690   */\n      add\n        /* \"#utility.yul\":2663:2690   */\n      swap1\n      pop\n        /* \"#utility.yul\":2700:2833   */\n      tag_314\n        /* \"#utility.yul\":2830:2831   */\n      0x00\n        /* \"#utility.yul\":2819:2828   */\n      dup4\n        /* \"#utility.yul\":2815:2832   */\n      add\n        /* \"#utility.yul\":2806:2812   */\n      dup5\n        /* \"#utility.yul\":2700:2833   */\n      tag_259\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":2493:2840   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2846:2936   */\n    tag_260:\n        /* \"#utility.yul\":2880:2887   */\n      0x00\n        /* \"#utility.yul\":2923:2928   */\n      dup2\n        /* \"#utility.yul\":2916:2929   */\n      iszero\n        /* \"#utility.yul\":2909:2930   */\n      iszero\n        /* \"#utility.yul\":2898:2930   */\n      swap1\n      pop\n        /* \"#utility.yul\":2846:2936   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2942:3051   */\n    tag_261:\n        /* \"#utility.yul\":3023:3044   */\n      tag_317\n        /* \"#utility.yul\":3038:3043   */\n      dup2\n        /* \"#utility.yul\":3023:3044   */\n      tag_260\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":3018:3021   */\n      dup3\n        /* \"#utility.yul\":3011:3045   */\n      mstore\n        /* \"#utility.yul\":2942:3051   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3057:3267   */\n    tag_30:\n        /* \"#utility.yul\":3144:3148   */\n      0x00\n        /* \"#utility.yul\":3182:3184   */\n      0x20\n        /* \"#utility.yul\":3171:3180   */\n      dup3\n        /* \"#utility.yul\":3167:3185   */\n      add\n        /* \"#utility.yul\":3159:3185   */\n      swap1\n      pop\n        /* \"#utility.yul\":3195:3260   */\n      tag_319\n        /* \"#utility.yul\":3257:3258   */\n      0x00\n        /* \"#utility.yul\":3246:3255   */\n      dup4\n        /* \"#utility.yul\":3242:3259   */\n      add\n        /* \"#utility.yul\":3233:3239   */\n      dup5\n        /* \"#utility.yul\":3195:3260   */\n      tag_261\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":3057:3267   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3354:3471   */\n    tag_263:\n        /* \"#utility.yul\":3463:3464   */\n      0x00\n        /* \"#utility.yul\":3460:3461   */\n      dup1\n        /* \"#utility.yul\":3453:3465   */\n      revert\n        /* \"#utility.yul\":3600:3722   */\n    tag_265:\n        /* \"#utility.yul\":3673:3697   */\n      tag_324\n        /* \"#utility.yul\":3691:3696   */\n      dup2\n        /* \"#utility.yul\":3673:3697   */\n      tag_256\n      jump\t// in\n    tag_324:\n        /* \"#utility.yul\":3666:3671   */\n      dup2\n        /* \"#utility.yul\":3663:3698   */\n      eq\n        /* \"#utility.yul\":3653:3716   */\n      tag_325\n      jumpi\n        /* \"#utility.yul\":3712:3713   */\n      0x00\n        /* \"#utility.yul\":3709:3710   */\n      dup1\n        /* \"#utility.yul\":3702:3714   */\n      revert\n        /* \"#utility.yul\":3653:3716   */\n    tag_325:\n        /* \"#utility.yul\":3600:3722   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3728:3867   */\n    tag_266:\n        /* \"#utility.yul\":3774:3779   */\n      0x00\n        /* \"#utility.yul\":3812:3818   */\n      dup2\n        /* \"#utility.yul\":3799:3819   */\n      calldataload\n        /* \"#utility.yul\":3790:3819   */\n      swap1\n      pop\n        /* \"#utility.yul\":3828:3861   */\n      tag_327\n        /* \"#utility.yul\":3855:3860   */\n      dup2\n        /* \"#utility.yul\":3828:3861   */\n      tag_265\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":3728:3867   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3873:4347   */\n    tag_37:\n        /* \"#utility.yul\":3941:3947   */\n      0x00\n        /* \"#utility.yul\":3949:3955   */\n      dup1\n        /* \"#utility.yul\":3998:4000   */\n      0x40\n        /* \"#utility.yul\":3986:3995   */\n      dup4\n        /* \"#utility.yul\":3977:3984   */\n      dup6\n        /* \"#utility.yul\":3973:3996   */\n      sub\n        /* \"#utility.yul\":3969:4001   */\n      slt\n        /* \"#utility.yul\":3966:4085   */\n      iszero\n      tag_329\n      jumpi\n        /* \"#utility.yul\":4004:4083   */\n      tag_330\n      tag_263\n      jump\t// in\n    tag_330:\n        /* \"#utility.yul\":3966:4085   */\n    tag_329:\n        /* \"#utility.yul\":4124:4125   */\n      0x00\n        /* \"#utility.yul\":4149:4202   */\n      tag_331\n        /* \"#utility.yul\":4194:4201   */\n      dup6\n        /* \"#utility.yul\":4185:4191   */\n      dup3\n        /* \"#utility.yul\":4174:4183   */\n      dup7\n        /* \"#utility.yul\":4170:4192   */\n      add\n        /* \"#utility.yul\":4149:4202   */\n      tag_266\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":4139:4202   */\n      swap3\n      pop\n        /* \"#utility.yul\":4095:4212   */\n      pop\n        /* \"#utility.yul\":4251:4253   */\n      0x20\n        /* \"#utility.yul\":4277:4330   */\n      tag_332\n        /* \"#utility.yul\":4322:4329   */\n      dup6\n        /* \"#utility.yul\":4313:4319   */\n      dup3\n        /* \"#utility.yul\":4302:4311   */\n      dup7\n        /* \"#utility.yul\":4298:4320   */\n      add\n        /* \"#utility.yul\":4277:4330   */\n      tag_266\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":4267:4330   */\n      swap2\n      pop\n        /* \"#utility.yul\":4222:4340   */\n      pop\n        /* \"#utility.yul\":3873:4347   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4353:4471   */\n    tag_267:\n        /* \"#utility.yul\":4440:4464   */\n      tag_334\n        /* \"#utility.yul\":4458:4463   */\n      dup2\n        /* \"#utility.yul\":4440:4464   */\n      tag_256\n      jump\t// in\n    tag_334:\n        /* \"#utility.yul\":4435:4438   */\n      dup3\n        /* \"#utility.yul\":4428:4465   */\n      mstore\n        /* \"#utility.yul\":4353:4471   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4477:4699   */\n    tag_42:\n        /* \"#utility.yul\":4570:4574   */\n      0x00\n        /* \"#utility.yul\":4608:4610   */\n      0x20\n        /* \"#utility.yul\":4597:4606   */\n      dup3\n        /* \"#utility.yul\":4593:4611   */\n      add\n        /* \"#utility.yul\":4585:4611   */\n      swap1\n      pop\n        /* \"#utility.yul\":4621:4692   */\n      tag_336\n        /* \"#utility.yul\":4689:4690   */\n      0x00\n        /* \"#utility.yul\":4678:4687   */\n      dup4\n        /* \"#utility.yul\":4674:4691   */\n      add\n        /* \"#utility.yul\":4665:4671   */\n      dup5\n        /* \"#utility.yul\":4621:4692   */\n      tag_267\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":4477:4699   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4705:5034   */\n    tag_45:\n        /* \"#utility.yul\":4764:4770   */\n      0x00\n        /* \"#utility.yul\":4813:4815   */\n      0x20\n        /* \"#utility.yul\":4801:4810   */\n      dup3\n        /* \"#utility.yul\":4792:4799   */\n      dup5\n        /* \"#utility.yul\":4788:4811   */\n      sub\n        /* \"#utility.yul\":4784:4816   */\n      slt\n        /* \"#utility.yul\":4781:4900   */\n      iszero\n      tag_338\n      jumpi\n        /* \"#utility.yul\":4819:4898   */\n      tag_339\n      tag_263\n      jump\t// in\n    tag_339:\n        /* \"#utility.yul\":4781:4900   */\n    tag_338:\n        /* \"#utility.yul\":4939:4940   */\n      0x00\n        /* \"#utility.yul\":4964:5017   */\n      tag_340\n        /* \"#utility.yul\":5009:5016   */\n      dup5\n        /* \"#utility.yul\":5000:5006   */\n      dup3\n        /* \"#utility.yul\":4989:4998   */\n      dup6\n        /* \"#utility.yul\":4985:5007   */\n      add\n        /* \"#utility.yul\":4964:5017   */\n      tag_266\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":4954:5017   */\n      swap2\n      pop\n        /* \"#utility.yul\":4910:5027   */\n      pop\n        /* \"#utility.yul\":4705:5034   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5040:5166   */\n    tag_268:\n        /* \"#utility.yul\":5077:5084   */\n      0x00\n        /* \"#utility.yul\":5117:5159   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":5110:5115   */\n      dup3\n        /* \"#utility.yul\":5106:5160   */\n      and\n        /* \"#utility.yul\":5095:5160   */\n      swap1\n      pop\n        /* \"#utility.yul\":5040:5166   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5172:5268   */\n    tag_269:\n        /* \"#utility.yul\":5209:5216   */\n      0x00\n        /* \"#utility.yul\":5238:5262   */\n      tag_343\n        /* \"#utility.yul\":5256:5261   */\n      dup3\n        /* \"#utility.yul\":5238:5262   */\n      tag_268\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":5227:5262   */\n      swap1\n      pop\n        /* \"#utility.yul\":5172:5268   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5274:5392   */\n    tag_270:\n        /* \"#utility.yul\":5361:5385   */\n      tag_345\n        /* \"#utility.yul\":5379:5384   */\n      dup2\n        /* \"#utility.yul\":5361:5385   */\n      tag_269\n      jump\t// in\n    tag_345:\n        /* \"#utility.yul\":5356:5359   */\n      dup3\n        /* \"#utility.yul\":5349:5386   */\n      mstore\n        /* \"#utility.yul\":5274:5392   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5398:5620   */\n    tag_50:\n        /* \"#utility.yul\":5491:5495   */\n      0x00\n        /* \"#utility.yul\":5529:5531   */\n      0x20\n        /* \"#utility.yul\":5518:5527   */\n      dup3\n        /* \"#utility.yul\":5514:5532   */\n      add\n        /* \"#utility.yul\":5506:5532   */\n      swap1\n      pop\n        /* \"#utility.yul\":5542:5613   */\n      tag_347\n        /* \"#utility.yul\":5610:5611   */\n      0x00\n        /* \"#utility.yul\":5599:5608   */\n      dup4\n        /* \"#utility.yul\":5595:5612   */\n      add\n        /* \"#utility.yul\":5586:5592   */\n      dup5\n        /* \"#utility.yul\":5542:5613   */\n      tag_270\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":5398:5620   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5626:5748   */\n    tag_271:\n        /* \"#utility.yul\":5699:5723   */\n      tag_349\n        /* \"#utility.yul\":5717:5722   */\n      dup2\n        /* \"#utility.yul\":5699:5723   */\n      tag_269\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":5692:5697   */\n      dup2\n        /* \"#utility.yul\":5689:5724   */\n      eq\n        /* \"#utility.yul\":5679:5742   */\n      tag_350\n      jumpi\n        /* \"#utility.yul\":5738:5739   */\n      0x00\n        /* \"#utility.yul\":5735:5736   */\n      dup1\n        /* \"#utility.yul\":5728:5740   */\n      revert\n        /* \"#utility.yul\":5679:5742   */\n    tag_350:\n        /* \"#utility.yul\":5626:5748   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5754:5893   */\n    tag_272:\n        /* \"#utility.yul\":5800:5805   */\n      0x00\n        /* \"#utility.yul\":5838:5844   */\n      dup2\n        /* \"#utility.yul\":5825:5845   */\n      calldataload\n        /* \"#utility.yul\":5816:5845   */\n      swap1\n      pop\n        /* \"#utility.yul\":5854:5887   */\n      tag_352\n        /* \"#utility.yul\":5881:5886   */\n      dup2\n        /* \"#utility.yul\":5854:5887   */\n      tag_271\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":5754:5893   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5899:6228   */\n    tag_76:\n        /* \"#utility.yul\":5958:5964   */\n      0x00\n        /* \"#utility.yul\":6007:6009   */\n      0x20\n        /* \"#utility.yul\":5995:6004   */\n      dup3\n        /* \"#utility.yul\":5986:5993   */\n      dup5\n        /* \"#utility.yul\":5982:6005   */\n      sub\n        /* \"#utility.yul\":5978:6010   */\n      slt\n        /* \"#utility.yul\":5975:6094   */\n      iszero\n      tag_354\n      jumpi\n        /* \"#utility.yul\":6013:6092   */\n      tag_355\n      tag_263\n      jump\t// in\n    tag_355:\n        /* \"#utility.yul\":5975:6094   */\n    tag_354:\n        /* \"#utility.yul\":6133:6134   */\n      0x00\n        /* \"#utility.yul\":6158:6211   */\n      tag_356\n        /* \"#utility.yul\":6203:6210   */\n      dup5\n        /* \"#utility.yul\":6194:6200   */\n      dup3\n        /* \"#utility.yul\":6183:6192   */\n      dup6\n        /* \"#utility.yul\":6179:6201   */\n      add\n        /* \"#utility.yul\":6158:6211   */\n      tag_272\n      jump\t// in\n    tag_356:\n        /* \"#utility.yul\":6148:6211   */\n      swap2\n      pop\n        /* \"#utility.yul\":6104:6221   */\n      pop\n        /* \"#utility.yul\":5899:6228   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6234:6414   */\n    tag_273:\n        /* \"#utility.yul\":6282:6359   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6279:6280   */\n      0x00\n        /* \"#utility.yul\":6272:6360   */\n      mstore\n        /* \"#utility.yul\":6379:6383   */\n      0x11\n        /* \"#utility.yul\":6376:6377   */\n      0x04\n        /* \"#utility.yul\":6369:6384   */\n      mstore\n        /* \"#utility.yul\":6403:6407   */\n      0x24\n        /* \"#utility.yul\":6400:6401   */\n      0x00\n        /* \"#utility.yul\":6393:6408   */\n      revert\n        /* \"#utility.yul\":6420:6768   */\n    tag_86:\n        /* \"#utility.yul\":6460:6467   */\n      0x00\n        /* \"#utility.yul\":6483:6503   */\n      tag_359\n        /* \"#utility.yul\":6501:6502   */\n      dup3\n        /* \"#utility.yul\":6483:6503   */\n      tag_256\n      jump\t// in\n    tag_359:\n        /* \"#utility.yul\":6478:6503   */\n      swap2\n      pop\n        /* \"#utility.yul\":6517:6537   */\n      tag_360\n        /* \"#utility.yul\":6535:6536   */\n      dup4\n        /* \"#utility.yul\":6517:6537   */\n      tag_256\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":6512:6537   */\n      swap3\n      pop\n        /* \"#utility.yul\":6705:6706   */\n      dup2\n        /* \"#utility.yul\":6637:6703   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":6633:6707   */\n      div\n        /* \"#utility.yul\":6630:6631   */\n      dup4\n        /* \"#utility.yul\":6627:6708   */\n      gt\n        /* \"#utility.yul\":6622:6623   */\n      dup3\n        /* \"#utility.yul\":6615:6624   */\n      iszero\n        /* \"#utility.yul\":6608:6625   */\n      iszero\n        /* \"#utility.yul\":6604:6709   */\n      and\n        /* \"#utility.yul\":6601:6732   */\n      iszero\n      tag_361\n      jumpi\n        /* \"#utility.yul\":6712:6730   */\n      tag_362\n      tag_273\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":6601:6732   */\n    tag_361:\n        /* \"#utility.yul\":6760:6761   */\n      dup3\n        /* \"#utility.yul\":6757:6758   */\n      dup3\n        /* \"#utility.yul\":6753:6762   */\n      mul\n        /* \"#utility.yul\":6742:6762   */\n      swap1\n      pop\n        /* \"#utility.yul\":6420:6768   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6774:6954   */\n    tag_274:\n        /* \"#utility.yul\":6822:6899   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6819:6820   */\n      0x00\n        /* \"#utility.yul\":6812:6900   */\n      mstore\n        /* \"#utility.yul\":6919:6923   */\n      0x12\n        /* \"#utility.yul\":6916:6917   */\n      0x04\n        /* \"#utility.yul\":6909:6924   */\n      mstore\n        /* \"#utility.yul\":6943:6947   */\n      0x24\n        /* \"#utility.yul\":6940:6941   */\n      0x00\n        /* \"#utility.yul\":6933:6948   */\n      revert\n        /* \"#utility.yul\":6960:7145   */\n    tag_88:\n        /* \"#utility.yul\":7000:7001   */\n      0x00\n        /* \"#utility.yul\":7017:7037   */\n      tag_365\n        /* \"#utility.yul\":7035:7036   */\n      dup3\n        /* \"#utility.yul\":7017:7037   */\n      tag_256\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":7012:7037   */\n      swap2\n      pop\n        /* \"#utility.yul\":7051:7071   */\n      tag_366\n        /* \"#utility.yul\":7069:7070   */\n      dup4\n        /* \"#utility.yul\":7051:7071   */\n      tag_256\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":7046:7071   */\n      swap3\n      pop\n        /* \"#utility.yul\":7090:7091   */\n      dup3\n        /* \"#utility.yul\":7080:7115   */\n      tag_367\n      jumpi\n        /* \"#utility.yul\":7095:7113   */\n      tag_368\n      tag_274\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":7080:7115   */\n    tag_367:\n        /* \"#utility.yul\":7137:7138   */\n      dup3\n        /* \"#utility.yul\":7134:7135   */\n      dup3\n        /* \"#utility.yul\":7130:7139   */\n      div\n        /* \"#utility.yul\":7125:7139   */\n      swap1\n      pop\n        /* \"#utility.yul\":6960:7145   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7151:7456   */\n    tag_92:\n        /* \"#utility.yul\":7191:7194   */\n      0x00\n        /* \"#utility.yul\":7210:7230   */\n      tag_370\n        /* \"#utility.yul\":7228:7229   */\n      dup3\n        /* \"#utility.yul\":7210:7230   */\n      tag_256\n      jump\t// in\n    tag_370:\n        /* \"#utility.yul\":7205:7230   */\n      swap2\n      pop\n        /* \"#utility.yul\":7244:7264   */\n      tag_371\n        /* \"#utility.yul\":7262:7263   */\n      dup4\n        /* \"#utility.yul\":7244:7264   */\n      tag_256\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":7239:7264   */\n      swap3\n      pop\n        /* \"#utility.yul\":7398:7399   */\n      dup3\n        /* \"#utility.yul\":7330:7396   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":7326:7400   */\n      sub\n        /* \"#utility.yul\":7323:7324   */\n      dup3\n        /* \"#utility.yul\":7320:7401   */\n      gt\n        /* \"#utility.yul\":7317:7424   */\n      iszero\n      tag_372\n      jumpi\n        /* \"#utility.yul\":7404:7422   */\n      tag_373\n      tag_273\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":7317:7424   */\n    tag_372:\n        /* \"#utility.yul\":7448:7449   */\n      dup3\n        /* \"#utility.yul\":7445:7446   */\n      dup3\n        /* \"#utility.yul\":7441:7450   */\n      add\n        /* \"#utility.yul\":7434:7450   */\n      swap1\n      pop\n        /* \"#utility.yul\":7151:7456   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7462:7631   */\n    tag_275:\n        /* \"#utility.yul\":7546:7557   */\n      0x00\n        /* \"#utility.yul\":7580:7586   */\n      dup3\n        /* \"#utility.yul\":7575:7578   */\n      dup3\n        /* \"#utility.yul\":7568:7587   */\n      mstore\n        /* \"#utility.yul\":7620:7624   */\n      0x20\n        /* \"#utility.yul\":7615:7618   */\n      dup3\n        /* \"#utility.yul\":7611:7625   */\n      add\n        /* \"#utility.yul\":7596:7625   */\n      swap1\n      pop\n        /* \"#utility.yul\":7462:7631   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7637:7819   */\n    tag_276:\n        /* \"#utility.yul\":7777:7811   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7773:7774   */\n      0x00\n        /* \"#utility.yul\":7765:7771   */\n      dup3\n        /* \"#utility.yul\":7761:7775   */\n      add\n        /* \"#utility.yul\":7754:7812   */\n      mstore\n        /* \"#utility.yul\":7637:7819   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7825:8191   */\n    tag_277:\n        /* \"#utility.yul\":7967:7970   */\n      0x00\n        /* \"#utility.yul\":7988:8055   */\n      tag_377\n        /* \"#utility.yul\":8052:8054   */\n      0x20\n        /* \"#utility.yul\":8047:8050   */\n      dup4\n        /* \"#utility.yul\":7988:8055   */\n      tag_275\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":7981:8055   */\n      swap2\n      pop\n        /* \"#utility.yul\":8064:8157   */\n      tag_378\n        /* \"#utility.yul\":8153:8156   */\n      dup3\n        /* \"#utility.yul\":8064:8157   */\n      tag_276\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":8182:8184   */\n      0x20\n        /* \"#utility.yul\":8177:8180   */\n      dup3\n        /* \"#utility.yul\":8173:8185   */\n      add\n        /* \"#utility.yul\":8166:8185   */\n      swap1\n      pop\n        /* \"#utility.yul\":7825:8191   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8197:8616   */\n    tag_115:\n        /* \"#utility.yul\":8363:8367   */\n      0x00\n        /* \"#utility.yul\":8401:8403   */\n      0x20\n        /* \"#utility.yul\":8390:8399   */\n      dup3\n        /* \"#utility.yul\":8386:8404   */\n      add\n        /* \"#utility.yul\":8378:8404   */\n      swap1\n      pop\n        /* \"#utility.yul\":8450:8459   */\n      dup2\n        /* \"#utility.yul\":8444:8448   */\n      dup2\n        /* \"#utility.yul\":8440:8460   */\n      sub\n        /* \"#utility.yul\":8436:8437   */\n      0x00\n        /* \"#utility.yul\":8425:8434   */\n      dup4\n        /* \"#utility.yul\":8421:8438   */\n      add\n        /* \"#utility.yul\":8414:8461   */\n      mstore\n        /* \"#utility.yul\":8478:8609   */\n      tag_380\n        /* \"#utility.yul\":8604:8608   */\n      dup2\n        /* \"#utility.yul\":8478:8609   */\n      tag_277\n      jump\t// in\n    tag_380:\n        /* \"#utility.yul\":8470:8609   */\n      swap1\n      pop\n        /* \"#utility.yul\":8197:8616   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8622:8803   */\n    tag_278:\n        /* \"#utility.yul\":8762:8795   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":8758:8759   */\n      0x00\n        /* \"#utility.yul\":8750:8756   */\n      dup3\n        /* \"#utility.yul\":8746:8760   */\n      add\n        /* \"#utility.yul\":8739:8796   */\n      mstore\n        /* \"#utility.yul\":8622:8803   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8809:9175   */\n    tag_279:\n        /* \"#utility.yul\":8951:8954   */\n      0x00\n        /* \"#utility.yul\":8972:9039   */\n      tag_383\n        /* \"#utility.yul\":9036:9038   */\n      0x1f\n        /* \"#utility.yul\":9031:9034   */\n      dup4\n        /* \"#utility.yul\":8972:9039   */\n      tag_275\n      jump\t// in\n    tag_383:\n        /* \"#utility.yul\":8965:9039   */\n      swap2\n      pop\n        /* \"#utility.yul\":9048:9141   */\n      tag_384\n        /* \"#utility.yul\":9137:9140   */\n      dup3\n        /* \"#utility.yul\":9048:9141   */\n      tag_278\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":9166:9168   */\n      0x20\n        /* \"#utility.yul\":9161:9164   */\n      dup3\n        /* \"#utility.yul\":9157:9169   */\n      add\n        /* \"#utility.yul\":9150:9169   */\n      swap1\n      pop\n        /* \"#utility.yul\":8809:9175   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9181:9600   */\n    tag_122:\n        /* \"#utility.yul\":9347:9351   */\n      0x00\n        /* \"#utility.yul\":9385:9387   */\n      0x20\n        /* \"#utility.yul\":9374:9383   */\n      dup3\n        /* \"#utility.yul\":9370:9388   */\n      add\n        /* \"#utility.yul\":9362:9388   */\n      swap1\n      pop\n        /* \"#utility.yul\":9434:9443   */\n      dup2\n        /* \"#utility.yul\":9428:9432   */\n      dup2\n        /* \"#utility.yul\":9424:9444   */\n      sub\n        /* \"#utility.yul\":9420:9421   */\n      0x00\n        /* \"#utility.yul\":9409:9418   */\n      dup4\n        /* \"#utility.yul\":9405:9422   */\n      add\n        /* \"#utility.yul\":9398:9445   */\n      mstore\n        /* \"#utility.yul\":9462:9593   */\n      tag_386\n        /* \"#utility.yul\":9588:9592   */\n      dup2\n        /* \"#utility.yul\":9462:9593   */\n      tag_279\n      jump\t// in\n    tag_386:\n        /* \"#utility.yul\":9454:9593   */\n      swap1\n      pop\n        /* \"#utility.yul\":9181:9600   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9606:10048   */\n    tag_131:\n        /* \"#utility.yul\":9755:9759   */\n      0x00\n        /* \"#utility.yul\":9793:9795   */\n      0x60\n        /* \"#utility.yul\":9782:9791   */\n      dup3\n        /* \"#utility.yul\":9778:9796   */\n      add\n        /* \"#utility.yul\":9770:9796   */\n      swap1\n      pop\n        /* \"#utility.yul\":9806:9877   */\n      tag_388\n        /* \"#utility.yul\":9874:9875   */\n      0x00\n        /* \"#utility.yul\":9863:9872   */\n      dup4\n        /* \"#utility.yul\":9859:9876   */\n      add\n        /* \"#utility.yul\":9850:9856   */\n      dup7\n        /* \"#utility.yul\":9806:9877   */\n      tag_267\n      jump\t// in\n    tag_388:\n        /* \"#utility.yul\":9887:9959   */\n      tag_389\n        /* \"#utility.yul\":9955:9957   */\n      0x20\n        /* \"#utility.yul\":9944:9953   */\n      dup4\n        /* \"#utility.yul\":9940:9958   */\n      add\n        /* \"#utility.yul\":9931:9937   */\n      dup6\n        /* \"#utility.yul\":9887:9959   */\n      tag_267\n      jump\t// in\n    tag_389:\n        /* \"#utility.yul\":9969:10041   */\n      tag_390\n        /* \"#utility.yul\":10037:10039   */\n      0x40\n        /* \"#utility.yul\":10026:10035   */\n      dup4\n        /* \"#utility.yul\":10022:10040   */\n      add\n        /* \"#utility.yul\":10013:10019   */\n      dup5\n        /* \"#utility.yul\":9969:10041   */\n      tag_267\n      jump\t// in\n    tag_390:\n        /* \"#utility.yul\":9606:10048   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10054:10245   */\n    tag_144:\n        /* \"#utility.yul\":10094:10098   */\n      0x00\n        /* \"#utility.yul\":10114:10134   */\n      tag_392\n        /* \"#utility.yul\":10132:10133   */\n      dup3\n        /* \"#utility.yul\":10114:10134   */\n      tag_256\n      jump\t// in\n    tag_392:\n        /* \"#utility.yul\":10109:10134   */\n      swap2\n      pop\n        /* \"#utility.yul\":10148:10168   */\n      tag_393\n        /* \"#utility.yul\":10166:10167   */\n      dup4\n        /* \"#utility.yul\":10148:10168   */\n      tag_256\n      jump\t// in\n    tag_393:\n        /* \"#utility.yul\":10143:10168   */\n      swap3\n      pop\n        /* \"#utility.yul\":10187:10188   */\n      dup3\n        /* \"#utility.yul\":10184:10185   */\n      dup3\n        /* \"#utility.yul\":10181:10189   */\n      lt\n        /* \"#utility.yul\":10178:10212   */\n      iszero\n      tag_394\n      jumpi\n        /* \"#utility.yul\":10192:10210   */\n      tag_395\n      tag_273\n      jump\t// in\n    tag_395:\n        /* \"#utility.yul\":10178:10212   */\n    tag_394:\n        /* \"#utility.yul\":10237:10238   */\n      dup3\n        /* \"#utility.yul\":10234:10235   */\n      dup3\n        /* \"#utility.yul\":10230:10239   */\n      sub\n        /* \"#utility.yul\":10222:10239   */\n      swap1\n      pop\n        /* \"#utility.yul\":10054:10245   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10251:10476   */\n    tag_280:\n        /* \"#utility.yul\":10391:10425   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":10387:10388   */\n      0x00\n        /* \"#utility.yul\":10379:10385   */\n      dup3\n        /* \"#utility.yul\":10375:10389   */\n      add\n        /* \"#utility.yul\":10368:10426   */\n      mstore\n        /* \"#utility.yul\":10460:10468   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":10455:10457   */\n      0x20\n        /* \"#utility.yul\":10447:10453   */\n      dup3\n        /* \"#utility.yul\":10443:10458   */\n      add\n        /* \"#utility.yul\":10436:10469   */\n      mstore\n        /* \"#utility.yul\":10251:10476   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10482:10848   */\n    tag_281:\n        /* \"#utility.yul\":10624:10627   */\n      0x00\n        /* \"#utility.yul\":10645:10712   */\n      tag_398\n        /* \"#utility.yul\":10709:10711   */\n      0x26\n        /* \"#utility.yul\":10704:10707   */\n      dup4\n        /* \"#utility.yul\":10645:10712   */\n      tag_275\n      jump\t// in\n    tag_398:\n        /* \"#utility.yul\":10638:10712   */\n      swap2\n      pop\n        /* \"#utility.yul\":10721:10814   */\n      tag_399\n        /* \"#utility.yul\":10810:10813   */\n      dup3\n        /* \"#utility.yul\":10721:10814   */\n      tag_280\n      jump\t// in\n    tag_399:\n        /* \"#utility.yul\":10839:10841   */\n      0x40\n        /* \"#utility.yul\":10834:10837   */\n      dup3\n        /* \"#utility.yul\":10830:10842   */\n      add\n        /* \"#utility.yul\":10823:10842   */\n      swap1\n      pop\n        /* \"#utility.yul\":10482:10848   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10854:11273   */\n    tag_182:\n        /* \"#utility.yul\":11020:11024   */\n      0x00\n        /* \"#utility.yul\":11058:11060   */\n      0x20\n        /* \"#utility.yul\":11047:11056   */\n      dup3\n        /* \"#utility.yul\":11043:11061   */\n      add\n        /* \"#utility.yul\":11035:11061   */\n      swap1\n      pop\n        /* \"#utility.yul\":11107:11116   */\n      dup2\n        /* \"#utility.yul\":11101:11105   */\n      dup2\n        /* \"#utility.yul\":11097:11117   */\n      sub\n        /* \"#utility.yul\":11093:11094   */\n      0x00\n        /* \"#utility.yul\":11082:11091   */\n      dup4\n        /* \"#utility.yul\":11078:11095   */\n      add\n        /* \"#utility.yul\":11071:11118   */\n      mstore\n        /* \"#utility.yul\":11135:11266   */\n      tag_401\n        /* \"#utility.yul\":11261:11265   */\n      dup2\n        /* \"#utility.yul\":11135:11266   */\n      tag_281\n      jump\t// in\n    tag_401:\n        /* \"#utility.yul\":11127:11266   */\n      swap1\n      pop\n        /* \"#utility.yul\":10854:11273   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11279:11611   */\n    tag_199:\n        /* \"#utility.yul\":11400:11404   */\n      0x00\n        /* \"#utility.yul\":11438:11440   */\n      0x40\n        /* \"#utility.yul\":11427:11436   */\n      dup3\n        /* \"#utility.yul\":11423:11441   */\n      add\n        /* \"#utility.yul\":11415:11441   */\n      swap1\n      pop\n        /* \"#utility.yul\":11451:11522   */\n      tag_403\n        /* \"#utility.yul\":11519:11520   */\n      0x00\n        /* \"#utility.yul\":11508:11517   */\n      dup4\n        /* \"#utility.yul\":11504:11521   */\n      add\n        /* \"#utility.yul\":11495:11501   */\n      dup6\n        /* \"#utility.yul\":11451:11522   */\n      tag_270\n      jump\t// in\n    tag_403:\n        /* \"#utility.yul\":11532:11604   */\n      tag_404\n        /* \"#utility.yul\":11600:11602   */\n      0x20\n        /* \"#utility.yul\":11589:11598   */\n      dup4\n        /* \"#utility.yul\":11585:11603   */\n      add\n        /* \"#utility.yul\":11576:11582   */\n      dup5\n        /* \"#utility.yul\":11532:11604   */\n      tag_267\n      jump\t// in\n    tag_404:\n        /* \"#utility.yul\":11279:11611   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11617:12059   */\n    tag_206:\n        /* \"#utility.yul\":11766:11770   */\n      0x00\n        /* \"#utility.yul\":11804:11806   */\n      0x60\n        /* \"#utility.yul\":11793:11802   */\n      dup3\n        /* \"#utility.yul\":11789:11807   */\n      add\n        /* \"#utility.yul\":11781:11807   */\n      swap1\n      pop\n        /* \"#utility.yul\":11817:11888   */\n      tag_406\n        /* \"#utility.yul\":11885:11886   */\n      0x00\n        /* \"#utility.yul\":11874:11883   */\n      dup4\n        /* \"#utility.yul\":11870:11887   */\n      add\n        /* \"#utility.yul\":11861:11867   */\n      dup7\n        /* \"#utility.yul\":11817:11888   */\n      tag_270\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":11898:11970   */\n      tag_407\n        /* \"#utility.yul\":11966:11968   */\n      0x20\n        /* \"#utility.yul\":11955:11964   */\n      dup4\n        /* \"#utility.yul\":11951:11969   */\n      add\n        /* \"#utility.yul\":11942:11948   */\n      dup6\n        /* \"#utility.yul\":11898:11970   */\n      tag_270\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":11980:12052   */\n      tag_408\n        /* \"#utility.yul\":12048:12050   */\n      0x40\n        /* \"#utility.yul\":12037:12046   */\n      dup4\n        /* \"#utility.yul\":12033:12051   */\n      add\n        /* \"#utility.yul\":12024:12030   */\n      dup5\n        /* \"#utility.yul\":11980:12052   */\n      tag_267\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":11617:12059   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12065:12181   */\n    tag_282:\n        /* \"#utility.yul\":12135:12156   */\n      tag_410\n        /* \"#utility.yul\":12150:12155   */\n      dup2\n        /* \"#utility.yul\":12135:12156   */\n      tag_260\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":12128:12133   */\n      dup2\n        /* \"#utility.yul\":12125:12157   */\n      eq\n        /* \"#utility.yul\":12115:12175   */\n      tag_411\n      jumpi\n        /* \"#utility.yul\":12171:12172   */\n      0x00\n        /* \"#utility.yul\":12168:12169   */\n      dup1\n        /* \"#utility.yul\":12161:12173   */\n      revert\n        /* \"#utility.yul\":12115:12175   */\n    tag_411:\n        /* \"#utility.yul\":12065:12181   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12187:12324   */\n    tag_283:\n        /* \"#utility.yul\":12241:12246   */\n      0x00\n        /* \"#utility.yul\":12272:12278   */\n      dup2\n        /* \"#utility.yul\":12266:12279   */\n      mload\n        /* \"#utility.yul\":12257:12279   */\n      swap1\n      pop\n        /* \"#utility.yul\":12288:12318   */\n      tag_413\n        /* \"#utility.yul\":12312:12317   */\n      dup2\n        /* \"#utility.yul\":12288:12318   */\n      tag_282\n      jump\t// in\n    tag_413:\n        /* \"#utility.yul\":12187:12324   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12330:12675   */\n    tag_223:\n        /* \"#utility.yul\":12397:12403   */\n      0x00\n        /* \"#utility.yul\":12446:12448   */\n      0x20\n        /* \"#utility.yul\":12434:12443   */\n      dup3\n        /* \"#utility.yul\":12425:12432   */\n      dup5\n        /* \"#utility.yul\":12421:12444   */\n      sub\n        /* \"#utility.yul\":12417:12449   */\n      slt\n        /* \"#utility.yul\":12414:12533   */\n      iszero\n      tag_415\n      jumpi\n        /* \"#utility.yul\":12452:12531   */\n      tag_416\n      tag_263\n      jump\t// in\n    tag_416:\n        /* \"#utility.yul\":12414:12533   */\n    tag_415:\n        /* \"#utility.yul\":12572:12573   */\n      0x00\n        /* \"#utility.yul\":12597:12658   */\n      tag_417\n        /* \"#utility.yul\":12650:12657   */\n      dup5\n        /* \"#utility.yul\":12641:12647   */\n      dup3\n        /* \"#utility.yul\":12630:12639   */\n      dup6\n        /* \"#utility.yul\":12626:12648   */\n      add\n        /* \"#utility.yul\":12597:12658   */\n      tag_283\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":12587:12658   */\n      swap2\n      pop\n        /* \"#utility.yul\":12543:12668   */\n      pop\n        /* \"#utility.yul\":12330:12675   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12681:12910   */\n    tag_284:\n        /* \"#utility.yul\":12821:12855   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":12817:12818   */\n      0x00\n        /* \"#utility.yul\":12809:12815   */\n      dup3\n        /* \"#utility.yul\":12805:12819   */\n      add\n        /* \"#utility.yul\":12798:12856   */\n      mstore\n        /* \"#utility.yul\":12890:12902   */\n      0x6f74207375636365656400000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12885:12887   */\n      0x20\n        /* \"#utility.yul\":12877:12883   */\n      dup3\n        /* \"#utility.yul\":12873:12888   */\n      add\n        /* \"#utility.yul\":12866:12903   */\n      mstore\n        /* \"#utility.yul\":12681:12910   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12916:13282   */\n    tag_285:\n        /* \"#utility.yul\":13058:13061   */\n      0x00\n        /* \"#utility.yul\":13079:13146   */\n      tag_420\n        /* \"#utility.yul\":13143:13145   */\n      0x2a\n        /* \"#utility.yul\":13138:13141   */\n      dup4\n        /* \"#utility.yul\":13079:13146   */\n      tag_275\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":13072:13146   */\n      swap2\n      pop\n        /* \"#utility.yul\":13155:13248   */\n      tag_421\n        /* \"#utility.yul\":13244:13247   */\n      dup3\n        /* \"#utility.yul\":13155:13248   */\n      tag_284\n      jump\t// in\n    tag_421:\n        /* \"#utility.yul\":13273:13275   */\n      0x40\n        /* \"#utility.yul\":13268:13271   */\n      dup3\n        /* \"#utility.yul\":13264:13276   */\n      add\n        /* \"#utility.yul\":13257:13276   */\n      swap1\n      pop\n        /* \"#utility.yul\":12916:13282   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13288:13707   */\n    tag_226:\n        /* \"#utility.yul\":13454:13458   */\n      0x00\n        /* \"#utility.yul\":13492:13494   */\n      0x20\n        /* \"#utility.yul\":13481:13490   */\n      dup3\n        /* \"#utility.yul\":13477:13495   */\n      add\n        /* \"#utility.yul\":13469:13495   */\n      swap1\n      pop\n        /* \"#utility.yul\":13541:13550   */\n      dup2\n        /* \"#utility.yul\":13535:13539   */\n      dup2\n        /* \"#utility.yul\":13531:13551   */\n      sub\n        /* \"#utility.yul\":13527:13528   */\n      0x00\n        /* \"#utility.yul\":13516:13525   */\n      dup4\n        /* \"#utility.yul\":13512:13529   */\n      add\n        /* \"#utility.yul\":13505:13552   */\n      mstore\n        /* \"#utility.yul\":13569:13700   */\n      tag_423\n        /* \"#utility.yul\":13695:13699   */\n      dup2\n        /* \"#utility.yul\":13569:13700   */\n      tag_285\n      jump\t// in\n    tag_423:\n        /* \"#utility.yul\":13561:13700   */\n      swap1\n      pop\n        /* \"#utility.yul\":13288:13707   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13713:13938   */\n    tag_286:\n        /* \"#utility.yul\":13853:13887   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":13849:13850   */\n      0x00\n        /* \"#utility.yul\":13841:13847   */\n      dup3\n        /* \"#utility.yul\":13837:13851   */\n      add\n        /* \"#utility.yul\":13830:13888   */\n      mstore\n        /* \"#utility.yul\":13922:13930   */\n      0x722063616c6c0000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":13917:13919   */\n      0x20\n        /* \"#utility.yul\":13909:13915   */\n      dup3\n        /* \"#utility.yul\":13905:13920   */\n      add\n        /* \"#utility.yul\":13898:13931   */\n      mstore\n        /* \"#utility.yul\":13713:13938   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13944:14310   */\n    tag_287:\n        /* \"#utility.yul\":14086:14089   */\n      0x00\n        /* \"#utility.yul\":14107:14174   */\n      tag_426\n        /* \"#utility.yul\":14171:14173   */\n      0x26\n        /* \"#utility.yul\":14166:14169   */\n      dup4\n        /* \"#utility.yul\":14107:14174   */\n      tag_275\n      jump\t// in\n    tag_426:\n        /* \"#utility.yul\":14100:14174   */\n      swap2\n      pop\n        /* \"#utility.yul\":14183:14276   */\n      tag_427\n        /* \"#utility.yul\":14272:14275   */\n      dup3\n        /* \"#utility.yul\":14183:14276   */\n      tag_286\n      jump\t// in\n    tag_427:\n        /* \"#utility.yul\":14301:14303   */\n      0x40\n        /* \"#utility.yul\":14296:14299   */\n      dup3\n        /* \"#utility.yul\":14292:14304   */\n      add\n        /* \"#utility.yul\":14285:14304   */\n      swap1\n      pop\n        /* \"#utility.yul\":13944:14310   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14316:14735   */\n    tag_233:\n        /* \"#utility.yul\":14482:14486   */\n      0x00\n        /* \"#utility.yul\":14520:14522   */\n      0x20\n        /* \"#utility.yul\":14509:14518   */\n      dup3\n        /* \"#utility.yul\":14505:14523   */\n      add\n        /* \"#utility.yul\":14497:14523   */\n      swap1\n      pop\n        /* \"#utility.yul\":14569:14578   */\n      dup2\n        /* \"#utility.yul\":14563:14567   */\n      dup2\n        /* \"#utility.yul\":14559:14579   */\n      sub\n        /* \"#utility.yul\":14555:14556   */\n      0x00\n        /* \"#utility.yul\":14544:14553   */\n      dup4\n        /* \"#utility.yul\":14540:14557   */\n      add\n        /* \"#utility.yul\":14533:14580   */\n      mstore\n        /* \"#utility.yul\":14597:14728   */\n      tag_429\n        /* \"#utility.yul\":14723:14727   */\n      dup2\n        /* \"#utility.yul\":14597:14728   */\n      tag_287\n      jump\t// in\n    tag_429:\n        /* \"#utility.yul\":14589:14728   */\n      swap1\n      pop\n        /* \"#utility.yul\":14316:14735   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14741:14920   */\n    tag_288:\n        /* \"#utility.yul\":14881:14912   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":14877:14878   */\n      0x00\n        /* \"#utility.yul\":14869:14875   */\n      dup3\n        /* \"#utility.yul\":14865:14879   */\n      add\n        /* \"#utility.yul\":14858:14913   */\n      mstore\n        /* \"#utility.yul\":14741:14920   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14926:15292   */\n    tag_289:\n        /* \"#utility.yul\":15068:15071   */\n      0x00\n        /* \"#utility.yul\":15089:15156   */\n      tag_432\n        /* \"#utility.yul\":15153:15155   */\n      0x1d\n        /* \"#utility.yul\":15148:15151   */\n      dup4\n        /* \"#utility.yul\":15089:15156   */\n      tag_275\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":15082:15156   */\n      swap2\n      pop\n        /* \"#utility.yul\":15165:15258   */\n      tag_433\n        /* \"#utility.yul\":15254:15257   */\n      dup3\n        /* \"#utility.yul\":15165:15258   */\n      tag_288\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":15283:15285   */\n      0x20\n        /* \"#utility.yul\":15278:15281   */\n      dup3\n        /* \"#utility.yul\":15274:15286   */\n      add\n        /* \"#utility.yul\":15267:15286   */\n      swap1\n      pop\n        /* \"#utility.yul\":14926:15292   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15298:15717   */\n    tag_238:\n        /* \"#utility.yul\":15464:15468   */\n      0x00\n        /* \"#utility.yul\":15502:15504   */\n      0x20\n        /* \"#utility.yul\":15491:15500   */\n      dup3\n        /* \"#utility.yul\":15487:15505   */\n      add\n        /* \"#utility.yul\":15479:15505   */\n      swap1\n      pop\n        /* \"#utility.yul\":15551:15560   */\n      dup2\n        /* \"#utility.yul\":15545:15549   */\n      dup2\n        /* \"#utility.yul\":15541:15561   */\n      sub\n        /* \"#utility.yul\":15537:15538   */\n      0x00\n        /* \"#utility.yul\":15526:15535   */\n      dup4\n        /* \"#utility.yul\":15522:15539   */\n      add\n        /* \"#utility.yul\":15515:15562   */\n      mstore\n        /* \"#utility.yul\":15579:15710   */\n      tag_435\n        /* \"#utility.yul\":15705:15709   */\n      dup2\n        /* \"#utility.yul\":15579:15710   */\n      tag_289\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":15571:15710   */\n      swap1\n      pop\n        /* \"#utility.yul\":15298:15717   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15723:15821   */\n    tag_290:\n        /* \"#utility.yul\":15774:15780   */\n      0x00\n        /* \"#utility.yul\":15808:15813   */\n      dup2\n        /* \"#utility.yul\":15802:15814   */\n      mload\n        /* \"#utility.yul\":15792:15814   */\n      swap1\n      pop\n        /* \"#utility.yul\":15723:15821   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15827:15974   */\n    tag_291:\n        /* \"#utility.yul\":15928:15939   */\n      0x00\n        /* \"#utility.yul\":15965:15968   */\n      dup2\n        /* \"#utility.yul\":15950:15968   */\n      swap1\n      pop\n        /* \"#utility.yul\":15827:15974   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15980:16287   */\n    tag_292:\n        /* \"#utility.yul\":16048:16049   */\n      0x00\n        /* \"#utility.yul\":16058:16171   */\n    tag_439:\n        /* \"#utility.yul\":16072:16078   */\n      dup4\n        /* \"#utility.yul\":16069:16070   */\n      dup2\n        /* \"#utility.yul\":16066:16079   */\n      lt\n        /* \"#utility.yul\":16058:16171   */\n      iszero\n      tag_441\n      jumpi\n        /* \"#utility.yul\":16157:16158   */\n      dup1\n        /* \"#utility.yul\":16152:16155   */\n      dup3\n        /* \"#utility.yul\":16148:16159   */\n      add\n        /* \"#utility.yul\":16142:16160   */\n      mload\n        /* \"#utility.yul\":16138:16139   */\n      dup2\n        /* \"#utility.yul\":16133:16136   */\n      dup5\n        /* \"#utility.yul\":16129:16140   */\n      add\n        /* \"#utility.yul\":16122:16161   */\n      mstore\n        /* \"#utility.yul\":16094:16096   */\n      0x20\n        /* \"#utility.yul\":16091:16092   */\n      dup2\n        /* \"#utility.yul\":16087:16097   */\n      add\n        /* \"#utility.yul\":16082:16097   */\n      swap1\n      pop\n        /* \"#utility.yul\":16058:16171   */\n      jump(tag_439)\n    tag_441:\n        /* \"#utility.yul\":16189:16195   */\n      dup4\n        /* \"#utility.yul\":16186:16187   */\n      dup2\n        /* \"#utility.yul\":16183:16196   */\n      gt\n        /* \"#utility.yul\":16180:16281   */\n      iszero\n      tag_442\n      jumpi\n        /* \"#utility.yul\":16269:16270   */\n      0x00\n        /* \"#utility.yul\":16260:16266   */\n      dup5\n        /* \"#utility.yul\":16255:16258   */\n      dup5\n        /* \"#utility.yul\":16251:16267   */\n      add\n        /* \"#utility.yul\":16244:16271   */\n      mstore\n        /* \"#utility.yul\":16180:16281   */\n    tag_442:\n        /* \"#utility.yul\":16029:16287   */\n      pop\n        /* \"#utility.yul\":15980:16287   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16293:16666   */\n    tag_293:\n        /* \"#utility.yul\":16397:16400   */\n      0x00\n        /* \"#utility.yul\":16425:16463   */\n      tag_444\n        /* \"#utility.yul\":16457:16462   */\n      dup3\n        /* \"#utility.yul\":16425:16463   */\n      tag_290\n      jump\t// in\n    tag_444:\n        /* \"#utility.yul\":16479:16567   */\n      tag_445\n        /* \"#utility.yul\":16560:16566   */\n      dup2\n        /* \"#utility.yul\":16555:16558   */\n      dup6\n        /* \"#utility.yul\":16479:16567   */\n      tag_291\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":16472:16567   */\n      swap4\n      pop\n        /* \"#utility.yul\":16576:16628   */\n      tag_446\n        /* \"#utility.yul\":16621:16627   */\n      dup2\n        /* \"#utility.yul\":16616:16619   */\n      dup6\n        /* \"#utility.yul\":16609:16613   */\n      0x20\n        /* \"#utility.yul\":16602:16607   */\n      dup7\n        /* \"#utility.yul\":16598:16614   */\n      add\n        /* \"#utility.yul\":16576:16628   */\n      tag_292\n      jump\t// in\n    tag_446:\n        /* \"#utility.yul\":16653:16659   */\n      dup1\n        /* \"#utility.yul\":16648:16651   */\n      dup5\n        /* \"#utility.yul\":16644:16660   */\n      add\n        /* \"#utility.yul\":16637:16660   */\n      swap2\n      pop\n        /* \"#utility.yul\":16401:16666   */\n      pop\n        /* \"#utility.yul\":16293:16666   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16672:16943   */\n    tag_240:\n        /* \"#utility.yul\":16802:16805   */\n      0x00\n        /* \"#utility.yul\":16824:16917   */\n      tag_448\n        /* \"#utility.yul\":16913:16916   */\n      dup3\n        /* \"#utility.yul\":16904:16910   */\n      dup5\n        /* \"#utility.yul\":16824:16917   */\n      tag_293\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":16817:16917   */\n      swap2\n      pop\n        /* \"#utility.yul\":16934:16937   */\n      dup2\n        /* \"#utility.yul\":16927:16937   */\n      swap1\n      pop\n        /* \"#utility.yul\":16672:16943   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":16949:17048   */\n    tag_294:\n        /* \"#utility.yul\":17001:17007   */\n      0x00\n        /* \"#utility.yul\":17035:17040   */\n      dup2\n        /* \"#utility.yul\":17029:17041   */\n      mload\n        /* \"#utility.yul\":17019:17041   */\n      swap1\n      pop\n        /* \"#utility.yul\":16949:17048   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17054:17156   */\n    tag_295:\n        /* \"#utility.yul\":17095:17101   */\n      0x00\n        /* \"#utility.yul\":17146:17148   */\n      0x1f\n        /* \"#utility.yul\":17142:17149   */\n      not\n        /* \"#utility.yul\":17137:17139   */\n      0x1f\n        /* \"#utility.yul\":17130:17135   */\n      dup4\n        /* \"#utility.yul\":17126:17140   */\n      add\n        /* \"#utility.yul\":17122:17150   */\n      and\n        /* \"#utility.yul\":17112:17150   */\n      swap1\n      pop\n        /* \"#utility.yul\":17054:17156   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17162:17526   */\n    tag_296:\n        /* \"#utility.yul\":17250:17253   */\n      0x00\n        /* \"#utility.yul\":17278:17317   */\n      tag_452\n        /* \"#utility.yul\":17311:17316   */\n      dup3\n        /* \"#utility.yul\":17278:17317   */\n      tag_294\n      jump\t// in\n    tag_452:\n        /* \"#utility.yul\":17333:17404   */\n      tag_453\n        /* \"#utility.yul\":17397:17403   */\n      dup2\n        /* \"#utility.yul\":17392:17395   */\n      dup6\n        /* \"#utility.yul\":17333:17404   */\n      tag_275\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":17326:17404   */\n      swap4\n      pop\n        /* \"#utility.yul\":17413:17465   */\n      tag_454\n        /* \"#utility.yul\":17458:17464   */\n      dup2\n        /* \"#utility.yul\":17453:17456   */\n      dup6\n        /* \"#utility.yul\":17446:17450   */\n      0x20\n        /* \"#utility.yul\":17439:17444   */\n      dup7\n        /* \"#utility.yul\":17435:17451   */\n      add\n        /* \"#utility.yul\":17413:17465   */\n      tag_292\n      jump\t// in\n    tag_454:\n        /* \"#utility.yul\":17490:17519   */\n      tag_455\n        /* \"#utility.yul\":17512:17518   */\n      dup2\n        /* \"#utility.yul\":17490:17519   */\n      tag_295\n      jump\t// in\n    tag_455:\n        /* \"#utility.yul\":17485:17488   */\n      dup5\n        /* \"#utility.yul\":17481:17520   */\n      add\n        /* \"#utility.yul\":17474:17520   */\n      swap2\n      pop\n        /* \"#utility.yul\":17254:17526   */\n      pop\n        /* \"#utility.yul\":17162:17526   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":17532:17845   */\n    tag_253:\n        /* \"#utility.yul\":17645:17649   */\n      0x00\n        /* \"#utility.yul\":17683:17685   */\n      0x20\n        /* \"#utility.yul\":17672:17681   */\n      dup3\n        /* \"#utility.yul\":17668:17686   */\n      add\n        /* \"#utility.yul\":17660:17686   */\n      swap1\n      pop\n        /* \"#utility.yul\":17732:17741   */\n      dup2\n        /* \"#utility.yul\":17726:17730   */\n      dup2\n        /* \"#utility.yul\":17722:17742   */\n      sub\n        /* \"#utility.yul\":17718:17719   */\n      0x00\n        /* \"#utility.yul\":17707:17716   */\n      dup4\n        /* \"#utility.yul\":17703:17720   */\n      add\n        /* \"#utility.yul\":17696:17743   */\n      mstore\n        /* \"#utility.yul\":17760:17838   */\n      tag_457\n        /* \"#utility.yul\":17833:17837   */\n      dup2\n        /* \"#utility.yul\":17824:17830   */\n      dup5\n        /* \"#utility.yul\":17760:17838   */\n      tag_296\n      jump\t// in\n    tag_457:\n        /* \"#utility.yul\":17752:17838   */\n      swap1\n      pop\n        /* \"#utility.yul\":17532:17845   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d228b5ac6b9dbcbf4d9dced9822b61eb118a4165c1121066cbddc6177767185764736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_844": {
									"entryPoint": null,
									"id": 844,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": 268,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 276,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 557,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 580,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 511,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 479,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 474,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:7",
														"type": ""
													}
												],
												"src": "7:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:7",
														"type": ""
													}
												],
												"src": "334:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:7",
														"type": ""
													}
												],
												"src": "466:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:7"
															},
															"nodeType": "YulIf",
															"src": "621:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:7",
														"type": ""
													}
												],
												"src": "568:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:7"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:7",
														"type": ""
													}
												],
												"src": "696:143:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:7"
															},
															"nodeType": "YulIf",
															"src": "932:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:7",
														"type": ""
													}
												],
												"src": "845:351:7"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b506040516200215f3803806200215f833981810160405281019062000037919062000244565b60016000819055506200005f620000536200010c60201b60201c565b6200011460201b60201c565b600f600381905550605060048190555080600660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006600260006276a70081526020019081526020016000208190555060076002600062ed4e008152602001908152602001600020819055506008600260006301e133808152602001908152602001600020819055505062000276565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020c82620001df565b9050919050565b6200021e81620001ff565b81146200022a57600080fd5b50565b6000815190506200023e8162000213565b92915050565b6000602082840312156200025d576200025c620001da565b5b60006200026d848285016200022d565b91505092915050565b611ed980620002866000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bed9d86111610071578063bed9d8611461025e578063cb79c2e114610268578063d2a569c314610286578063d5dbdf1b14610290578063f2fde38b146102ac5761010b565b80638da5cb5b146101d4578063adb61832146101f2578063b5d9df8314610210578063b87da76d146102405761010b565b80637b0472f0116100de5780637b0472f0146101605780638891cf0d1461017c5780638c63f97f1461019a5780638c8e8fee146101b65761010b565b806310486b6a146101105780632cf1a5fb1461012e5780635b88349d1461014c578063715018a614610156575b600080fd5b6101186102c8565b604051610125919061165e565b60405180910390f35b61013661049e565b6040516101439190611695565b60405180910390f35b6101546104b1565b005b61015e6105df565b005b61017a600480360381019061017591906116e1565b610667565b005b6101846108f8565b6040516101919190611730565b60405180910390f35b6101b460048036038101906101af919061174b565b6108fe565b005b6101be6109f6565b6040516101cb91906117b9565b60405180910390f35b6101dc610a1c565b6040516101e991906117b9565b60405180910390f35b6101fa610a46565b6040516102079190611730565b60405180910390f35b61022a6004803603810190610225919061174b565b610a4e565b6040516102379190611730565b60405180910390f35b610248610a71565b6040516102559190611730565b60405180910390f35b610266610a77565b005b610270610cc8565b60405161027d9190611730565b60405180910390f35b61028e610cce565b005b6102aa60048036038101906102a5919061174b565b610d6e565b005b6102c660048036038101906102c19190611800565b610e66565b005b6102d0611510565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816000015114156103a3576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060600160405280600081526020016000815260200183815250905060006103cf83610f5e565b905042826040015160600151111561042f576103e8600354826103f2919061185c565b6103fc91906118e5565b6103e86003548560000151610411919061185c565b61041b91906118e5565b6104259190611916565b8260200181815250505b600061043e8460c00151610a4e565b11156104695760006104538460000151610fa8565b905080836040015160a001818152505050610479565b6000826040015160a00181815250505b8082604001516080018181525050826000015182600001818152505081935050505090565b600660009054906101000a900460ff1681565b6104b9610fdb565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561053b576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816000015411156105dc5760006105578260060154610a4e565b141561058f576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600501819055504281600601819055506105db600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336105d68460000154610fa8565b611023565b5b50565b6105e76110a9565b73ffffffffffffffffffffffffffffffffffffffff16610605610a1c565b73ffffffffffffffffffffffffffffffffffffffff161461065b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610652906119c9565b60405180910390fd5b61066560006110b1565b565b600260005414156106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490611a35565b60405180910390fd5b60026000819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610731576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002600083815260200190815260200160002054141561077f576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004290506040518060e001604052808481526020018281526020016002600085815260200190815260200160002054815260200182846107c09190611916565b815260200160008152602001600081526020016000815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015590505061088e600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333086611177565b3373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848384866108d49190611916565b6040516108e393929190611a55565b60405180910390a25060016000819055505050565b60045481565b6109066110a9565b73ffffffffffffffffffffffffffffffffffffffff16610924610a1c565b73ffffffffffffffffffffffffffffffffffffffff161461097a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610971906119c9565b60405180910390fd5b601e8111156109b5576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9816040516109eb9190611730565b60405180910390a150565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600042905090565b600062093a808242610a609190611a8c565b610a6a91906118e5565b9050919050565b60055481565b60026000541415610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab490611a35565b60405180910390fd5b60026000819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050600081600001511415610b98576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ba382610f5e565b9050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905550504282606001511115610c7f57600080610c3c846000015184611200565b91509150610c78600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338385610c739190611916565b611023565b5050610cbc565b610cbb600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838560000151610cb69190611916565b611023565b5b50506001600081905550565b60035481565b610cd66110a9565b73ffffffffffffffffffffffffffffffffffffffff16610cf4610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d41906119c9565b60405180910390fd5b426005819055506001600660006101000a81548160ff021916908315150217905550565b610d766110a9565b73ffffffffffffffffffffffffffffffffffffffff16610d94610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906119c9565b60405180910390fd5b60c8811115610e25576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e81604051610e5b9190611730565b60405180910390a150565b610e6e6110a9565b73ffffffffffffffffffffffffffffffffffffffff16610e8c610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed9906119c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4990611b32565b60405180910390fd5b610f5b816110b1565b50565b60006a52b7d2dcc80cd2e4000000610f79836020015161125a565b83604001518460000151610f8d919061185c565b610f97919061185c565b610fa191906118e5565b9050919050565b60006301dfe2006103e860045484610fc0919061185c565b610fca91906118e5565b610fd491906118e5565b9050919050565b600660009054906101000a900460ff16611021576040517fd4a7cb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6110a48363a9059cbb60e01b8484604051602401611042929190611b52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611293565b505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111fa846323b872dd60e01b85858560405160240161119893929190611b7b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611293565b50505050565b6000806103e860035485611214919061185c565b61121e91906118e5565b846112299190611a8c565b6103e86003548561123a919061185c565b61124491906118e5565b8461124f9190611a8c565b915091509250929050565b60006301e1338069d3c21bcecceda100000083426112789190611a8c565b611282919061185c565b61128c91906118e5565b9050919050565b60006112f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661135a9092919063ffffffff16565b905060008151111561135557808060200190518101906113159190611bde565b611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90611c7d565b60405180910390fd5b5b505050565b60606113698484600085611372565b90509392505050565b6060824710156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90611d0f565b60405180910390fd5b6113c085611486565b6113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690611d7b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114289190611e15565b60006040518083038185875af1925050503d8060008114611465576040519150601f19603f3d011682016040523d82523d6000602084013e61146a565b606091505b509150915061147a8282866114a9565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156114b957829050611509565b6000835111156114cc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115009190611e81565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001611531611537565b81525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b61158781611574565b82525050565b60e0820160008201516115a3600085018261157e565b5060208201516115b6602085018261157e565b5060408201516115c9604085018261157e565b5060608201516115dc606085018261157e565b5060808201516115ef608085018261157e565b5060a082015161160260a085018261157e565b5060c082015161161560c085018261157e565b50505050565b61012082016000820151611632600085018261157e565b506020820151611645602085018261157e565b506040820151611658604085018261158d565b50505050565b600061012082019050611674600083018461161b565b92915050565b60008115159050919050565b61168f8161167a565b82525050565b60006020820190506116aa6000830184611686565b92915050565b600080fd5b6116be81611574565b81146116c957600080fd5b50565b6000813590506116db816116b5565b92915050565b600080604083850312156116f8576116f76116b0565b5b6000611706858286016116cc565b9250506020611717858286016116cc565b9150509250929050565b61172a81611574565b82525050565b60006020820190506117456000830184611721565b92915050565b600060208284031215611761576117606116b0565b5b600061176f848285016116cc565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117a382611778565b9050919050565b6117b381611798565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b6117dd81611798565b81146117e857600080fd5b50565b6000813590506117fa816117d4565b92915050565b600060208284031215611816576118156116b0565b5b6000611824848285016117eb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061186782611574565b915061187283611574565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118ab576118aa61182d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006118f082611574565b91506118fb83611574565b92508261190b5761190a6118b6565b5b828204905092915050565b600061192182611574565b915061192c83611574565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119615761196061182d565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006119b360208361196c565b91506119be8261197d565b602082019050919050565b600060208201905081810360008301526119e2816119a6565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611a1f601f8361196c565b9150611a2a826119e9565b602082019050919050565b60006020820190508181036000830152611a4e81611a12565b9050919050565b6000606082019050611a6a6000830186611721565b611a776020830185611721565b611a846040830184611721565b949350505050565b6000611a9782611574565b9150611aa283611574565b925082821015611ab557611ab461182d565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b1c60268361196c565b9150611b2782611ac0565b604082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b6000604082019050611b6760008301856117aa565b611b746020830184611721565b9392505050565b6000606082019050611b9060008301866117aa565b611b9d60208301856117aa565b611baa6040830184611721565b949350505050565b611bbb8161167a565b8114611bc657600080fd5b50565b600081519050611bd881611bb2565b92915050565b600060208284031215611bf457611bf36116b0565b5b6000611c0284828501611bc9565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c67602a8361196c565b9150611c7282611c0b565b604082019050919050565b60006020820190508181036000830152611c9681611c5a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611cf960268361196c565b9150611d0482611c9d565b604082019050919050565b60006020820190508181036000830152611d2881611cec565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611d65601d8361196c565b9150611d7082611d2f565b602082019050919050565b60006020820190508181036000830152611d9481611d58565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611dcf578082015181840152602081019050611db4565b83811115611dde576000848401525b50505050565b6000611def82611d9b565b611df98185611da6565b9350611e09818560208601611db1565b80840191505092915050565b6000611e218284611de4565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611e5382611e2c565b611e5d818561196c565b9350611e6d818560208601611db1565b611e7681611e37565b840191505092915050565b60006020820190508181036000830152611e9b8184611e48565b90509291505056fea2646970667358221220d228b5ac6b9dbcbf4d9dced9822b61eb118a4165c1121066cbddc6177767185764736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x215F CODESIZE SUB DUP1 PUSH3 0x215F DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x244 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH3 0x5F PUSH3 0x53 PUSH3 0x10C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x114 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH1 0x50 PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x6 PUSH1 0x2 PUSH1 0x0 PUSH3 0x76A700 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x7 PUSH1 0x2 PUSH1 0x0 PUSH3 0xED4E00 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x2 PUSH1 0x0 PUSH4 0x1E13380 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP PUSH3 0x276 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x20C DUP3 PUSH3 0x1DF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x21E DUP2 PUSH3 0x1FF JUMP JUMPDEST DUP2 EQ PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x23E DUP2 PUSH3 0x213 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x25D JUMPI PUSH3 0x25C PUSH3 0x1DA JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x26D DUP5 DUP3 DUP6 ADD PUSH3 0x22D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ED9 DUP1 PUSH3 0x286 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x240 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1B6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x156 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x2C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x165E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x49E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x4B1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15E PUSH2 0x5DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x667 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x8F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x8FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH2 0xA1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x225 SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0xA4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x248 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0xA77 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x270 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH2 0xCCE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1800 JUMP JUMPDEST PUSH2 0xE66 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH2 0x1510 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x3CF DUP4 PUSH2 0xF5E JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x42F JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x41B SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x43E DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xA4E JUMP JUMPDEST GT ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 PUSH2 0x453 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xFA8 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4B9 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0x53B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5DC JUMPI PUSH1 0x0 PUSH2 0x557 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0xA4E JUMP JUMPDEST EQ ISZERO PUSH2 0x58F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5DB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5D6 DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0xFA8 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x5E7 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x605 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x652 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x665 PUSH1 0x0 PUSH2 0x10B1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A4 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x731 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x7C0 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x88E PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0x1177 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x8D4 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x906 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x924 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x971 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x9EB SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0xA60 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xABD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB4 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA3 DUP3 PUSH2 0xF5E JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 PUSH2 0xC3C DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x1200 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xC78 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xC73 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST POP POP PUSH2 0xCBC JUMP JUMPDEST PUSH2 0xCBB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xCD6 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCF4 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD41 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD76 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD94 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE1 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xE25 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xE5B SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xE6E PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE8C PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED9 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF49 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF5B DUP2 PUSH2 0x10B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xF79 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x125A JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xF8D SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xF97 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xFA1 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xFC0 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xFCA SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1021 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD4A7CB1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x10A4 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1042 SWAP3 SWAP2 SWAP1 PUSH2 0x1B52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1293 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x11FA DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1198 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1293 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1214 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x121E SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST DUP5 PUSH2 0x1229 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x123A SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x1244 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST DUP5 PUSH2 0x124F SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x1278 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x1282 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x128C SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F5 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1355 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1315 SWAP2 SWAP1 PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0x1354 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x134B SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1369 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1372 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AE SWAP1 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13C0 DUP6 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F6 SWAP1 PUSH2 0x1D7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP2 SWAP1 PUSH2 0x1E15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1465 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x146A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x147A DUP3 DUP3 DUP7 PUSH2 0x14A9 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x14B9 JUMPI DUP3 SWAP1 POP PUSH2 0x1509 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x14CC JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1500 SWAP2 SWAP1 PUSH2 0x1E81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1531 PUSH2 0x1537 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1587 DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x15A3 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x15B6 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x15C9 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x15DC PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x15EF PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1602 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1615 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1632 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1645 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1658 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x158D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1674 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x161B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x168F DUP2 PUSH2 0x167A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1686 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16BE DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP2 EQ PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16DB DUP2 PUSH2 0x16B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16F8 JUMPI PUSH2 0x16F7 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1706 DUP6 DUP3 DUP7 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1717 DUP6 DUP3 DUP7 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x172A DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1745 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1761 JUMPI PUSH2 0x1760 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x176F DUP5 DUP3 DUP6 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A3 DUP3 PUSH2 0x1778 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17B3 DUP2 PUSH2 0x1798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17CE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17DD DUP2 PUSH2 0x1798 JUMP JUMPDEST DUP2 EQ PUSH2 0x17E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17FA DUP2 PUSH2 0x17D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1816 JUMPI PUSH2 0x1815 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1824 DUP5 DUP3 DUP6 ADD PUSH2 0x17EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1867 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x1872 DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18F0 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x18FB DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x190B JUMPI PUSH2 0x190A PUSH2 0x18B6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1921 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x192C DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1961 JUMPI PUSH2 0x1960 PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B3 PUSH1 0x20 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x19BE DUP3 PUSH2 0x197D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19E2 DUP2 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1F PUSH1 0x1F DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2A DUP3 PUSH2 0x19E9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A4E DUP2 PUSH2 0x1A12 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1A6A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1A77 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1A84 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A97 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA2 DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1AB5 JUMPI PUSH2 0x1AB4 PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B1C PUSH1 0x26 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1B27 DUP3 PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B4B DUP2 PUSH2 0x1B0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B67 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1B74 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1B90 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1B9D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1BAA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x167A JUMP JUMPDEST DUP2 EQ PUSH2 0x1BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1BD8 DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BF4 JUMPI PUSH2 0x1BF3 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C02 DUP5 DUP3 DUP6 ADD PUSH2 0x1BC9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C67 PUSH1 0x2A DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1C72 DUP3 PUSH2 0x1C0B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1C5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF9 PUSH1 0x26 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1D04 DUP3 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D28 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D65 PUSH1 0x1D DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1D70 DUP3 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D94 DUP2 PUSH2 0x1D58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DCF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1DB4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1DDE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DEF DUP3 PUSH2 0x1D9B JUMP JUMPDEST PUSH2 0x1DF9 DUP2 DUP6 PUSH2 0x1DA6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DB1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E21 DUP3 DUP5 PUSH2 0x1DE4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E53 DUP3 PUSH2 0x1E2C JUMP JUMPDEST PUSH2 0x1E5D DUP2 DUP6 PUSH2 0x196C JUMP JUMPDEST SWAP4 POP PUSH2 0x1E6D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x1E76 DUP2 PUSH2 0x1E37 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E9B DUP2 DUP5 PUSH2 0x1E48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 0x28 0xB5 0xAC PUSH12 0x9DBCBF4D9DCED9822B61EB11 DUP11 COINBASE PUSH6 0xC1121066CBDD 0xC6 OR PUSH24 0x67185764736F6C634300080B003300000000000000000000 ",
							"sourceMap": "753:9168:6:-:0;;;1198:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;;;;921:32:0;940:12;:10;;;:12;;:::i;:::-;921:18;;;:32;;:::i;:::-;1318:2:6;1297:18;:23;;;;1344:2;1330:11;:16;;;;1373:5;1357:13;;:21;;;;;;;;;;;;;;;;;;1415:1;1389:14;:23;1404:7;1389:23;;;;;;;;;;;:27;;;;1453:1;1426:14;:24;1441:8;1426:24;;;;;;;;;;;:28;;;;1491:1;1464:14;:24;1479:8;1464:24;;;;;;;;;;;:28;;;;1198:301;753:9168;;640:96:5;693:7;719:10;712:17;;640:96;:::o;2270:187:0:-;2343:16;2362:6;;;;;;;;;;;2343:25;;2387:8;2378:6;;:17;;;;;;;;;;;;;;;;;;2441:8;2410:40;;2431:8;2410:40;;;;;;;;;;;;2333:124;2270:187;:::o;88:117:7:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;753:9168:6:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_calculateAirdrop_1374": {
									"entryPoint": 4008,
									"id": 1374,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1060": {
									"entryPoint": 3934,
									"id": 1060,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1037": {
									"entryPoint": 4698,
									"id": 1037,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1092": {
									"entryPoint": 4608,
									"id": 1092,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 4755,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkAirdropStatus_903": {
									"entryPoint": 4059,
									"id": 903,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": 4265,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 4273,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_802": {
									"entryPoint": 2296,
									"id": 802,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_804": {
									"entryPoint": 2673,
									"id": 804,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropStatus_806": {
									"entryPoint": 1182,
									"id": 806,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@blockTimestamp_1340": {
									"entryPoint": 2630,
									"id": 1340,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@calculateWeek_1356": {
									"entryPoint": 2638,
									"id": 1356,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1331": {
									"entryPoint": 3438,
									"id": 1331,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1018": {
									"entryPoint": 2302,
									"id": 1018,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1441": {
									"entryPoint": 1201,
									"id": 1441,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_605": {
									"entryPoint": 4978,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 4954,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_1292": {
									"entryPoint": 712,
									"id": 1292,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_464": {
									"entryPoint": 5254,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": 2588,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1503,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_279": {
									"entryPoint": 4471,
									"id": 279,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 4131,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_994": {
									"entryPoint": 1639,
									"id": 994,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_800": {
									"entryPoint": 3272,
									"id": 800,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1307": {
									"entryPoint": 3278,
									"id": 1307,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_808": {
									"entryPoint": 2550,
									"id": 808,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 3686,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 5289,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@withdrawStake_1175": {
									"entryPoint": 2679,
									"id": 1175,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 6123,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 7113,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 5836,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 6144,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 7134,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 5963,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 5857,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 6058,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 5766,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7652,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7752,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6927,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7404,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6566,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7512,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 7258,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6674,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_struct$_Stake_$859_memory_ptr_to_t_struct$_Stake_$859_memory_ptr": {
									"entryPoint": 5517,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_struct$_StakingSummary_$867_memory_ptr_to_t_struct$_StakingSummary_$867_memory_ptr_fromStack": {
									"entryPoint": 5659,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 5502,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 5921,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 7701,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 6073,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 7035,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 6994,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 5781,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7809,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6962,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7439,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6601,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7547,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 7293,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6709,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$867_memory_ptr__to_t_struct$_StakingSummary_$867_memory_ptr__fromStack_reversed": {
									"entryPoint": 5726,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 5936,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 6741,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 7579,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 7724,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
									"entryPoint": 7590,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6508,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 6422,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 6373,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 6236,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 6796,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6040,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 5754,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6008,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 5492,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 7601,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 6189,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 6326,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 5808,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 7735,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
									"entryPoint": 6848,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
									"entryPoint": 7325,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
									"entryPoint": 6525,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
									"entryPoint": 7471,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
									"entryPoint": 7179,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
									"entryPoint": 6633,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 6100,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 7090,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 5813,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:17848:7",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "52:32:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "62:16:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "73:5:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "62:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "34:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "44:7:7",
														"type": ""
													}
												],
												"src": "7:77:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "145:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "162:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "185:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "167:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "167:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "155:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "155:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "133:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "140:3:7",
														"type": ""
													}
												],
												"src": "90:108:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "356:1304:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "366:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "382:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "387:4:7",
																		"type": "",
																		"value": "0xe0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "378:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "378:14:7"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "370:4:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "402:166:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "439:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "469:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "476:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "465:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "465:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "459:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "459:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "443:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "529:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "547:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "552:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "543:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "543:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "495:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "495:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "495:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "578:165:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "614:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "644:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "651:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "640:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "640:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "634:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "634:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "618:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "704:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "722:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "727:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "718:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "718:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "670:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "670:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "670:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "753:169:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "793:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "823:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "830:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "819:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "819:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "813:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "813:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "797:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "883:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "901:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "906:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "897:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "897:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "849:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "849:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "932:171:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "974:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1004:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1011:4:7",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1000:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1000:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "994:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "994:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "978:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1064:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1082:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1087:4:7",
																						"type": "",
																						"value": "0x60"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1078:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1078:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1030:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1030:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1030:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1113:169:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1153:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1183:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1190:4:7",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1179:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1179:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1173:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1173:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1157:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1243:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1261:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1266:4:7",
																						"type": "",
																						"value": "0x80"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1257:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1257:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1209:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1209:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1209:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1292:176:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1339:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1369:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1376:4:7",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1365:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1365:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1359:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1359:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1343:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1429:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1447:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1452:4:7",
																						"type": "",
																						"value": "0xa0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1443:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1443:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1395:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1395:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1395:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1478:175:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1524:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1554:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1561:4:7",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1550:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1550:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1544:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1544:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1528:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "1614:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "1632:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1637:4:7",
																						"type": "",
																						"value": "0xc0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1628:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1628:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1580:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1580:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "1580:63:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_Stake_$859_memory_ptr_to_t_struct$_Stake_$859_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "343:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "350:3:7",
														"type": ""
													}
												],
												"src": "256:1404:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1864:623:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1874:28:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1890:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1895:6:7",
																		"type": "",
																		"value": "0x0120"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1886:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1886:16:7"
															},
															"variables": [
																{
																	"name": "tail",
																	"nodeType": "YulTypedName",
																	"src": "1878:4:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1912:172:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1955:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1985:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1992:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1981:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1981:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "1975:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1975:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "1959:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2045:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2063:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2068:4:7",
																						"type": "",
																						"value": "0x00"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2059:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2059:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2011:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2011:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2011:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2094:167:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2132:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2162:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2169:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2158:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2158:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "2152:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2152:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "2136:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2222:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2240:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2245:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2236:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2236:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_uint256_to_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2188:33:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2188:63:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2188:63:7"
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2271:209:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2307:43:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2337:5:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2344:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2333:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2333:16:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "2327:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2327:23:7"
																	},
																	"variables": [
																		{
																			"name": "memberValue0",
																			"nodeType": "YulTypedName",
																			"src": "2311:12:7",
																			"type": ""
																		}
																	]
																},
																{
																	"expression": {
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "2441:12:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nodeType": "YulIdentifier",
																						"src": "2459:3:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2464:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2455:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2455:14:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_t_struct$_Stake_$859_memory_ptr_to_t_struct$_Stake_$859_memory_ptr",
																			"nodeType": "YulIdentifier",
																			"src": "2363:77:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2363:107:7"
																	},
																	"nodeType": "YulExpressionStatement",
																	"src": "2363:107:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_struct$_StakingSummary_$867_memory_ptr_to_t_struct$_StakingSummary_$867_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1851:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1858:3:7",
														"type": ""
													}
												],
												"src": "1736:751:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2653:187:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2663:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:3:7",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2671:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2671:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2663:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2806:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_struct$_StakingSummary_$867_memory_ptr_to_t_struct$_StakingSummary_$867_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2700:105:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2700:133:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2700:133:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$867_memory_ptr__to_t_struct$_StakingSummary_$867_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2625:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2637:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2648:4:7",
														"type": ""
													}
												],
												"src": "2493:347:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2888:48:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2898:32:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2923:5:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2916:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2916:13:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2909:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2909:21:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2898:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2870:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2880:7:7",
														"type": ""
													}
												],
												"src": "2846:90:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3001:50:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3018:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3038:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3023:14:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3023:21:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3011:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3011:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3011:34:7"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2989:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2996:3:7",
														"type": ""
													}
												],
												"src": "2942:109:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3149:118:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3159:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3171:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3182:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3167:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3167:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3159:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3233:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3246:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3257:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3242:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3242:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3195:37:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3195:65:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3195:65:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3121:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3133:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3144:4:7",
														"type": ""
													}
												],
												"src": "3057:210:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3313:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3323:19:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3339:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3333:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3333:9:7"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "3323:6:7"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "3306:6:7",
														"type": ""
													}
												],
												"src": "3273:75:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3443:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3460:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3463:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3453:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3453:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3453:12:7"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "3354:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3566:28:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3583:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3586:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3576:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3576:12:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3576:12:7"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "3477:117:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3643:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3700:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3709:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3712:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3702:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3702:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3702:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3666:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3691:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3673:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3673:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3663:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3663:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3656:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3656:43:7"
															},
															"nodeType": "YulIf",
															"src": "3653:63:7"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3636:5:7",
														"type": ""
													}
												],
												"src": "3600:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3780:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3790:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3812:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3799:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3799:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3790:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3855:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3828:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3828:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3828:33:7"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3758:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3766:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3774:5:7",
														"type": ""
													}
												],
												"src": "3728:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3956:391:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4002:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4004:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4004:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4004:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3977:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3986:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3973:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3973:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3998:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3969:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3969:32:7"
															},
															"nodeType": "YulIf",
															"src": "3966:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "4095:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4110:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4124:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4114:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4139:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4174:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4185:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4170:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4170:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4194:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4149:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4149:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4139:6:7"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4222:118:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4237:16:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4251:2:7",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4241:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4267:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4302:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4313:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4298:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4298:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4322:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4277:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4277:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4267:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3918:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3929:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3941:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3949:6:7",
														"type": ""
													}
												],
												"src": "3873:474:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4418:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4435:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4458:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4440:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4440:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4428:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4428:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4428:37:7"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4406:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4413:3:7",
														"type": ""
													}
												],
												"src": "4353:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4575:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4585:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4597:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4608:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4593:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4593:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4585:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4665:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4678:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4689:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4674:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4674:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4621:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4621:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4621:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4547:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4559:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4570:4:7",
														"type": ""
													}
												],
												"src": "4477:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4771:263:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4817:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "4819:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4819:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4819:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4792:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4801:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4788:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4788:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4813:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4784:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4784:32:7"
															},
															"nodeType": "YulIf",
															"src": "4781:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "4910:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4925:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4939:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4929:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4954:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4989:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5000:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4985:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4985:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5009:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4964:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4964:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4954:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4741:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4752:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4764:6:7",
														"type": ""
													}
												],
												"src": "4705:329:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5085:81:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5095:65:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5110:5:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5117:42:7",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5106:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5106:54:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5095:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5067:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5077:7:7",
														"type": ""
													}
												],
												"src": "5040:126:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5217:51:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5227:35:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5256:5:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "5238:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5238:24:7"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5227:7:7"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5199:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5209:7:7",
														"type": ""
													}
												],
												"src": "5172:96:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5339:53:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5356:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5379:5:7"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5361:17:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5361:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5349:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5349:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5349:37:7"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5327:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5334:3:7",
														"type": ""
													}
												],
												"src": "5274:118:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5496:124:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5506:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5518:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5529:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5514:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5514:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5506:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5586:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5599:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5610:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5595:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5595:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5542:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5542:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5542:71:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5468:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5480:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5491:4:7",
														"type": ""
													}
												],
												"src": "5398:222:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5669:79:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5726:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5735:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5738:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5728:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5728:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5728:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5692:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5717:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "5699:17:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5699:24:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5689:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5689:35:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5682:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5682:43:7"
															},
															"nodeType": "YulIf",
															"src": "5679:63:7"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5662:5:7",
														"type": ""
													}
												],
												"src": "5626:122:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5806:87:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5816:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5838:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "5825:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5825:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5816:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5881:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "5854:26:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5854:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5854:33:7"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5784:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5792:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5800:5:7",
														"type": ""
													}
												],
												"src": "5754:139:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5965:263:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6011:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6013:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6013:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6013:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5986:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5995:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5982:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5982:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6007:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5978:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5978:32:7"
															},
															"nodeType": "YulIf",
															"src": "5975:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "6104:117:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6119:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6133:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6123:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6148:63:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6183:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6194:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6179:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6179:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6203:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6158:20:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6158:53:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6148:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5935:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5946:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5958:6:7",
														"type": ""
													}
												],
												"src": "5899:329:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6262:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6279:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6282:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6272:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6272:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6272:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6376:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6379:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6369:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6369:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6369:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6400:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6403:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6393:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6393:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6393:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6234:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6468:300:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6478:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6501:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6483:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6483:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6478:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6512:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6535:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6517:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6517:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6512:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6710:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6712:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6712:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6712:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "6622:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6615:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6615:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "6608:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6608:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6630:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6637:66:7",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "6705:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "6633:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6633:74:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "6627:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6627:81:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6604:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6604:105:7"
															},
															"nodeType": "YulIf",
															"src": "6601:131:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6742:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6757:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6760:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "6753:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6753:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "6742:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6451:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6454:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "6460:7:7",
														"type": ""
													}
												],
												"src": "6420:348:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6802:152:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6819:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6822:77:7",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6812:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6812:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6812:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6916:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6919:4:7",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6909:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6909:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6909:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6940:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6943:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6933:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6933:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6933:15:7"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "6774:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7002:143:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7012:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7035:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7017:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7017:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "7012:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7046:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7069:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7051:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7051:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "7046:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7093:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "7095:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7095:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7095:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7090:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7083:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7083:9:7"
															},
															"nodeType": "YulIf",
															"src": "7080:35:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7125:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7134:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7137:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "7130:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7130:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "7125:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6991:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6994:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "7000:1:7",
														"type": ""
													}
												],
												"src": "6960:185:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7195:261:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7205:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7228:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7210:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7210:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "7205:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7239:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7262:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7244:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7244:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "7239:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7402:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7404:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7404:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7404:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7323:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7330:66:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "7398:1:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7326:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7326:74:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7320:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7320:81:7"
															},
															"nodeType": "YulIf",
															"src": "7317:107:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7434:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7445:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7448:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7441:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7441:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7434:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "7182:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "7185:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "7191:3:7",
														"type": ""
													}
												],
												"src": "7151:305:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7558:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7575:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7580:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7568:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7568:19:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7568:19:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7596:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7615:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7620:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7611:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7611:14:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "7596:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7530:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7535:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "7546:11:7",
														"type": ""
													}
												],
												"src": "7462:169:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7743:76:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7765:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7773:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7761:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7761:14:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7777:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7754:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7754:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7754:58:7"
														}
													]
												},
												"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7735:6:7",
														"type": ""
													}
												],
												"src": "7637:182:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7971:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7981:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8047:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8052:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7988:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7988:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7981:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8153:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																	"nodeType": "YulIdentifier",
																	"src": "8064:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8064:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8064:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8166:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8177:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8182:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8173:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8173:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8166:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7959:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7967:3:7",
														"type": ""
													}
												],
												"src": "7825:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8368:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8378:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8390:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8401:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8386:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8386:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8378:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8425:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8436:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8421:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8421:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8444:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8450:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8440:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8440:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8414:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8414:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8414:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8470:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8604:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8478:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8478:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8470:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8348:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8363:4:7",
														"type": ""
													}
												],
												"src": "8197:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8728:75:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "8750:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8758:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8746:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8746:14:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8762:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8739:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8739:57:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8739:57:7"
														}
													]
												},
												"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "8720:6:7",
														"type": ""
													}
												],
												"src": "8622:181:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8955:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8965:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9031:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9036:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8972:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "8972:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "8965:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9137:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																	"nodeType": "YulIdentifier",
																	"src": "9048:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9048:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9048:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9150:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9161:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9166:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9157:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9157:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "9150:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "8943:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "8951:3:7",
														"type": ""
													}
												],
												"src": "8809:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9352:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9362:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9374:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9385:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9370:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9370:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9362:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9409:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9420:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9405:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9405:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9428:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9434:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9424:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9424:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9398:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9398:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9398:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9454:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9588:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9462:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9462:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9454:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9332:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9347:4:7",
														"type": ""
													}
												],
												"src": "9181:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9760:288:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9770:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9782:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9793:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9778:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9778:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9770:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9850:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9863:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9874:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9859:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9859:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9806:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9806:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9806:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "9931:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9944:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9955:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9940:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9940:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9887:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9887:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9887:72:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10013:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10026:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10037:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10022:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10022:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9969:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "9969:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9969:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9716:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "9728:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9736:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9744:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9755:4:7",
														"type": ""
													}
												],
												"src": "9606:442:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10099:146:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10109:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10132:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10114:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10114:20:7"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "10109:1:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10143:25:7",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10166:1:7"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "10148:17:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10148:20:7"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "10143:1:7"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10190:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10192:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10192:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10192:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10184:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10187:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10181:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10181:8:7"
															},
															"nodeType": "YulIf",
															"src": "10178:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10222:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10234:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10237:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10230:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10230:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "10222:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10085:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10088:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "10094:4:7",
														"type": ""
													}
												],
												"src": "10054:191:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10357:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10379:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10387:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10375:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10375:14:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10391:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10368:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10368:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10368:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "10447:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10455:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10443:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10443:15:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10460:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10436:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10436:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10436:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "10349:6:7",
														"type": ""
													}
												],
												"src": "10251:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10628:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10638:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10704:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10709:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10645:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10645:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "10638:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10810:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																	"nodeType": "YulIdentifier",
																	"src": "10721:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10721:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10721:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10823:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10834:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10839:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10830:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "10830:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "10823:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10616:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "10624:3:7",
														"type": ""
													}
												],
												"src": "10482:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11025:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11035:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11047:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11058:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11043:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11043:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11035:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11082:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11093:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11078:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11078:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11101:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11107:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11097:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11097:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11071:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11071:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11071:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11127:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "11261:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11135:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11135:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11127:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11005:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11020:4:7",
														"type": ""
													}
												],
												"src": "10854:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11405:206:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11415:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11427:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11438:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11423:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11423:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11415:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11495:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11508:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11519:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11504:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11504:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11451:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11451:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11451:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11576:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11589:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11600:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11585:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11585:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11532:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11532:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11532:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11369:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11381:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11389:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11400:4:7",
														"type": ""
													}
												],
												"src": "11279:332:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11771:288:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11781:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11793:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11804:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11789:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11789:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11781:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "11861:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11874:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11885:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11870:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11870:17:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11817:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11817:71:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11817:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11942:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11955:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11966:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11951:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11951:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11898:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11898:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11898:72:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12024:6:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12037:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12048:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12033:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12033:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11980:43:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "11980:72:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11980:72:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11727:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "11739:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11747:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11755:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11766:4:7",
														"type": ""
													}
												],
												"src": "11617:442:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12105:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12159:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12168:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12171:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12161:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12161:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12161:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12128:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "12150:5:7"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "12135:14:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12135:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "12125:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12125:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12118:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12118:40:7"
															},
															"nodeType": "YulIf",
															"src": "12115:60:7"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12098:5:7",
														"type": ""
													}
												],
												"src": "12065:116:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12247:77:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12257:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "12272:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12266:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12266:13:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "12257:5:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12312:5:7"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "12288:23:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12288:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12288:30:7"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "12225:6:7",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12233:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12241:5:7",
														"type": ""
													}
												],
												"src": "12187:137:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12404:271:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12450:83:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "12452:77:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12452:79:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12452:79:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12425:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12434:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "12421:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12421:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12446:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "12417:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12417:32:7"
															},
															"nodeType": "YulIf",
															"src": "12414:119:7"
														},
														{
															"nodeType": "YulBlock",
															"src": "12543:125:7",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "12558:15:7",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12572:1:7",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "12562:6:7",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "12587:71:7",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "12630:9:7"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "12641:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "12626:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12626:22:7"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "12650:7:7"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "12597:28:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12597:61:7"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "12587:6:7"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12374:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "12385:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12397:6:7",
														"type": ""
													}
												],
												"src": "12330:345:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12787:123:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12809:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12817:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12805:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12805:14:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12821:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12798:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12798:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12798:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "12877:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12885:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12873:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12873:15:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12890:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12866:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "12866:37:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12866:37:7"
														}
													]
												},
												"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "12779:6:7",
														"type": ""
													}
												],
												"src": "12681:229:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13062:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13072:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13138:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13143:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13079:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13079:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "13072:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13244:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																	"nodeType": "YulIdentifier",
																	"src": "13155:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13155:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13155:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13257:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13268:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13273:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13264:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13264:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13257:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13050:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13058:3:7",
														"type": ""
													}
												],
												"src": "12916:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13459:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13469:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13481:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13492:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13477:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13477:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13469:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13516:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13527:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13512:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13512:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "13535:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13541:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13531:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13531:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13505:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13505:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13505:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13561:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "13695:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13569:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13569:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13561:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13439:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13454:4:7",
														"type": ""
													}
												],
												"src": "13288:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13819:119:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13841:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13849:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13837:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13837:14:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13853:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13830:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13830:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13830:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "13909:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13917:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13905:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13905:15:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "13922:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13898:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13898:33:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13898:33:7"
														}
													]
												},
												"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "13811:6:7",
														"type": ""
													}
												],
												"src": "13713:225:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14090:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14100:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14166:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14171:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14107:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14107:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "14100:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14272:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																	"nodeType": "YulIdentifier",
																	"src": "14183:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14183:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14183:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14285:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14296:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14301:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14292:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14292:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14285:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14078:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14086:3:7",
														"type": ""
													}
												],
												"src": "13944:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14487:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14497:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14509:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14520:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14505:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14505:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14497:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14544:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14555:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14540:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14540:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "14563:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14569:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "14559:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14559:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14533:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14533:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14533:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14589:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "14723:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14597:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14597:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14589:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14467:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14482:4:7",
														"type": ""
													}
												],
												"src": "14316:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14847:73:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "14869:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14877:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14865:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14865:14:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14881:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14858:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "14858:55:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14858:55:7"
														}
													]
												},
												"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "14839:6:7",
														"type": ""
													}
												],
												"src": "14741:179:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15072:220:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15082:74:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15148:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15153:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15089:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15089:67:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "15082:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15254:3:7"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																	"nodeType": "YulIdentifier",
																	"src": "15165:88:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15165:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15165:93:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15267:19:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "15278:3:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15283:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15274:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15274:12:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "15267:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15060:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "15068:3:7",
														"type": ""
													}
												],
												"src": "14926:366:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15469:248:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15479:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15491:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15502:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15487:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15487:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15479:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15526:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15537:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15522:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15522:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "15545:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15551:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "15541:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15541:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15515:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15515:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15515:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15571:139:7",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "15705:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15579:124:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15579:131:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15571:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15449:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15464:4:7",
														"type": ""
													}
												],
												"src": "15298:419:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15781:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15792:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "15808:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "15802:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "15802:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "15792:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "15764:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15774:6:7",
														"type": ""
													}
												],
												"src": "15723:98:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15940:34:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15950:18:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "15965:3:7"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "15950:11:7"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "15912:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "15917:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "15928:11:7",
														"type": ""
													}
												],
												"src": "15827:147:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16029:258:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16039:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "16048:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "16043:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16108:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16133:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "16138:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16129:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16129:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "16152:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "16157:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "16148:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "16148:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "16142:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16142:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16122:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16122:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16122:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16069:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16072:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "16066:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16066:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "16080:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "16082:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "16091:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16094:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "16087:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16087:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "16082:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "16062:3:7",
																"statements": []
															},
															"src": "16058:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "16205:76:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "16255:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "16260:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "16251:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "16251:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "16269:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "16244:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16244:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16244:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "16186:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16189:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "16183:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16183:13:7"
															},
															"nodeType": "YulIf",
															"src": "16180:101:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "16011:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "16016:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "16021:6:7",
														"type": ""
													}
												],
												"src": "15980:307:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16401:265:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "16411:52:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "16457:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "16425:31:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16425:38:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "16415:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16472:95:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16555:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16560:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16479:75:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16479:88:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16472:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "16602:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "16609:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "16598:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "16598:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16616:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16621:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "16576:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16576:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "16576:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "16637:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16648:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "16653:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "16644:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16644:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16637:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16382:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16389:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16397:3:7",
														"type": ""
													}
												],
												"src": "16293:373:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "16806:137:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "16817:100:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "16904:6:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "16913:3:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "16824:79:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "16824:93:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "16817:3:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "16927:10:7",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "16934:3:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "16927:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "16785:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "16791:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "16802:3:7",
														"type": ""
													}
												],
												"src": "16672:271:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17008:40:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17019:22:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17035:5:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "17029:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17029:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "17019:6:7"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "16991:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "17001:6:7",
														"type": ""
													}
												],
												"src": "16949:99:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17102:54:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17112:38:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17130:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17137:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17126:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17126:14:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17146:2:7",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "17142:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17142:7:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "17122:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17122:28:7"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "17112:6:7"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17085:5:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "17095:6:7",
														"type": ""
													}
												],
												"src": "17054:102:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17254:272:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "17264:53:7",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "17311:5:7"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "17278:32:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17278:39:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "17268:6:7",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "17326:78:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17392:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17397:6:7"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17333:58:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17333:71:7"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "17326:3:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "17439:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17446:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17435:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17435:16:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17453:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "17458:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "17413:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17413:52:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17413:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17474:46:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "17485:3:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "17512:6:7"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "17490:21:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17490:29:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17481:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17481:39:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "17474:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "17235:5:7",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "17242:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "17250:3:7",
														"type": ""
													}
												],
												"src": "17162:364:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "17650:195:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "17660:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "17672:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17683:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "17668:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17668:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17660:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17707:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "17718:1:7",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "17703:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17703:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "17726:4:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "17732:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "17722:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "17722:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "17696:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17696:47:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "17696:47:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "17752:86:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "17824:6:7"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "17833:4:7"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "17760:63:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "17760:78:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "17752:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "17622:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "17634:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "17645:4:7",
														"type": ""
													}
												],
												"src": "17532:313:7"
											}
										]
									},
									"contents": "{\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct Staking.Stake -> struct Staking.Stake\n    function abi_encode_t_struct$_Stake_$859_memory_ptr_to_t_struct$_Stake_$859_memory_ptr(value, pos)  {\n        let tail := add(pos, 0xe0)\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // since\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // rewardAPY\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // releaseTime\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // claimable\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x80))\n        }\n\n        {\n            // claimableAirdrop\n\n            let memberValue0 := mload(add(value, 0xa0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xa0))\n        }\n\n        {\n            // latestClaimDrop\n\n            let memberValue0 := mload(add(value, 0xc0))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0xc0))\n        }\n\n    }\n\n    // struct Staking.StakingSummary -> struct Staking.StakingSummary\n    function abi_encode_t_struct$_StakingSummary_$867_memory_ptr_to_t_struct$_StakingSummary_$867_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x0120)\n\n        {\n            // total_amount\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // penalty\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // stake\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_struct$_Stake_$859_memory_ptr_to_t_struct$_Stake_$859_memory_ptr(memberValue0, add(pos, 0x40))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_StakingSummary_$867_memory_ptr__to_t_struct$_StakingSummary_$867_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_struct$_StakingSummary_$867_memory_ptr_to_t_struct$_StakingSummary_$867_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063bed9d86111610071578063bed9d8611461025e578063cb79c2e114610268578063d2a569c314610286578063d5dbdf1b14610290578063f2fde38b146102ac5761010b565b80638da5cb5b146101d4578063adb61832146101f2578063b5d9df8314610210578063b87da76d146102405761010b565b80637b0472f0116100de5780637b0472f0146101605780638891cf0d1461017c5780638c63f97f1461019a5780638c8e8fee146101b65761010b565b806310486b6a146101105780632cf1a5fb1461012e5780635b88349d1461014c578063715018a614610156575b600080fd5b6101186102c8565b604051610125919061165e565b60405180910390f35b61013661049e565b6040516101439190611695565b60405180910390f35b6101546104b1565b005b61015e6105df565b005b61017a600480360381019061017591906116e1565b610667565b005b6101846108f8565b6040516101919190611730565b60405180910390f35b6101b460048036038101906101af919061174b565b6108fe565b005b6101be6109f6565b6040516101cb91906117b9565b60405180910390f35b6101dc610a1c565b6040516101e991906117b9565b60405180910390f35b6101fa610a46565b6040516102079190611730565b60405180910390f35b61022a6004803603810190610225919061174b565b610a4e565b6040516102379190611730565b60405180910390f35b610248610a71565b6040516102559190611730565b60405180910390f35b610266610a77565b005b610270610cc8565b60405161027d9190611730565b60405180910390f35b61028e610cce565b005b6102aa60048036038101906102a5919061174b565b610d6e565b005b6102c660048036038101906102c19190611800565b610e66565b005b6102d0611510565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152505090506000816000015114156103a3576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060600160405280600081526020016000815260200183815250905060006103cf83610f5e565b905042826040015160600151111561042f576103e8600354826103f2919061185c565b6103fc91906118e5565b6103e86003548560000151610411919061185c565b61041b91906118e5565b6104259190611916565b8260200181815250505b600061043e8460c00151610a4e565b11156104695760006104538460000151610fa8565b905080836040015160a001818152505050610479565b6000826040015160a00181815250505b8082604001516080018181525050826000015182600001818152505081935050505090565b600660009054906101000a900460ff1681565b6104b9610fdb565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561053b576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816000015411156105dc5760006105578260060154610a4e565b141561058f576040517fdd8456cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600501819055504281600601819055506105db600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336105d68460000154610fa8565b611023565b5b50565b6105e76110a9565b73ffffffffffffffffffffffffffffffffffffffff16610605610a1c565b73ffffffffffffffffffffffffffffffffffffffff161461065b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610652906119c9565b60405180910390fd5b61066560006110b1565b565b600260005414156106ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a490611a35565b60405180910390fd5b60026000819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610731576040517f04462d2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002600083815260200190815260200160002054141561077f576040517f95377be400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004290506040518060e001604052808481526020018281526020016002600085815260200190815260200160002054815260200182846107c09190611916565b815260200160008152602001600081526020016000815250600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015590505061088e600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333086611177565b3373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848384866108d49190611916565b6040516108e393929190611a55565b60405180910390a25060016000819055505050565b60045481565b6109066110a9565b73ffffffffffffffffffffffffffffffffffffffff16610924610a1c565b73ffffffffffffffffffffffffffffffffffffffff161461097a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610971906119c9565b60405180910390fd5b601e8111156109b5576040517ff1a470d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9816040516109eb9190611730565b60405180910390a150565b600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600042905090565b600062093a808242610a609190611a8c565b610a6a91906118e5565b9050919050565b60055481565b60026000541415610abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab490611a35565b60405180910390fd5b60026000819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050600081600001511415610b98576040517fb018f08700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ba382610f5e565b9050600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160009055600382016000905560048201600090556005820160009055600682016000905550504282606001511115610c7f57600080610c3c846000015184611200565b91509150610c78600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338385610c739190611916565b611023565b5050610cbc565b610cbb600660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633838560000151610cb69190611916565b611023565b5b50506001600081905550565b60035481565b610cd66110a9565b73ffffffffffffffffffffffffffffffffffffffff16610cf4610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d41906119c9565b60405180910390fd5b426005819055506001600660006101000a81548160ff021916908315150217905550565b610d766110a9565b73ffffffffffffffffffffffffffffffffffffffff16610d94610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906119c9565b60405180910390fd5b60c8811115610e25576040517fa552cf1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e81604051610e5b9190611730565b60405180910390a150565b610e6e6110a9565b73ffffffffffffffffffffffffffffffffffffffff16610e8c610a1c565b73ffffffffffffffffffffffffffffffffffffffff1614610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed9906119c9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4990611b32565b60405180910390fd5b610f5b816110b1565b50565b60006a52b7d2dcc80cd2e4000000610f79836020015161125a565b83604001518460000151610f8d919061185c565b610f97919061185c565b610fa191906118e5565b9050919050565b60006301dfe2006103e860045484610fc0919061185c565b610fca91906118e5565b610fd491906118e5565b9050919050565b600660009054906101000a900460ff16611021576040517fd4a7cb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6110a48363a9059cbb60e01b8484604051602401611042929190611b52565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611293565b505050565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6111fa846323b872dd60e01b85858560405160240161119893929190611b7b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611293565b50505050565b6000806103e860035485611214919061185c565b61121e91906118e5565b846112299190611a8c565b6103e86003548561123a919061185c565b61124491906118e5565b8461124f9190611a8c565b915091509250929050565b60006301e1338069d3c21bcecceda100000083426112789190611a8c565b611282919061185c565b61128c91906118e5565b9050919050565b60006112f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661135a9092919063ffffffff16565b905060008151111561135557808060200190518101906113159190611bde565b611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90611c7d565b60405180910390fd5b5b505050565b60606113698484600085611372565b90509392505050565b6060824710156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90611d0f565b60405180910390fd5b6113c085611486565b6113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690611d7b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114289190611e15565b60006040518083038185875af1925050503d8060008114611465576040519150601f19603f3d011682016040523d82523d6000602084013e61146a565b606091505b509150915061147a8282866114a9565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156114b957829050611509565b6000835111156114cc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115009190611e81565b60405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001611531611537565b81525090565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000819050919050565b61158781611574565b82525050565b60e0820160008201516115a3600085018261157e565b5060208201516115b6602085018261157e565b5060408201516115c9604085018261157e565b5060608201516115dc606085018261157e565b5060808201516115ef608085018261157e565b5060a082015161160260a085018261157e565b5060c082015161161560c085018261157e565b50505050565b61012082016000820151611632600085018261157e565b506020820151611645602085018261157e565b506040820151611658604085018261158d565b50505050565b600061012082019050611674600083018461161b565b92915050565b60008115159050919050565b61168f8161167a565b82525050565b60006020820190506116aa6000830184611686565b92915050565b600080fd5b6116be81611574565b81146116c957600080fd5b50565b6000813590506116db816116b5565b92915050565b600080604083850312156116f8576116f76116b0565b5b6000611706858286016116cc565b9250506020611717858286016116cc565b9150509250929050565b61172a81611574565b82525050565b60006020820190506117456000830184611721565b92915050565b600060208284031215611761576117606116b0565b5b600061176f848285016116cc565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117a382611778565b9050919050565b6117b381611798565b82525050565b60006020820190506117ce60008301846117aa565b92915050565b6117dd81611798565b81146117e857600080fd5b50565b6000813590506117fa816117d4565b92915050565b600060208284031215611816576118156116b0565b5b6000611824848285016117eb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061186782611574565b915061187283611574565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118ab576118aa61182d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006118f082611574565b91506118fb83611574565b92508261190b5761190a6118b6565b5b828204905092915050565b600061192182611574565b915061192c83611574565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119615761196061182d565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006119b360208361196c565b91506119be8261197d565b602082019050919050565b600060208201905081810360008301526119e2816119a6565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611a1f601f8361196c565b9150611a2a826119e9565b602082019050919050565b60006020820190508181036000830152611a4e81611a12565b9050919050565b6000606082019050611a6a6000830186611721565b611a776020830185611721565b611a846040830184611721565b949350505050565b6000611a9782611574565b9150611aa283611574565b925082821015611ab557611ab461182d565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b1c60268361196c565b9150611b2782611ac0565b604082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b6000604082019050611b6760008301856117aa565b611b746020830184611721565b9392505050565b6000606082019050611b9060008301866117aa565b611b9d60208301856117aa565b611baa6040830184611721565b949350505050565b611bbb8161167a565b8114611bc657600080fd5b50565b600081519050611bd881611bb2565b92915050565b600060208284031215611bf457611bf36116b0565b5b6000611c0284828501611bc9565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611c67602a8361196c565b9150611c7282611c0b565b604082019050919050565b60006020820190508181036000830152611c9681611c5a565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611cf960268361196c565b9150611d0482611c9d565b604082019050919050565b60006020820190508181036000830152611d2881611cec565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611d65601d8361196c565b9150611d7082611d2f565b602082019050919050565b60006020820190508181036000830152611d9481611d58565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015611dcf578082015181840152602081019050611db4565b83811115611dde576000848401525b50505050565b6000611def82611d9b565b611df98185611da6565b9350611e09818560208601611db1565b80840191505092915050565b6000611e218284611de4565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000611e5382611e2c565b611e5d818561196c565b9350611e6d818560208601611db1565b611e7681611e37565b840191505092915050565b60006020820190508181036000830152611e9b8184611e48565b90509291505056fea2646970667358221220d228b5ac6b9dbcbf4d9dced9822b61eb118a4165c1121066cbddc6177767185764736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xBED9D861 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x268 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x286 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2AC JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0xADB61832 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x240 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1B6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x2CF1A5FB EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x156 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x2C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0x165E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x49E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x1695 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x154 PUSH2 0x4B1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15E PUSH2 0x5DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x175 SWAP2 SWAP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x667 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x8F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AF SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0x8FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BE PUSH2 0x9F6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CB SWAP2 SWAP1 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DC PUSH2 0xA1C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E9 SWAP2 SWAP1 PUSH2 0x17B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FA PUSH2 0xA46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x207 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x22A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x225 SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0xA4E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x237 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x248 PUSH2 0xA71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x266 PUSH2 0xA77 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x270 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH2 0xCCE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2AA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x174B JUMP JUMPDEST PUSH2 0xD6E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C1 SWAP2 SWAP1 PUSH2 0x1800 JUMP JUMPDEST PUSH2 0xE66 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH2 0x1510 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH2 0x3CF DUP4 PUSH2 0xF5E JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x42F JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x3FC SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x41B SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x0 PUSH2 0x43E DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0xA4E JUMP JUMPDEST GT ISZERO PUSH2 0x469 JUMPI PUSH1 0x0 PUSH2 0x453 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xFA8 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x479 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0xA0 ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x80 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP2 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4B9 PUSH2 0xFDB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD EQ ISZERO PUSH2 0x53B JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD GT ISZERO PUSH2 0x5DC JUMPI PUSH1 0x0 PUSH2 0x557 DUP3 PUSH1 0x6 ADD SLOAD PUSH2 0xA4E JUMP JUMPDEST EQ ISZERO PUSH2 0x58F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD8456CC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x5 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP2 PUSH1 0x6 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x5DB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH2 0x5D6 DUP5 PUSH1 0x0 ADD SLOAD PUSH2 0xFA8 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x5E7 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x605 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x652 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x665 PUSH1 0x0 PUSH2 0x10B1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x6AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A4 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x731 JUMPI PUSH1 0x40 MLOAD PUSH32 0x4462D2700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ ISZERO PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH32 0x95377BE400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP5 PUSH2 0x7C0 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP PUSH2 0x88E PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER ADDRESS DUP7 PUSH2 0x1177 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 DUP5 DUP7 PUSH2 0x8D4 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x906 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x924 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x97A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x971 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF1A470D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 DUP2 SWAP1 SSTORE POP PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 DUP2 PUSH1 0x40 MLOAD PUSH2 0x9EB SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 DUP3 TIMESTAMP PUSH2 0xA60 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0xA6A SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0xABD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB4 SWAP1 PUSH2 0x1A35 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x6 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD EQ ISZERO PUSH2 0xB98 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB018F08700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBA3 DUP3 PUSH2 0xF5E JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP TIMESTAMP DUP3 PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0xC7F JUMPI PUSH1 0x0 DUP1 PUSH2 0xC3C DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x1200 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xC78 PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH2 0xC73 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST POP POP PUSH2 0xCBC JUMP JUMPDEST PUSH2 0xCBB PUSH1 0x6 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER DUP4 DUP6 PUSH1 0x0 ADD MLOAD PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1916 JUMP JUMPDEST PUSH2 0x1023 JUMP JUMPDEST JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xCD6 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xCF4 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD4A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD41 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP PUSH1 0x5 DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x6 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0xD76 PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD94 PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDEA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDE1 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xE25 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA552CF1000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 DUP2 SWAP1 SSTORE POP PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E DUP2 PUSH1 0x40 MLOAD PUSH2 0xE5B SWAP2 SWAP1 PUSH2 0x1730 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0xE6E PUSH2 0x10A9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE8C PUSH2 0xA1C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xED9 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF49 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF5B DUP2 PUSH2 0x10B1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xF79 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x125A JUMP JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xF8D SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xF97 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xFA1 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xFC0 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0xFCA SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x1021 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD4A7CB1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x10A4 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1042 SWAP3 SWAP2 SWAP1 PUSH2 0x1B52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1293 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x11FA DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1198 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1293 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x1214 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x121E SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST DUP5 PUSH2 0x1229 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0x123A SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x1244 SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST DUP5 PUSH2 0x124F SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH10 0xD3C21BCECCEDA1000000 DUP4 TIMESTAMP PUSH2 0x1278 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x1282 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH2 0x128C SWAP2 SWAP1 PUSH2 0x18E5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12F5 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135A SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1355 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1315 SWAP2 SWAP1 PUSH2 0x1BDE JUMP JUMPDEST PUSH2 0x1354 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x134B SWAP1 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1369 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1372 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AE SWAP1 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13C0 DUP6 PUSH2 0x1486 JUMP JUMPDEST PUSH2 0x13FF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13F6 SWAP1 PUSH2 0x1D7B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1428 SWAP2 SWAP1 PUSH2 0x1E15 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1465 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x146A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x147A DUP3 DUP3 DUP7 PUSH2 0x14A9 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x14B9 JUMPI DUP3 SWAP1 POP PUSH2 0x1509 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x14CC JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1500 SWAP2 SWAP1 PUSH2 0x1E81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1531 PUSH2 0x1537 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1587 DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x15A3 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x15B6 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x15C9 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x15DC PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x15EF PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x1602 PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0xC0 DUP3 ADD MLOAD PUSH2 0x1615 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x1632 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x1645 PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x157E JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x1658 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x158D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x1674 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x161B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x168F DUP2 PUSH2 0x167A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16AA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1686 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16BE DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP2 EQ PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16DB DUP2 PUSH2 0x16B5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x16F8 JUMPI PUSH2 0x16F7 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1706 DUP6 DUP3 DUP7 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1717 DUP6 DUP3 DUP7 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x172A DUP2 PUSH2 0x1574 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1745 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1761 JUMPI PUSH2 0x1760 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x176F DUP5 DUP3 DUP6 ADD PUSH2 0x16CC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17A3 DUP3 PUSH2 0x1778 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17B3 DUP2 PUSH2 0x1798 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17CE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17DD DUP2 PUSH2 0x1798 JUMP JUMPDEST DUP2 EQ PUSH2 0x17E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17FA DUP2 PUSH2 0x17D4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1816 JUMPI PUSH2 0x1815 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1824 DUP5 DUP3 DUP6 ADD PUSH2 0x17EB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1867 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x1872 DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x18F0 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x18FB DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x190B JUMPI PUSH2 0x190A PUSH2 0x18B6 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1921 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x192C DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x1961 JUMPI PUSH2 0x1960 PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B3 PUSH1 0x20 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x19BE DUP3 PUSH2 0x197D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19E2 DUP2 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A1F PUSH1 0x1F DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1A2A DUP3 PUSH2 0x19E9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1A4E DUP2 PUSH2 0x1A12 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1A6A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1A77 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1721 JUMP JUMPDEST PUSH2 0x1A84 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A97 DUP3 PUSH2 0x1574 JUMP JUMPDEST SWAP2 POP PUSH2 0x1AA2 DUP4 PUSH2 0x1574 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x1AB5 JUMPI PUSH2 0x1AB4 PUSH2 0x182D JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B1C PUSH1 0x26 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1B27 DUP3 PUSH2 0x1AC0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B4B DUP2 PUSH2 0x1B0F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B67 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1B74 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1B90 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1B9D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x17AA JUMP JUMPDEST PUSH2 0x1BAA PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x167A JUMP JUMPDEST DUP2 EQ PUSH2 0x1BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1BD8 DUP2 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1BF4 JUMPI PUSH2 0x1BF3 PUSH2 0x16B0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C02 DUP5 DUP3 DUP6 ADD PUSH2 0x1BC9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C67 PUSH1 0x2A DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1C72 DUP3 PUSH2 0x1C0B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C96 DUP2 PUSH2 0x1C5A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF9 PUSH1 0x26 DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1D04 DUP3 PUSH2 0x1C9D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D28 DUP2 PUSH2 0x1CEC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D65 PUSH1 0x1D DUP4 PUSH2 0x196C JUMP JUMPDEST SWAP2 POP PUSH2 0x1D70 DUP3 PUSH2 0x1D2F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D94 DUP2 PUSH2 0x1D58 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DCF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1DB4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1DDE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DEF DUP3 PUSH2 0x1D9B JUMP JUMPDEST PUSH2 0x1DF9 DUP2 DUP6 PUSH2 0x1DA6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1E09 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DB1 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E21 DUP3 DUP5 PUSH2 0x1DE4 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E53 DUP3 PUSH2 0x1E2C JUMP JUMPDEST PUSH2 0x1E5D DUP2 DUP6 PUSH2 0x196C JUMP JUMPDEST SWAP4 POP PUSH2 0x1E6D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x1E76 DUP2 PUSH2 0x1E37 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E9B DUP2 DUP5 PUSH2 0x1E48 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD2 0x28 0xB5 0xAC PUSH12 0x9DBCBF4D9DCED9822B61EB11 DUP11 COINBASE PUSH6 0xC1121066CBDD 0xC6 OR PUSH24 0x67185764736F6C634300080B003300000000000000000000 ",
							"sourceMap": "753:9168:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7268:1024;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1131:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9196:723;;;:::i;:::-;;1668:101:0;;;:::i;:::-;;3456:1236:6;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1066:26;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4698:306;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1163:28;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1036:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8770:95:6;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8871:134;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1098:27;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6262:1000;;;:::i;:::-;;1027:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8404:120;;;:::i;:::-;;8530:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1918:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7268:1024:6;7311:21;;:::i;:::-;7344:23;7370:12;:24;7383:10;7370:24;;;;;;;;;;;;;;;7344:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7490:1;7469:10;:17;;;:22;7465:85;;;7514:25;;;;;;;;;;;;;;7465:85;7559:29;7591:32;;;;;;;;7606:1;7591:32;;;;7609:1;7591:32;;;;7612:10;7591:32;;;7559:64;;7634:14;7651:33;7673:10;7651:21;:33::i;:::-;7634:50;;7727:15;7699:7;:13;;;:25;;;:43;7695:214;;;7893:4;7871:18;;7862:6;:27;;;;:::i;:::-;7861:36;;;;:::i;:::-;7836:4;7814:18;;7794:10;:17;;;:38;;;;:::i;:::-;7793:47;;;;:::i;:::-;7792:106;;;;:::i;:::-;7758:7;:15;;:140;;;;;7695:214;7967:1;7923:41;7937:10;:26;;;7923:13;:41::i;:::-;:45;7919:249;;;7984:15;8002:36;8020:10;:17;;;8002;:36::i;:::-;7984:54;;8085:7;8052;:13;;;:30;;:40;;;;;7970:133;7919:249;;;8156:1;8123:7;:13;;;:30;;:34;;;;;7919:249;8204:6;8178:7;:13;;;:23;;:32;;;;;8243:10;:17;;;8220:7;:20;;:40;;;;;8278:7;8271:14;;;;;7268:1024;:::o;1131:25::-;;;;;;;;;;;;;:::o;9196:723::-;3100:21;:19;:21::i;:::-;9309:24:::1;9336:12;:24;9349:10;9336:24;;;;;;;;;;;;;;;9309:51;;9395:1;9374:10;:17;;;:22;9370:85;;;9419:25;;;;;;;;;;;;;;9370:85;9489:1;9469:10;:17;;;:21;9465:448;;;9555:1;9510:41;9524:10;:26;;;9510:13;:41::i;:::-;:46;9506:121;;;9583:29;;;;;;;;;;;;;;9506:121;9671:1;9641:10;:27;;:31;;;;9715:15;9686:10;:26;;:44;;;;9745:157;9792:13;;;;;;;;;;;9824:10;9852:36;9870:10;:17;;;9852;:36::i;:::-;9745:22;:157::i;:::-;9465:448;9247:672;9196:723::o:0;1668:101:0:-;1259:12;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;3456:1236:6:-;1744:1:1;2325:7;;:19;;2317:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;;;;3761:1:6::1;3726:12;:24;3739:10;3726:24;;;;;;;;;;;;;;;:31;;;:36;3722:97;;3785:23;;;;;;;;;;;;;;3722:97;3864:1;3833:14;:27;3848:11;3833:27;;;;;;;;;;;;:32;3829:101;;;3888:31;;;;;;;;;;;;;;3829:101;4027:17;4047:15;4027:35;;4218:183;;;;;;;;4237:6;4218:183;;;;4257:9;4218:183;;;;4280:14;:27;4295:11;4280:27;;;;;;;;;;;;4218:183;;;;4336:9;4322:11;:23;;;;:::i;:::-;4218:183;;;;4360:1;4218:183;;;;4375:1;4218:183;;;;4390:1;4218:183;;::::0;4191:12:::1;:24;4204:10;4191:24;;;;;;;;;;;;;;;:210;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4412:142;4459:13;;;;;;;;;;;4487:10;4519:4;4538:6;4412:26;:142::i;:::-;4628:10;4621:64;;;4640:6;4648:9;4674;4660:11;:23;;;;:::i;:::-;4621:64;;;;;;;;:::i;:::-;;;;;;;;3530:1162;1701:1:1::0;2628:7;:22;;;;3456:1236:6;;:::o;1066:26::-;;;;:::o;4698:306::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;4856:2:6::1;4847:6;:11;4843:81;;;4881:32;;;;;;;;;;;;;;4843:81;4954:6;4933:18;:27;;;;4975:22;4990:6;4975:22;;;;;;:::i;:::-;;;;;;;;4698:306:::0;:::o;1163:28::-;;;;;;;;;;;;;:::o;1036:85:0:-;1082:7;1108:6;;;;;;;;;;;1101:13;;1036:85;:::o;8770:95:6:-;8817:7;8843:15;8836:22;;8770:95;:::o;8871:134::-;8934:7;8992:6;8979:9;8961:15;:27;;;;:::i;:::-;8960:38;;;;:::i;:::-;8953:45;;8871:134;;;:::o;1098:27::-;;;;:::o;6262:1000::-;1744:1:1;2325:7;;:19;;2317:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1744:1;2455:7;:18;;;;6427:23:6::1;6453:12;:24;6466:10;6453:24;;;;;;;;;;;;;;;6427:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;6512:1;6491:10;:17;;;:22;6487:85;;;6536:25;;;;;;;;;;;;;;6487:85;6582:14;6599:33;6621:10;6599:21;:33::i;:::-;6582:50;;6649:12;:24;6662:10;6649:24;;;;;;;;;;;;;;;;6642:31:::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6713:15;6688:10;:22;;;:40;6684:572;;;6762:22;6802::::0;6841:55:::1;6870:10;:17;;;6889:6;6841:28;:55::i;:::-;6744:152;;;;6911:154;6958:13;;;;;;;;;;;6990:10;7036:14;7019;:31;;;;:::i;:::-;6911:22;:154::i;:::-;6730:346;;6684:572;;;7096:149;7143:13;;;;;;;;;;;7175:10;7224:6;7204:10;:17;;;:26;;;;:::i;:::-;7096:22;:149::i;:::-;6684:572;6309:953;;1701:1:1::0;2628:7;:22;;;;6262:1000:6:o;1027:33::-;;;;:::o;8404:120::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8472:15:6::1;8457:12;:30;;;;8513:4;8497:13;;:20;;;;;;;;;;;;;;;;;;8404:120::o:0;8530:234::-;1259:12:0;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;8621:3:6::1;8612:6;:12;8608:83;;;8647:33;;;;;;;;;;;;;;8608:83;8714:6;8700:11;:20;;;;8735:22;8750:6;8735:22;;;;;;:::i;:::-;;;;;;;;8530:234:::0;:::o;1918:198:0:-;1259:12;:10;:12::i;:::-;1248:23;;:7;:5;:7::i;:::-;:23;;;1240:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;2026:1:::1;2006:22;;:8;:22;;;;1998:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2081:28;2100:8;2081:18;:28::i;:::-;1918:198:::0;:::o;5247:367:6:-;5350:7;5603:4;5556:43;5582:10;:16;;;5556:25;:43::i;:::-;5517:10;:20;;;5481:10;:17;;;:56;;;;:::i;:::-;:118;;;;:::i;:::-;5480:127;;;;:::i;:::-;5461:146;;5247:367;;;:::o;9011:179::-;9106:7;9175:8;9167:4;9152:11;;9138;:25;;;;:::i;:::-;9137:34;;;;:::i;:::-;9136:47;;;;:::i;:::-;9129:54;;9011:179;;;:::o;2921:134::-;2981:13;;;;;;;;;;;2976:73;;3017:21;;;;;;;;;;;;;;2976:73;2921:134::o;701:205:3:-;813:86;833:5;863:23;;;888:2;892:5;840:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;813:19;:86::i;:::-;701:205;;;:::o;640:96:5:-;693:7;719:10;712:17;;640:96;:::o;2270:187:0:-;2343:16;2362:6;;;;;;;;;;;2343:25;;2387:8;2378:6;;:17;;;;;;;;;;;;;;;;;;2441:8;2410:40;;2431:8;2410:40;;;;;;;;;;;;2333:124;2270:187;:::o;912:241:3:-;1050:96;1070:5;1100:27;;;1129:4;1135:2;1139:5;1077:68;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1050:19;:96::i;:::-;912:241;;;;:::o;5620:295:6:-;5737:7;5746;5832:4;5810:18;;5801:6;:27;;;;:::i;:::-;5800:36;;;;:::i;:::-;5790:6;:47;;;;:::i;:::-;5893:4;5871:18;;5862:6;:27;;;;:::i;:::-;5861:36;;;;:::i;:::-;5851:6;:47;;;;:::i;:::-;5769:139;;;;5620:295;;;;;:::o;5010:231::-;5107:7;5226:8;5218:4;5209:5;5191:15;:23;;;;:::i;:::-;5190:32;;;;:::i;:::-;5189:45;;;;:::i;:::-;5182:52;;5010:231;;;:::o;3207:706:3:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;3652:27;;;;:69;;;;;:::i;:::-;3626:95;;3755:1;3735:10;:17;:21;3731:176;;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3731:176;3277:636;3207:706;;:::o;3861:223:4:-;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;5236:18;5247:6;5236:10;:18::i;:::-;5228:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;5300:12;5314:23;5341:6;:11;;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;;;;4948:499;;;;;;:::o;1175:320::-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7561:692::-;7707:12;7735:7;7731:516;;;7765:10;7758:17;;;;7731:516;7896:1;7876:10;:17;:21;7872:365;;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;;;;;;;;;;:::i;:::-;;;;;;;;7561:692;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:77:7:-;44:7;73:5;62:16;;7:77;;;:::o;90:108::-;167:24;185:5;167:24;:::i;:::-;162:3;155:37;90:108;;:::o;256:1404::-;387:4;382:3;378:14;476:4;469:5;465:16;459:23;495:63;552:4;547:3;543:14;529:12;495:63;:::i;:::-;402:166;651:4;644:5;640:16;634:23;670:63;727:4;722:3;718:14;704:12;670:63;:::i;:::-;578:165;830:4;823:5;819:16;813:23;849:63;906:4;901:3;897:14;883:12;849:63;:::i;:::-;753:169;1011:4;1004:5;1000:16;994:23;1030:63;1087:4;1082:3;1078:14;1064:12;1030:63;:::i;:::-;932:171;1190:4;1183:5;1179:16;1173:23;1209:63;1266:4;1261:3;1257:14;1243:12;1209:63;:::i;:::-;1113:169;1376:4;1369:5;1365:16;1359:23;1395:63;1452:4;1447:3;1443:14;1429:12;1395:63;:::i;:::-;1292:176;1561:4;1554:5;1550:16;1544:23;1580:63;1637:4;1632:3;1628:14;1614:12;1580:63;:::i;:::-;1478:175;356:1304;256:1404;;:::o;1736:751::-;1895:6;1890:3;1886:16;1992:4;1985:5;1981:16;1975:23;2011:63;2068:4;2063:3;2059:14;2045:12;2011:63;:::i;:::-;1912:172;2169:4;2162:5;2158:16;2152:23;2188:63;2245:4;2240:3;2236:14;2222:12;2188:63;:::i;:::-;2094:167;2344:4;2337:5;2333:16;2327:23;2363:107;2464:4;2459:3;2455:14;2441:12;2363:107;:::i;:::-;2271:209;1864:623;1736:751;;:::o;2493:347::-;2648:4;2686:3;2675:9;2671:19;2663:27;;2700:133;2830:1;2819:9;2815:17;2806:6;2700:133;:::i;:::-;2493:347;;;;:::o;2846:90::-;2880:7;2923:5;2916:13;2909:21;2898:32;;2846:90;;;:::o;2942:109::-;3023:21;3038:5;3023:21;:::i;:::-;3018:3;3011:34;2942:109;;:::o;3057:210::-;3144:4;3182:2;3171:9;3167:18;3159:26;;3195:65;3257:1;3246:9;3242:17;3233:6;3195:65;:::i;:::-;3057:210;;;;:::o;3354:117::-;3463:1;3460;3453:12;3600:122;3673:24;3691:5;3673:24;:::i;:::-;3666:5;3663:35;3653:63;;3712:1;3709;3702:12;3653:63;3600:122;:::o;3728:139::-;3774:5;3812:6;3799:20;3790:29;;3828:33;3855:5;3828:33;:::i;:::-;3728:139;;;;:::o;3873:474::-;3941:6;3949;3998:2;3986:9;3977:7;3973:23;3969:32;3966:119;;;4004:79;;:::i;:::-;3966:119;4124:1;4149:53;4194:7;4185:6;4174:9;4170:22;4149:53;:::i;:::-;4139:63;;4095:117;4251:2;4277:53;4322:7;4313:6;4302:9;4298:22;4277:53;:::i;:::-;4267:63;;4222:118;3873:474;;;;;:::o;4353:118::-;4440:24;4458:5;4440:24;:::i;:::-;4435:3;4428:37;4353:118;;:::o;4477:222::-;4570:4;4608:2;4597:9;4593:18;4585:26;;4621:71;4689:1;4678:9;4674:17;4665:6;4621:71;:::i;:::-;4477:222;;;;:::o;4705:329::-;4764:6;4813:2;4801:9;4792:7;4788:23;4784:32;4781:119;;;4819:79;;:::i;:::-;4781:119;4939:1;4964:53;5009:7;5000:6;4989:9;4985:22;4964:53;:::i;:::-;4954:63;;4910:117;4705:329;;;;:::o;5040:126::-;5077:7;5117:42;5110:5;5106:54;5095:65;;5040:126;;;:::o;5172:96::-;5209:7;5238:24;5256:5;5238:24;:::i;:::-;5227:35;;5172:96;;;:::o;5274:118::-;5361:24;5379:5;5361:24;:::i;:::-;5356:3;5349:37;5274:118;;:::o;5398:222::-;5491:4;5529:2;5518:9;5514:18;5506:26;;5542:71;5610:1;5599:9;5595:17;5586:6;5542:71;:::i;:::-;5398:222;;;;:::o;5626:122::-;5699:24;5717:5;5699:24;:::i;:::-;5692:5;5689:35;5679:63;;5738:1;5735;5728:12;5679:63;5626:122;:::o;5754:139::-;5800:5;5838:6;5825:20;5816:29;;5854:33;5881:5;5854:33;:::i;:::-;5754:139;;;;:::o;5899:329::-;5958:6;6007:2;5995:9;5986:7;5982:23;5978:32;5975:119;;;6013:79;;:::i;:::-;5975:119;6133:1;6158:53;6203:7;6194:6;6183:9;6179:22;6158:53;:::i;:::-;6148:63;;6104:117;5899:329;;;;:::o;6234:180::-;6282:77;6279:1;6272:88;6379:4;6376:1;6369:15;6403:4;6400:1;6393:15;6420:348;6460:7;6483:20;6501:1;6483:20;:::i;:::-;6478:25;;6517:20;6535:1;6517:20;:::i;:::-;6512:25;;6705:1;6637:66;6633:74;6630:1;6627:81;6622:1;6615:9;6608:17;6604:105;6601:131;;;6712:18;;:::i;:::-;6601:131;6760:1;6757;6753:9;6742:20;;6420:348;;;;:::o;6774:180::-;6822:77;6819:1;6812:88;6919:4;6916:1;6909:15;6943:4;6940:1;6933:15;6960:185;7000:1;7017:20;7035:1;7017:20;:::i;:::-;7012:25;;7051:20;7069:1;7051:20;:::i;:::-;7046:25;;7090:1;7080:35;;7095:18;;:::i;:::-;7080:35;7137:1;7134;7130:9;7125:14;;6960:185;;;;:::o;7151:305::-;7191:3;7210:20;7228:1;7210:20;:::i;:::-;7205:25;;7244:20;7262:1;7244:20;:::i;:::-;7239:25;;7398:1;7330:66;7326:74;7323:1;7320:81;7317:107;;;7404:18;;:::i;:::-;7317:107;7448:1;7445;7441:9;7434:16;;7151:305;;;;:::o;7462:169::-;7546:11;7580:6;7575:3;7568:19;7620:4;7615:3;7611:14;7596:29;;7462:169;;;;:::o;7637:182::-;7777:34;7773:1;7765:6;7761:14;7754:58;7637:182;:::o;7825:366::-;7967:3;7988:67;8052:2;8047:3;7988:67;:::i;:::-;7981:74;;8064:93;8153:3;8064:93;:::i;:::-;8182:2;8177:3;8173:12;8166:19;;7825:366;;;:::o;8197:419::-;8363:4;8401:2;8390:9;8386:18;8378:26;;8450:9;8444:4;8440:20;8436:1;8425:9;8421:17;8414:47;8478:131;8604:4;8478:131;:::i;:::-;8470:139;;8197:419;;;:::o;8622:181::-;8762:33;8758:1;8750:6;8746:14;8739:57;8622:181;:::o;8809:366::-;8951:3;8972:67;9036:2;9031:3;8972:67;:::i;:::-;8965:74;;9048:93;9137:3;9048:93;:::i;:::-;9166:2;9161:3;9157:12;9150:19;;8809:366;;;:::o;9181:419::-;9347:4;9385:2;9374:9;9370:18;9362:26;;9434:9;9428:4;9424:20;9420:1;9409:9;9405:17;9398:47;9462:131;9588:4;9462:131;:::i;:::-;9454:139;;9181:419;;;:::o;9606:442::-;9755:4;9793:2;9782:9;9778:18;9770:26;;9806:71;9874:1;9863:9;9859:17;9850:6;9806:71;:::i;:::-;9887:72;9955:2;9944:9;9940:18;9931:6;9887:72;:::i;:::-;9969;10037:2;10026:9;10022:18;10013:6;9969:72;:::i;:::-;9606:442;;;;;;:::o;10054:191::-;10094:4;10114:20;10132:1;10114:20;:::i;:::-;10109:25;;10148:20;10166:1;10148:20;:::i;:::-;10143:25;;10187:1;10184;10181:8;10178:34;;;10192:18;;:::i;:::-;10178:34;10237:1;10234;10230:9;10222:17;;10054:191;;;;:::o;10251:225::-;10391:34;10387:1;10379:6;10375:14;10368:58;10460:8;10455:2;10447:6;10443:15;10436:33;10251:225;:::o;10482:366::-;10624:3;10645:67;10709:2;10704:3;10645:67;:::i;:::-;10638:74;;10721:93;10810:3;10721:93;:::i;:::-;10839:2;10834:3;10830:12;10823:19;;10482:366;;;:::o;10854:419::-;11020:4;11058:2;11047:9;11043:18;11035:26;;11107:9;11101:4;11097:20;11093:1;11082:9;11078:17;11071:47;11135:131;11261:4;11135:131;:::i;:::-;11127:139;;10854:419;;;:::o;11279:332::-;11400:4;11438:2;11427:9;11423:18;11415:26;;11451:71;11519:1;11508:9;11504:17;11495:6;11451:71;:::i;:::-;11532:72;11600:2;11589:9;11585:18;11576:6;11532:72;:::i;:::-;11279:332;;;;;:::o;11617:442::-;11766:4;11804:2;11793:9;11789:18;11781:26;;11817:71;11885:1;11874:9;11870:17;11861:6;11817:71;:::i;:::-;11898:72;11966:2;11955:9;11951:18;11942:6;11898:72;:::i;:::-;11980;12048:2;12037:9;12033:18;12024:6;11980:72;:::i;:::-;11617:442;;;;;;:::o;12065:116::-;12135:21;12150:5;12135:21;:::i;:::-;12128:5;12125:32;12115:60;;12171:1;12168;12161:12;12115:60;12065:116;:::o;12187:137::-;12241:5;12272:6;12266:13;12257:22;;12288:30;12312:5;12288:30;:::i;:::-;12187:137;;;;:::o;12330:345::-;12397:6;12446:2;12434:9;12425:7;12421:23;12417:32;12414:119;;;12452:79;;:::i;:::-;12414:119;12572:1;12597:61;12650:7;12641:6;12630:9;12626:22;12597:61;:::i;:::-;12587:71;;12543:125;12330:345;;;;:::o;12681:229::-;12821:34;12817:1;12809:6;12805:14;12798:58;12890:12;12885:2;12877:6;12873:15;12866:37;12681:229;:::o;12916:366::-;13058:3;13079:67;13143:2;13138:3;13079:67;:::i;:::-;13072:74;;13155:93;13244:3;13155:93;:::i;:::-;13273:2;13268:3;13264:12;13257:19;;12916:366;;;:::o;13288:419::-;13454:4;13492:2;13481:9;13477:18;13469:26;;13541:9;13535:4;13531:20;13527:1;13516:9;13512:17;13505:47;13569:131;13695:4;13569:131;:::i;:::-;13561:139;;13288:419;;;:::o;13713:225::-;13853:34;13849:1;13841:6;13837:14;13830:58;13922:8;13917:2;13909:6;13905:15;13898:33;13713:225;:::o;13944:366::-;14086:3;14107:67;14171:2;14166:3;14107:67;:::i;:::-;14100:74;;14183:93;14272:3;14183:93;:::i;:::-;14301:2;14296:3;14292:12;14285:19;;13944:366;;;:::o;14316:419::-;14482:4;14520:2;14509:9;14505:18;14497:26;;14569:9;14563:4;14559:20;14555:1;14544:9;14540:17;14533:47;14597:131;14723:4;14597:131;:::i;:::-;14589:139;;14316:419;;;:::o;14741:179::-;14881:31;14877:1;14869:6;14865:14;14858:55;14741:179;:::o;14926:366::-;15068:3;15089:67;15153:2;15148:3;15089:67;:::i;:::-;15082:74;;15165:93;15254:3;15165:93;:::i;:::-;15283:2;15278:3;15274:12;15267:19;;14926:366;;;:::o;15298:419::-;15464:4;15502:2;15491:9;15487:18;15479:26;;15551:9;15545:4;15541:20;15537:1;15526:9;15522:17;15515:47;15579:131;15705:4;15579:131;:::i;:::-;15571:139;;15298:419;;;:::o;15723:98::-;15774:6;15808:5;15802:12;15792:22;;15723:98;;;:::o;15827:147::-;15928:11;15965:3;15950:18;;15827:147;;;;:::o;15980:307::-;16048:1;16058:113;16072:6;16069:1;16066:13;16058:113;;;16157:1;16152:3;16148:11;16142:18;16138:1;16133:3;16129:11;16122:39;16094:2;16091:1;16087:10;16082:15;;16058:113;;;16189:6;16186:1;16183:13;16180:101;;;16269:1;16260:6;16255:3;16251:16;16244:27;16180:101;16029:258;15980:307;;;:::o;16293:373::-;16397:3;16425:38;16457:5;16425:38;:::i;:::-;16479:88;16560:6;16555:3;16479:88;:::i;:::-;16472:95;;16576:52;16621:6;16616:3;16609:4;16602:5;16598:16;16576:52;:::i;:::-;16653:6;16648:3;16644:16;16637:23;;16401:265;16293:373;;;;:::o;16672:271::-;16802:3;16824:93;16913:3;16904:6;16824:93;:::i;:::-;16817:100;;16934:3;16927:10;;16672:271;;;;:::o;16949:99::-;17001:6;17035:5;17029:12;17019:22;;16949:99;;;:::o;17054:102::-;17095:6;17146:2;17142:7;17137:2;17130:5;17126:14;17122:28;17112:38;;17054:102;;;:::o;17162:364::-;17250:3;17278:39;17311:5;17278:39;:::i;:::-;17333:71;17397:6;17392:3;17333:71;:::i;:::-;17326:78;;17413:52;17458:6;17453:3;17446:4;17439:5;17435:16;17413:52;:::i;:::-;17490:29;17512:6;17490:29;:::i;:::-;17485:3;17481:39;17474:46;;17254:272;17162:364;;;;:::o;17532:313::-;17645:4;17683:2;17672:9;17668:18;17660:26;;17732:9;17726:4;17722:20;17718:1;17707:9;17703:17;17696:47;17760:78;17833:4;17824:6;17760:78;:::i;:::-;17752:86;;17532:313;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1579400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"airdropRate()": "2474",
								"airdropSince()": "2518",
								"airdropStatus()": "2517",
								"blockTimestamp()": "381",
								"calculateWeek(uint256)": "infinite",
								"changeAirdropPercentage(uint256)": "infinite",
								"changePenaltyFee(uint256)": "infinite",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2545",
								"renounceOwnership()": "30464",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2473",
								"startAirdrop()": "48830",
								"token_address()": "2653",
								"transferOwnership(address)": "30833",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "infinite",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkAirdropStatus()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 950,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 940,
									"end": 952,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 940,
									"end": 952,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 921,
									"end": 939,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1318,
									"end": 1320,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1297,
									"end": 1315,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1297,
									"end": 1320,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1297,
									"end": 1320,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1297,
									"end": 1320,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1297,
									"end": 1320,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1344,
									"end": 1346,
									"name": "PUSH",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1330,
									"end": 1341,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1330,
									"end": 1346,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1330,
									"end": 1346,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1330,
									"end": 1346,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1330,
									"end": 1346,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1373,
									"end": 1378,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1370,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1357,
									"end": 1370,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "PUSH",
									"source": 6,
									"value": "100"
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "EXP",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "MUL",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "NOT",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "MUL",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1357,
									"end": 1378,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1415,
									"end": 1416,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1389,
									"end": 1403,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1404,
									"end": 1411,
									"name": "PUSH",
									"source": 6,
									"value": "76A700"
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1389,
									"end": 1412,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1416,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1416,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1416,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1389,
									"end": 1416,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1453,
									"end": 1454,
									"name": "PUSH",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 1426,
									"end": 1440,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1441,
									"end": 1449,
									"name": "PUSH",
									"source": 6,
									"value": "ED4E00"
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1426,
									"end": 1450,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1454,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1454,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1454,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1426,
									"end": 1454,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1491,
									"end": 1492,
									"name": "PUSH",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 1464,
									"end": 1478,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1479,
									"end": 1487,
									"name": "PUSH",
									"source": 6,
									"value": "1E13380"
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1464,
									"end": 1488,
									"name": "KECCAK256",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1492,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1492,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1492,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1464,
									"end": 1492,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1198,
									"end": 1499,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 5,
									"value": "11"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 693,
									"end": 700,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 712,
									"end": 729,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2368,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2387,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2384,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2378,
									"end": 2384,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2441,
									"end": 2449,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2431,
									"end": 2439,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 7,
									"value": "21"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "30"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 7,
									"value": "30"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "32"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "21"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 7,
									"value": "32"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "33"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 7,
									"value": "33"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "35"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "22"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 7,
									"value": "35"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "37"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "38"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "18"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 7,
									"value": "38"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 7,
									"value": "37"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "39"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 7,
									"value": "39"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 753,
									"end": 9921,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d228b5ac6b9dbcbf4d9dced9822b61eb118a4165c1121066cbddc6177767185764736f6c634300080b0033",
									".code": [
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "CB79C2E1"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "D5DBDF1B"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "tag",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "ADB61832"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "B5D9DF83"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "B87DA76D"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "8891CF0D"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "8C63F97F"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "10486B6A"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "2CF1A5FB"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "5B88349D"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 753,
											"end": 9921,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "37"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "tag",
											"source": 6,
											"value": "35"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "tag",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "tag",
											"source": 6,
											"value": "41"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "50"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "tag",
											"source": 6,
											"value": "54"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "tag",
											"source": 6,
											"value": "58"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "tag",
											"source": 6,
											"value": "63"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "tag",
											"source": 6,
											"value": "68"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "tag",
											"source": 6,
											"value": "69"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "tag",
											"source": 6,
											"value": "72"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "tag",
											"source": 6,
											"value": "71"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7311,
											"end": 7332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 7311,
											"end": 7332,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "79"
										},
										{
											"begin": 7311,
											"end": 7332,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7311,
											"end": 7332,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 7311,
											"end": 7332,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7367,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7370,
											"end": 7382,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7383,
											"end": 7393,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7370,
											"end": 7394,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7344,
											"end": 7394,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7490,
											"end": 7491,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7469,
											"end": 7479,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7469,
											"end": 7486,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7469,
											"end": 7486,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7469,
											"end": 7486,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7469,
											"end": 7491,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 7465,
											"end": 7550,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7465,
											"end": 7550,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 7465,
											"end": 7550,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7514,
											"end": 7539,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 7465,
											"end": 7550,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 7465,
											"end": 7550,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7559,
											"end": 7588,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7606,
											"end": 7607,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7609,
											"end": 7610,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7612,
											"end": 7622,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7591,
											"end": 7623,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7559,
											"end": 7623,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7559,
											"end": 7623,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7634,
											"end": 7648,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7651,
											"end": 7684,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 7673,
											"end": 7683,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7651,
											"end": 7672,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 7651,
											"end": 7684,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7651,
											"end": 7684,
											"name": "tag",
											"source": 6,
											"value": "82"
										},
										{
											"begin": 7651,
											"end": 7684,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7634,
											"end": 7684,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7634,
											"end": 7684,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7727,
											"end": 7742,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7706,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7712,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7699,
											"end": 7712,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7712,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7724,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7699,
											"end": 7724,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7724,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7742,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 7695,
											"end": 7909,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7695,
											"end": 7909,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 7695,
											"end": 7909,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7893,
											"end": 7897,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7871,
											"end": 7889,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7871,
											"end": 7889,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7868,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 7862,
											"end": 7889,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "tag",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 7861,
											"end": 7897,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7836,
											"end": 7840,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 7814,
											"end": 7832,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7814,
											"end": 7832,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7804,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7811,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7794,
											"end": 7811,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7811,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "tag",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 7794,
											"end": 7832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "tag",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 7793,
											"end": 7840,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 7792,
											"end": 7898,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7765,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7773,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7758,
											"end": 7773,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7898,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7898,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7898,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7898,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7758,
											"end": 7898,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7695,
											"end": 7909,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 7695,
											"end": 7909,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7967,
											"end": 7968,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7923,
											"end": 7964,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 7937,
											"end": 7947,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7963,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 7937,
											"end": 7963,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7937,
											"end": 7963,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7923,
											"end": 7936,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 7923,
											"end": 7964,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7923,
											"end": 7964,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 7923,
											"end": 7964,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7923,
											"end": 7968,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7984,
											"end": 7999,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8002,
											"end": 8038,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 8020,
											"end": 8030,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8020,
											"end": 8037,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8020,
											"end": 8037,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8020,
											"end": 8037,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8002,
											"end": 8019,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 8002,
											"end": 8038,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8002,
											"end": 8038,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 8002,
											"end": 8038,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7984,
											"end": 8038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7984,
											"end": 8038,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8085,
											"end": 8092,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8059,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8065,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8052,
											"end": 8065,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8065,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8082,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8052,
											"end": 8082,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8092,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8092,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8092,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8092,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8052,
											"end": 8092,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7970,
											"end": 8103,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8156,
											"end": 8157,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8123,
											"end": 8130,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8136,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8123,
											"end": 8136,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8136,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8153,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8123,
											"end": 8153,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8157,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8157,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8157,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8157,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8157,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 7919,
											"end": 8168,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8204,
											"end": 8210,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8185,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8178,
											"end": 8191,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8201,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8178,
											"end": 8201,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8210,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8210,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8210,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8210,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8178,
											"end": 8210,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8253,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8260,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8243,
											"end": 8260,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8260,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8227,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8240,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8220,
											"end": 8240,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8260,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8260,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8260,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8260,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8220,
											"end": 8260,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8278,
											"end": 8285,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8271,
											"end": 8285,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7268,
											"end": 8292,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "tag",
											"source": 6,
											"value": "28"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1156,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 3100,
											"end": 3119,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 3100,
											"end": 3121,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9309,
											"end": 9333,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9336,
											"end": 9348,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9349,
											"end": 9359,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9336,
											"end": 9360,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 9309,
											"end": 9360,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9309,
											"end": 9360,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9395,
											"end": 9396,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9374,
											"end": 9384,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9374,
											"end": 9391,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9374,
											"end": 9391,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9374,
											"end": 9391,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9374,
											"end": 9396,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 9370,
											"end": 9455,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9370,
											"end": 9455,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 9370,
											"end": 9455,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9419,
											"end": 9444,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9370,
											"end": 9455,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 9370,
											"end": 9455,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9489,
											"end": 9490,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9469,
											"end": 9479,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9469,
											"end": 9486,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9469,
											"end": 9486,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9469,
											"end": 9486,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9469,
											"end": 9490,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9465,
											"end": 9913,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9465,
											"end": 9913,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 9465,
											"end": 9913,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9555,
											"end": 9556,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9510,
											"end": 9551,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 9524,
											"end": 9534,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9524,
											"end": 9550,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 9524,
											"end": 9550,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9524,
											"end": 9550,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9510,
											"end": 9523,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 9510,
											"end": 9551,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9510,
											"end": 9551,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 9510,
											"end": 9551,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9510,
											"end": 9556,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 9506,
											"end": 9627,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9506,
											"end": 9627,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 9506,
											"end": 9627,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "PUSH",
											"source": 6,
											"value": "DD8456CC00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9583,
											"end": 9612,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9506,
											"end": 9627,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 9506,
											"end": 9627,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9671,
											"end": 9672,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9641,
											"end": 9651,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9641,
											"end": 9668,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 9641,
											"end": 9668,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9641,
											"end": 9672,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9641,
											"end": 9672,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9641,
											"end": 9672,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9641,
											"end": 9672,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9715,
											"end": 9730,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9696,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9712,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 9686,
											"end": 9712,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9730,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9730,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9730,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9686,
											"end": 9730,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9745,
											"end": 9902,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9792,
											"end": 9805,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 9824,
											"end": 9834,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 9852,
											"end": 9888,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 9870,
											"end": 9880,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9870,
											"end": 9887,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9870,
											"end": 9887,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9870,
											"end": 9887,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9852,
											"end": 9869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 9852,
											"end": 9888,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9852,
											"end": 9888,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 9852,
											"end": 9888,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9745,
											"end": 9767,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 9745,
											"end": 9902,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9745,
											"end": 9902,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9745,
											"end": 9902,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9465,
											"end": 9913,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 9465,
											"end": 9913,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9247,
											"end": 9919,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9196,
											"end": 9919,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3761,
											"end": 3762,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3738,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3739,
											"end": 3749,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3750,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3757,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3726,
											"end": 3757,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3757,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3762,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3722,
											"end": 3819,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3722,
											"end": 3819,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "PUSH",
											"source": 6,
											"value": "4462D2700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3785,
											"end": 3808,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3722,
											"end": 3819,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 3722,
											"end": 3819,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3864,
											"end": 3865,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3847,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3848,
											"end": 3859,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3860,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 3833,
											"end": 3865,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 3829,
											"end": 3930,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3829,
											"end": 3930,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3829,
											"end": 3930,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "PUSH",
											"source": 6,
											"value": "95377BE400000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3919,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 3829,
											"end": 3930,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 3829,
											"end": 3930,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4027,
											"end": 4044,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4047,
											"end": 4062,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 4027,
											"end": 4062,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4027,
											"end": 4062,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4237,
											"end": 4243,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4257,
											"end": 4266,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4294,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4295,
											"end": 4306,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4280,
											"end": 4307,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4336,
											"end": 4345,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4322,
											"end": 4333,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4360,
											"end": 4361,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4375,
											"end": 4376,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4390,
											"end": 4391,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4218,
											"end": 4401,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4203,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4204,
											"end": 4214,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4191,
											"end": 4401,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4459,
											"end": 4472,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4487,
											"end": 4497,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4519,
											"end": 4523,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 4538,
											"end": 4544,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 4412,
											"end": 4438,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "128"
										},
										{
											"begin": 4412,
											"end": 4554,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4412,
											"end": 4554,
											"name": "tag",
											"source": 6,
											"value": "127"
										},
										{
											"begin": 4412,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4628,
											"end": 4638,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH",
											"source": 6,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 4640,
											"end": 4646,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4648,
											"end": 4657,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4674,
											"end": 4683,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4660,
											"end": 4671,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "tag",
											"source": 6,
											"value": "129"
										},
										{
											"begin": 4660,
											"end": 4683,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "131"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "tag",
											"source": 6,
											"value": "130"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4621,
											"end": 4685,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": 3530,
											"end": 4692,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3456,
											"end": 4692,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1066,
											"end": 1092,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "tag",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4856,
											"end": 4858,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 4847,
											"end": 4853,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4847,
											"end": 4858,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 4843,
											"end": 4924,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4843,
											"end": 4924,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4843,
											"end": 4924,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "PUSH",
											"source": 6,
											"value": "F1A470D700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4881,
											"end": 4913,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4843,
											"end": 4924,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 4843,
											"end": 4924,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4954,
											"end": 4960,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4933,
											"end": 4951,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 4933,
											"end": 4960,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4933,
											"end": 4960,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4933,
											"end": 4960,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 4933,
											"end": 4960,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "PUSH",
											"source": 6,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 4990,
											"end": 4996,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4975,
											"end": 4997,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4698,
											"end": 5004,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1163,
											"end": 1191,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1089,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1101,
											"end": 1114,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1101,
											"end": 1114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "tag",
											"source": 6,
											"value": "55"
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8817,
											"end": 8824,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8843,
											"end": 8858,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 8836,
											"end": 8858,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8836,
											"end": 8858,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8770,
											"end": 8865,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8934,
											"end": 8941,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8992,
											"end": 8998,
											"name": "PUSH",
											"source": 6,
											"value": "93A80"
										},
										{
											"begin": 8979,
											"end": 8988,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8961,
											"end": 8976,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "tag",
											"source": 6,
											"value": "143"
										},
										{
											"begin": 8961,
											"end": 8988,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "tag",
											"source": 6,
											"value": "145"
										},
										{
											"begin": 8960,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8953,
											"end": 8998,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8953,
											"end": 8998,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8871,
											"end": 9005,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "tag",
											"source": 6,
											"value": "62"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1098,
											"end": 1125,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "tag",
											"source": 6,
											"value": "65"
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "122"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6427,
											"end": 6450,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6453,
											"end": 6465,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6466,
											"end": 6476,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6453,
											"end": 6477,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6477,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6512,
											"end": 6513,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6491,
											"end": 6501,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6491,
											"end": 6508,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6491,
											"end": 6508,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6491,
											"end": 6508,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6491,
											"end": 6513,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 6487,
											"end": 6572,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6487,
											"end": 6572,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 6487,
											"end": 6572,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "PUSH",
											"source": 6,
											"value": "B018F08700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6536,
											"end": 6561,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 6487,
											"end": 6572,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 6487,
											"end": 6572,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6582,
											"end": 6596,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6599,
											"end": 6632,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 6621,
											"end": 6631,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6599,
											"end": 6620,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 6599,
											"end": 6632,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6599,
											"end": 6632,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 6599,
											"end": 6632,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6582,
											"end": 6632,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6582,
											"end": 6632,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6661,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6662,
											"end": 6672,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 6649,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6642,
											"end": 6673,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6713,
											"end": 6728,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6688,
											"end": 6698,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6688,
											"end": 6710,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 6688,
											"end": 6710,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6688,
											"end": 6710,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6688,
											"end": 6728,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6762,
											"end": 6784,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6802,
											"end": 6824,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 6870,
											"end": 6880,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6887,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6870,
											"end": 6887,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6870,
											"end": 6887,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6889,
											"end": 6895,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6841,
											"end": 6869,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 6841,
											"end": 6896,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6841,
											"end": 6896,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 6841,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6744,
											"end": 6896,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6744,
											"end": 6896,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6744,
											"end": 6896,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6744,
											"end": 6896,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6911,
											"end": 7065,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6958,
											"end": 6971,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 6990,
											"end": 7000,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7036,
											"end": 7050,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7019,
											"end": 7033,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 7019,
											"end": 7050,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6911,
											"end": 6933,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 6911,
											"end": 7065,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6911,
											"end": 7065,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 6911,
											"end": 7065,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6730,
											"end": 7076,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6730,
											"end": 7076,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7096,
											"end": 7245,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7143,
											"end": 7156,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7175,
											"end": 7185,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7224,
											"end": 7230,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7214,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7221,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7204,
											"end": 7221,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7221,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 7204,
											"end": 7230,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7096,
											"end": 7118,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 7096,
											"end": 7245,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7096,
											"end": 7245,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 7096,
											"end": 7245,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 6684,
											"end": 7256,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6309,
											"end": 7262,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6309,
											"end": 7262,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6262,
											"end": 7262,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1027,
											"end": 1060,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "tag",
											"source": 6,
											"value": "70"
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "162"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8472,
											"end": 8487,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8469,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8457,
											"end": 8487,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8487,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8487,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8457,
											"end": 8487,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8513,
											"end": 8517,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8497,
											"end": 8510,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8497,
											"end": 8510,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8497,
											"end": 8517,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8404,
											"end": 8524,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8621,
											"end": 8624,
											"name": "PUSH",
											"source": 6,
											"value": "C8"
										},
										{
											"begin": 8612,
											"end": 8618,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8612,
											"end": 8624,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8608,
											"end": 8691,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8608,
											"end": 8691,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 8608,
											"end": 8691,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "PUSH",
											"source": 6,
											"value": "A552CF1000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8647,
											"end": 8680,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8608,
											"end": 8691,
											"name": "tag",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 8608,
											"end": 8691,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8714,
											"end": 8720,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8711,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8700,
											"end": 8720,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8720,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8720,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 8700,
											"end": 8720,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "PUSH",
											"source": 6,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 8750,
											"end": 8756,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "42"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8757,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8530,
											"end": 8764,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1259,
											"end": 1269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 1259,
											"end": 1271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1248,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "tag",
											"source": 0,
											"value": "176"
										},
										{
											"begin": 1248,
											"end": 1255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2026,
											"end": 2027,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2014,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5350,
											"end": 5357,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5603,
											"end": 5607,
											"name": "PUSH",
											"source": 6,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 5556,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 5582,
											"end": 5592,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5582,
											"end": 5598,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5582,
											"end": 5598,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5582,
											"end": 5598,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5556,
											"end": 5581,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 5556,
											"end": 5599,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5556,
											"end": 5599,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 5556,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5517,
											"end": 5527,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5517,
											"end": 5537,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5517,
											"end": 5537,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5517,
											"end": 5537,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5491,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5498,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5481,
											"end": 5498,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5498,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 5481,
											"end": 5537,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "tag",
											"source": 6,
											"value": "188"
										},
										{
											"begin": 5481,
											"end": 5599,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 5480,
											"end": 5607,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5461,
											"end": 5607,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5461,
											"end": 5607,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5247,
											"end": 5614,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "tag",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9106,
											"end": 9113,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9175,
											"end": 9183,
											"name": "PUSH",
											"source": 6,
											"value": "1DFE200"
										},
										{
											"begin": 9167,
											"end": 9171,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 9152,
											"end": 9163,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9152,
											"end": 9163,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 9138,
											"end": 9149,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 9138,
											"end": 9163,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 9137,
											"end": 9171,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "tag",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 9136,
											"end": 9183,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9129,
											"end": 9183,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9129,
											"end": 9183,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 9011,
											"end": 9190,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2921,
											"end": 3055,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2921,
											"end": 3055,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "PUSH",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "EXP",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2981,
											"end": 2994,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2976,
											"end": 3049,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 2976,
											"end": 3049,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "PUSH",
											"source": 6,
											"value": "D4A7CB1900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3017,
											"end": 3038,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 2976,
											"end": 3049,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 2976,
											"end": 3049,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2921,
											"end": 3055,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 863,
											"end": 886,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 888,
											"end": 890,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 892,
											"end": 897,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "tag",
											"source": 3,
											"value": "198"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 813,
											"end": 832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "111"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 693,
											"end": 700,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 712,
											"end": 729,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2368,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2387,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2384,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2378,
											"end": 2384,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2449,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2431,
											"end": 2439,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1129,
											"end": 1133,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1135,
											"end": 1137,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1139,
											"end": 1144,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "206"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "tag",
											"source": 3,
											"value": "205"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5737,
											"end": 5744,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5746,
											"end": 5753,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5832,
											"end": 5836,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 5810,
											"end": 5828,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5810,
											"end": 5828,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5801,
											"end": 5807,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "tag",
											"source": 6,
											"value": "208"
										},
										{
											"begin": 5801,
											"end": 5828,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 5800,
											"end": 5836,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5790,
											"end": 5796,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 5790,
											"end": 5837,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5893,
											"end": 5897,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 5871,
											"end": 5889,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5871,
											"end": 5889,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5862,
											"end": 5868,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 5862,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "tag",
											"source": 6,
											"value": "212"
										},
										{
											"begin": 5861,
											"end": 5897,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5851,
											"end": 5857,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "tag",
											"source": 6,
											"value": "213"
										},
										{
											"begin": 5851,
											"end": 5898,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5769,
											"end": 5908,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5769,
											"end": 5908,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5769,
											"end": 5908,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5769,
											"end": 5908,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5620,
											"end": 5915,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5107,
											"end": 5114,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5226,
											"end": 5234,
											"name": "PUSH",
											"source": 6,
											"value": "1E13380"
										},
										{
											"begin": 5218,
											"end": 5222,
											"name": "PUSH",
											"source": 6,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 5209,
											"end": 5214,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5191,
											"end": 5206,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 5191,
											"end": 5214,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 5190,
											"end": 5222,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 5189,
											"end": 5234,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5182,
											"end": 5234,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5182,
											"end": 5234,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5010,
											"end": 5241,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3755,
											"end": 3756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3735,
											"end": 3745,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "tag",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "tag",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3277,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "220"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "228"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "229"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "228"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "229"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "233"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "232"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "231"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 5247,
											"end": 5253,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5236,
											"end": 5246,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 5236,
											"end": 5254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "237"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "236"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "239"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "243"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "245"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "tag",
											"source": 4,
											"value": "235"
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1487,
											"end": 1488,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1472,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1488,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1488,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1175,
											"end": 1495,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "245"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "247"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7896,
											"end": 7897,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7876,
											"end": 7886,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "250"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "tag",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "247"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "255"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "254"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "255"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "tag",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 44,
											"end": 51,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 73,
											"end": 78,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 62,
											"end": 78,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 62,
											"end": 78,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7,
											"end": 84,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 90,
											"end": 198,
											"name": "tag",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 90,
											"end": 198,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 167,
											"end": 191,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 185,
											"end": 190,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 167,
											"end": 191,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "tag",
											"source": 7,
											"value": "300"
										},
										{
											"begin": 167,
											"end": 191,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 162,
											"end": 165,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 155,
											"end": 192,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 90,
											"end": 198,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "tag",
											"source": 7,
											"value": "258"
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 387,
											"end": 391,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 382,
											"end": 385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 378,
											"end": 392,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 476,
											"end": 480,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 474,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 465,
											"end": 481,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 459,
											"end": 482,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 495,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 552,
											"end": 556,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 547,
											"end": 550,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 543,
											"end": 557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 529,
											"end": 541,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 495,
											"end": 558,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "tag",
											"source": 7,
											"value": "302"
										},
										{
											"begin": 495,
											"end": 558,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 402,
											"end": 568,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 651,
											"end": 655,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 644,
											"end": 649,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 640,
											"end": 656,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 670,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "303"
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 722,
											"end": 725,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 718,
											"end": 732,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 704,
											"end": 716,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 670,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "tag",
											"source": 7,
											"value": "303"
										},
										{
											"begin": 670,
											"end": 733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 578,
											"end": 743,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 830,
											"end": 834,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 819,
											"end": 835,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 813,
											"end": 836,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 849,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 906,
											"end": 910,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 901,
											"end": 904,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 897,
											"end": 911,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 883,
											"end": 895,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 849,
											"end": 912,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "tag",
											"source": 7,
											"value": "304"
										},
										{
											"begin": 849,
											"end": 912,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 753,
											"end": 922,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1011,
											"end": 1015,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1000,
											"end": 1016,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 994,
											"end": 1017,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 1087,
											"end": 1091,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1082,
											"end": 1085,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1092,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1076,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "tag",
											"source": 7,
											"value": "305"
										},
										{
											"begin": 1030,
											"end": 1093,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 932,
											"end": 1103,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1190,
											"end": 1194,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1183,
											"end": 1188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1179,
											"end": 1195,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1173,
											"end": 1196,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "306"
										},
										{
											"begin": 1266,
											"end": 1270,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1261,
											"end": 1264,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1257,
											"end": 1271,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1243,
											"end": 1255,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "tag",
											"source": 7,
											"value": "306"
										},
										{
											"begin": 1209,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1113,
											"end": 1282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1376,
											"end": 1380,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1369,
											"end": 1374,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1365,
											"end": 1381,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1359,
											"end": 1382,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 1452,
											"end": 1456,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 1447,
											"end": 1450,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1443,
											"end": 1457,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1429,
											"end": 1441,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "tag",
											"source": 7,
											"value": "307"
										},
										{
											"begin": 1395,
											"end": 1458,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1468,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1561,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1554,
											"end": 1559,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1550,
											"end": 1566,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1544,
											"end": 1567,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 1637,
											"end": 1641,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 1632,
											"end": 1635,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1628,
											"end": 1642,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1614,
											"end": 1626,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "tag",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 1580,
											"end": 1643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1478,
											"end": 1653,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 356,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 256,
											"end": 1660,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "tag",
											"source": 7,
											"value": "259"
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1895,
											"end": 1901,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 1890,
											"end": 1893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1886,
											"end": 1902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1992,
											"end": 1996,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1985,
											"end": 1990,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1981,
											"end": 1997,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1975,
											"end": 1998,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 2068,
											"end": 2072,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2063,
											"end": 2066,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2059,
											"end": 2073,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2045,
											"end": 2057,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "tag",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 2011,
											"end": 2074,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1912,
											"end": 2084,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2169,
											"end": 2173,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2162,
											"end": 2167,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2158,
											"end": 2174,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2175,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 2245,
											"end": 2249,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2240,
											"end": 2243,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2236,
											"end": 2250,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2222,
											"end": 2234,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "257"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "tag",
											"source": 7,
											"value": "311"
										},
										{
											"begin": 2188,
											"end": 2251,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2094,
											"end": 2261,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2344,
											"end": 2348,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2337,
											"end": 2342,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2333,
											"end": 2349,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "312"
										},
										{
											"begin": 2464,
											"end": 2468,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2459,
											"end": 2462,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2455,
											"end": 2469,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2441,
											"end": 2453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "258"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "tag",
											"source": 7,
											"value": "312"
										},
										{
											"begin": 2363,
											"end": 2470,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2271,
											"end": 2480,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1864,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1736,
											"end": 2487,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2648,
											"end": 2652,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2686,
											"end": 2689,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 2675,
											"end": 2684,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2671,
											"end": 2690,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2663,
											"end": 2690,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2663,
											"end": 2690,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 2830,
											"end": 2831,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2819,
											"end": 2828,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2815,
											"end": 2832,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2806,
											"end": 2812,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "259"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "tag",
											"source": 7,
											"value": "314"
										},
										{
											"begin": 2700,
											"end": 2833,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2840,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "tag",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2880,
											"end": 2887,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2923,
											"end": 2928,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2916,
											"end": 2929,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2909,
											"end": 2930,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2898,
											"end": 2930,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2898,
											"end": 2930,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2846,
											"end": 2936,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2942,
											"end": 3051,
											"name": "tag",
											"source": 7,
											"value": "261"
										},
										{
											"begin": 2942,
											"end": 3051,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3023,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 3038,
											"end": 3043,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3023,
											"end": 3044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 3023,
											"end": 3044,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3023,
											"end": 3044,
											"name": "tag",
											"source": 7,
											"value": "317"
										},
										{
											"begin": 3023,
											"end": 3044,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3018,
											"end": 3021,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3011,
											"end": 3045,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 3051,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 3051,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2942,
											"end": 3051,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3144,
											"end": 3148,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3182,
											"end": 3184,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3171,
											"end": 3180,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3167,
											"end": 3185,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3159,
											"end": 3185,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3159,
											"end": 3185,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3195,
											"end": 3260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "319"
										},
										{
											"begin": 3257,
											"end": 3258,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3246,
											"end": 3255,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3242,
											"end": 3259,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3233,
											"end": 3239,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3195,
											"end": 3260,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "261"
										},
										{
											"begin": 3195,
											"end": 3260,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3195,
											"end": 3260,
											"name": "tag",
											"source": 7,
											"value": "319"
										},
										{
											"begin": 3195,
											"end": 3260,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3057,
											"end": 3267,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3354,
											"end": 3471,
											"name": "tag",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 3354,
											"end": 3471,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3463,
											"end": 3464,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3460,
											"end": 3461,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3453,
											"end": 3465,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3600,
											"end": 3722,
											"name": "tag",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 3600,
											"end": 3722,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3697,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "324"
										},
										{
											"begin": 3691,
											"end": 3696,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3697,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 3673,
											"end": 3697,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3673,
											"end": 3697,
											"name": "tag",
											"source": 7,
											"value": "324"
										},
										{
											"begin": 3673,
											"end": 3697,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3666,
											"end": 3671,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3663,
											"end": 3698,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3716,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 3653,
											"end": 3716,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3712,
											"end": 3713,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3709,
											"end": 3710,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3702,
											"end": 3714,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3653,
											"end": 3716,
											"name": "tag",
											"source": 7,
											"value": "325"
										},
										{
											"begin": 3653,
											"end": 3716,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3600,
											"end": 3722,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3600,
											"end": 3722,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "tag",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3774,
											"end": 3779,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3812,
											"end": 3818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3799,
											"end": 3819,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3790,
											"end": 3819,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3790,
											"end": 3819,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3828,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "327"
										},
										{
											"begin": 3855,
											"end": 3860,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3828,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "265"
										},
										{
											"begin": 3828,
											"end": 3861,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3828,
											"end": 3861,
											"name": "tag",
											"source": 7,
											"value": "327"
										},
										{
											"begin": 3828,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3728,
											"end": 3867,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3941,
											"end": 3947,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3949,
											"end": 3955,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3998,
											"end": 4000,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3986,
											"end": 3995,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3977,
											"end": 3984,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3973,
											"end": 3996,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3969,
											"end": 4001,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3966,
											"end": 4085,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3966,
											"end": 4085,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "329"
										},
										{
											"begin": 3966,
											"end": 4085,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4004,
											"end": 4083,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 4004,
											"end": 4083,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 4004,
											"end": 4083,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4004,
											"end": 4083,
											"name": "tag",
											"source": 7,
											"value": "330"
										},
										{
											"begin": 4004,
											"end": 4083,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3966,
											"end": 4085,
											"name": "tag",
											"source": 7,
											"value": "329"
										},
										{
											"begin": 3966,
											"end": 4085,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4124,
											"end": 4125,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4149,
											"end": 4202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 4194,
											"end": 4201,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4185,
											"end": 4191,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4174,
											"end": 4183,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4192,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4149,
											"end": 4202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 4149,
											"end": 4202,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4149,
											"end": 4202,
											"name": "tag",
											"source": 7,
											"value": "331"
										},
										{
											"begin": 4149,
											"end": 4202,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4139,
											"end": 4202,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4139,
											"end": 4202,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4095,
											"end": 4212,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4251,
											"end": 4253,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4277,
											"end": 4330,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "332"
										},
										{
											"begin": 4322,
											"end": 4329,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4313,
											"end": 4319,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4302,
											"end": 4311,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 4298,
											"end": 4320,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4277,
											"end": 4330,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 4277,
											"end": 4330,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4277,
											"end": 4330,
											"name": "tag",
											"source": 7,
											"value": "332"
										},
										{
											"begin": 4277,
											"end": 4330,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4267,
											"end": 4330,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4340,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3873,
											"end": 4347,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4353,
											"end": 4471,
											"name": "tag",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 4353,
											"end": 4471,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "334"
										},
										{
											"begin": 4458,
											"end": 4463,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4440,
											"end": 4464,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 4440,
											"end": 4464,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4440,
											"end": 4464,
											"name": "tag",
											"source": 7,
											"value": "334"
										},
										{
											"begin": 4440,
											"end": 4464,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4435,
											"end": 4438,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4428,
											"end": 4465,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4353,
											"end": 4471,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4353,
											"end": 4471,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4353,
											"end": 4471,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4574,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4608,
											"end": 4610,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4597,
											"end": 4606,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4593,
											"end": 4611,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4585,
											"end": 4611,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4585,
											"end": 4611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4621,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 4689,
											"end": 4690,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4678,
											"end": 4687,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4674,
											"end": 4691,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4665,
											"end": 4671,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4621,
											"end": 4692,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 4621,
											"end": 4692,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4621,
											"end": 4692,
											"name": "tag",
											"source": 7,
											"value": "336"
										},
										{
											"begin": 4621,
											"end": 4692,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4477,
											"end": 4699,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4764,
											"end": 4770,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4813,
											"end": 4815,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4801,
											"end": 4810,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4792,
											"end": 4799,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4788,
											"end": 4811,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4784,
											"end": 4816,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 4781,
											"end": 4900,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4781,
											"end": 4900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 4781,
											"end": 4900,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4819,
											"end": 4898,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "339"
										},
										{
											"begin": 4819,
											"end": 4898,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 4819,
											"end": 4898,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4819,
											"end": 4898,
											"name": "tag",
											"source": 7,
											"value": "339"
										},
										{
											"begin": 4819,
											"end": 4898,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4781,
											"end": 4900,
											"name": "tag",
											"source": 7,
											"value": "338"
										},
										{
											"begin": 4781,
											"end": 4900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4939,
											"end": 4940,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4964,
											"end": 5017,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 5009,
											"end": 5016,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5000,
											"end": 5006,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4989,
											"end": 4998,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4985,
											"end": 5007,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4964,
											"end": 5017,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 4964,
											"end": 5017,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4964,
											"end": 5017,
											"name": "tag",
											"source": 7,
											"value": "340"
										},
										{
											"begin": 4964,
											"end": 5017,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4954,
											"end": 5017,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4954,
											"end": 5017,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4910,
											"end": 5027,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4705,
											"end": 5034,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "tag",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5077,
											"end": 5084,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5117,
											"end": 5159,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5110,
											"end": 5115,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5106,
											"end": 5160,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5095,
											"end": 5160,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5095,
											"end": 5160,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5040,
											"end": 5166,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5209,
											"end": 5216,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5238,
											"end": 5262,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 5256,
											"end": 5261,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5238,
											"end": 5262,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "268"
										},
										{
											"begin": 5238,
											"end": 5262,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5238,
											"end": 5262,
											"name": "tag",
											"source": 7,
											"value": "343"
										},
										{
											"begin": 5238,
											"end": 5262,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5262,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5227,
											"end": 5262,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5172,
											"end": 5268,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5274,
											"end": 5392,
											"name": "tag",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 5274,
											"end": 5392,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5361,
											"end": 5385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 5379,
											"end": 5384,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5361,
											"end": 5385,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5361,
											"end": 5385,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5361,
											"end": 5385,
											"name": "tag",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 5361,
											"end": 5385,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5356,
											"end": 5359,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5349,
											"end": 5386,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5274,
											"end": 5392,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5274,
											"end": 5392,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5274,
											"end": 5392,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5491,
											"end": 5495,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5529,
											"end": 5531,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5518,
											"end": 5527,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5514,
											"end": 5532,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5506,
											"end": 5532,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5506,
											"end": 5532,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5542,
											"end": 5613,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "347"
										},
										{
											"begin": 5610,
											"end": 5611,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5599,
											"end": 5608,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5595,
											"end": 5612,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5586,
											"end": 5592,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5542,
											"end": 5613,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 5542,
											"end": 5613,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5542,
											"end": 5613,
											"name": "tag",
											"source": 7,
											"value": "347"
										},
										{
											"begin": 5542,
											"end": 5613,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5398,
											"end": 5620,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5626,
											"end": 5748,
											"name": "tag",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 5626,
											"end": 5748,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5699,
											"end": 5723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "349"
										},
										{
											"begin": 5717,
											"end": 5722,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5699,
											"end": 5723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 5699,
											"end": 5723,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5699,
											"end": 5723,
											"name": "tag",
											"source": 7,
											"value": "349"
										},
										{
											"begin": 5699,
											"end": 5723,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5692,
											"end": 5697,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5689,
											"end": 5724,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5679,
											"end": 5742,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "350"
										},
										{
											"begin": 5679,
											"end": 5742,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5738,
											"end": 5739,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5735,
											"end": 5736,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5728,
											"end": 5740,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5679,
											"end": 5742,
											"name": "tag",
											"source": 7,
											"value": "350"
										},
										{
											"begin": 5679,
											"end": 5742,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5626,
											"end": 5748,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5626,
											"end": 5748,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "tag",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5800,
											"end": 5805,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5838,
											"end": 5844,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5825,
											"end": 5845,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5816,
											"end": 5845,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5816,
											"end": 5845,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5854,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 5881,
											"end": 5886,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5854,
											"end": 5887,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "271"
										},
										{
											"begin": 5854,
											"end": 5887,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5854,
											"end": 5887,
											"name": "tag",
											"source": 7,
											"value": "352"
										},
										{
											"begin": 5854,
											"end": 5887,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5754,
											"end": 5893,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "tag",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5958,
											"end": 5964,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6007,
											"end": 6009,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5995,
											"end": 6004,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5986,
											"end": 5993,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5982,
											"end": 6005,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5978,
											"end": 6010,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 5975,
											"end": 6094,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5975,
											"end": 6094,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 5975,
											"end": 6094,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6013,
											"end": 6092,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 6013,
											"end": 6092,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 6013,
											"end": 6092,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6013,
											"end": 6092,
											"name": "tag",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 6013,
											"end": 6092,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5975,
											"end": 6094,
											"name": "tag",
											"source": 7,
											"value": "354"
										},
										{
											"begin": 5975,
											"end": 6094,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6133,
											"end": 6134,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6158,
											"end": 6211,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 6203,
											"end": 6210,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6194,
											"end": 6200,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6183,
											"end": 6192,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6179,
											"end": 6201,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6158,
											"end": 6211,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "272"
										},
										{
											"begin": 6158,
											"end": 6211,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6158,
											"end": 6211,
											"name": "tag",
											"source": 7,
											"value": "356"
										},
										{
											"begin": 6158,
											"end": 6211,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6148,
											"end": 6211,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6104,
											"end": 6221,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5899,
											"end": 6228,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6234,
											"end": 6414,
											"name": "tag",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 6234,
											"end": 6414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6282,
											"end": 6359,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6279,
											"end": 6280,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6272,
											"end": 6360,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6379,
											"end": 6383,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6369,
											"end": 6384,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6403,
											"end": 6407,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6400,
											"end": 6401,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6393,
											"end": 6408,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6460,
											"end": 6467,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "359"
										},
										{
											"begin": 6501,
											"end": 6502,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "tag",
											"source": 7,
											"value": "359"
										},
										{
											"begin": 6483,
											"end": 6503,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6478,
											"end": 6503,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6478,
											"end": 6503,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 6535,
											"end": 6536,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "tag",
											"source": 7,
											"value": "360"
										},
										{
											"begin": 6517,
											"end": 6537,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6512,
											"end": 6537,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6512,
											"end": 6537,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6705,
											"end": 6706,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6637,
											"end": 6703,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6633,
											"end": 6707,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 6630,
											"end": 6631,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6627,
											"end": 6708,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6622,
											"end": 6623,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6615,
											"end": 6624,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6608,
											"end": 6625,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6604,
											"end": 6709,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "tag",
											"source": 7,
											"value": "362"
										},
										{
											"begin": 6712,
											"end": 6730,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "tag",
											"source": 7,
											"value": "361"
										},
										{
											"begin": 6601,
											"end": 6732,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6760,
											"end": 6761,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6757,
											"end": 6758,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6753,
											"end": 6762,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 6742,
											"end": 6762,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6742,
											"end": 6762,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6420,
											"end": 6768,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6774,
											"end": 6954,
											"name": "tag",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 6774,
											"end": 6954,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6822,
											"end": 6899,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6819,
											"end": 6820,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6812,
											"end": 6900,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6919,
											"end": 6923,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 6916,
											"end": 6917,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6909,
											"end": 6924,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6943,
											"end": 6947,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6940,
											"end": 6941,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6933,
											"end": 6948,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7000,
											"end": 7001,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "365"
										},
										{
											"begin": 7035,
											"end": 7036,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "tag",
											"source": 7,
											"value": "365"
										},
										{
											"begin": 7017,
											"end": 7037,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7012,
											"end": 7037,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7012,
											"end": 7037,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 7069,
											"end": 7070,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "tag",
											"source": 7,
											"value": "366"
										},
										{
											"begin": 7051,
											"end": 7071,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7046,
											"end": 7071,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7046,
											"end": 7071,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7090,
											"end": 7091,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "368"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "274"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "tag",
											"source": 7,
											"value": "368"
										},
										{
											"begin": 7095,
											"end": 7113,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "tag",
											"source": 7,
											"value": "367"
										},
										{
											"begin": 7080,
											"end": 7115,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7137,
											"end": 7138,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7134,
											"end": 7135,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7130,
											"end": 7139,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 7125,
											"end": 7139,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7125,
											"end": 7139,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6960,
											"end": 7145,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7191,
											"end": 7194,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "370"
										},
										{
											"begin": 7228,
											"end": 7229,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "tag",
											"source": 7,
											"value": "370"
										},
										{
											"begin": 7210,
											"end": 7230,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7230,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7205,
											"end": 7230,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "371"
										},
										{
											"begin": 7262,
											"end": 7263,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "tag",
											"source": 7,
											"value": "371"
										},
										{
											"begin": 7244,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7239,
											"end": 7264,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7239,
											"end": 7264,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7398,
											"end": 7399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7330,
											"end": 7396,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7326,
											"end": 7400,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7323,
											"end": 7324,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7320,
											"end": 7401,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "tag",
											"source": 7,
											"value": "373"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "tag",
											"source": 7,
											"value": "372"
										},
										{
											"begin": 7317,
											"end": 7424,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7448,
											"end": 7449,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7445,
											"end": 7446,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7441,
											"end": 7450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7434,
											"end": 7450,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7434,
											"end": 7450,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7151,
											"end": 7456,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7546,
											"end": 7557,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7580,
											"end": 7586,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7575,
											"end": 7578,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7568,
											"end": 7587,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7620,
											"end": 7624,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7615,
											"end": 7618,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7611,
											"end": 7625,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7596,
											"end": 7625,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7596,
											"end": 7625,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7462,
											"end": 7631,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "tag",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7777,
											"end": 7811,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7773,
											"end": 7774,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7765,
											"end": 7771,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7754,
											"end": 7812,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7637,
											"end": 7819,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "tag",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7967,
											"end": 7970,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "377"
										},
										{
											"begin": 8052,
											"end": 8054,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8047,
											"end": 8050,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "tag",
											"source": 7,
											"value": "377"
										},
										{
											"begin": 7988,
											"end": 8055,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7981,
											"end": 8055,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7981,
											"end": 8055,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 8153,
											"end": 8156,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "276"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "tag",
											"source": 7,
											"value": "378"
										},
										{
											"begin": 8064,
											"end": 8157,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8182,
											"end": 8184,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8177,
											"end": 8180,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8173,
											"end": 8185,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8166,
											"end": 8185,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8166,
											"end": 8185,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7825,
											"end": 8191,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "tag",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8363,
											"end": 8367,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8401,
											"end": 8403,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8390,
											"end": 8399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8386,
											"end": 8404,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8378,
											"end": 8404,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8378,
											"end": 8404,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8450,
											"end": 8459,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8444,
											"end": 8448,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8440,
											"end": 8460,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8425,
											"end": 8434,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8421,
											"end": 8438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8414,
											"end": 8461,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 8604,
											"end": 8608,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "tag",
											"source": 7,
											"value": "380"
										},
										{
											"begin": 8478,
											"end": 8609,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8470,
											"end": 8609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8470,
											"end": 8609,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8197,
											"end": 8616,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "tag",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8762,
											"end": 8795,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 8758,
											"end": 8759,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8750,
											"end": 8756,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8746,
											"end": 8760,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8739,
											"end": 8796,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8622,
											"end": 8803,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "tag",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8951,
											"end": 8954,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "383"
										},
										{
											"begin": 9036,
											"end": 9038,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 9031,
											"end": 9034,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "tag",
											"source": 7,
											"value": "383"
										},
										{
											"begin": 8972,
											"end": 9039,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8965,
											"end": 9039,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8965,
											"end": 9039,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 9137,
											"end": 9140,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "278"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "tag",
											"source": 7,
											"value": "384"
										},
										{
											"begin": 9048,
											"end": 9141,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9166,
											"end": 9168,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9161,
											"end": 9164,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9157,
											"end": 9169,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9150,
											"end": 9169,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9150,
											"end": 9169,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8809,
											"end": 9175,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "tag",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9347,
											"end": 9351,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9385,
											"end": 9387,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9374,
											"end": 9383,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9370,
											"end": 9388,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9362,
											"end": 9388,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9362,
											"end": 9388,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9434,
											"end": 9443,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9428,
											"end": 9432,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9424,
											"end": 9444,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 9420,
											"end": 9421,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9409,
											"end": 9418,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9405,
											"end": 9422,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9398,
											"end": 9445,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "386"
										},
										{
											"begin": 9588,
											"end": 9592,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "279"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "tag",
											"source": 7,
											"value": "386"
										},
										{
											"begin": 9462,
											"end": 9593,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9454,
											"end": 9593,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9454,
											"end": 9593,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9181,
											"end": 9600,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9755,
											"end": 9759,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9793,
											"end": 9795,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 9782,
											"end": 9791,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 9778,
											"end": 9796,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9796,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9770,
											"end": 9796,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "388"
										},
										{
											"begin": 9874,
											"end": 9875,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9863,
											"end": 9872,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9859,
											"end": 9876,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9850,
											"end": 9856,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "tag",
											"source": 7,
											"value": "388"
										},
										{
											"begin": 9806,
											"end": 9877,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "389"
										},
										{
											"begin": 9955,
											"end": 9957,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9944,
											"end": 9953,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9931,
											"end": 9937,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "tag",
											"source": 7,
											"value": "389"
										},
										{
											"begin": 9887,
											"end": 9959,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "390"
										},
										{
											"begin": 10037,
											"end": 10039,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10026,
											"end": 10035,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10022,
											"end": 10040,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10013,
											"end": 10019,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "tag",
											"source": 7,
											"value": "390"
										},
										{
											"begin": 9969,
											"end": 10041,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9606,
											"end": 10048,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10094,
											"end": 10098,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "392"
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "tag",
											"source": 7,
											"value": "392"
										},
										{
											"begin": 10114,
											"end": 10134,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10109,
											"end": 10134,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10109,
											"end": 10134,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 10166,
											"end": 10167,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "256"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "tag",
											"source": 7,
											"value": "393"
										},
										{
											"begin": 10148,
											"end": 10168,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10143,
											"end": 10168,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10143,
											"end": 10168,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10187,
											"end": 10188,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10184,
											"end": 10185,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10181,
											"end": 10189,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "394"
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "273"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "tag",
											"source": 7,
											"value": "395"
										},
										{
											"begin": 10192,
											"end": 10210,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "tag",
											"source": 7,
											"value": "394"
										},
										{
											"begin": 10178,
											"end": 10212,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10237,
											"end": 10238,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10234,
											"end": 10235,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10230,
											"end": 10239,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10054,
											"end": 10245,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10391,
											"end": 10425,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 10387,
											"end": 10388,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10379,
											"end": 10385,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10375,
											"end": 10389,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10368,
											"end": 10426,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10460,
											"end": 10468,
											"name": "PUSH",
											"source": 7,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10455,
											"end": 10457,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10447,
											"end": 10453,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10443,
											"end": 10458,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10436,
											"end": 10469,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10251,
											"end": 10476,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "tag",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10624,
											"end": 10627,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "398"
										},
										{
											"begin": 10709,
											"end": 10711,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 10704,
											"end": 10707,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "tag",
											"source": 7,
											"value": "398"
										},
										{
											"begin": 10645,
											"end": 10712,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10638,
											"end": 10712,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10638,
											"end": 10712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 10810,
											"end": 10813,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "tag",
											"source": 7,
											"value": "399"
										},
										{
											"begin": 10721,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10839,
											"end": 10841,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10834,
											"end": 10837,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10830,
											"end": 10842,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10823,
											"end": 10842,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10823,
											"end": 10842,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10482,
											"end": 10848,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "tag",
											"source": 7,
											"value": "182"
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11020,
											"end": 11024,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11058,
											"end": 11060,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11047,
											"end": 11056,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11043,
											"end": 11061,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11035,
											"end": 11061,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11035,
											"end": 11061,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11107,
											"end": 11116,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11101,
											"end": 11105,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11097,
											"end": 11117,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11093,
											"end": 11094,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11082,
											"end": 11091,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11078,
											"end": 11095,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11071,
											"end": 11118,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 11261,
											"end": 11265,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "281"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "tag",
											"source": 7,
											"value": "401"
										},
										{
											"begin": 11135,
											"end": 11266,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11127,
											"end": 11266,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11127,
											"end": 11266,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10854,
											"end": 11273,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "tag",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11400,
											"end": 11404,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11438,
											"end": 11440,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11427,
											"end": 11436,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11423,
											"end": 11441,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11415,
											"end": 11441,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11415,
											"end": 11441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "403"
										},
										{
											"begin": 11519,
											"end": 11520,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11508,
											"end": 11517,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11504,
											"end": 11521,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11495,
											"end": 11501,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "tag",
											"source": 7,
											"value": "403"
										},
										{
											"begin": 11451,
											"end": 11522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 11600,
											"end": 11602,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11589,
											"end": 11598,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11585,
											"end": 11603,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11576,
											"end": 11582,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "tag",
											"source": 7,
											"value": "404"
										},
										{
											"begin": 11532,
											"end": 11604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11279,
											"end": 11611,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "tag",
											"source": 7,
											"value": "206"
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11766,
											"end": 11770,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11804,
											"end": 11806,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 11793,
											"end": 11802,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11789,
											"end": 11807,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11781,
											"end": 11807,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11781,
											"end": 11807,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 11885,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11874,
											"end": 11883,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11870,
											"end": 11887,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11861,
											"end": 11867,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "tag",
											"source": 7,
											"value": "406"
										},
										{
											"begin": 11817,
											"end": 11888,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "407"
										},
										{
											"begin": 11966,
											"end": 11968,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11955,
											"end": 11964,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11951,
											"end": 11969,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11942,
											"end": 11948,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "tag",
											"source": 7,
											"value": "407"
										},
										{
											"begin": 11898,
											"end": 11970,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "408"
										},
										{
											"begin": 12048,
											"end": 12050,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 12037,
											"end": 12046,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12033,
											"end": 12051,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12024,
											"end": 12030,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "267"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "tag",
											"source": 7,
											"value": "408"
										},
										{
											"begin": 11980,
											"end": 12052,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11617,
											"end": 12059,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "tag",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "410"
										},
										{
											"begin": 12150,
											"end": 12155,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "260"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "tag",
											"source": 7,
											"value": "410"
										},
										{
											"begin": 12135,
											"end": 12156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12128,
											"end": 12133,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12125,
											"end": 12157,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "411"
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12171,
											"end": 12172,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12168,
											"end": 12169,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12161,
											"end": 12173,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "tag",
											"source": 7,
											"value": "411"
										},
										{
											"begin": 12115,
											"end": 12175,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12065,
											"end": 12181,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "tag",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12241,
											"end": 12246,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12272,
											"end": 12278,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12266,
											"end": 12279,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12257,
											"end": 12279,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12257,
											"end": 12279,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 12312,
											"end": 12317,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "282"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "tag",
											"source": 7,
											"value": "413"
										},
										{
											"begin": 12288,
											"end": 12318,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12324,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12397,
											"end": 12403,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12446,
											"end": 12448,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12434,
											"end": 12443,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12425,
											"end": 12432,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12421,
											"end": 12444,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12417,
											"end": 12449,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "415"
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "416"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "263"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "tag",
											"source": 7,
											"value": "416"
										},
										{
											"begin": 12452,
											"end": 12531,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "tag",
											"source": 7,
											"value": "415"
										},
										{
											"begin": 12414,
											"end": 12533,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12572,
											"end": 12573,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "417"
										},
										{
											"begin": 12650,
											"end": 12657,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12641,
											"end": 12647,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12630,
											"end": 12639,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 12626,
											"end": 12648,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "283"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "tag",
											"source": 7,
											"value": "417"
										},
										{
											"begin": 12597,
											"end": 12658,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12587,
											"end": 12658,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12587,
											"end": 12658,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12543,
											"end": 12668,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12330,
											"end": 12675,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "tag",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12821,
											"end": 12855,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 12817,
											"end": 12818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12809,
											"end": 12815,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12805,
											"end": 12819,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12798,
											"end": 12856,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12890,
											"end": 12902,
											"name": "PUSH",
											"source": 7,
											"value": "6F74207375636365656400000000000000000000000000000000000000000000"
										},
										{
											"begin": 12885,
											"end": 12887,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12877,
											"end": 12883,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12873,
											"end": 12888,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12866,
											"end": 12903,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12681,
											"end": 12910,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "tag",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13058,
											"end": 13061,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 13143,
											"end": 13145,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 13138,
											"end": 13141,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "tag",
											"source": 7,
											"value": "420"
										},
										{
											"begin": 13079,
											"end": 13146,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13072,
											"end": 13146,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13072,
											"end": 13146,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "421"
										},
										{
											"begin": 13244,
											"end": 13247,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "284"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "tag",
											"source": 7,
											"value": "421"
										},
										{
											"begin": 13155,
											"end": 13248,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13273,
											"end": 13275,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13268,
											"end": 13271,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13264,
											"end": 13276,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13257,
											"end": 13276,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13257,
											"end": 13276,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12916,
											"end": 13282,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "tag",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13454,
											"end": 13458,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13492,
											"end": 13494,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13481,
											"end": 13490,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13477,
											"end": 13495,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13469,
											"end": 13495,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13469,
											"end": 13495,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13541,
											"end": 13550,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13535,
											"end": 13539,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13531,
											"end": 13551,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13527,
											"end": 13528,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13516,
											"end": 13525,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13512,
											"end": 13529,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13505,
											"end": 13552,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 13695,
											"end": 13699,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "285"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "tag",
											"source": 7,
											"value": "423"
										},
										{
											"begin": 13569,
											"end": 13700,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13561,
											"end": 13700,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13561,
											"end": 13700,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13288,
											"end": 13707,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13853,
											"end": 13887,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 13849,
											"end": 13850,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13841,
											"end": 13847,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13837,
											"end": 13851,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13830,
											"end": 13888,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13922,
											"end": 13930,
											"name": "PUSH",
											"source": 7,
											"value": "722063616C6C0000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13917,
											"end": 13919,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13909,
											"end": 13915,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13905,
											"end": 13920,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13898,
											"end": 13931,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13713,
											"end": 13938,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "tag",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14086,
											"end": 14089,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "426"
										},
										{
											"begin": 14171,
											"end": 14173,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 14166,
											"end": 14169,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "tag",
											"source": 7,
											"value": "426"
										},
										{
											"begin": 14107,
											"end": 14174,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14100,
											"end": 14174,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14100,
											"end": 14174,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "427"
										},
										{
											"begin": 14272,
											"end": 14275,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "tag",
											"source": 7,
											"value": "427"
										},
										{
											"begin": 14183,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14301,
											"end": 14303,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 14296,
											"end": 14299,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14292,
											"end": 14304,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14285,
											"end": 14304,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14285,
											"end": 14304,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13944,
											"end": 14310,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "tag",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14482,
											"end": 14486,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14520,
											"end": 14522,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 14509,
											"end": 14518,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14505,
											"end": 14523,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14497,
											"end": 14523,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14497,
											"end": 14523,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14569,
											"end": 14578,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14563,
											"end": 14567,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14559,
											"end": 14579,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 14555,
											"end": 14556,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14544,
											"end": 14553,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 14540,
											"end": 14557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14533,
											"end": 14580,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "429"
										},
										{
											"begin": 14723,
											"end": 14727,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "287"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "tag",
											"source": 7,
											"value": "429"
										},
										{
											"begin": 14597,
											"end": 14728,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14589,
											"end": 14728,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14589,
											"end": 14728,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14316,
											"end": 14735,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "tag",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 14881,
											"end": 14912,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 14877,
											"end": 14878,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 14869,
											"end": 14875,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 14865,
											"end": 14879,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 14858,
											"end": 14913,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14741,
											"end": 14920,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "tag",
											"source": 7,
											"value": "289"
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15068,
											"end": 15071,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "432"
										},
										{
											"begin": 15153,
											"end": 15155,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 15148,
											"end": 15151,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "tag",
											"source": 7,
											"value": "432"
										},
										{
											"begin": 15089,
											"end": 15156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15082,
											"end": 15156,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15082,
											"end": 15156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "433"
										},
										{
											"begin": 15254,
											"end": 15257,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "tag",
											"source": 7,
											"value": "433"
										},
										{
											"begin": 15165,
											"end": 15258,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15283,
											"end": 15285,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 15278,
											"end": 15281,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15274,
											"end": 15286,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15267,
											"end": 15286,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15267,
											"end": 15286,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14926,
											"end": 15292,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "tag",
											"source": 7,
											"value": "238"
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15464,
											"end": 15468,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15502,
											"end": 15504,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 15491,
											"end": 15500,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 15487,
											"end": 15505,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15479,
											"end": 15505,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15479,
											"end": 15505,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15551,
											"end": 15560,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15545,
											"end": 15549,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15541,
											"end": 15561,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 15537,
											"end": 15538,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15526,
											"end": 15535,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 15522,
											"end": 15539,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 15515,
											"end": 15562,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "435"
										},
										{
											"begin": 15705,
											"end": 15709,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "289"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "tag",
											"source": 7,
											"value": "435"
										},
										{
											"begin": 15579,
											"end": 15710,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15571,
											"end": 15710,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15571,
											"end": 15710,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15298,
											"end": 15717,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "tag",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15774,
											"end": 15780,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15808,
											"end": 15813,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15802,
											"end": 15814,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 15792,
											"end": 15814,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15792,
											"end": 15814,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15723,
											"end": 15821,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "tag",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 15928,
											"end": 15939,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 15965,
											"end": 15968,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 15950,
											"end": 15968,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 15950,
											"end": 15968,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15827,
											"end": 15974,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "tag",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16048,
											"end": 16049,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "tag",
											"source": 7,
											"value": "439"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16072,
											"end": 16078,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 16069,
											"end": 16070,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16066,
											"end": 16079,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "441"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 16157,
											"end": 16158,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 16152,
											"end": 16155,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16148,
											"end": 16159,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16142,
											"end": 16160,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 16138,
											"end": 16139,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16133,
											"end": 16136,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16129,
											"end": 16140,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16122,
											"end": 16161,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 16094,
											"end": 16096,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 16091,
											"end": 16092,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16087,
											"end": 16097,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16082,
											"end": 16097,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16082,
											"end": 16097,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "439"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "tag",
											"source": 7,
											"value": "441"
										},
										{
											"begin": 16058,
											"end": 16171,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16189,
											"end": 16195,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 16186,
											"end": 16187,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16183,
											"end": 16196,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "442"
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 16269,
											"end": 16270,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16260,
											"end": 16266,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16255,
											"end": 16258,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16251,
											"end": 16267,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16244,
											"end": 16271,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "tag",
											"source": 7,
											"value": "442"
										},
										{
											"begin": 16180,
											"end": 16281,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16029,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 15980,
											"end": 16287,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "tag",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16397,
											"end": 16400,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "444"
										},
										{
											"begin": 16457,
											"end": 16462,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "290"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "tag",
											"source": 7,
											"value": "444"
										},
										{
											"begin": 16425,
											"end": 16463,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "445"
										},
										{
											"begin": 16560,
											"end": 16566,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16555,
											"end": 16558,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "tag",
											"source": 7,
											"value": "445"
										},
										{
											"begin": 16479,
											"end": 16567,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16472,
											"end": 16567,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 16472,
											"end": 16567,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 16621,
											"end": 16627,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16616,
											"end": 16619,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 16609,
											"end": 16613,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 16602,
											"end": 16607,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 16598,
											"end": 16614,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "tag",
											"source": 7,
											"value": "446"
										},
										{
											"begin": 16576,
											"end": 16628,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16653,
											"end": 16659,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 16648,
											"end": 16651,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16644,
											"end": 16660,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 16637,
											"end": 16660,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16637,
											"end": 16660,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16401,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16293,
											"end": 16666,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "tag",
											"source": 7,
											"value": "240"
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16802,
											"end": 16805,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "448"
										},
										{
											"begin": 16913,
											"end": 16916,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 16904,
											"end": 16910,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "293"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "tag",
											"source": 7,
											"value": "448"
										},
										{
											"begin": 16824,
											"end": 16917,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 16817,
											"end": 16917,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16817,
											"end": 16917,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16934,
											"end": 16937,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 16927,
											"end": 16937,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16927,
											"end": 16937,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16672,
											"end": 16943,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "tag",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17001,
											"end": 17007,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17035,
											"end": 17040,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17029,
											"end": 17041,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 17019,
											"end": 17041,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17019,
											"end": 17041,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 16949,
											"end": 17048,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "tag",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17095,
											"end": 17101,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17146,
											"end": 17148,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 17142,
											"end": 17149,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 17137,
											"end": 17139,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 17130,
											"end": 17135,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 17126,
											"end": 17140,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17122,
											"end": 17150,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 17112,
											"end": 17150,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17112,
											"end": 17150,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17054,
											"end": 17156,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "tag",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17250,
											"end": 17253,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "452"
										},
										{
											"begin": 17311,
											"end": 17316,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "tag",
											"source": 7,
											"value": "452"
										},
										{
											"begin": 17278,
											"end": 17317,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "453"
										},
										{
											"begin": 17397,
											"end": 17403,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17392,
											"end": 17395,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "tag",
											"source": 7,
											"value": "453"
										},
										{
											"begin": 17333,
											"end": 17404,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17326,
											"end": 17404,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 17326,
											"end": 17404,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "454"
										},
										{
											"begin": 17458,
											"end": 17464,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17453,
											"end": 17456,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 17446,
											"end": 17450,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 17439,
											"end": 17444,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 17435,
											"end": 17451,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "292"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "tag",
											"source": 7,
											"value": "454"
										},
										{
											"begin": 17413,
											"end": 17465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "455"
										},
										{
											"begin": 17512,
											"end": 17518,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "295"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "tag",
											"source": 7,
											"value": "455"
										},
										{
											"begin": 17490,
											"end": 17519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17485,
											"end": 17488,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 17481,
											"end": 17520,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17474,
											"end": 17520,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17474,
											"end": 17520,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17254,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17162,
											"end": 17526,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "tag",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17645,
											"end": 17649,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17683,
											"end": 17685,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 17672,
											"end": 17681,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 17668,
											"end": 17686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17660,
											"end": 17686,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17660,
											"end": 17686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17732,
											"end": 17741,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17726,
											"end": 17730,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17722,
											"end": 17742,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 17718,
											"end": 17719,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 17707,
											"end": 17716,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 17703,
											"end": 17720,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 17696,
											"end": 17743,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "457"
										},
										{
											"begin": 17833,
											"end": 17837,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 17824,
											"end": 17830,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "296"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "tag",
											"source": 7,
											"value": "457"
										},
										{
											"begin": 17760,
											"end": 17838,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 17752,
											"end": 17838,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17752,
											"end": 17838,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 17532,
											"end": 17845,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"airdropStatus()": "2cf1a5fb",
							"blockTimestamp()": "adb61832",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"transferOwnership(address)": "f2fde38b",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Airdrop__notStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__notStarted()\":[{\"notice\":\"Error handling message for Airdrop functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Staking.sol\":{\"keccak256\":\"0x8a4c33ab983f452df3f581d7b7c58f6dc8dc9ca83708d732ee1a0e04b79f8726\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e657912adfcdb69e523de7ab6ca6c159d46f4242bab9e2bd80a0bf64e098c3ff\",\"dweb:/ipfs/QmW8PnWjjivzRyW1FX52wnNrojbaRBQEi1sGYMR9U9V18y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Staking.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Staking.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 798,
								"contract": "contracts/Staking.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 800,
								"contract": "contracts/Staking.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 802,
								"contract": "contracts/Staking.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 804,
								"contract": "contracts/Staking.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 806,
								"contract": "contracts/Staking.sol:Staking",
								"label": "airdropStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 808,
								"contract": "contracts/Staking.sol:Staking",
								"label": "token_address",
								"offset": 1,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 873,
								"contract": "contracts/Staking.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_struct(Stake)859_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)859_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)859_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)859_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 846,
										"contract": "contracts/Staking.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 848,
										"contract": "contracts/Staking.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 850,
										"contract": "contracts/Staking.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 852,
										"contract": "contracts/Staking.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 854,
										"contract": "contracts/Staking.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 856,
										"contract": "contracts/Staking.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 858,
										"contract": "contracts/Staking.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__notStarted()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Staking.sol": {
				"ast": {
					"absolutePath": "contracts/Staking.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Airdrop__claimableOnceAWeek": [
							789
						],
						"Airdrop__notStarted": [
							787
						],
						"Context": [
							763
						],
						"Function__notAuthorized": [
							771
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Staking": [
							1442
						],
						"Staking__airdropExceed20Percent": [
							780
						],
						"Staking__cannotStakeNothing": [
							774
						],
						"Staking__noStakingFound": [
							782
						],
						"Staking__penaltyExceed3Percent": [
							778
						],
						"Staking__userIsStaker": [
							776
						],
						"Staking_noStakingPackageFound": [
							784
						]
					},
					"id": 1443,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1443,
							"sourceUnit": 447,
							"src": "64:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1443,
							"sourceUnit": 145,
							"src": "130:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1443,
							"sourceUnit": 105,
							"src": "193:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "247:54:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "308:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "331:2:6"
							},
							"src": "302:32:6"
						},
						{
							"documentation": {
								"id": 772,
								"nodeType": "StructuredDocumentation",
								"src": "336:63:6",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 774,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "406:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 773,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "433:2:6"
							},
							"src": "400:36:6"
						},
						{
							"id": 776,
							"name": "Staking__userIsStaker",
							"nameLocation": "443:21:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 775,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "464:2:6"
							},
							"src": "437:30:6"
						},
						{
							"id": 778,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "474:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "504:2:6"
							},
							"src": "468:39:6"
						},
						{
							"id": 780,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "514:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 779,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "545:2:6"
							},
							"src": "508:40:6"
						},
						{
							"id": 782,
							"name": "Staking__noStakingFound",
							"nameLocation": "555:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 781,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "578:2:6"
							},
							"src": "549:32:6"
						},
						{
							"id": 784,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "588:29:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 783,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "617:2:6"
							},
							"src": "582:38:6"
						},
						{
							"documentation": {
								"id": 785,
								"nodeType": "StructuredDocumentation",
								"src": "622:63:6",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 787,
							"name": "Airdrop__notStarted",
							"nameLocation": "692:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 786,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "711:2:6"
							},
							"src": "686:28:6"
						},
						{
							"id": 789,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "721:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 788,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "748:2:6"
							},
							"src": "715:36:6"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 790,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "773:15:6"
									},
									"id": 791,
									"nodeType": "InheritanceSpecifier",
									"src": "773:15:6"
								},
								{
									"baseName": {
										"id": 792,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "790:7:6"
									},
									"id": 793,
									"nodeType": "InheritanceSpecifier",
									"src": "790:7:6"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1442,
							"linearizedBaseContracts": [
								1442,
								104,
								763,
								144
							],
							"name": "Staking",
							"nameLocation": "762:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 794,
										"nodeType": "StructuredDocumentation",
										"src": "804:159:6",
										"text": " @notice Constructor since this contract is not meant to be used without inheritance\n push once to stakeholders for it to work properly"
									},
									"id": 798,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1006:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "969:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 797,
										"keyType": {
											"id": 795,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "977:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "969:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 796,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "988:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 800,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1042:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "1027:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 799,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1027:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 802,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1081:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "1066:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 801,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1066:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 804,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1113:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "1098:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 803,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1098:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2cf1a5fb",
									"id": 806,
									"mutability": "mutable",
									"name": "airdropStatus",
									"nameLocation": "1143:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "1131:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 805,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1131:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 808,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1178:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "1163:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 807,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1163:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 843,
										"nodeType": "Block",
										"src": "1225:274:6",
										"statements": [
											{
												"expression": {
													"id": 815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 813,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "1297:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 814,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1318:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1297:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 816,
												"nodeType": "ExpressionStatement",
												"src": "1297:23:6"
											},
											{
												"expression": {
													"id": 819,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 817,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "1330:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 818,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1344:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1330:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 820,
												"nodeType": "ExpressionStatement",
												"src": "1330:16:6"
											},
											{
												"expression": {
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 821,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "1357:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 822,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 810,
														"src": "1373:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1357:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 824,
												"nodeType": "ExpressionStatement",
												"src": "1357:21:6"
											},
											{
												"expression": {
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 825,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "1389:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 827,
														"indexExpression": {
															"hexValue": "3930",
															"id": 826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1404:7:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1389:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 828,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1415:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1389:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 830,
												"nodeType": "ExpressionStatement",
												"src": "1389:27:6"
											},
											{
												"expression": {
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 831,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "1426:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 833,
														"indexExpression": {
															"hexValue": "313830",
															"id": 832,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1441:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1426:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1453:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1426:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 836,
												"nodeType": "ExpressionStatement",
												"src": "1426:28:6"
											},
											{
												"expression": {
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 837,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "1464:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 839,
														"indexExpression": {
															"hexValue": "333635",
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1479:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1464:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 840,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1491:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "1464:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 842,
												"nodeType": "ExpressionStatement",
												"src": "1464:28:6"
											}
										]
									},
									"id": 844,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 811,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 810,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1218:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1210:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 809,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1210:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1209:15:6"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1225:0:6"
									},
									"scope": 1442,
									"src": "1198:301:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 859,
									"members": [
										{
											"constant": false,
											"id": 846,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1763:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1755:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 845,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1755:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 848,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "1787:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1779:13:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 847,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1779:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 850,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "1810:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1802:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 849,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1802:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 852,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "1837:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1829:19:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 851,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1829:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 854,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "1965:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1957:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 853,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1957:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 856,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "1992:16:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "1984:24:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 855,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1984:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 858,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2026:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 859,
											"src": "2018:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 857,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2018:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "1739:5:6",
									"nodeType": "StructDefinition",
									"scope": 1442,
									"src": "1732:316:6",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 867,
									"members": [
										{
											"constant": false,
											"id": 861,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2225:12:6",
											"nodeType": "VariableDeclaration",
											"scope": 867,
											"src": "2217:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 860,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2217:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 863,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2255:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 867,
											"src": "2247:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 862,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2247:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 866,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2278:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 867,
											"src": "2272:11:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 865,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 864,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 859,
													"src": "2272:5:6"
												},
												"referencedDeclaration": 859,
												"src": "2272:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2192:14:6",
									"nodeType": "StructDefinition",
									"scope": 1442,
									"src": "2185:105:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 868,
										"nodeType": "StructuredDocumentation",
										"src": "2296:111:6",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 873,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2447:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1442,
									"src": "2412:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 872,
										"keyType": {
											"id": 869,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2420:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2412:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 871,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 870,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 859,
												"src": "2431:5:6"
											},
											"referencedDeclaration": 859,
											"src": "2431:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 874,
										"nodeType": "StructuredDocumentation",
										"src": "2466:124:6",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 884,
									"name": "Staked",
									"nameLocation": "2601:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 876,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2633:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2617:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 875,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2617:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 878,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2655:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2647:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 877,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2647:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2679:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2671:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2671:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2706:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "2698:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2698:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2607:116:6"
									},
									"src": "2595:129:6"
								},
								{
									"anonymous": false,
									"id": 888,
									"name": "PenaltyChanged",
									"nameLocation": "2736:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 886,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2759:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "2751:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2751:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2750:16:6"
									},
									"src": "2730:37:6"
								},
								{
									"anonymous": false,
									"id": 892,
									"name": "AirdropChanged",
									"nameLocation": "2778:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 890,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2801:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "2793:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2793:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2792:16:6"
									},
									"src": "2772:37:6"
								},
								{
									"body": {
										"id": 902,
										"nodeType": "Block",
										"src": "2966:89:6",
										"statements": [
											{
												"condition": {
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2980:14:6",
													"subExpression": {
														"id": 895,
														"name": "airdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 806,
														"src": "2981:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 901,
												"nodeType": "IfStatement",
												"src": "2976:73:6",
												"trueBody": {
													"id": 900,
													"nodeType": "Block",
													"src": "2996:53:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 897,
																	"name": "Airdrop__notStarted",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 787,
																	"src": "3017:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 898,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3017:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 899,
															"nodeType": "RevertStatement",
															"src": "3010:28:6"
														}
													]
												}
											}
										]
									},
									"id": 903,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkAirdropStatus",
									"nameLocation": "2930:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2949:2:6"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2966:0:6"
									},
									"scope": 1442,
									"src": "2921:134:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 909,
										"nodeType": "Block",
										"src": "3090:49:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 905,
														"name": "_checkAirdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "3100:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3100:21:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 907,
												"nodeType": "ExpressionStatement",
												"src": "3100:21:6"
											},
											{
												"id": 908,
												"nodeType": "PlaceholderStatement",
												"src": "3131:1:6"
											}
										]
									},
									"id": 910,
									"name": "airdropStatusTrue",
									"nameLocation": "3070:17:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 904,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3087:2:6"
									},
									"src": "3061:78:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 993,
										"nodeType": "Block",
										"src": "3530:1162:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 920,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 873,
																"src": "3726:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 923,
															"indexExpression": {
																"expression": {
																	"id": 921,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3739:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3739:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3726:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 924,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "3726:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 925,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3761:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3726:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 931,
												"nodeType": "IfStatement",
												"src": "3722:97:6",
												"trueBody": {
													"id": 930,
													"nodeType": "Block",
													"src": "3764:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 927,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 776,
																	"src": "3785:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 928,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3785:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 929,
															"nodeType": "RevertStatement",
															"src": "3778:30:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 932,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 798,
															"src": "3833:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 934,
														"indexExpression": {
															"id": 933,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "3848:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3833:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 935,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3864:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3833:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 941,
												"nodeType": "IfStatement",
												"src": "3829:101:6",
												"trueBody": {
													"id": 940,
													"nodeType": "Block",
													"src": "3867:63:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 937,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "3888:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 938,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3888:31:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 939,
															"nodeType": "RevertStatement",
															"src": "3881:38:6"
														}
													]
												}
											},
											{
												"assignments": [
													943
												],
												"declarations": [
													{
														"constant": false,
														"id": 943,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "4035:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 993,
														"src": "4027:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 942,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4027:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 946,
												"initialValue": {
													"expression": {
														"id": 944,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "4047:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "4047:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4027:35:6"
											},
											{
												"expression": {
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 947,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "4191:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 950,
														"indexExpression": {
															"expression": {
																"id": 948,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4204:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4204:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4191:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 952,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 913,
																"src": "4237:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 953,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 943,
																"src": "4257:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 954,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 798,
																	"src": "4280:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 956,
																"indexExpression": {
																	"id": 955,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 915,
																	"src": "4295:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4280:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 959,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 957,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 915,
																			"src": "4322:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 958,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 943,
																			"src": "4336:9:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4322:23:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 960,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "4321:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4360:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4375:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 963,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4390:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 951,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 859,
															"src": "4218:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$859_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 964,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4218:183:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "4191:210:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$859_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 966,
												"nodeType": "ExpressionStatement",
												"src": "4191:210:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 971,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "4459:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 970,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "4452:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4452:21:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 973,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4487:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 974,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4487:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 977,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4519:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1442",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1442",
																		"typeString": "contract Staking"
																	}
																],
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4511:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 975,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4511:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4511:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 979,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "4538:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 967,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "4412:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 969,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "4412:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4412:142:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 981,
												"nodeType": "ExpressionStatement",
												"src": "4412:142:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 983,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4628:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 984,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4628:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 985,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "4640:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 986,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 943,
															"src": "4648:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 987,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 915,
																		"src": "4660:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 988,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 943,
																		"src": "4674:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4660:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 990,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4659:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 982,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 884,
														"src": "4621:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4621:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 992,
												"nodeType": "EmitStatement",
												"src": "4616:69:6"
											}
										]
									},
									"documentation": {
										"id": 911,
										"nodeType": "StructuredDocumentation",
										"src": "3251:200:6",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 994,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 918,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 917,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "3517:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "3517:12:6"
										}
									],
									"name": "stake",
									"nameLocation": "3465:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3479:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "3471:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3471:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "3495:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 994,
												"src": "3487:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3487:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3470:37:6"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3530:0:6"
									},
									"scope": 1442,
									"src": "3456:1236:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1017,
										"nodeType": "Block",
										"src": "4759:245:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1001,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "4847:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 1002,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4856:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "4847:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1008,
												"nodeType": "IfStatement",
												"src": "4843:81:6",
												"trueBody": {
													"id": 1007,
													"nodeType": "Block",
													"src": "4860:64:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1004,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 778,
																	"src": "4881:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1005,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4881:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1006,
															"nodeType": "RevertStatement",
															"src": "4874:39:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1009,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "4933:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1010,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 996,
														"src": "4954:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4933:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1012,
												"nodeType": "ExpressionStatement",
												"src": "4933:27:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1014,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 996,
															"src": "4990:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1013,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "4975:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1015,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4975:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1016,
												"nodeType": "EmitStatement",
												"src": "4970:27:6"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1018,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 999,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 998,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "4749:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4749:9:6"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "4707:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4732:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "4724:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:16:6"
									},
									"returnParameters": {
										"id": 1000,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4759:0:6"
									},
									"scope": 1442,
									"src": "4698:306:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1036,
										"nodeType": "Block",
										"src": "5120:121:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1031,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1028,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1025,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "5191:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1026,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "5191:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1027,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1020,
																				"src": "5209:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "5191:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1029,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "5190:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1030,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5218:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "5190:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1032,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5189:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1033,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5226:8:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "5189:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1024,
												"id": 1035,
												"nodeType": "Return",
												"src": "5182:52:6"
											}
										]
									},
									"id": 1037,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "5019:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "5053:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5045:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5045:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5044:15:6"
									},
									"returnParameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1037,
												"src": "5107:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5107:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5106:9:6"
									},
									"scope": 1442,
									"src": "5010:231:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1059,
										"nodeType": "Block",
										"src": "5363:251:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1049,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1045,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1040,
																			"src": "5481:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1046,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 846,
																		"src": "5481:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1047,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1040,
																			"src": "5517:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1048,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 850,
																		"src": "5517:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5481:56:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1051,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1040,
																				"src": "5582:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1052,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 848,
																			"src": "5582:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1050,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1037,
																		"src": "5556:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5556:43:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5481:118:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1055,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5480:120:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1056,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5603:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "5480:127:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1044,
												"id": 1058,
												"nodeType": "Return",
												"src": "5461:146:6"
											}
										]
									},
									"id": 1060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "5256:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "5291:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "5278:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1039,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1038,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 859,
														"src": "5278:5:6"
													},
													"referencedDeclaration": 859,
													"src": "5278:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5277:25:6"
									},
									"returnParameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1060,
												"src": "5350:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5350:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5349:9:6"
									},
									"scope": 1442,
									"src": "5247:367:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "5759:156:6",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1071,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1062,
																"src": "5790:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1077,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1074,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1072,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1062,
																						"src": "5801:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1073,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 800,
																						"src": "5810:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5801:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1075,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5800:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1076,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5832:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5800:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1078,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5799:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5790:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1088,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1080,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1064,
																"src": "5851:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1086,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1083,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1081,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1064,
																						"src": "5862:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1082,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 800,
																						"src": "5871:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "5862:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1084,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "5861:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1085,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5893:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "5861:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1087,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5860:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5851:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1089,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5776:132:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1070,
												"id": 1090,
												"nodeType": "Return",
												"src": "5769:139:6"
											}
										]
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "5629:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5666:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5658:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5658:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "5682:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5674:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1063,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5674:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5657:32:6"
									},
									"returnParameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5737:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5737:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1092,
												"src": "5746:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5746:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5736:18:6"
									},
									"scope": 1442,
									"src": "5620:295:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1174,
										"nodeType": "Block",
										"src": "6309:953:6",
										"statements": [
											{
												"assignments": [
													1100
												],
												"declarations": [
													{
														"constant": false,
														"id": 1100,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "6440:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1174,
														"src": "6427:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1099,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1098,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 859,
																"src": "6427:5:6"
															},
															"referencedDeclaration": 859,
															"src": "6427:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1105,
												"initialValue": {
													"baseExpression": {
														"id": 1101,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "6453:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1104,
													"indexExpression": {
														"expression": {
															"id": 1102,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "6466:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "6466:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6453:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$859_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6427:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1106,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6491:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1107,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "6491:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6512:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6491:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1114,
												"nodeType": "IfStatement",
												"src": "6487:85:6",
												"trueBody": {
													"id": 1113,
													"nodeType": "Block",
													"src": "6515:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1110,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "6536:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6536:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1112,
															"nodeType": "RevertStatement",
															"src": "6529:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1116
												],
												"declarations": [
													{
														"constant": false,
														"id": 1116,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "6590:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1174,
														"src": "6582:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1115,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6582:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1120,
												"initialValue": {
													"arguments": [
														{
															"id": 1118,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6621:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1117,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "6599:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$859_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6599:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6582:50:6"
											},
											{
												"expression": {
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "6642:31:6",
													"subExpression": {
														"baseExpression": {
															"id": 1121,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "6649:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1124,
														"indexExpression": {
															"expression": {
																"id": 1122,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6662:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6662:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6649:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1126,
												"nodeType": "ExpressionStatement",
												"src": "6642:31:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1127,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "6688:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1128,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 852,
														"src": "6688:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1129,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "6713:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "6713:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6688:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1172,
													"nodeType": "Block",
													"src": "7082:174:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1161,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 808,
																				"src": "7143:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1160,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "7136:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1162,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7136:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1163,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "7175:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "7175:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1168,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1165,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1100,
																						"src": "7204:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1166,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 846,
																					"src": "7204:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1167,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1116,
																					"src": "7224:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7204:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1169,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7203:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1157,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "7096:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "7096:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1170,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7096:149:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1171,
															"nodeType": "ExpressionStatement",
															"src": "7096:149:6"
														}
													]
												},
												"id": 1173,
												"nodeType": "IfStatement",
												"src": "6684:572:6",
												"trueBody": {
													"id": 1156,
													"nodeType": "Block",
													"src": "6730:346:6",
													"statements": [
														{
															"assignments": [
																1133,
																1135
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1133,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "6770:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1156,
																	"src": "6762:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1132,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6762:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1135,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "6810:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1156,
																	"src": "6802:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1134,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6802:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1141,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1137,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1100,
																			"src": "6870:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1138,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 846,
																		"src": "6870:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1139,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1116,
																		"src": "6889:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1136,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1092,
																	"src": "6841:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1140,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6841:55:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6744:152:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1146,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 808,
																				"src": "6958:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1145,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "6951:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6951:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1148,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "6990:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "6990:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1152,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1150,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1133,
																					"src": "7019:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1151,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1135,
																					"src": "7036:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7019:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1153,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7018:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1142,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "6911:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "6911:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6911:154:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1155,
															"nodeType": "ExpressionStatement",
															"src": "6911:154:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1093,
										"nodeType": "StructuredDocumentation",
										"src": "5921:335:6",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1175,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1096,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1095,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "6296:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "6296:12:6"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "6271:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6284:2:6"
									},
									"returnParameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6309:0:6"
									},
									"scope": 1442,
									"src": "6262:1000:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1291,
										"nodeType": "Block",
										"src": "7334:958:6",
										"statements": [
											{
												"assignments": [
													1183
												],
												"declarations": [
													{
														"constant": false,
														"id": 1183,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "7357:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1291,
														"src": "7344:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1182,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1181,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 859,
																"src": "7344:5:6"
															},
															"referencedDeclaration": 859,
															"src": "7344:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1188,
												"initialValue": {
													"baseExpression": {
														"id": 1184,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "7370:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1187,
													"indexExpression": {
														"expression": {
															"id": 1185,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7383:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7383:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7370:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$859_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7344:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1189,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "7469:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1190,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "7469:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1191,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7490:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7469:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1197,
												"nodeType": "IfStatement",
												"src": "7465:85:6",
												"trueBody": {
													"id": 1196,
													"nodeType": "Block",
													"src": "7493:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1193,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "7514:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1194,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7514:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1195,
															"nodeType": "RevertStatement",
															"src": "7507:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1200
												],
												"declarations": [
													{
														"constant": false,
														"id": 1200,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "7581:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1291,
														"src": "7559:29:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1199,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1198,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 867,
																"src": "7559:14:6"
															},
															"referencedDeclaration": 867,
															"src": "7559:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$867_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1206,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1202,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7606:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7609:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1204,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "7612:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1201,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 867,
														"src": "7591:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$867_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7591:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7559:64:6"
											},
											{
												"assignments": [
													1208
												],
												"declarations": [
													{
														"constant": false,
														"id": 1208,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7642:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1291,
														"src": "7634:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1207,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7634:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1212,
												"initialValue": {
													"arguments": [
														{
															"id": 1210,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "7673:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1209,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1060,
														"src": "7651:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$859_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7651:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7634:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1213,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1200,
																"src": "7699:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 866,
															"src": "7699:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1215,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 852,
														"src": "7699:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1216,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7727:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1217,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7727:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7699:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1241,
												"nodeType": "IfStatement",
												"src": "7695:214:6",
												"trueBody": {
													"id": 1240,
													"nodeType": "Block",
													"src": "7744:165:6",
													"statements": [
														{
															"expression": {
																"id": 1238,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1219,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "7758:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1221,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 863,
																	"src": "7758:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1237,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1228,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1225,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1222,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1183,
																									"src": "7794:10:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1223,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 846,
																								"src": "7794:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1224,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 800,
																								"src": "7814:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7794:38:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1226,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7793:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1227,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7836:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7793:47:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1229,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7792:49:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1232,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1230,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1208,
																								"src": "7862:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1231,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 800,
																								"src": "7871:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "7862:27:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1233,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "7861:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1234,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7893:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "7861:36:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1236,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7860:38:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7792:106:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7758:140:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1239,
															"nodeType": "ExpressionStatement",
															"src": "7758:140:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1243,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1183,
																	"src": "7937:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1244,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 858,
																"src": "7937:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1242,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1356,
															"src": "7923:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7923:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1246,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7967:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7923:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1272,
													"nodeType": "Block",
													"src": "8109:59:6",
													"statements": [
														{
															"expression": {
																"id": 1270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1264,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1200,
																			"src": "8123:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1267,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 866,
																		"src": "8123:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1268,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 856,
																	"src": "8123:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8156:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8123:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1271,
															"nodeType": "ExpressionStatement",
															"src": "8123:34:6"
														}
													]
												},
												"id": 1273,
												"nodeType": "IfStatement",
												"src": "7919:249:6",
												"trueBody": {
													"id": 1263,
													"nodeType": "Block",
													"src": "7970:133:6",
													"statements": [
														{
															"assignments": [
																1249
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1249,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "7992:7:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1263,
																	"src": "7984:15:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1248,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7984:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1254,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1251,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1183,
																			"src": "8020:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1252,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 846,
																		"src": "8020:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1250,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1374,
																	"src": "8002:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8002:36:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7984:54:6"
														},
														{
															"expression": {
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1255,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1200,
																			"src": "8052:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1258,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 866,
																		"src": "8052:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1259,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 856,
																	"src": "8052:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1260,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1249,
																	"src": "8085:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8052:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1262,
															"nodeType": "ExpressionStatement",
															"src": "8052:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1274,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1200,
																"src": "8178:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1277,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 866,
															"src": "8178:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1278,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 854,
														"src": "8178:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1279,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1208,
														"src": "8204:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8178:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1281,
												"nodeType": "ExpressionStatement",
												"src": "8178:32:6"
											},
											{
												"expression": {
													"id": 1287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1282,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1200,
															"src": "8220:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1284,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 861,
														"src": "8220:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1285,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "8243:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1286,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "8243:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8220:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1288,
												"nodeType": "ExpressionStatement",
												"src": "8220:40:6"
											},
											{
												"expression": {
													"id": 1289,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1200,
													"src": "8278:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1180,
												"id": 1290,
												"nodeType": "Return",
												"src": "8271:14:6"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1292,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "7277:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7285:2:6"
									},
									"returnParameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1292,
												"src": "7311:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$867_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1178,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1177,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 867,
														"src": "7311:14:6"
													},
													"referencedDeclaration": 867,
													"src": "7311:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$867_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7310:23:6"
									},
									"scope": 1442,
									"src": "7268:1024:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1306,
										"nodeType": "Block",
										"src": "8447:77:6",
										"statements": [
											{
												"expression": {
													"id": 1300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1297,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 804,
														"src": "8457:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1298,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8472:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8472:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8457:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1301,
												"nodeType": "ExpressionStatement",
												"src": "8457:30:6"
											},
											{
												"expression": {
													"id": 1304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1302,
														"name": "airdropStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 806,
														"src": "8497:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1303,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8513:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "8497:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1305,
												"nodeType": "ExpressionStatement",
												"src": "8497:20:6"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1307,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1295,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1294,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "8437:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "8437:9:6"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "8413:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8425:2:6"
									},
									"returnParameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8447:0:6"
									},
									"scope": 1442,
									"src": "8404:120:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1330,
										"nodeType": "Block",
										"src": "8598:166:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1314,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1309,
														"src": "8612:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 1315,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8621:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "8612:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1321,
												"nodeType": "IfStatement",
												"src": "8608:83:6",
												"trueBody": {
													"id": 1320,
													"nodeType": "Block",
													"src": "8626:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1317,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "8647:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8647:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1319,
															"nodeType": "RevertStatement",
															"src": "8640:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1322,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "8700:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1323,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1309,
														"src": "8714:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8700:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1325,
												"nodeType": "ExpressionStatement",
												"src": "8700:20:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1327,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1309,
															"src": "8750:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1326,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 892,
														"src": "8735:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8735:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1329,
												"nodeType": "EmitStatement",
												"src": "8730:27:6"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1331,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1312,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1311,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "8588:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "8588:9:6"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "8539:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8571:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1331,
												"src": "8563:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8563:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8562:16:6"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8598:0:6"
									},
									"scope": 1442,
									"src": "8530:234:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1339,
										"nodeType": "Block",
										"src": "8826:39:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1336,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "8843:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "8843:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1335,
												"id": 1338,
												"nodeType": "Return",
												"src": "8836:22:6"
											}
										]
									},
									"functionSelector": "adb61832",
									"id": 1340,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "blockTimestamp",
									"nameLocation": "8779:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8793:2:6"
									},
									"returnParameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1340,
												"src": "8817:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8817:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8816:9:6"
									},
									"scope": 1442,
									"src": "8770:95:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1355,
										"nodeType": "Block",
										"src": "8943:62:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1350,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1347,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8961:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8961:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1349,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1342,
																	"src": "8979:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8961:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1351,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "8960:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1352,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8992:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "8960:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1346,
												"id": 1354,
												"nodeType": "Return",
												"src": "8953:45:6"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1356,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "8880:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1342,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "8902:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "8894:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8894:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8893:19:6"
									},
									"returnParameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "8934:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8934:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8933:9:6"
									},
									"scope": 1442,
									"src": "8871:134:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "9119:71:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1368,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1365,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1363,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1358,
																				"src": "9138:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1364,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 802,
																				"src": "9152:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9138:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1366,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9137:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9167:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "9137:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1369,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9136:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9175:8:6",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "9136:47:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1362,
												"id": 1372,
												"nodeType": "Return",
												"src": "9129:54:6"
											}
										]
									},
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "9020:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1358,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "9046:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "9038:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9038:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9037:21:6"
									},
									"returnParameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "9106:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9106:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9105:9:6"
									},
									"scope": 1442,
									"src": "9011:179:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1440,
										"nodeType": "Block",
										"src": "9247:672:6",
										"statements": [
											{
												"assignments": [
													1381
												],
												"declarations": [
													{
														"constant": false,
														"id": 1381,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "9323:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1440,
														"src": "9309:24:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1380,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1379,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 859,
																"src": "9309:5:6"
															},
															"referencedDeclaration": 859,
															"src": "9309:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1386,
												"initialValue": {
													"baseExpression": {
														"id": 1382,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "9336:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$859_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1385,
													"indexExpression": {
														"expression": {
															"id": 1383,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "9349:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "9349:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9336:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$859_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9309:51:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1387,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "9374:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1388,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "9374:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1389,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9374:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1395,
												"nodeType": "IfStatement",
												"src": "9370:85:6",
												"trueBody": {
													"id": 1394,
													"nodeType": "Block",
													"src": "9398:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1391,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "9419:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9419:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1393,
															"nodeType": "RevertStatement",
															"src": "9412:32:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1399,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1396,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1381,
															"src": "9469:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1397,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "9469:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1398,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9489:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "9469:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1439,
												"nodeType": "IfStatement",
												"src": "9465:448:6",
												"trueBody": {
													"id": 1438,
													"nodeType": "Block",
													"src": "9492:421:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1401,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1381,
																				"src": "9524:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 1402,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 858,
																			"src": "9524:26:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1400,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1356,
																		"src": "9510:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9510:41:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1404,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9555:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9510:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1410,
															"nodeType": "IfStatement",
															"src": "9506:121:6",
															"trueBody": {
																"id": 1409,
																"nodeType": "Block",
																"src": "9558:69:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1406,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 789,
																				"src": "9583:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9583:29:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1408,
																		"nodeType": "RevertStatement",
																		"src": "9576:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1411,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1381,
																		"src": "9641:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1413,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 856,
																	"src": "9641:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9671:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9641:31:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1416,
															"nodeType": "ExpressionStatement",
															"src": "9641:31:6"
														},
														{
															"expression": {
																"id": 1422,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1417,
																		"name": "user_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1381,
																		"src": "9686:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1419,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 858,
																	"src": "9686:26:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1420,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9715:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1421,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9715:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9686:44:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1423,
															"nodeType": "ExpressionStatement",
															"src": "9686:44:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1428,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 808,
																				"src": "9792:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1427,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "9785:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9785:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1430,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "9824:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "9824:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1433,
																					"name": "user_stake",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1381,
																					"src": "9870:10:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$859_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1434,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 846,
																				"src": "9870:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1432,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1374,
																			"src": "9852:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9852:36:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1424,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "9745:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "9745:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1436,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9745:157:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1437,
															"nodeType": "ExpressionStatement",
															"src": "9745:157:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 1441,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1377,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1376,
												"name": "airdropStatusTrue",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 910,
												"src": "9229:17:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9229:17:6"
										}
									],
									"name": "claimAirdrop",
									"nameLocation": "9205:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9217:2:6"
									},
									"returnParameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9247:0:6"
									},
									"scope": 1442,
									"src": "9196:723:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1443,
							"src": "753:9168:6",
							"usedErrors": [
								776,
								778,
								780,
								782,
								784,
								787,
								789
							]
						}
					],
					"src": "39:9883:6"
				},
				"id": 6
			}
		}
	}
}