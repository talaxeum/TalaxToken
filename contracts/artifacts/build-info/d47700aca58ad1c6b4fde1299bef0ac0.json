{
	"id": "d47700aca58ad1c6b4fde1299bef0ac0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stake-2.0.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Error handling message for Modifier\n */\nerror Function__notAuthorized();\nerror Function__notAVoter();\nerror Function__votingNotAvailable();\n\n/**\n * @notice Error handling message for Staking functions\n */\nerror Staking__cannotStakeNothing();\nerror Staking__userIsStaker();\nerror Staking__penaltyExceed3Percent();\nerror Staking__airdropExceed20Percent();\nerror Staking__noStakingFound();\nerror Staking_noStakingPackageFound();\n\n/**\n * @notice Error handling message for Airdrop functions\n */\nerror Airdrop__claimableOnceAWeek();\n\n/**\n * @notice Error handling message for Voting functions\n */\nerror Voting__votingIsRunning();\nerror Voting__alreadyVoted();\nerror Voting__notYetVoted();\nerror Voting__notEnoughVoters();\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    struct Voter {\n        bool votingRight;\n        mapping(uint256 => bool) voted;\n    }\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n\n    bool internal _votingStatus;\n    uint256 internal _votingId;\n    uint256 public totalVoters;\n    mapping(address => Voter) public voters;\n    mapping(uint256 => uint256) public votedUsers;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _isVoter() internal view {\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        if (voters[msg.sender].votingRight == false) {\n            revert Function__notAVoter();\n        }\n    }\n\n    modifier isVoter() {\n        _isVoter();\n        _;\n    }\n\n    function _checkVotingStatus() internal view {\n        // require(_votingStatus, \"Voting is not available\");\n        if (!_votingStatus) {\n            revert Function__votingNotAvailable();\n        }\n    }\n\n    modifier votingStatusTrue() {\n        _checkVotingStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n        if (stakeholders[msg.sender].amount != 0) {\n            revert Staking__userIsStaker();\n        }\n\n        if (stakingPackage[stakePeriod] == 0) {\n            revert Staking_noStakingPackageFound();\n        }\n\n        totalVoters += 1;\n        voters[msg.sender].votingRight = true;\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[msg.sender] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n\n        IERC20(token_address).transferFrom(msg.sender, address(this), amount);\n        // Emit an event that the stake has occured\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        if (amount > 30) {\n            revert Staking__penaltyExceed3Percent();\n        }\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (user_stake.amount == 0) {\n            return 0;\n        }\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        if (amount == 0) {\n            return (0, 0);\n        }\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        delete stakeholders[msg.sender];\n        totalVoters -= 1;\n        delete voters[msg.sender].voted[_votingId];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            IERC20(token_address).transfer(\n                msg.sender,\n                (amount_reduced + reward_reduced)\n            );\n        } else {\n            IERC20(token_address).transfer(\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        // require(user_stake.amount > 0, \"No Stake Found\");\n        if (user_stake.amount <= 0) {\n            revert Staking__noStakingFound();\n        }\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        if (amount > 200) {\n            revert Staking__airdropExceed20Percent();\n        }\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function _blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop() external {\n        // TODO: can be simplified if using address\n        Stake storage staker = stakeholders[msg.sender];\n\n        if (staker.amount > 0) {\n            if (calculateWeek(staker.latestClaimDrop) == 0) {\n                revert Airdrop__claimableOnceAWeek();\n            }\n\n            staker.claimableAirdrop = 0;\n            staker.latestClaimDrop = block.timestamp;\n\n            IERC20(token_address).transfer(\n                msg.sender,\n                _calculateAirdrop(staker.amount)\n            );\n        }\n    }\n\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\n    // ! Replaceable with Governance token\n\n    // function getVoters(address user) external view returns (bool, bool) {\n    //     return (voters[user].votingRight, voters[user].voted[_votingId]);\n    // }\n\n    // // TODO: can be simplified since not connected directly\n    // function startVoting() external nonReentrant onlyOwner {\n    //     if (_votingStatus == true) {\n    //         revert Voting__votingIsRunning();\n    //     }\n\n    //     _votingStatus = true;\n    //     _votingId += 1;\n    // }\n\n    // function vote() public nonReentrant votingStatusTrue isVoter {\n    //     if (voters[msg.sender].voted[_votingId] == true) {\n    //         revert Voting__alreadyVoted();\n    //     }\n\n    //     voters[msg.sender].voted[_votingId] = true;\n    //     votedUsers[_votingId] += 1;\n    // }\n\n    // function retractVote() public nonReentrant votingStatusTrue isVoter {\n    //     if (voters[msg.sender].voted[_votingId] == false) {\n    //         revert Voting__notYetVoted();\n    //     }\n\n    //     voters[msg.sender].voted[_votingId] == false;\n    //     votedUsers[_votingId] -= 1;\n    // }\n\n    // function getVotingResult()\n    //     external\n    //     view\n    //     onlyOwner\n    //     votingStatusTrue\n    //     returns (bool)\n    // {\n    //     if (totalVoters <= 1) {\n    //         revert Voting__notEnoughVoters();\n    //     }\n    //     uint256 half_voters = (totalVoters * 5) / 10;\n\n    //     if (votedUsers[_votingId] > half_voters) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    // function stopVoting() external onlyOwner votingStatusTrue {\n    //     _votingStatus = false;\n    // }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stake-2.0.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stake-2.0.sol\":971:12411  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stake-2.0.sol\":1671:1972  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/Stake-2.0.sol\":1791:1793  15 */\n  0x0f\n    /* \"contracts/Stake-2.0.sol\":1770:1788  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Stake-2.0.sol\":1770:1793  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1817:1819  80 */\n  0x50\n    /* \"contracts/Stake-2.0.sol\":1803:1814  airdropRate */\n  0x04\n    /* \"contracts/Stake-2.0.sol\":1803:1819  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1830:1843  token_address */\n  0x0b\n    /* \"contracts/Stake-2.0.sol\":1830:1851  token_address = token */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1862:1876  stakingPackage */\n  0x02\n    /* \"contracts/Stake-2.0.sol\":1862:1885  stakingPackage[90 days] */\n  0x20\n  mstore\n    /* \"contracts/Stake-2.0.sol\":1888:1889  6 */\n  0x06\n    /* \"contracts/Stake-2.0.sol\":1862:1885  stakingPackage[90 days] */\n  0xa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c\n    /* \"contracts/Stake-2.0.sol\":1862:1889  stakingPackage[90 days] = 6 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1926:1927  7 */\n  0x07\n    /* \"contracts/Stake-2.0.sol\":1899:1923  stakingPackage[180 days] */\n  0x089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832\n    /* \"contracts/Stake-2.0.sol\":1899:1927  stakingPackage[180 days] = 7 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1952:1960  365 days */\n  0x01e13380\n  0x00\n    /* \"contracts/Stake-2.0.sol\":1937:1961  stakingPackage[365 days] */\n  mstore\n    /* \"contracts/Stake-2.0.sol\":1964:1965  8 */\n  0x08\n    /* \"contracts/Stake-2.0.sol\":1937:1961  stakingPackage[365 days] */\n  0xdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b\n    /* \"contracts/Stake-2.0.sol\":1937:1965  stakingPackage[365 days] = 8 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":971:12411  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/Stake-2.0.sol\":971:12411  contract Staking is ReentrancyGuard, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stake-2.0.sol\":971:12411  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa143a5f2\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xc63aa3e7\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xc63aa3e7\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0xa143a5f2\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x7b0472f0\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8166:9190  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n        /* \"#utility.yul\":168:172   */\n      0x00\n        /* \"#utility.yul\":210:213   */\n      0x0120\n        /* \"#utility.yul\":199:208   */\n      dup3\n        /* \"#utility.yul\":195:214   */\n      add\n        /* \"#utility.yul\":187:214   */\n      swap1\n      pop\n        /* \"#utility.yul\":247:253   */\n      dup3\n        /* \"#utility.yul\":241:254   */\n      mload\n        /* \"#utility.yul\":230:239   */\n      dup3\n        /* \"#utility.yul\":223:255   */\n      mstore\n        /* \"#utility.yul\":311:315   */\n      0x20\n        /* \"#utility.yul\":303:309   */\n      dup4\n        /* \"#utility.yul\":299:316   */\n      add\n        /* \"#utility.yul\":293:317   */\n      mload\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":275:284   */\n      dup4\n        /* \"#utility.yul\":271:291   */\n      add\n        /* \"#utility.yul\":264:318   */\n      mstore\n        /* \"#utility.yul\":365:369   */\n      0x40\n        /* \"#utility.yul\":357:363   */\n      dup4\n        /* \"#utility.yul\":353:370   */\n      add\n        /* \"#utility.yul\":347:371   */\n      mload\n        /* \"#utility.yul\":415:427   */\n      dup1\n        /* \"#utility.yul\":409:428   */\n      mload\n        /* \"#utility.yul\":402:406   */\n      0x40\n        /* \"#utility.yul\":391:400   */\n      dup5\n        /* \"#utility.yul\":387:407   */\n      add\n        /* \"#utility.yul\":380:429   */\n      mstore\n        /* \"#utility.yul\":489:493   */\n      0x20\n        /* \"#utility.yul\":475:487   */\n      dup2\n        /* \"#utility.yul\":471:494   */\n      add\n        /* \"#utility.yul\":465:495   */\n      mload\n        /* \"#utility.yul\":460:462   */\n      0x60\n        /* \"#utility.yul\":449:458   */\n      dup5\n        /* \"#utility.yul\":445:463   */\n      add\n        /* \"#utility.yul\":438:496   */\n      mstore\n        /* \"#utility.yul\":557:561   */\n      0x40\n        /* \"#utility.yul\":543:555   */\n      dup2\n        /* \"#utility.yul\":539:562   */\n      add\n        /* \"#utility.yul\":533:563   */\n      mload\n        /* \"#utility.yul\":527:530   */\n      0x80\n        /* \"#utility.yul\":516:525   */\n      dup5\n        /* \"#utility.yul\":512:531   */\n      add\n        /* \"#utility.yul\":505:564   */\n      mstore\n        /* \"#utility.yul\":625:627   */\n      0x60\n        /* \"#utility.yul\":611:623   */\n      dup2\n        /* \"#utility.yul\":607:628   */\n      add\n        /* \"#utility.yul\":601:629   */\n      mload\n        /* \"#utility.yul\":595:598   */\n      0xa0\n        /* \"#utility.yul\":584:593   */\n      dup5\n        /* \"#utility.yul\":580:599   */\n      add\n        /* \"#utility.yul\":573:630   */\n      mstore\n        /* \"#utility.yul\":691:694   */\n      0x80\n        /* \"#utility.yul\":677:689   */\n      dup2\n        /* \"#utility.yul\":673:695   */\n      add\n        /* \"#utility.yul\":667:696   */\n      mload\n        /* \"#utility.yul\":661:664   */\n      0xc0\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:665   */\n      add\n        /* \"#utility.yul\":639:697   */\n      mstore\n        /* \"#utility.yul\":758:761   */\n      0xa0\n        /* \"#utility.yul\":744:756   */\n      dup2\n        /* \"#utility.yul\":740:762   */\n      add\n        /* \"#utility.yul\":734:763   */\n      mload\n        /* \"#utility.yul\":728:731   */\n      0xe0\n        /* \"#utility.yul\":717:726   */\n      dup5\n        /* \"#utility.yul\":713:732   */\n      add\n        /* \"#utility.yul\":706:764   */\n      mstore\n        /* \"#utility.yul\":825:828   */\n      0xc0\n        /* \"#utility.yul\":811:823   */\n      dup2\n        /* \"#utility.yul\":807:829   */\n      add\n        /* \"#utility.yul\":801:830   */\n      mload\n        /* \"#utility.yul\":795:798   */\n      0x0100\n        /* \"#utility.yul\":784:793   */\n      dup5\n        /* \"#utility.yul\":780:799   */\n      add\n        /* \"#utility.yul\":773:831   */\n      mstore\n      pop\n        /* \"#utility.yul\":14:837   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stake-2.0.sol\":8166:9190  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":10065:10621  function claimAirdrop() external {... */\n    tag_4:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      stop\n        /* \"contracts/Stake-2.0.sol\":1507:1533  uint256 public totalVoters */\n    tag_5:\n      tag_31\n      sload(0x08)\n      dup2\n      jump\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1507:1533  uint256 public totalVoters */\n      tag_27\n        /* \"#utility.yul\":842:1019   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_29\n      tag_36\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":4297:5534  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_29\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1376:1402  uint256 public airdropRate */\n    tag_8:\n      tag_31\n      sload(0x04)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":5540:5846  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_29\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1636:1664  address public token_address */\n    tag_10:\n      sload(0x0b)\n      tag_48\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_48:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1626:1658   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1608:1659   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1596:1598   */\n      0x20\n        /* \"#utility.yul\":1581:1599   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1636:1664  address public token_address */\n      tag_27\n        /* \"#utility.yul\":1462:1665   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump(tag_48)\n        /* \"contracts/Stake-2.0.sol\":1584:1629  mapping(uint256 => uint256) public votedUsers */\n    tag_12:\n      tag_31\n      tag_56\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_56:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":1539:1578  mapping(address => Voter) public voters */\n    tag_13:\n      tag_59\n      tag_60\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_60:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_59:\n      mload(0x40)\n        /* \"#utility.yul\":2126:2140   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2119:2141   */\n      iszero\n        /* \"#utility.yul\":2101:2142   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2089:2091   */\n      0x20\n        /* \"#utility.yul\":2074:2092   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1539:1578  mapping(address => Voter) public voters */\n      tag_27\n        /* \"#utility.yul\":1961:2148   */\n      jump\n        /* \"contracts/Stake-2.0.sol\":9740:9874  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_14:\n      tag_31\n      tag_66\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1408:1435  uint256 public airdropSince */\n    tag_15:\n      tag_31\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":7238:8160  function withdrawStake() external nonReentrant {... */\n    tag_16:\n      tag_29\n      tag_73\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9638:9734  function _blockTimestamp() public view returns (uint256) {... */\n    tag_17:\n        /* \"contracts/Stake-2.0.sol\":9712:9727  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9638:9734  function _blockTimestamp() public view returns (uint256) {... */\n      jump(tag_31)\n        /* \"contracts/Stake-2.0.sol\":1337:1370  uint256 public stakingPenaltyRate */\n    tag_18:\n      tag_31\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":9302:9392  function startAirdrop() external onlyOwner {... */\n    tag_19:\n      tag_29\n      tag_81\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9398:9632  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_20:\n      tag_29\n      tag_83\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_21:\n      tag_29\n      tag_86\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":8166:9190  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_26:\n        /* \"contracts/Stake-2.0.sol\":8209:8230  StakingSummary memory */\n      tag_88\n      tag_89\n      jump\t// in\n    tag_88:\n        /* \"contracts/Stake-2.0.sol\":8281:8291  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":8242:8265  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8268:8292  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8268:8280  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":8268:8292  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":8242:8292  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8363:8448  if (user_stake.amount <= 0) {... */\n      tag_91\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8412:8437  Staking__noStakingFound() */\n      mload(0x40)\n      shl(0xe0, 0xb018f087)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8363:8448  if (user_stake.amount <= 0) {... */\n    tag_91:\n        /* \"contracts/Stake-2.0.sol\":8489:8521  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8457:8486  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8489:8521  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8549:8582  _calculateStakeReward(user_stake) */\n      tag_92\n        /* \"contracts/Stake-2.0.sol\":8510:8520  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8549:8570  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":8549:8582  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_92:\n        /* \"contracts/Stake-2.0.sol\":8532:8582  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":8625:8640  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":8597:8604  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":8597:8610  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8597:8622  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8597:8640  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stake-2.0.sol\":8593:8807  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8791:8795  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":8769:8787  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":8760:8766  reward */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":8760:8787  reward * stakingPenaltyRate */\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n        /* \"contracts/Stake-2.0.sol\":8759:8795  (reward * stakingPenaltyRate) / 1000 */\n      tag_97\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n        /* \"contracts/Stake-2.0.sol\":8712:8730  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":8692:8709  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stake-2.0.sol\":8734:8738  1000 */\n      0x03e8\n      swap2\n        /* \"contracts/Stake-2.0.sol\":8692:8730  user_stake.amount * stakingPenaltyRate */\n      tag_99\n      swap2\n      tag_96\n      jump\t// in\n    tag_99:\n        /* \"contracts/Stake-2.0.sol\":8691:8738  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_100\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_100:\n        /* \"contracts/Stake-2.0.sol\":8690:8796  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_101\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n        /* \"contracts/Stake-2.0.sol\":8656:8671  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/Stake-2.0.sol\":8656:8796  summary.penalty =... */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8593:8807  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_94:\n        /* \"contracts/Stake-2.0.sol\":8865:8866  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8821:8862  calculateWeek(user_stake.latestClaimDrop) */\n      tag_103\n        /* \"contracts/Stake-2.0.sol\":8835:8845  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8835:8861  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8821:8834  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":8821:8862  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_103:\n        /* \"contracts/Stake-2.0.sol\":8821:8866  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":8817:9066  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8882:8897  uint256 airdrop */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8900:8936  _calculateAirdrop(user_stake.amount) */\n      tag_105\n        /* \"contracts/Stake-2.0.sol\":8918:8928  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8918:8935  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8900:8917  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":8900:8936  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_105:\n        /* \"contracts/Stake-2.0.sol\":8950:8963  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8950:8980  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stake-2.0.sol\":8950:8990  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":8817:9066  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_107)\n    tag_104:\n        /* \"contracts/Stake-2.0.sol\":9021:9034  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9054:9055  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9021:9051  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/Stake-2.0.sol\":9021:9055  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8817:9066  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_107:\n        /* \"contracts/Stake-2.0.sol\":9076:9089  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9076:9099  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stake-2.0.sol\":9076:9108  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9141:9158  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/Stake-2.0.sol\":9118:9158  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9076:9083  summary */\n      swap2\n        /* \"contracts/Stake-2.0.sol\":8166:9190  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10065:10621  function claimAirdrop() external {... */\n    tag_30:\n        /* \"contracts/Stake-2.0.sol\":10196:10206  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":10160:10180  Stake storage staker */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10183:10207  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":10183:10195  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":10183:10207  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":10222:10235  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stake-2.0.sol\":10222:10239  staker.amount > 0 */\n      iszero\n        /* \"contracts/Stake-2.0.sol\":10218:10615  if (staker.amount > 0) {... */\n      tag_109\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10259:10296  calculateWeek(staker.latestClaimDrop) */\n      tag_110\n        /* \"contracts/Stake-2.0.sol\":10273:10279  staker */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10273:10295  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":10259:10272  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":10259:10296  calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_110:\n        /* \"contracts/Stake-2.0.sol\":10255:10372  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n      tag_111\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10328:10357  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      shl(0xe2, 0x376115b3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":10255:10372  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_111:\n        /* \"contracts/Stake-2.0.sol\":10412:10413  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10386:10409  staker.claimableAirdrop */\n      0x05\n      dup3\n      add\n        /* \"contracts/Stake-2.0.sol\":10386:10413  staker.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":10452:10467  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":10427:10449  staker.latestClaimDrop */\n      0x06\n      dup3\n      add\n        /* \"contracts/Stake-2.0.sol\":10427:10467  staker.latestClaimDrop = block.timestamp */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":10489:10502  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":10576:10589  staker.amount */\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":10489:10502  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10482:10512  IERC20(token_address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10530:10540  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10558:10590  _calculateAirdrop(staker.amount) */\n      tag_112\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10558:10575  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":10558:10590  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/Stake-2.0.sol\":10482:10604  IERC20(token_address).transfer(... */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Stake-2.0.sol\":10482:10604  IERC20(token_address).transfer(... */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3047:3081   */\n      mstore\n        /* \"#utility.yul\":2960:2978   */\n      0x44\n      add\n        /* \"contracts/Stake-2.0.sol\":10482:10604  IERC20(token_address).transfer(... */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_116\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_116:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_117\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      pop\n        /* \"contracts/Stake-2.0.sol\":10218:10615  if (staker.amount > 0) {... */\n    tag_109:\n        /* \"contracts/Stake-2.0.sol\":10098:10621  {... */\n      pop\n        /* \"contracts/Stake-2.0.sol\":10065:10621  function claimAirdrop() external {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":4297:5534  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3937:3939   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3919:3940   */\n      mstore\n        /* \"#utility.yul\":3976:3978   */\n      0x1f\n        /* \"#utility.yul\":3956:3974   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3949:3979   */\n      mstore\n        /* \"#utility.yul\":4015:4048   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3995:4013   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3988:4049   */\n      mstore\n        /* \"#utility.yul\":4066:4084   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_124\n        /* \"#utility.yul\":3735:4090   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_130:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      swap1\n      dup2\n      sstore\n        /* \"contracts/Stake-2.0.sol\":4580:4590  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4567:4591  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4567:4579  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":4567:4591  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4567:4598  stakeholders[msg.sender].amount */\n      sload\n        /* \"contracts/Stake-2.0.sol\":4567:4603  stakeholders[msg.sender].amount != 0 */\n      iszero\n        /* \"contracts/Stake-2.0.sol\":4563:4660  if (stakeholders[msg.sender].amount != 0) {... */\n      tag_134\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4626:4649  Staking__userIsStaker() */\n      mload(0x40)\n      shl(0xe0, 0x04462d27)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4563:4660  if (stakeholders[msg.sender].amount != 0) {... */\n    tag_134:\n        /* \"contracts/Stake-2.0.sol\":4674:4701  stakingPackage[stakePeriod] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4674:4688  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":4674:4701  stakingPackage[stakePeriod] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":4670:4771  if (stakingPackage[stakePeriod] == 0) {... */\n      tag_135\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4729:4760  Staking_noStakingPackageFound() */\n      mload(0x40)\n      shl(0xe2, 0x254ddef9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4670:4771  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_135:\n        /* \"contracts/Stake-2.0.sol\":4796:4797  1 */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4781:4792  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4781:4797  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_136\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_136:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":4814:4824  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4807:4825  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4807:4813  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":4807:4825  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4807:4844  voters[msg.sender].votingRight = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stake-2.0.sol\":4840:4844  true */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4807:4844  voters[msg.sender].votingRight = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      dup1\n      mload\n      0xe0\n      dup2\n      add\n      dup3\n      mstore\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4962:4977  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      dup2\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5195:5222  stakingPackage[stakePeriod] */\n      dup6\n      dup6\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5195:5209  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":5195:5222  stakingPackage[stakePeriod] */\n      swap1\n      swap4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      swap1\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4962:4977  block.timestamp */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      0x60\n      dup2\n      add\n        /* \"contracts/Stake-2.0.sol\":5237:5260  stakePeriod + timestamp */\n      tag_137\n        /* \"contracts/Stake-2.0.sol\":4962:4977  block.timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":5210:5221  stakePeriod */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":5237:5260  stakePeriod + timestamp */\n      tag_102\n      jump\t// in\n    tag_137:\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5275:5276  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5133:5316  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5119:5129  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5106:5130  stakeholders[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5106:5118  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":5106:5130  stakeholders[msg.sender] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":5106:5316  stakeholders[msg.sender] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      dup2\n      add\n      mload\n      0x02\n      dup4\n      add\n      sstore\n      swap3\n      dup5\n      add\n      mload\n      0x03\n      dup3\n      add\n      sstore\n      0x80\n      dup5\n      add\n      mload\n      0x04\n      dup1\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      sstore\n      0xa0\n      dup6\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap5\n      add\n      mload\n      0x06\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5334:5347  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":5327:5396  IERC20(token_address).transferFrom(msg.sender, address(this), amount) */\n      swap2\n      mload\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":4335:4369   */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5382:5386  this */\n      address\n        /* \"#utility.yul\":4385:4403   */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":4378:4421   */\n      mstore\n        /* \"#utility.yul\":4437:4455   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4430:4464   */\n      dup6\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":5334:5347  token_address */\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":5327:5361  IERC20(token_address).transferFrom */\n      0x23b872dd\n      swap1\n        /* \"#utility.yul\":4270:4288   */\n      0x64\n      add\n        /* \"contracts/Stake-2.0.sol\":5327:5396  IERC20(token_address).transferFrom(msg.sender, address(this), amount) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_141\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_141:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_142\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_142:\n      pop\n        /* \"contracts/Stake-2.0.sol\":5470:5480  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5463:5527  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stake-2.0.sol\":5482:5488  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5490:5499  timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":5502:5525  stakePeriod + timestamp */\n      tag_143\n        /* \"contracts/Stake-2.0.sol\":5490:5499  timestamp */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":5502:5513  stakePeriod */\n      dup8\n        /* \"contracts/Stake-2.0.sol\":5502:5525  stakePeriod + timestamp */\n      tag_102\n      jump\t// in\n    tag_143:\n        /* \"contracts/Stake-2.0.sol\":5463:5527  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4677:4702   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4733:4735   */\n      0x20\n        /* \"#utility.yul\":4718:4736   */\n      dup5\n      add\n        /* \"#utility.yul\":4711:4745   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":4761:4779   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4754:4788   */\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x60\n        /* \"#utility.yul\":4650:4668   */\n      add\n        /* \"contracts/Stake-2.0.sol\":5463:5527  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":4297:5534  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":5540:5846  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_149\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_149:\n        /* \"contracts/Stake-2.0.sol\":5698:5700  30 */\n      0x1e\n        /* \"contracts/Stake-2.0.sol\":5689:5695  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":5689:5700  amount > 30 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":5685:5766  if (amount > 30) {... */\n      iszero\n      tag_152\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":5723:5755  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      shl(0xe0, 0xf1a470d7)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":5685:5766  if (amount > 30) {... */\n    tag_152:\n        /* \"contracts/Stake-2.0.sol\":5775:5793  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Stake-2.0.sol\":5775:5802  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5817:5839  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5817:5839  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":5817:5839  PenaltyChanged(amount) */\n    tag_153:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stake-2.0.sol\":5540:5846  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9740:9874  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_67:\n        /* \"contracts/Stake-2.0.sol\":9803:9810  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9861:9867  7 days */\n      0x093a80\n        /* \"contracts/Stake-2.0.sol\":9830:9857  block.timestamp - timestamp */\n      tag_156\n        /* \"contracts/Stake-2.0.sol\":9848:9857  timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":9830:9845  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9830:9857  block.timestamp - timestamp */\n      tag_157\n      jump\t// in\n    tag_156:\n        /* \"contracts/Stake-2.0.sol\":9829:9867  (block.timestamp - timestamp) / 7 days */\n      tag_158\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_158:\n        /* \"contracts/Stake-2.0.sol\":9822:9867  return (block.timestamp - timestamp) / 7 days */\n      swap3\n        /* \"contracts/Stake-2.0.sol\":9740:9874  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":7238:8160  function withdrawStake() external nonReentrant {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3937:3939   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3919:3940   */\n      mstore\n        /* \"#utility.yul\":3976:3978   */\n      0x1f\n        /* \"#utility.yul\":3956:3974   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3949:3979   */\n      mstore\n        /* \"#utility.yul\":4015:4048   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3995:4013   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3988:4049   */\n      mstore\n        /* \"#utility.yul\":4066:4084   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_124\n        /* \"#utility.yul\":3735:4090   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_160:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      dup2\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7442:7452  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7429:7453  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7429:7441  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7429:7453  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7403:7453  Stake memory user_stake = stakeholders[msg.sender] */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      swap4\n      dup5\n      add\n      sload\n      swap1\n      dup3\n      add\n      mstore\n      0x03\n      dup4\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup4\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup4\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      swap1\n      swap3\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7480:7513  _calculateStakeReward(user_stake) */\n      tag_163\n        /* \"contracts/Stake-2.0.sol\":7403:7453  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":7480:7501  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":7480:7513  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_163:\n        /* \"contracts/Stake-2.0.sol\":7544:7554  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7531:7555  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7531:7543  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7531:7555  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7524:7555  delete stakeholders[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x06\n      swap1\n      swap2\n      add\n      dup3\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7565:7576  totalVoters */\n      0x08\n        /* \"contracts/Stake-2.0.sol\":7565:7581  totalVoters -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stake-2.0.sol\":7463:7513  uint256 reward = _calculateStakeReward(user_stake) */\n      swap4\n      swap5\n      pop\n        /* \"contracts/Stake-2.0.sol\":7524:7555  delete stakeholders[msg.sender] */\n      swap1\n      swap3\n        /* \"contracts/Stake-2.0.sol\":7565:7576  totalVoters */\n      swap1\n      swap2\n        /* \"contracts/Stake-2.0.sol\":7531:7555  stakeholders[msg.sender] */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7565:7581  totalVoters -= 1 */\n      tag_164\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7524:7555  delete stakeholders[msg.sender] */\n      dup5\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7565:7581  totalVoters -= 1 */\n      tag_157\n      jump\t// in\n    tag_164:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7605:7615  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7598:7616  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7598:7604  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":7598:7616  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7623:7632  _votingId */\n      sload(0x07)\n        /* \"contracts/Stake-2.0.sol\":7598:7633  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7598:7622  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stake-2.0.sol\":7598:7633  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7591:7633  delete voters[msg.sender].voted[_votingId] */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7648:7670  user_stake.releaseTime */\n      0x60\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":7673:7688  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/Stake-2.0.sol\":7644:8154  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_165\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":7722:7744  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7762:7784  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":7801:7856  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_166\n        /* \"contracts/Stake-2.0.sol\":7830:7840  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7830:7847  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":7849:7855  reward */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7801:7829  _calculateStakingWithPenalty */\n      tag_167\n        /* \"contracts/Stake-2.0.sol\":7801:7856  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_166:\n        /* \"contracts/Stake-2.0.sol\":7878:7891  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":7704:7856  (... */\n      swap2\n      swap4\n      pop\n      swap2\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":7878:7891  token_address */\n      and\n        /* \"contracts/Stake-2.0.sol\":7871:7901  IERC20(token_address).transfer */\n      0xa9059cbb\n        /* \"contracts/Stake-2.0.sol\":7919:7929  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7948:7979  amount_reduced + reward_reduced */\n      tag_168\n        /* \"contracts/Stake-2.0.sol\":7704:7856  (... */\n      dup5\n      dup7\n        /* \"contracts/Stake-2.0.sol\":7948:7979  amount_reduced + reward_reduced */\n      tag_102\n      jump\t// in\n    tag_168:\n        /* \"contracts/Stake-2.0.sol\":7871:7994  IERC20(token_address).transfer(... */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Stake-2.0.sol\":7871:7994  IERC20(token_address).transfer(... */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3047:3081   */\n      mstore\n        /* \"#utility.yul\":2960:2978   */\n      0x44\n      add\n        /* \"contracts/Stake-2.0.sol\":7871:7994  IERC20(token_address).transfer(... */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_171\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_171:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_172\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_172:\n      pop\n        /* \"contracts/Stake-2.0.sol\":7690:8005  {... */\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7644:8154  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_173)\n    tag_165:\n        /* \"contracts/Stake-2.0.sol\":8032:8045  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":8102:8119  user_stake.amount */\n      dup3\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":8032:8045  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8025:8055  IERC20(token_address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8073:8083  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8102:8128  user_stake.amount + reward */\n      tag_174\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8122:8128  reward */\n      dup6\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8102:8128  user_stake.amount + reward */\n      tag_102\n      jump\t// in\n    tag_174:\n        /* \"contracts/Stake-2.0.sol\":8025:8143  IERC20(token_address).transfer(... */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Stake-2.0.sol\":8025:8143  IERC20(token_address).transfer(... */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3047:3081   */\n      mstore\n        /* \"#utility.yul\":2960:2978   */\n      0x44\n      add\n        /* \"contracts/Stake-2.0.sol\":8025:8143  IERC20(token_address).transfer(... */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_177\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_177:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_178\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_178:\n      pop\n        /* \"contracts/Stake-2.0.sol\":7644:8154  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_173:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7238:8160  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9302:9392  function startAirdrop() external onlyOwner {... */\n    tag_81:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_183\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_183:\n        /* \"contracts/Stake-2.0.sol\":9370:9385  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9355:9367  airdropSince */\n      0x05\n        /* \"contracts/Stake-2.0.sol\":9355:9385  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":9302:9392  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9398:9632  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_189\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_189:\n        /* \"contracts/Stake-2.0.sol\":9489:9492  200 */\n      0xc8\n        /* \"contracts/Stake-2.0.sol\":9480:9486  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":9480:9492  amount > 200 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":9476:9559  if (amount > 200) {... */\n      iszero\n      tag_192\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":9515:9548  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      shl(0xe4, 0x0a552cf1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":9476:9559  if (amount > 200) {... */\n    tag_192:\n        /* \"contracts/Stake-2.0.sol\":9568:9579  airdropRate */\n      0x04\n        /* \"contracts/Stake-2.0.sol\":9568:9588  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":9603:9625  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9603:9625  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":9603:9625  AirdropChanged(amount) */\n      tag_153\n        /* \"#utility.yul\":842:1019   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_197\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_197:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_200\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5131:5133   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5113:5134   */\n      mstore\n        /* \"#utility.yul\":5170:5172   */\n      0x26\n        /* \"#utility.yul\":5150:5168   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5143:5173   */\n      mstore\n        /* \"#utility.yul\":5209:5243   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5189:5207   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5182:5244   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5260:5278   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5253:5289   */\n      mstore\n        /* \"#utility.yul\":5306:5325   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_124\n        /* \"#utility.yul\":4929:5331   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_200:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_109\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":6089:6526  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_93:\n        /* \"contracts/Stake-2.0.sol\":6219:6236  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stake-2.0.sol\":6192:6199  uint256 */\n      0x00\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6215:6276  if (user_stake.amount == 0) {... */\n      tag_205\n      jumpi\n      pop\n        /* \"contracts/Stake-2.0.sol\":6264:6265  0 */\n      0x00\n      swap2\n        /* \"contracts/Stake-2.0.sol\":6089:6526  function _calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6215:6276  if (user_stake.amount == 0) {... */\n    tag_205:\n        /* \"contracts/Stake-2.0.sol\":6515:6519  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stake-2.0.sol\":6468:6511  _calculateStakingDuration(user_stake.since) */\n      tag_206\n        /* \"contracts/Stake-2.0.sol\":6494:6504  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6494:6510  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6468:6493  _calculateStakingDuration */\n      tag_207\n        /* \"contracts/Stake-2.0.sol\":6468:6511  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_206:\n        /* \"contracts/Stake-2.0.sol\":6429:6449  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6393:6410  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stake-2.0.sol\":6393:6449  user_stake.amount *... */\n      tag_208\n      swap2\n        /* \"contracts/Stake-2.0.sol\":6429:6449  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6393:6449  user_stake.amount *... */\n      tag_96\n      jump\t// in\n    tag_208:\n        /* \"contracts/Stake-2.0.sol\":6393:6511  user_stake.amount *... */\n      tag_156\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9880:10059  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_106:\n        /* \"contracts/Stake-2.0.sol\":9975:9982  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10044:10052  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stake-2.0.sol\":10036:10040  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":10021:10032  airdropRate */\n      sload(0x04)\n        /* \"contracts/Stake-2.0.sol\":10007:10018  stakeAmount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":10007:10032  stakeAmount * airdropRate */\n      tag_212\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_212:\n        /* \"contracts/Stake-2.0.sol\":10006:10040  (stakeAmount * airdropRate) / 1000 */\n      tag_156\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_128:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6532:6891  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_167:\n        /* \"contracts/Stake-2.0.sol\":6649:6656  uint256 */\n      0x00\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6685:6696  amount == 0 */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6681:6736  if (amount == 0) {... */\n      tag_218\n      jumpi\n      pop\n        /* \"contracts/Stake-2.0.sol\":6720:6721  0 */\n      0x00\n      swap1\n      pop\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6712:6725  return (0, 0) */\n      jump(tag_217)\n        /* \"contracts/Stake-2.0.sol\":6681:6736  if (amount == 0) {... */\n    tag_218:\n        /* \"contracts/Stake-2.0.sol\":6808:6812  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":6786:6804  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":6777:6783  amount */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6777:6804  amount * stakingPenaltyRate */\n      tag_219\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_219:\n        /* \"contracts/Stake-2.0.sol\":6776:6812  (amount * stakingPenaltyRate) / 1000 */\n      tag_220\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_220:\n        /* \"contracts/Stake-2.0.sol\":6766:6813  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_221\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6766:6772  amount */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6766:6813  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_157\n      jump\t// in\n    tag_221:\n        /* \"contracts/Stake-2.0.sol\":6869:6873  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":6847:6865  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":6838:6844  reward */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6838:6865  reward * stakingPenaltyRate */\n      tag_222\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_222:\n        /* \"contracts/Stake-2.0.sol\":6837:6873  (reward * stakingPenaltyRate) / 1000 */\n      tag_223\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_223:\n        /* \"contracts/Stake-2.0.sol\":6827:6874  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_224\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6827:6833  reward */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6827:6874  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_157\n      jump\t// in\n    tag_224:\n        /* \"contracts/Stake-2.0.sol\":6745:6884  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stake-2.0.sol\":6532:6891  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_217:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":5852:6083  function _calculateStakingDuration(uint256 since)... */\n    tag_207:\n        /* \"contracts/Stake-2.0.sol\":5949:5956  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6068:6076  365 days */\n      0x01e13380\n        /* \"contracts/Stake-2.0.sol\":6033:6056  block.timestamp - since */\n      tag_226\n        /* \"contracts/Stake-2.0.sol\":6051:6056  since */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6033:6048  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":6033:6056  block.timestamp - since */\n      tag_157\n      jump\t// in\n    tag_226:\n        /* \"contracts/Stake-2.0.sol\":6032:6064  (block.timestamp - since) * 1e24 */\n      tag_156\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6060:6064  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stake-2.0.sol\":6032:6064  (block.timestamp - since) * 1e24 */\n      tag_96\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_229\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_229:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":1024:1272   */\n    tag_39:\n        /* \"#utility.yul\":1092:1098   */\n      0x00\n        /* \"#utility.yul\":1100:1106   */\n      dup1\n        /* \"#utility.yul\":1153:1155   */\n      0x40\n        /* \"#utility.yul\":1141:1150   */\n      dup4\n        /* \"#utility.yul\":1132:1139   */\n      dup6\n        /* \"#utility.yul\":1128:1151   */\n      sub\n        /* \"#utility.yul\":1124:1156   */\n      slt\n        /* \"#utility.yul\":1121:1173   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":1169:1170   */\n      0x00\n        /* \"#utility.yul\":1166:1167   */\n      dup1\n        /* \"#utility.yul\":1159:1171   */\n      revert\n        /* \"#utility.yul\":1121:1173   */\n    tag_236:\n      pop\n      pop\n        /* \"#utility.yul\":1192:1215   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1262:1264   */\n      0x20\n        /* \"#utility.yul\":1247:1265   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1234:1266   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1024:1272   */\n      jump\t// out\n        /* \"#utility.yul\":1277:1457   */\n    tag_46:\n        /* \"#utility.yul\":1336:1342   */\n      0x00\n        /* \"#utility.yul\":1389:1391   */\n      0x20\n        /* \"#utility.yul\":1377:1386   */\n      dup3\n        /* \"#utility.yul\":1368:1375   */\n      dup5\n        /* \"#utility.yul\":1364:1387   */\n      sub\n        /* \"#utility.yul\":1360:1392   */\n      slt\n        /* \"#utility.yul\":1357:1409   */\n      iszero\n      tag_238\n      jumpi\n        /* \"#utility.yul\":1405:1406   */\n      0x00\n        /* \"#utility.yul\":1402:1403   */\n      dup1\n        /* \"#utility.yul\":1395:1407   */\n      revert\n        /* \"#utility.yul\":1357:1409   */\n    tag_238:\n      pop\n        /* \"#utility.yul\":1428:1451   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1277:1457   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1670:1956   */\n    tag_61:\n        /* \"#utility.yul\":1729:1735   */\n      0x00\n        /* \"#utility.yul\":1782:1784   */\n      0x20\n        /* \"#utility.yul\":1770:1779   */\n      dup3\n        /* \"#utility.yul\":1761:1768   */\n      dup5\n        /* \"#utility.yul\":1757:1780   */\n      sub\n        /* \"#utility.yul\":1753:1785   */\n      slt\n        /* \"#utility.yul\":1750:1802   */\n      iszero\n      tag_241\n      jumpi\n        /* \"#utility.yul\":1798:1799   */\n      0x00\n        /* \"#utility.yul\":1795:1796   */\n      dup1\n        /* \"#utility.yul\":1788:1800   */\n      revert\n        /* \"#utility.yul\":1750:1802   */\n    tag_241:\n        /* \"#utility.yul\":1824:1847   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1876:1907   */\n      dup2\n      and\n        /* \"#utility.yul\":1866:1908   */\n      dup2\n      eq\n        /* \"#utility.yul\":1856:1926   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":1922:1923   */\n      0x00\n        /* \"#utility.yul\":1919:1920   */\n      dup1\n        /* \"#utility.yul\":1912:1924   */\n      revert\n        /* \"#utility.yul\":1856:1926   */\n    tag_242:\n        /* \"#utility.yul\":1945:1950   */\n      swap4\n        /* \"#utility.yul\":1670:1956   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2153:2280   */\n    tag_231:\n        /* \"#utility.yul\":2214:2224   */\n      0x4e487b71\n        /* \"#utility.yul\":2209:2212   */\n      0xe0\n        /* \"#utility.yul\":2205:2225   */\n      shl\n        /* \"#utility.yul\":2202:2203   */\n      0x00\n        /* \"#utility.yul\":2195:2226   */\n      mstore\n        /* \"#utility.yul\":2245:2249   */\n      0x11\n        /* \"#utility.yul\":2242:2243   */\n      0x04\n        /* \"#utility.yul\":2235:2250   */\n      mstore\n        /* \"#utility.yul\":2269:2273   */\n      0x24\n        /* \"#utility.yul\":2266:2267   */\n      0x00\n        /* \"#utility.yul\":2259:2274   */\n      revert\n        /* \"#utility.yul\":2285:2453   */\n    tag_96:\n        /* \"#utility.yul\":2325:2332   */\n      0x00\n        /* \"#utility.yul\":2391:2392   */\n      dup2\n        /* \"#utility.yul\":2387:2388   */\n      0x00\n        /* \"#utility.yul\":2383:2389   */\n      not\n        /* \"#utility.yul\":2379:2393   */\n      div\n        /* \"#utility.yul\":2376:2377   */\n      dup4\n        /* \"#utility.yul\":2373:2394   */\n      gt\n        /* \"#utility.yul\":2368:2369   */\n      dup3\n        /* \"#utility.yul\":2361:2370   */\n      iszero\n        /* \"#utility.yul\":2354:2371   */\n      iszero\n        /* \"#utility.yul\":2350:2395   */\n      and\n        /* \"#utility.yul\":2347:2418   */\n      iszero\n      tag_247\n      jumpi\n        /* \"#utility.yul\":2398:2416   */\n      tag_247\n      tag_231\n      jump\t// in\n    tag_247:\n      pop\n        /* \"#utility.yul\":2438:2447   */\n      mul\n      swap1\n        /* \"#utility.yul\":2285:2453   */\n      jump\t// out\n        /* \"#utility.yul\":2458:2675   */\n    tag_98:\n        /* \"#utility.yul\":2498:2499   */\n      0x00\n        /* \"#utility.yul\":2524:2525   */\n      dup3\n        /* \"#utility.yul\":2514:2646   */\n      tag_249\n      jumpi\n        /* \"#utility.yul\":2568:2578   */\n      0x4e487b71\n        /* \"#utility.yul\":2563:2566   */\n      0xe0\n        /* \"#utility.yul\":2559:2579   */\n      shl\n        /* \"#utility.yul\":2556:2557   */\n      0x00\n        /* \"#utility.yul\":2549:2580   */\n      mstore\n        /* \"#utility.yul\":2603:2607   */\n      0x12\n        /* \"#utility.yul\":2600:2601   */\n      0x04\n        /* \"#utility.yul\":2593:2608   */\n      mstore\n        /* \"#utility.yul\":2631:2635   */\n      0x24\n        /* \"#utility.yul\":2628:2629   */\n      0x00\n        /* \"#utility.yul\":2621:2636   */\n      revert\n        /* \"#utility.yul\":2514:2646   */\n    tag_249:\n      pop\n        /* \"#utility.yul\":2660:2669   */\n      div\n      swap1\n        /* \"#utility.yul\":2458:2675   */\n      jump\t// out\n        /* \"#utility.yul\":2680:2808   */\n    tag_102:\n        /* \"#utility.yul\":2720:2723   */\n      0x00\n        /* \"#utility.yul\":2751:2752   */\n      dup3\n        /* \"#utility.yul\":2747:2753   */\n      not\n        /* \"#utility.yul\":2744:2745   */\n      dup3\n        /* \"#utility.yul\":2741:2754   */\n      gt\n        /* \"#utility.yul\":2738:2777   */\n      iszero\n      tag_252\n      jumpi\n        /* \"#utility.yul\":2757:2775   */\n      tag_252\n      tag_231\n      jump\t// in\n    tag_252:\n      pop\n        /* \"#utility.yul\":2793:2802   */\n      add\n      swap1\n        /* \"#utility.yul\":2680:2808   */\n      jump\t// out\n        /* \"#utility.yul\":3092:3369   */\n    tag_118:\n        /* \"#utility.yul\":3159:3165   */\n      0x00\n        /* \"#utility.yul\":3212:3214   */\n      0x20\n        /* \"#utility.yul\":3200:3209   */\n      dup3\n        /* \"#utility.yul\":3191:3198   */\n      dup5\n        /* \"#utility.yul\":3187:3210   */\n      sub\n        /* \"#utility.yul\":3183:3215   */\n      slt\n        /* \"#utility.yul\":3180:3232   */\n      iszero\n      tag_255\n      jumpi\n        /* \"#utility.yul\":3228:3229   */\n      0x00\n        /* \"#utility.yul\":3225:3226   */\n      dup1\n        /* \"#utility.yul\":3218:3230   */\n      revert\n        /* \"#utility.yul\":3180:3232   */\n    tag_255:\n        /* \"#utility.yul\":3260:3269   */\n      dup2\n        /* \"#utility.yul\":3254:3270   */\n      mload\n        /* \"#utility.yul\":3313:3318   */\n      dup1\n        /* \"#utility.yul\":3306:3319   */\n      iszero\n        /* \"#utility.yul\":3299:3320   */\n      iszero\n        /* \"#utility.yul\":3292:3297   */\n      dup2\n        /* \"#utility.yul\":3289:3321   */\n      eq\n        /* \"#utility.yul\":3279:3339   */\n      tag_242\n      jumpi\n        /* \"#utility.yul\":3335:3336   */\n      0x00\n        /* \"#utility.yul\":3332:3333   */\n      dup1\n        /* \"#utility.yul\":3325:3337   */\n      revert\n        /* \"#utility.yul\":3374:3730   */\n    tag_125:\n        /* \"#utility.yul\":3576:3578   */\n      0x20\n        /* \"#utility.yul\":3558:3579   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3595:3613   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":3588:3618   */\n      mstore\n        /* \"#utility.yul\":3654:3688   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3649:3651   */\n      0x40\n        /* \"#utility.yul\":3634:3652   */\n      dup3\n      add\n        /* \"#utility.yul\":3627:3689   */\n      mstore\n        /* \"#utility.yul\":3721:3723   */\n      0x60\n        /* \"#utility.yul\":3706:3724   */\n      add\n      swap1\n        /* \"#utility.yul\":3374:3730   */\n      jump\t// out\n        /* \"#utility.yul\":4799:4924   */\n    tag_157:\n        /* \"#utility.yul\":4839:4843   */\n      0x00\n        /* \"#utility.yul\":4867:4868   */\n      dup3\n        /* \"#utility.yul\":4864:4865   */\n      dup3\n        /* \"#utility.yul\":4861:4869   */\n      lt\n        /* \"#utility.yul\":4858:4892   */\n      iszero\n      tag_263\n      jumpi\n        /* \"#utility.yul\":4872:4890   */\n      tag_263\n      tag_231\n      jump\t// in\n    tag_263:\n      pop\n        /* \"#utility.yul\":4909:4918   */\n      sub\n      swap1\n        /* \"#utility.yul\":4799:4924   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220030899ca6e6391d489d6c19e70532c2aa0d913c5522e80b05c5961148fb925f064736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_355": {
									"entryPoint": null,
									"id": 355,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_234": {
									"entryPoint": null,
									"id": 234,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 229,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 311,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:5",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:5",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:5"
															},
															"nodeType": "YulIf",
															"src": "105:52:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:5"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:5"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:5",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:5",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:5"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:5"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:5"
															},
															"nodeType": "YulIf",
															"src": "204:70:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:5",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:5",
														"type": ""
													}
												],
												"src": "14:290:5"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 5,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x10CF CODESIZE SUB DUP1 PUSH2 0x10CF DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x137 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3D CALLER PUSH2 0xE5 JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 SSTORE PUSH1 0x50 PUSH1 0x4 SSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x6 PUSH32 0xA1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C SSTORE PUSH1 0x7 PUSH32 0x89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832 SSTORE PUSH4 0x1E13380 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH32 0xDC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B SSTORE PUSH2 0x167 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xF59 DUP1 PUSH2 0x176 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19D SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH2 0x444 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x527 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x7B6 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x211 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x85E JUMP JUMPDEST TIMESTAMP PUSH2 0x1B9 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0xAED JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE16 JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0xD7D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB018F087 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x398 DUP4 PUSH2 0xC36 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3F1 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x3D7 SWAP2 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x83E JUMP JUMPDEST GT ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 PUSH2 0x415 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xC7B JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x524 JUMPI PUSH2 0x467 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0x83E JUMP JUMPDEST PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH4 0x376115B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x4B3 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x522 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 PUSH1 0x0 PUSH2 0xC9D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4462D27 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0x254DDEF9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62A SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x67E DUP4 DUP6 PUSH2 0xE9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD SWAP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75F SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x78E DUP2 DUP8 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x802 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF1A470D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x84E DUP4 TIMESTAMP PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x858 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x919 DUP3 PUSH2 0xC36 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x96E SWAP1 DUP5 SWAP1 PUSH2 0xF0C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xA4F JUMPI PUSH1 0x0 DUP1 PUSH2 0x9B7 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x9D8 DUP5 DUP7 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA47 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP POP POP PUSH2 0xAE4 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0xA73 SWAP1 DUP6 SWAP1 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xABE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAE2 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA552CF1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x833 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH2 0x524 DUP2 PUSH2 0xC9D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xC47 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xC60 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xC71 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xC93 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xD02 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xD51 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xD13 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0xD1D SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0xD27 SWAP1 DUP6 PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xD38 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0xD4C SWAP1 DUP6 PUSH2 0xF0C JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xD69 DUP4 TIMESTAMP PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x84E SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDD6 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE76 JUMPI PUSH2 0xE76 PUSH2 0xE46 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE98 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xEB0 JUMPI PUSH2 0xEB0 PUSH2 0xE46 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xF1E JUMPI PUSH2 0xF1E PUSH2 0xE46 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB ADDMOD SWAP10 0xCA PUSH15 0x6391D489D6C19E70532C2AA0D913C5 MSTORE 0x2E DUP1 0xB0 0x5C MSIZE PUSH2 0x148F 0xB9 0x25 CREATE PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "971:11440:4:-:0;;;1671:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;921:32:0;719:10:3;921:18:0;:32::i;:::-;1791:2:4;1770:18;:23;1817:2;1803:11;:16;1830:13;:21;;-1:-1:-1;;;;;;1830:21:4;-1:-1:-1;;;;;1830:21:4;;;;;;;;;;1862:14;:23;;1888:1;1862:23;:27;1926:1;1899:24;:28;1952:8;-1:-1:-1;1937:24:4;1964:1;1937:24;:28;971:11440;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;14:290:5:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:5;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:5:o;:::-;971:11440:4;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_blockTimestamp_897": {
									"entryPoint": null,
									"id": 897,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_calculateAirdrop_931": {
									"entryPoint": 3195,
									"id": 931,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_612": {
									"entryPoint": 3126,
									"id": 612,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_581": {
									"entryPoint": 3416,
									"id": 581,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_653": {
									"entryPoint": 3311,
									"id": 653,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_msgSender_234": {
									"entryPoint": null,
									"id": 234,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 3229,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_300": {
									"entryPoint": null,
									"id": 300,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_302": {
									"entryPoint": null,
									"id": 302,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateWeek_913": {
									"entryPoint": 2110,
									"id": 913,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_888": {
									"entryPoint": 2845,
									"id": 888,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_562": {
									"entryPoint": 1974,
									"id": 562,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_985": {
									"entryPoint": 1092,
									"id": 985,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@hasStake_853": {
									"entryPoint": 750,
									"id": 853,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1319,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@stake_538": {
									"entryPoint": 1382,
									"id": 538,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_298": {
									"entryPoint": null,
									"id": 298,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_864": {
									"entryPoint": 2797,
									"id": 864,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_319": {
									"entryPoint": null,
									"id": 319,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_308": {
									"entryPoint": null,
									"id": 308,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 2974,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@votedUsers_317": {
									"entryPoint": null,
									"id": 317,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_313": {
									"entryPoint": null,
									"id": 313,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_736": {
									"entryPoint": 2142,
									"id": 736,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3606,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 3765,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3581,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 3547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3799,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$378_memory_ptr__to_t_struct$_StakingSummary_$378_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3741,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 3707,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3676,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3654,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5333:5",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:5",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:660:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "187:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:3:5",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "195:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "187:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "230:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "241:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "241:13:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:32:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "223:32:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "275:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "286:4:5",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:20:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "303:6:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "311:4:5",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:17:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "293:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "293:24:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:54:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "264:54:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:44:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "365:4:5",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:17:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "347:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:24:5"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "331:12:5",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "402:4:5",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "387:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "387:20:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "415:12:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "409:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "409:19:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "380:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:49:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "380:49:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "449:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "445:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "445:18:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "475:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "489:4:5",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "471:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "471:23:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "465:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "465:30:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:58:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "438:58:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "516:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "527:3:5",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "512:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "512:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "543:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "557:4:5",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "539:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "539:23:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "533:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "533:30:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "505:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:59:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:59:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "584:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "595:3:5",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "611:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "625:2:5",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "607:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "607:21:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "601:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "601:28:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "573:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:57:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "573:57:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:3:5",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "677:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "691:3:5",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "673:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "673:22:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "667:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "667:29:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "639:58:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "639:58:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "717:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "728:3:5",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "713:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "744:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "758:3:5",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "740:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "740:22:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "734:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "734:29:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "706:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:58:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "706:58:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "784:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "795:3:5",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "780:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "780:19:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "811:12:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "825:3:5",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "807:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "807:22:5"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "801:5:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "801:29:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:58:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:58:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$378_memory_ptr__to_t_struct$_StakingSummary_$378_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "146:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "157:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "168:4:5",
														"type": ""
													}
												],
												"src": "14:823:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "943:76:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "953:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "965:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "976:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "961:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "961:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "953:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "995:9:5"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1006:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "988:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "988:25:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "988:25:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "912:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "923:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "934:4:5",
														"type": ""
													}
												],
												"src": "842:177:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1111:161:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1157:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1166:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1169:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1159:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1159:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1159:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1132:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1141:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1128:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1128:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1153:2:5",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1124:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1124:32:5"
															},
															"nodeType": "YulIf",
															"src": "1121:52:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1182:33:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1205:9:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1192:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1192:23:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1182:6:5"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1224:42:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1251:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1262:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1247:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1247:18:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1234:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1234:32:5"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1224:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1069:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1080:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1092:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1100:6:5",
														"type": ""
													}
												],
												"src": "1024:248:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1347:110:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1393:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1402:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1405:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1395:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1395:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1395:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1368:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1377:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1364:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1364:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1389:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1360:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1360:32:5"
															},
															"nodeType": "YulIf",
															"src": "1357:52:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1418:33:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1441:9:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1428:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1428:23:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1418:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1313:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1324:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1336:6:5",
														"type": ""
													}
												],
												"src": "1277:180:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1563:102:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1573:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1585:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1596:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1581:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1581:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1573:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1615:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1630:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1646:3:5",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1651:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1642:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1642:11:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1655:1:5",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1638:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1638:19:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1626:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1626:32:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1608:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1608:51:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1608:51:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1532:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1543:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1554:4:5",
														"type": ""
													}
												],
												"src": "1462:203:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1740:216:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1786:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1795:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1798:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1788:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1788:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1761:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1770:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1757:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1757:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1782:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1753:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1753:32:5"
															},
															"nodeType": "YulIf",
															"src": "1750:52:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1811:36:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1837:9:5"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1824:12:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1824:23:5"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1815:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1910:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1919:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1922:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1912:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1912:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1912:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1880:5:5"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1895:3:5",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1900:1:5",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1891:3:5"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1891:11:5"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1904:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1887:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1887:19:5"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1876:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1876:31:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1866:42:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "1859:50:5"
															},
															"nodeType": "YulIf",
															"src": "1856:70:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1935:15:5",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1945:5:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1935:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1706:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1717:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1729:6:5",
														"type": ""
													}
												],
												"src": "1670:286:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2056:92:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2066:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2078:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2089:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2074:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2074:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2066:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2108:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2133:6:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2126:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2126:14:5"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2119:6:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2119:22:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2101:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2101:41:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2101:41:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2025:9:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2036:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2047:4:5",
														"type": ""
													}
												],
												"src": "1961:187:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2185:95:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2202:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2209:3:5",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2214:10:5",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2205:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2205:20:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2195:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:31:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2195:31:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2242:1:5",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2245:4:5",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2235:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2235:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2235:15:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2266:1:5",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:4:5",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2259:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2259:15:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2259:15:5"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2153:127:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2337:116:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2396:22:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2398:16:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2398:18:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2398:18:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2368:1:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2361:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:9:5"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2354:6:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:17:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2376:1:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2387:1:5",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2383:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2383:6:5"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2391:1:5"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2379:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2379:14:5"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2373:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2373:21:5"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2350:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2350:45:5"
															},
															"nodeType": "YulIf",
															"src": "2347:71:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2427:20:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2442:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2445:1:5"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2438:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2438:9:5"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2427:7:5"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2316:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2319:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2325:7:5",
														"type": ""
													}
												],
												"src": "2285:168:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2504:171:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2535:111:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2556:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2563:3:5",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2568:10:5",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2559:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2559:20:5"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2549:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2549:31:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2549:31:5"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2600:1:5",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2603:4:5",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2593:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2593:15:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2593:15:5"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2628:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2631:4:5",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2621:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2621:15:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2621:15:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2524:1:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2517:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2517:9:5"
															},
															"nodeType": "YulIf",
															"src": "2514:132:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2655:14:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2664:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2667:1:5"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2660:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2660:9:5"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "2655:1:5"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2489:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2492:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "2498:1:5",
														"type": ""
													}
												],
												"src": "2458:217:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2728:80:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2755:22:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2757:16:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2757:18:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2757:18:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2744:1:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2751:1:5"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2747:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2747:6:5"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2741:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2741:13:5"
															},
															"nodeType": "YulIf",
															"src": "2738:39:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2786:16:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2797:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2800:1:5"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:9:5"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2786:3:5"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2711:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2714:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2720:3:5",
														"type": ""
													}
												],
												"src": "2680:128:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2942:145:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2952:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2964:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2975:2:5",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2960:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2960:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2952:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2994:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3009:6:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3025:3:5",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3030:1:5",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3021:3:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3021:11:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3034:1:5",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3017:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3017:19:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3005:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3005:32:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2987:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "2987:51:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2987:51:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3058:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3069:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3054:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3054:18:5"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3074:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3047:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3047:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3047:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2903:9:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2914:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2922:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2933:4:5",
														"type": ""
													}
												],
												"src": "2813:274:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3170:199:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3216:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3225:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3228:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3218:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3218:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3218:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3191:7:5"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3200:9:5"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3187:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3187:23:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3212:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3183:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3183:32:5"
															},
															"nodeType": "YulIf",
															"src": "3180:52:5"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3241:29:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3260:9:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3254:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3254:16:5"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3245:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3323:16:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3332:1:5",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3335:1:5",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3325:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3325:12:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3325:12:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3292:5:5"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3313:5:5"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3306:6:5"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3306:13:5"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3299:6:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3299:21:5"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3289:2:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3289:32:5"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3282:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3282:40:5"
															},
															"nodeType": "YulIf",
															"src": "3279:60:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3348:15:5",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3358:5:5"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3348:6:5"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3136:9:5",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3147:7:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3159:6:5",
														"type": ""
													}
												],
												"src": "3092:277:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:182:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3565:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3558:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3558:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3558:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3599:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3595:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3595:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3615:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3588:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3588:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3638:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3649:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3634:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3634:18:5"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3654:34:5",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3627:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3627:62:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3698:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3710:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3721:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3706:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3706:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3698:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3525:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3539:4:5",
														"type": ""
													}
												],
												"src": "3374:356:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3909:181:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3926:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3937:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3919:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3919:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3919:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3960:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3971:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3956:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3956:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3976:2:5",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3949:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3949:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3949:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3999:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4010:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3995:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3995:18:5"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4015:33:5",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3988:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3988:61:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3988:61:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4058:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4070:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4081:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4066:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4066:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4058:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3886:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3900:4:5",
														"type": ""
													}
												],
												"src": "3735:355:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4252:218:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4262:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4274:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4285:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4270:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4270:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4262:4:5"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4297:29:5",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4315:3:5",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4320:1:5",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "4311:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4311:11:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4324:1:5",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4307:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4307:19:5"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4301:2:5",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4342:9:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4357:6:5"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4365:2:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4353:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4353:15:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4335:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4335:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4335:34:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4389:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4400:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4385:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4385:18:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4409:6:5"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4417:2:5"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4405:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4405:15:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4378:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4378:43:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4378:43:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4441:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4452:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4437:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4437:18:5"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4457:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4430:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4430:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4430:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4205:9:5",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4216:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4224:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4232:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4243:4:5",
														"type": ""
													}
												],
												"src": "4095:375:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4632:162:5",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4642:26:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:5",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4650:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4650:18:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4642:4:5"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4684:9:5"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4695:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:25:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:25:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4722:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4733:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4718:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4718:18:5"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4738:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4711:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4711:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4711:34:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4765:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4776:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4761:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4761:18:5"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4781:6:5"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4754:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4754:34:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4754:34:5"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4585:9:5",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4596:6:5",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4604:6:5",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4612:6:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4623:4:5",
														"type": ""
													}
												],
												"src": "4475:319:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4848:76:5",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4870:22:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4872:16:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4872:18:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4872:18:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4864:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4867:1:5"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4861:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4861:8:5"
															},
															"nodeType": "YulIf",
															"src": "4858:34:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4901:17:5",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4913:1:5"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4916:1:5"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4909:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4909:9:5"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "4901:4:5"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4830:1:5",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4833:1:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4839:4:5",
														"type": ""
													}
												],
												"src": "4799:125:5"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5103:228:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5120:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5131:2:5",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5113:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5113:21:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5113:21:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5154:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5165:2:5",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5150:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5150:18:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5170:2:5",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5143:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5143:30:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5143:30:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5193:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5204:2:5",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5189:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5189:18:5"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5209:34:5",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:62:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:62:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5264:9:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5275:2:5",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5260:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5260:18:5"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5280:8:5",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5253:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5253:36:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5253:36:5"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5298:27:5",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5310:9:5"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5321:3:5",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5306:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5306:19:5"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5298:4:5"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5080:9:5",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5094:4:5",
														"type": ""
													}
												],
												"src": "4929:402:5"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_struct$_StakingSummary_$378_memory_ptr__to_t_struct$_StakingSummary_$378_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 5,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101215760003560e01c8063a143a5f2116100ad578063c63aa3e711610071578063c63aa3e7146102b1578063cb79c2e1146102b7578063d2a569c3146102c0578063d5dbdf1b146102c8578063f2fde38b146102db57600080fd5b8063a143a5f21461023a578063a3ec138d1461025a578063b5d9df831461028d578063b87da76d146102a0578063bed9d861146102a957600080fd5b80637b0472f0116100f45780637b0472f0146101cf5780638891cf0d146101e25780638c63f97f146101eb5780638c8e8fee146101fe5780638da5cb5b1461022957600080fd5b806310486b6a146101265780635b88349d146101a65780635f5300ff146101b0578063715018a6146101c7575b600080fd5b61012e6102ee565b60405161019d919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b6101ae610444565b005b6101b960085481565b60405190815260200161019d565b6101ae610527565b6101ae6101dd366004610ddb565b610566565b6101b960045481565b6101ae6101f9366004610dfd565b6107b6565b600b54610211906001600160a01b031681565b6040516001600160a01b03909116815260200161019d565b6001546001600160a01b0316610211565b6101b9610248366004610dfd565b600a6020526000908152604090205481565b61027d610268366004610e16565b60096020526000908152604090205460ff1681565b604051901515815260200161019d565b6101b961029b366004610dfd565b61083e565b6101b960055481565b6101ae61085e565b426101b9565b6101b960035481565b6101ae610aed565b6101ae6102d6366004610dfd565b610b1d565b6101ae6102e9366004610e16565b610b9e565b6102f6610d7d565b336000908152600c6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526103725760405163b018f08760e01b815260040160405180910390fd5b604080516060810182526000808252602082018190529181018390529061039883610c36565b90504282604001516060015111156103f1576103e8600354826103bb9190610e5c565b6103c59190610e7b565b60035484516103e8916103d791610e5c565b6103e19190610e7b565b6103eb9190610e9d565b60208301525b60006104008460c0015161083e565b11156104245760006104158460000151610c7b565b604084015160a0015250610432565b6040820151600060a0909101525b60408201516080015290518152919050565b336000908152600c6020526040902080541561052457610467816006015461083e565b6104845760405163376115b360e21b815260040160405180910390fd5b60006005820155426006820155600b5481546001600160a01b039091169063a9059cbb9033906104b390610c7b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610eb5565b505b50565b6001546001600160a01b0316331461055a5760405162461bcd60e51b815260040161055190610ed7565b60405180910390fd5b6105646000610c9d565b565b600260005414156105b95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026000908155338152600c6020526040902054156105eb576040516304462d2760e01b815260040160405180910390fd5b6000818152600260205260409020546106175760405163254ddef960e21b815260040160405180910390fd5b60016008600082825461062a9190610e9d565b9091555050336000908152600960209081526040808320805460ff19166001179055805160e081018252858152428184018190528585526002909352928190205490830152906060810161067e8385610e9d565b8152600060208083018290526040808401839052606093840183905233808452600c83529281902085518155918501516001830155848101516002830155928401516003820155608084015160048083019190915560a0850151600583015560c090940151600690910155600b5491516323b872dd60e01b815292830152306024830152604482018590526001600160a01b0316906323b872dd906064016020604051808303816000875af115801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f9190610eb5565b50337fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848361078e8187610e9d565b6040805193845260208401929092529082015260600160405180910390a25050600160005550565b6001546001600160a01b031633146107e05760405162461bcd60e51b815260040161055190610ed7565b601e8111156108025760405163f1a470d760e01b815260040160405180910390fd5b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a8061084e8342610f0c565b6108589190610e7b565b92915050565b600260005414156108b15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026000818155338152600c60209081526040808320815160e0810183528154815260018201549381019390935293840154908201526003830154606082015260048301546080820152600583015460a082015260069092015460c083015261091982610c36565b336000908152600c60205260408120818155600180820183905560028201839055600382018390556004820183905560058201839055600690910182905560088054939450909290919061096e908490610f0c565b909155505033600090815260096020908152604080832060075484526001019091529020805460ff191690556060820151421015610a4f576000806109b7846000015184610cef565b600b5491935091506001600160a01b031663a9059cbb336109d88486610e9d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a479190610eb5565b505050610ae4565b600b5482516001600160a01b039091169063a9059cbb903390610a73908590610e9d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae29190610eb5565b505b50506001600055565b6001546001600160a01b03163314610b175760405162461bcd60e51b815260040161055190610ed7565b42600555565b6001546001600160a01b03163314610b475760405162461bcd60e51b815260040161055190610ed7565b60c8811115610b6957604051630a552cf160e41b815260040160405180910390fd5b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e90602001610833565b6001546001600160a01b03163314610bc85760405162461bcd60e51b815260040161055190610ed7565b6001600160a01b038116610c2d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610551565b61052481610c9d565b8051600090610c4757506000919050565b6a52b7d2dcc80cd2e4000000610c608360200151610d58565b60408401518451610c719190610e5c565b61084e9190610e5c565b60006301dfe2006103e860045484610c939190610e5c565b61084e9190610e7b565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008083610d0257506000905080610d51565b6103e860035485610d139190610e5c565b610d1d9190610e7b565b610d279085610f0c565b6103e860035485610d389190610e5c565b610d429190610e7b565b610d4c9085610f0c565b915091505b9250929050565b60006301e13380610d698342610f0c565b61084e9069d3c21bcecceda1000000610e5c565b60405180606001604052806000815260200160008152602001610dd66040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b60008060408385031215610dee57600080fd5b50508035926020909101359150565b600060208284031215610e0f57600080fd5b5035919050565b600060208284031215610e2857600080fd5b81356001600160a01b0381168114610e3f57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610e7657610e76610e46565b500290565b600082610e9857634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610eb057610eb0610e46565b500190565b600060208284031215610ec757600080fd5b81518015158114610e3f57600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082821015610f1e57610f1e610e46565b50039056fea2646970667358221220030899ca6e6391d489d6c19e70532c2aa0d913c5522e80b05c5961148fb925f064736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19D SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH2 0x444 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x527 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x7B6 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x211 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0x83E JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x85E JUMP JUMPDEST TIMESTAMP PUSH2 0x1B9 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0xAED JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFD JUMP JUMPDEST PUSH2 0xB1D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xE16 JUMP JUMPDEST PUSH2 0xB9E JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0xD7D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB018F087 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x398 DUP4 PUSH2 0xC36 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3F1 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x3D7 SWAP2 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x83E JUMP JUMPDEST GT ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 PUSH2 0x415 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xC7B JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x524 JUMPI PUSH2 0x467 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0x83E JUMP JUMPDEST PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH4 0x376115B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x4B3 SWAP1 PUSH2 0xC7B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x522 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 PUSH1 0x0 PUSH2 0xC9D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4462D27 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0x254DDEF9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62A SWAP2 SWAP1 PUSH2 0xE9D JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x67E DUP4 DUP6 PUSH2 0xE9D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x4 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA0 DUP6 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP5 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD SWAP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 DUP4 ADD MSTORE ADDRESS PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x75F SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x78E DUP2 DUP8 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x802 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF1A470D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x84E DUP4 TIMESTAMP PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x858 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x8B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x919 DUP3 PUSH2 0xC36 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x96E SWAP1 DUP5 SWAP1 PUSH2 0xF0C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0xA4F JUMPI PUSH1 0x0 DUP1 PUSH2 0x9B7 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xCEF JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA9059CBB CALLER PUSH2 0x9D8 DUP5 DUP7 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA47 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP POP POP PUSH2 0xAE4 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0xA73 SWAP1 DUP6 SWAP1 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xABE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAE2 SWAP2 SWAP1 PUSH2 0xEB5 JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA552CF1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x833 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBC8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0xED7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH2 0x524 DUP2 PUSH2 0xC9D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xC47 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xC60 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xD58 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xC71 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xC93 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0x84E SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xD02 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xD51 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xD13 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0xD1D SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0xD27 SWAP1 DUP6 PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xD38 SWAP2 SWAP1 PUSH2 0xE5C JUMP JUMPDEST PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0xE7B JUMP JUMPDEST PUSH2 0xD4C SWAP1 DUP6 PUSH2 0xF0C JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xD69 DUP4 TIMESTAMP PUSH2 0xF0C JUMP JUMPDEST PUSH2 0x84E SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0xE5C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDD6 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE76 JUMPI PUSH2 0xE76 PUSH2 0xE46 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE98 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xEB0 JUMPI PUSH2 0xEB0 PUSH2 0xE46 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xF1E JUMPI PUSH2 0xF1E PUSH2 0xE46 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB ADDMOD SWAP10 0xCA PUSH15 0x6391D489D6C19E70532C2AA0D913C5 MSTORE 0x2E DUP1 0xB0 0x5C MSIZE PUSH2 0x148F 0xB9 0x25 CREATE PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "971:11440:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8166:1024;;;:::i;:::-;;;;;;168:4:5;210:3;199:9;195:19;187:27;;247:6;241:13;230:9;223:32;311:4;303:6;299:17;293:24;286:4;275:9;271:20;264:54;365:4;357:6;353:17;347:24;415:12;409:19;402:4;391:9;387:20;380:49;489:4;475:12;471:23;465:30;460:2;449:9;445:18;438:58;557:4;543:12;539:23;533:30;527:3;516:9;512:19;505:59;625:2;611:12;607:21;601:28;595:3;584:9;580:19;573:57;691:3;677:12;673:22;667:29;661:3;650:9;646:19;639:58;758:3;744:12;740:22;734:29;728:3;717:9;713:19;706:58;825:3;811:12;807:22;801:29;795:3;784:9;780:19;773:58;;14:823;;;;;8166:1024:4;;;;;;;;10065:556;;;:::i;:::-;;1507:26;;;;;;;;;988:25:5;;;976:2;961:18;1507:26:4;842:177:5;1668:101:0;;;:::i;4297:1237:4:-;;;;;;:::i;:::-;;:::i;1376:26::-;;;;;;5540:306;;;;;;:::i;:::-;;:::i;1636:28::-;;;;;-1:-1:-1;;;;;1636:28:4;;;;;;-1:-1:-1;;;;;1626:32:5;;;1608:51;;1596:2;1581:18;1636:28:4;1462:203:5;1036:85:0;1108:6;;-1:-1:-1;;;;;1108:6:0;1036:85;;1584:45:4;;;;;;:::i;:::-;;;;;;;;;;;;;;1539:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2126:14:5;;2119:22;2101:41;;2089:2;2074:18;1539:39:4;1961:187:5;9740:134:4;;;;;;:::i;:::-;;:::i;1408:27::-;;;;;;7238:922;;;:::i;9638:96::-;9712:15;9638:96;;1337:33;;;;;;9302:90;;;:::i;9398:234::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;8166:1024:4:-;8209:21;;:::i;:::-;8281:10;8242:23;8268:24;;;:12;:24;;;;;;;;;8242:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8363:85;;8412:25;;-1:-1:-1;;;8412:25:4;;;;;;;;;;;8363:85;8489:32;;;;;;;;8457:29;8489:32;;;;;;;;;;;;;;;;8549:33;8510:10;8549:21;:33::i;:::-;8532:50;;8625:15;8597:7;:13;;;:25;;;:43;8593:214;;;8791:4;8769:18;;8760:6;:27;;;;:::i;:::-;8759:36;;;;:::i;:::-;8712:18;;8692:17;;8734:4;;8692:38;;;:::i;:::-;8691:47;;;;:::i;:::-;8690:106;;;;:::i;:::-;8656:15;;;:140;8593:214;8865:1;8821:41;8835:10;:26;;;8821:13;:41::i;:::-;:45;8817:249;;;8882:15;8900:36;8918:10;:17;;;8900;:36::i;:::-;8950:13;;;;:30;;:40;-1:-1:-1;8817:249:4;;;9021:13;;;;9054:1;9021:30;;;;:34;8817:249;9076:13;;;;:23;;:32;9141:17;;9118:40;;9076:7;8166:1024;-1:-1:-1;8166:1024:4:o;10065:556::-;10196:10;10160:20;10183:24;;;:12;:24;;;;;10222:13;;:17;10218:397;;10259:37;10273:6;:22;;;10259:13;:37::i;:::-;10255:117;;10328:29;;-1:-1:-1;;;10328:29:4;;;;;;;;;;;10255:117;10412:1;10386:23;;;:27;10452:15;10427:22;;;:40;10489:13;;10576;;-1:-1:-1;;;;;10489:13:4;;;;10482:30;;10530:10;;10558:32;;:17;:32::i;:::-;10482:122;;-1:-1:-1;;;;;;10482:122:4;;;;;;;-1:-1:-1;;;;;3005:32:5;;;10482:122:4;;;2987:51:5;3054:18;;;3047:34;2960:18;;10482:122:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10218:397;10098:523;10065:556::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:3;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4297:1237:4:-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;3937:2:5;2317:63:1;;;3919:21:5;3976:2;3956:18;;;3949:30;4015:33;3995:18;;;3988:61;4066:18;;2317:63:1;3735:355:5;2317:63:1;1744:1;2455:7;:18;;;4580:10:4::1;4567:24:::0;;:12:::1;:24;::::0;;;;:31;:36;4563:97:::1;;4626:23;;-1:-1:-1::0;;;4626:23:4::1;;;;;;;;;;;4563:97;4674:27;::::0;;;:14:::1;:27;::::0;;;;;4670:101:::1;;4729:31;;-1:-1:-1::0;;;4729:31:4::1;;;;;;;;;;;4670:101;4796:1;4781:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4814:10:4::1;4807:18;::::0;;;:6:::1;:18;::::0;;;;;;;:37;;-1:-1:-1;;4807:37:4::1;4840:4;4807:37;::::0;;5133:183;;::::1;::::0;::::1;::::0;;;;;4962:15:::1;5133:183:::0;;::::1;::::0;;;5195:27;;;:14:::1;:27:::0;;;;;;;;5133:183;;;;4962:15;5133:183;;;5237:23:::1;4962:15:::0;5210:11;5237:23:::1;:::i;:::-;5133:183:::0;;5275:1:::1;5133:183;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;5119:10:::1;5106:24:::0;;;:12:::1;:24:::0;;;;;;:210;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;5334:13:::1;::::0;5327:69;;-1:-1:-1;;;5327:69:4;;;;::::1;4335:34:5::0;5382:4:4::1;4385:18:5::0;;;4378:43;4437:18;;;4430:34;;;-1:-1:-1;;;;;5334:13:4::1;::::0;5327:34:::1;::::0;4270:18:5;;5327:69:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;5470:10:4::1;5463:64;5482:6:::0;5490:9;5502:23:::1;5490:9:::0;5502:11;:23:::1;:::i;:::-;5463:64;::::0;;4677:25:5;;;4733:2;4718:18;;4711:34;;;;4761:18;;;4754:34;4665:2;4650:18;5463:64:4::1;;;;;;;-1:-1:-1::0;;1701:1:1;2628:7;:22;-1:-1:-1;4297:1237:4:o;5540:306::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:3;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;5698:2:4::1;5689:6;:11;5685:81;;;5723:32;;-1:-1:-1::0;;;5723:32:4::1;;;;;;;;;;;5685:81;5775:18;:27:::0;;;5817:22:::1;::::0;988:25:5;;;5817:22:4::1;::::0;976:2:5;961:18;5817:22:4::1;;;;;;;;5540:306:::0;:::o;9740:134::-;9803:7;9861:6;9830:27;9848:9;9830:15;:27;:::i;:::-;9829:38;;;;:::i;:::-;9822:45;9740:134;-1:-1:-1;;9740:134:4:o;7238:922::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;3937:2:5;2317:63:1;;;3919:21:5;3976:2;3956:18;;;3949:30;4015:33;3995:18;;;3988:61;4066:18;;2317:63:1;3735:355:5;2317:63:1;1744:1;2455:7;:18;;;7442:10:4::1;7429:24:::0;;:12:::1;:24;::::0;;;;;;;7403:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;7480:33:::1;7403:50:::0;7480:21:::1;:33::i;:::-;7544:10;7531:24;::::0;;;:12:::1;:24;::::0;;;;7524:31;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;7565:11:::1;:16:::0;;7463:50;;-1:-1:-1;7524:31:4;;7565:11;;7531:24;7565:16:::1;::::0;7524:31;;7565:16:::1;:::i;:::-;::::0;;;-1:-1:-1;;7605:10:4::1;7598:18;::::0;;;:6:::1;:18;::::0;;;;;;;7623:9:::1;::::0;7598:35;;:24:::1;;:35:::0;;;;;7591:42;;-1:-1:-1;;7591:42:4::1;::::0;;7648:22:::1;::::0;::::1;::::0;7673:15:::1;-1:-1:-1::0;7644:510:4::1;;;7722:22;7762::::0;7801:55:::1;7830:10;:17;;;7849:6;7801:28;:55::i;:::-;7878:13;::::0;7704:152;;-1:-1:-1;7704:152:4;-1:-1:-1;;;;;;7878:13:4::1;7871:30;7919:10;7948:31;7704:152:::0;;7948:31:::1;:::i;:::-;7871:123;::::0;-1:-1:-1;;;;;;7871:123:4::1;::::0;;;;;;-1:-1:-1;;;;;3005:32:5;;;7871:123:4::1;::::0;::::1;2987:51:5::0;3054:18;;;3047:34;2960:18;;7871:123:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7690:315;;7644:510;;;8032:13;::::0;8102:17;;-1:-1:-1;;;;;8032:13:4;;::::1;::::0;8025:30:::1;::::0;8073:10:::1;::::0;8102:26:::1;::::0;8122:6;;8102:26:::1;:::i;:::-;8025:118;::::0;-1:-1:-1;;;;;;8025:118:4::1;::::0;;;;;;-1:-1:-1;;;;;3005:32:5;;;8025:118:4::1;::::0;::::1;2987:51:5::0;3054:18;;;3047:34;2960:18;;8025:118:4::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7644:510;-1:-1:-1::0;;1701:1:1;2628:7;:22;7238:922:4:o;9302:90::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:3;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;9370:15:4::1;9355:12;:30:::0;9302:90::o;9398:234::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:3;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;9489:3:4::1;9480:6;:12;9476:83;;;9515:33;;-1:-1:-1::0;;;9515:33:4::1;;;;;;;;;;;9476:83;9568:11;:20:::0;;;9603:22:::1;::::0;988:25:5;;;9603:22:4::1;::::0;976:2:5;961:18;9603:22:4::1;842:177:5::0;1918:198:0;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:3;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;5131:2:5;1998:73:0::1;::::0;::::1;5113:21:5::0;5170:2;5150:18;;;5143:30;5209:34;5189:18;;;5182:62;-1:-1:-1;;;5260:18:5;;;5253:36;5306:19;;1998:73:0::1;4929:402:5::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;6089:437:4:-:0;6219:17;;6192:7;;6215:61;;-1:-1:-1;6264:1:4;;6089:437;-1:-1:-1;6089:437:4:o;6215:61::-;6515:4;6468:43;6494:10;:16;;;6468:25;:43::i;:::-;6429:20;;;;6393:17;;:56;;6429:20;6393:56;:::i;:::-;:118;;;;:::i;9880:179::-;9975:7;10044:8;10036:4;10021:11;;10007;:25;;;;:::i;:::-;10006:34;;;;:::i;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;6532:359:4:-;6649:7;;6685:11;6681:55;;-1:-1:-1;6720:1:4;;-1:-1:-1;6720:1:4;6712:13;;6681:55;6808:4;6786:18;;6777:6;:27;;;;:::i;:::-;6776:36;;;;:::i;:::-;6766:47;;:6;:47;:::i;:::-;6869:4;6847:18;;6838:6;:27;;;;:::i;:::-;6837:36;;;;:::i;:::-;6827:47;;:6;:47;:::i;:::-;6745:139;;;;6532:359;;;;;;:::o;5852:231::-;5949:7;6068:8;6033:23;6051:5;6033:15;:23;:::i;:::-;6032:32;;6060:4;6032:32;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1024:248:5:-;1092:6;1100;1153:2;1141:9;1132:7;1128:23;1124:32;1121:52;;;1169:1;1166;1159:12;1121:52;-1:-1:-1;;1192:23:5;;;1262:2;1247:18;;;1234:32;;-1:-1:-1;1024:248:5:o;1277:180::-;1336:6;1389:2;1377:9;1368:7;1364:23;1360:32;1357:52;;;1405:1;1402;1395:12;1357:52;-1:-1:-1;1428:23:5;;1277:180;-1:-1:-1;1277:180:5:o;1670:286::-;1729:6;1782:2;1770:9;1761:7;1757:23;1753:32;1750:52;;;1798:1;1795;1788:12;1750:52;1824:23;;-1:-1:-1;;;;;1876:31:5;;1866:42;;1856:70;;1922:1;1919;1912:12;1856:70;1945:5;1670:286;-1:-1:-1;;;1670:286:5:o;2153:127::-;2214:10;2209:3;2205:20;2202:1;2195:31;2245:4;2242:1;2235:15;2269:4;2266:1;2259:15;2285:168;2325:7;2391:1;2387;2383:6;2379:14;2376:1;2373:21;2368:1;2361:9;2354:17;2350:45;2347:71;;;2398:18;;:::i;:::-;-1:-1:-1;2438:9:5;;2285:168::o;2458:217::-;2498:1;2524;2514:132;;2568:10;2563:3;2559:20;2556:1;2549:31;2603:4;2600:1;2593:15;2631:4;2628:1;2621:15;2514:132;-1:-1:-1;2660:9:5;;2458:217::o;2680:128::-;2720:3;2751:1;2747:6;2744:1;2741:13;2738:39;;;2757:18;;:::i;:::-;-1:-1:-1;2793:9:5;;2680:128::o;3092:277::-;3159:6;3212:2;3200:9;3191:7;3187:23;3183:32;3180:52;;;3228:1;3225;3218:12;3180:52;3260:9;3254:16;3313:5;3306:13;3299:21;3292:5;3289:32;3279:60;;3335:1;3332;3325:12;3374:356;3576:2;3558:21;;;3595:18;;;3588:30;3654:34;3649:2;3634:18;;3627:62;3721:2;3706:18;;3374:356::o;4799:125::-;4839:4;4867:1;4864;4861:8;4858:34;;;4872:18;;:::i;:::-;-1:-1:-1;4909:9:5;;4799:125::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "785800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_blockTimestamp()": "213",
								"airdropRate()": "2340",
								"airdropSince()": "2384",
								"calculateWeek(uint256)": "487",
								"changeAirdropPercentage(uint256)": "25655",
								"changePenaltyFee(uint256)": "25623",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2442",
								"renounceOwnership()": "28207",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2339",
								"startAirdrop()": "24455",
								"token_address()": "2426",
								"totalVoters()": "2363",
								"transferOwnership(address)": "28387",
								"votedUsers(uint256)": "2461",
								"voters(address)": "2541",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "243",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "CODESIZE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "SUB",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSHSIZE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP4",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "ADD",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "JUMP",
									"source": 4,
									"value": "[in]"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "tag",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 1671,
									"end": 1972,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 3
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1791,
									"end": 1793,
									"name": "PUSH",
									"source": 4,
									"value": "F"
								},
								{
									"begin": 1770,
									"end": 1788,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 1770,
									"end": 1793,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1817,
									"end": 1819,
									"name": "PUSH",
									"source": 4,
									"value": "50"
								},
								{
									"begin": 1803,
									"end": 1814,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 1803,
									"end": 1819,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1843,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SLOAD",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "AND",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP3",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "AND",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP2",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "OR",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SWAP1",
									"source": 4
								},
								{
									"begin": 1830,
									"end": 1851,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1862,
									"end": 1876,
									"name": "PUSH",
									"source": 4,
									"value": "2"
								},
								{
									"begin": 1862,
									"end": 1885,
									"name": "PUSH",
									"source": 4,
									"value": "20"
								},
								{
									"begin": 1862,
									"end": 1885,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1888,
									"end": 1889,
									"name": "PUSH",
									"source": 4,
									"value": "6"
								},
								{
									"begin": 1862,
									"end": 1885,
									"name": "PUSH",
									"source": 4,
									"value": "A1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C"
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1926,
									"end": 1927,
									"name": "PUSH",
									"source": 4,
									"value": "7"
								},
								{
									"begin": 1899,
									"end": 1923,
									"name": "PUSH",
									"source": 4,
									"value": "89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832"
								},
								{
									"begin": 1899,
									"end": 1927,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 1952,
									"end": 1960,
									"name": "PUSH",
									"source": 4,
									"value": "1E13380"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1937,
									"end": 1961,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1964,
									"end": 1965,
									"name": "PUSH",
									"source": 4,
									"value": "8"
								},
								{
									"begin": 1937,
									"end": 1961,
									"name": "PUSH",
									"source": 4,
									"value": "DC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B"
								},
								{
									"begin": 1937,
									"end": 1965,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "17"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "JUMP",
									"source": 4
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 5
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 5
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 5,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 5
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 5,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 971,
									"end": 12411,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220030899ca6e6391d489d6c19e70532c2aa0d913c5522e80b05c5961148fb925f064736f6c634300080b0033",
									".code": [
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "A143A5F2"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "C63AA3E7"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "C63AA3E7"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "CB79C2E1"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "D2A569C3"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "D5DBDF1B"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "F2FDE38B"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "A143A5F2"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "A3EC138D"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "B5D9DF83"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "B87DA76D"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "BED9D861"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "7B0472F0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "7B0472F0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "8891CF0D"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "8C63F97F"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "8C8E8FEE"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "8DA5CB5B"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "tag",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "10486B6A"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "5B88349D"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "5F5300FF"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "715018A6"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 971,
											"end": 12411,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 168,
											"end": 172,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 210,
											"end": 213,
											"name": "PUSH",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 199,
											"end": 208,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 195,
											"end": 214,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 187,
											"end": 214,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 187,
											"end": 214,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 247,
											"end": 253,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 241,
											"end": 254,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 230,
											"end": 239,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 223,
											"end": 255,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 303,
											"end": 309,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 299,
											"end": 316,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 293,
											"end": 317,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 275,
											"end": 284,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 271,
											"end": 291,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 264,
											"end": 318,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 365,
											"end": 369,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 357,
											"end": 363,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 353,
											"end": 370,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 347,
											"end": 371,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 415,
											"end": 427,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 409,
											"end": 428,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 402,
											"end": 406,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 387,
											"end": 407,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 380,
											"end": 429,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 489,
											"end": 493,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 471,
											"end": 494,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 465,
											"end": 495,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 460,
											"end": 462,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 449,
											"end": 458,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 445,
											"end": 463,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 438,
											"end": 496,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 557,
											"end": 561,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 543,
											"end": 555,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 539,
											"end": 562,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 533,
											"end": 563,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 527,
											"end": 530,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 516,
											"end": 525,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 512,
											"end": 531,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 505,
											"end": 564,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 625,
											"end": 627,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 611,
											"end": 623,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 607,
											"end": 628,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 601,
											"end": 629,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 595,
											"end": 598,
											"name": "PUSH",
											"source": 5,
											"value": "A0"
										},
										{
											"begin": 584,
											"end": 593,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 580,
											"end": 599,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 573,
											"end": 630,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 691,
											"end": 694,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 677,
											"end": 689,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 673,
											"end": 695,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 667,
											"end": 696,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 661,
											"end": 664,
											"name": "PUSH",
											"source": 5,
											"value": "C0"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 646,
											"end": 665,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 639,
											"end": 697,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 758,
											"end": 761,
											"name": "PUSH",
											"source": 5,
											"value": "A0"
										},
										{
											"begin": 744,
											"end": 756,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 740,
											"end": 762,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 734,
											"end": 763,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 717,
											"end": 726,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 713,
											"end": 732,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 706,
											"end": 764,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 825,
											"end": 828,
											"name": "PUSH",
											"source": 5,
											"value": "C0"
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 807,
											"end": 829,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 801,
											"end": 830,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 795,
											"end": 798,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 784,
											"end": 793,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 780,
											"end": 799,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 773,
											"end": 831,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 773,
											"end": 831,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 837,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "STOP",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "tag",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1507,
											"end": 1533,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 842,
											"end": 1019,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1376,
											"end": 1402,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "PUSH",
											"source": 4,
											"value": "B"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1608,
											"end": 1659,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1608,
											"end": 1659,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1596,
											"end": 1598,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1636,
											"end": 1664,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 1462,
											"end": 1665,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1584,
											"end": 1629,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "tag",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "tag",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2126,
											"end": 2140,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2126,
											"end": 2140,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2119,
											"end": 2141,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2101,
											"end": 2142,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2101,
											"end": 2142,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2089,
											"end": 2091,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2074,
											"end": 2092,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1539,
											"end": 1578,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 1961,
											"end": 2148,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "tag",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1408,
											"end": 1435,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9638,
											"end": 9734,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 9638,
											"end": 9734,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9712,
											"end": 9727,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 9638,
											"end": 9734,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 9638,
											"end": 9734,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1337,
											"end": 1370,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "46"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "tag",
											"source": 4,
											"value": "83"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "tag",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 8209,
											"end": 8230,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "89"
										},
										{
											"begin": 8209,
											"end": 8230,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8209,
											"end": 8230,
											"name": "tag",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 8209,
											"end": 8230,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8281,
											"end": 8291,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8265,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8280,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8268,
											"end": 8292,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "A0"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "PUSH",
											"source": 4,
											"value": "C0"
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8242,
											"end": 8292,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8363,
											"end": 8448,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 8363,
											"end": 8448,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B018F087"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8412,
											"end": 8437,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8363,
											"end": 8448,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 8363,
											"end": 8448,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8457,
											"end": 8486,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8489,
											"end": 8521,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8549,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 8510,
											"end": 8520,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8549,
											"end": 8570,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 8549,
											"end": 8582,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8549,
											"end": 8582,
											"name": "tag",
											"source": 4,
											"value": "92"
										},
										{
											"begin": 8549,
											"end": 8582,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8532,
											"end": 8582,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8532,
											"end": 8582,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8625,
											"end": 8640,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8604,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8610,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8597,
											"end": 8610,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8610,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8622,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 8597,
											"end": 8622,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8622,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8597,
											"end": 8640,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 8593,
											"end": 8807,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8593,
											"end": 8807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8593,
											"end": 8807,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8791,
											"end": 8795,
											"name": "PUSH",
											"source": 4,
											"value": "3E8"
										},
										{
											"begin": 8769,
											"end": 8787,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 8769,
											"end": 8787,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8760,
											"end": 8766,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 8760,
											"end": 8787,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 8759,
											"end": 8795,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8712,
											"end": 8730,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 8712,
											"end": 8730,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8692,
											"end": 8709,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8692,
											"end": 8709,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8734,
											"end": 8738,
											"name": "PUSH",
											"source": 4,
											"value": "3E8"
										},
										{
											"begin": 8734,
											"end": 8738,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 8692,
											"end": 8730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "tag",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 8691,
											"end": 8738,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "tag",
											"source": 4,
											"value": "101"
										},
										{
											"begin": 8690,
											"end": 8796,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8656,
											"end": 8671,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8656,
											"end": 8671,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8656,
											"end": 8671,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8656,
											"end": 8796,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8593,
											"end": 8807,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 8593,
											"end": 8807,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8865,
											"end": 8866,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8821,
											"end": 8862,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "103"
										},
										{
											"begin": 8835,
											"end": 8845,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8835,
											"end": 8861,
											"name": "PUSH",
											"source": 4,
											"value": "C0"
										},
										{
											"begin": 8835,
											"end": 8861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8835,
											"end": 8861,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8821,
											"end": 8834,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 8821,
											"end": 8862,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8821,
											"end": 8862,
											"name": "tag",
											"source": 4,
											"value": "103"
										},
										{
											"begin": 8821,
											"end": 8862,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8821,
											"end": 8866,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8882,
											"end": 8897,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8900,
											"end": 8936,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 8918,
											"end": 8928,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8918,
											"end": 8935,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8918,
											"end": 8935,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8918,
											"end": 8935,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8900,
											"end": 8917,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 8900,
											"end": 8936,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8900,
											"end": 8936,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 8900,
											"end": 8936,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8950,
											"end": 8963,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8950,
											"end": 8963,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8950,
											"end": 8963,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8950,
											"end": 8963,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8950,
											"end": 8980,
											"name": "PUSH",
											"source": 4,
											"value": "A0"
										},
										{
											"begin": 8950,
											"end": 8980,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8950,
											"end": 8990,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "tag",
											"source": 4,
											"value": "104"
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9034,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9021,
											"end": 9034,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9034,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9034,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9054,
											"end": 9055,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9021,
											"end": 9051,
											"name": "PUSH",
											"source": 4,
											"value": "A0"
										},
										{
											"begin": 9021,
											"end": 9051,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9051,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9021,
											"end": 9055,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "tag",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 8817,
											"end": 9066,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9089,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9076,
											"end": 9089,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9089,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9089,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9099,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 9076,
											"end": 9099,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9108,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9141,
											"end": 9158,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9141,
											"end": 9158,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9118,
											"end": 9158,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9118,
											"end": 9158,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9076,
											"end": 9083,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8166,
											"end": 9190,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10196,
											"end": 10206,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10160,
											"end": 10180,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10183,
											"end": 10195,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10183,
											"end": 10207,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10222,
											"end": 10235,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10222,
											"end": 10235,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10222,
											"end": 10239,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10218,
											"end": 10615,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 10218,
											"end": 10615,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10259,
											"end": 10296,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 10273,
											"end": 10279,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10273,
											"end": 10295,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 10273,
											"end": 10295,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10273,
											"end": 10295,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10259,
											"end": 10272,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 10259,
											"end": 10296,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10259,
											"end": 10296,
											"name": "tag",
											"source": 4,
											"value": "110"
										},
										{
											"begin": 10259,
											"end": 10296,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10255,
											"end": 10372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 10255,
											"end": 10372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "376115B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10328,
											"end": 10357,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10255,
											"end": 10372,
											"name": "tag",
											"source": 4,
											"value": "111"
										},
										{
											"begin": 10255,
											"end": 10372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10412,
											"end": 10413,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10386,
											"end": 10409,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 10386,
											"end": 10409,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10386,
											"end": 10409,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10386,
											"end": 10413,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10452,
											"end": 10467,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 10427,
											"end": 10449,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 10427,
											"end": 10449,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10427,
											"end": 10449,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10427,
											"end": 10467,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "PUSH",
											"source": 4,
											"value": "B"
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10576,
											"end": 10589,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10576,
											"end": 10589,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10489,
											"end": 10502,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10512,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 10482,
											"end": 10512,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10530,
											"end": 10540,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 10530,
											"end": 10540,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10558,
											"end": 10590,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 10558,
											"end": 10590,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10558,
											"end": 10575,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 10558,
											"end": 10590,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10558,
											"end": 10590,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 10558,
											"end": 10590,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "tag",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10482,
											"end": 10604,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10218,
											"end": 10615,
											"name": "tag",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 10218,
											"end": 10615,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10098,
											"end": 10621,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10065,
											"end": 10621,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3937,
											"end": 3939,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3919,
											"end": 3940,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3976,
											"end": 3978,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3949,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4015,
											"end": 4048,
											"name": "PUSH",
											"source": 5,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3988,
											"end": 4049,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3735,
											"end": 4090,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4580,
											"end": 4590,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4579,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4591,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4598,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4567,
											"end": 4603,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4563,
											"end": 4660,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 4563,
											"end": 4660,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4462D27"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4626,
											"end": 4649,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4563,
											"end": 4660,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 4563,
											"end": 4660,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4688,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4674,
											"end": 4701,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4670,
											"end": 4771,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 4670,
											"end": 4771,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "254DDEF9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4729,
											"end": 4760,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4670,
											"end": 4771,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 4670,
											"end": 4771,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4796,
											"end": 4797,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4781,
											"end": 4792,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 4781,
											"end": 4792,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4781,
											"end": 4797,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4814,
											"end": 4824,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4813,
											"name": "PUSH",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4825,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4840,
											"end": 4844,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4807,
											"end": 4844,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4962,
											"end": 4977,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5209,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5195,
											"end": 5222,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4962,
											"end": 4977,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5237,
											"end": 5260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 4962,
											"end": 4977,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5210,
											"end": 5221,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5237,
											"end": 5260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 5237,
											"end": 5260,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5237,
											"end": 5260,
											"name": "tag",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 5237,
											"end": 5260,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5275,
											"end": 5276,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5133,
											"end": 5316,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5119,
											"end": 5129,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5118,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5130,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "A0"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "C0"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5106,
											"end": 5316,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5334,
											"end": 5347,
											"name": "PUSH",
											"source": 4,
											"value": "B"
										},
										{
											"begin": 5334,
											"end": 5347,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4335,
											"end": 4369,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5382,
											"end": 5386,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 4385,
											"end": 4403,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 4385,
											"end": 4403,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4385,
											"end": 4403,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4378,
											"end": 4421,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4437,
											"end": 4455,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 4437,
											"end": 4455,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4437,
											"end": 4455,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4430,
											"end": 4464,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4430,
											"end": 4464,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4430,
											"end": 4464,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5334,
											"end": 5347,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5334,
											"end": 5347,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5361,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 5327,
											"end": 5361,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4270,
											"end": 4288,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4270,
											"end": 4288,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "tag",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 5327,
											"end": 5396,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5470,
											"end": 5480,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "PUSH",
											"source": 4,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5482,
											"end": 5488,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5502,
											"end": 5525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 5490,
											"end": 5499,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5502,
											"end": 5513,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5502,
											"end": 5525,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 5502,
											"end": 5525,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5502,
											"end": 5525,
											"name": "tag",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 5502,
											"end": 5525,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4677,
											"end": 4702,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4677,
											"end": 4702,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4677,
											"end": 4702,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4733,
											"end": 4735,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4718,
											"end": 4736,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 4718,
											"end": 4736,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4711,
											"end": 4745,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4711,
											"end": 4745,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4711,
											"end": 4745,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4711,
											"end": 4745,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4761,
											"end": 4779,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 4754,
											"end": 4788,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 4650,
											"end": 4668,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5463,
											"end": 5527,
											"name": "LOG2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4297,
											"end": 5534,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "tag",
											"source": 4,
											"value": "47"
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5698,
											"end": 5700,
											"name": "PUSH",
											"source": 4,
											"value": "1E"
										},
										{
											"begin": 5689,
											"end": 5695,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5689,
											"end": 5700,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 5685,
											"end": 5766,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5685,
											"end": 5766,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 5685,
											"end": 5766,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F1A470D7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5723,
											"end": 5755,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 5685,
											"end": 5766,
											"name": "tag",
											"source": 4,
											"value": "152"
										},
										{
											"begin": 5685,
											"end": 5766,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5775,
											"end": 5793,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 5775,
											"end": 5802,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5775,
											"end": 5802,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5775,
											"end": 5802,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "PUSH",
											"source": 4,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "tag",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5817,
											"end": 5839,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5540,
											"end": 5846,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9803,
											"end": 9810,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9861,
											"end": 9867,
											"name": "PUSH",
											"source": 4,
											"value": "93A80"
										},
										{
											"begin": 9830,
											"end": 9857,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 9848,
											"end": 9857,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9830,
											"end": 9845,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 9830,
											"end": 9857,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 9830,
											"end": 9857,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9830,
											"end": 9857,
											"name": "tag",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 9830,
											"end": 9857,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "tag",
											"source": 4,
											"value": "158"
										},
										{
											"begin": 9829,
											"end": 9867,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9822,
											"end": 9867,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9740,
											"end": 9874,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3937,
											"end": 3939,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3919,
											"end": 3940,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3976,
											"end": 3978,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3949,
											"end": 3979,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4015,
											"end": 4048,
											"name": "PUSH",
											"source": 5,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3988,
											"end": 4049,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3735,
											"end": 4090,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7442,
											"end": 7452,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7441,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7429,
											"end": 7453,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "A0"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "PUSH",
											"source": 4,
											"value": "C0"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7480,
											"end": 7513,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 7403,
											"end": 7453,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7480,
											"end": 7501,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 7480,
											"end": 7513,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7480,
											"end": 7513,
											"name": "tag",
											"source": 4,
											"value": "163"
										},
										{
											"begin": 7480,
											"end": 7513,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7544,
											"end": 7554,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7543,
											"name": "PUSH",
											"source": 4,
											"value": "C"
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "PUSH",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7576,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7463,
											"end": 7513,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 7463,
											"end": 7513,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7576,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7576,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7531,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7524,
											"end": 7555,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "tag",
											"source": 4,
											"value": "164"
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7565,
											"end": 7581,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7605,
											"end": 7615,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7604,
											"name": "PUSH",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7616,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7623,
											"end": 7632,
											"name": "PUSH",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 7623,
											"end": 7632,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 7598,
											"end": 7622,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7598,
											"end": 7633,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 7591,
											"end": 7633,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7591,
											"end": 7633,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7591,
											"end": 7633,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7591,
											"end": 7633,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7591,
											"end": 7633,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 7648,
											"end": 7670,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7648,
											"end": 7670,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7648,
											"end": 7670,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7648,
											"end": 7670,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7673,
											"end": 7688,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7722,
											"end": 7744,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7762,
											"end": 7784,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7801,
											"end": 7856,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 7830,
											"end": 7840,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7830,
											"end": 7847,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7830,
											"end": 7847,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7830,
											"end": 7847,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7849,
											"end": 7855,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7801,
											"end": 7829,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 7801,
											"end": 7856,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7801,
											"end": 7856,
											"name": "tag",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 7801,
											"end": 7856,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "PUSH",
											"source": 4,
											"value": "B"
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 7704,
											"end": 7856,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7704,
											"end": 7856,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7704,
											"end": 7856,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7878,
											"end": 7891,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7901,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 7919,
											"end": 7929,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 7704,
											"end": 7856,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7704,
											"end": 7856,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "tag",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "tag",
											"source": 4,
											"value": "171"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7871,
											"end": 7994,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7690,
											"end": 8005,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7690,
											"end": 8005,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "173"
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "tag",
											"source": 4,
											"value": "165"
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "PUSH",
											"source": 4,
											"value": "B"
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8119,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8119,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8032,
											"end": 8045,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8055,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 8025,
											"end": 8055,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8073,
											"end": 8083,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 8073,
											"end": 8083,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "174"
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8122,
											"end": 8128,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8122,
											"end": 8128,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "102"
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "tag",
											"source": 4,
											"value": "174"
										},
										{
											"begin": 8102,
											"end": 8128,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "tag",
											"source": 4,
											"value": "177"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "tag",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8143,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "tag",
											"source": 4,
											"value": "173"
										},
										{
											"begin": 7644,
											"end": 8154,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7238,
											"end": 8160,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9370,
											"end": 9385,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 9355,
											"end": 9367,
											"name": "PUSH",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 9355,
											"end": 9385,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 9302,
											"end": 9392,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "tag",
											"source": 4,
											"value": "84"
										},
										{
											"begin": 9398,
											"end": 9632,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9489,
											"end": 9492,
											"name": "PUSH",
											"source": 4,
											"value": "C8"
										},
										{
											"begin": 9480,
											"end": 9486,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9480,
											"end": 9492,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 9476,
											"end": 9559,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9476,
											"end": 9559,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 9476,
											"end": 9559,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A552CF1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9515,
											"end": 9548,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9476,
											"end": 9559,
											"name": "tag",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 9476,
											"end": 9559,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9568,
											"end": 9579,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9568,
											"end": 9588,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9568,
											"end": 9588,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9568,
											"end": 9588,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 9603,
											"end": 9625,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9603,
											"end": 9625,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9603,
											"end": 9625,
											"name": "PUSH",
											"source": 4,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 9603,
											"end": 9625,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 9603,
											"end": 9625,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 842,
											"end": 1019,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5131,
											"end": 5133,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5113,
											"end": 5134,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5170,
											"end": 5172,
											"name": "PUSH",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 5150,
											"end": 5168,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5150,
											"end": 5168,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5150,
											"end": 5168,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5143,
											"end": 5173,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5209,
											"end": 5243,
											"name": "PUSH",
											"source": 5,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5189,
											"end": 5207,
											"name": "PUSH",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 5189,
											"end": 5207,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5189,
											"end": 5207,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5182,
											"end": 5244,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5260,
											"end": 5278,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5253,
											"end": 5289,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5306,
											"end": 5325,
											"name": "PUSH",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 5306,
											"end": 5325,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 4929,
											"end": 5331,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6089,
											"end": 6526,
											"name": "tag",
											"source": 4,
											"value": "93"
										},
										{
											"begin": 6089,
											"end": 6526,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6219,
											"end": 6236,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6219,
											"end": 6236,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6192,
											"end": 6199,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6192,
											"end": 6199,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6215,
											"end": 6276,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 6215,
											"end": 6276,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6264,
											"end": 6265,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6264,
											"end": 6265,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6089,
											"end": 6526,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6089,
											"end": 6526,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6215,
											"end": 6276,
											"name": "tag",
											"source": 4,
											"value": "205"
										},
										{
											"begin": 6215,
											"end": 6276,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6515,
											"end": 6519,
											"name": "PUSH",
											"source": 4,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6468,
											"end": 6511,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 6494,
											"end": 6504,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6494,
											"end": 6510,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6494,
											"end": 6510,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6494,
											"end": 6510,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6468,
											"end": 6493,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 6468,
											"end": 6511,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6468,
											"end": 6511,
											"name": "tag",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 6468,
											"end": 6511,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6429,
											"end": 6449,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6429,
											"end": 6449,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6429,
											"end": 6449,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6429,
											"end": 6449,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6410,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6410,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "208"
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6429,
											"end": 6449,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "tag",
											"source": 4,
											"value": "208"
										},
										{
											"begin": 6393,
											"end": 6449,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6511,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 6393,
											"end": 6511,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6511,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6393,
											"end": 6511,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 6393,
											"end": 6511,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 9880,
											"end": 10059,
											"name": "tag",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 9880,
											"end": 10059,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9975,
											"end": 9982,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10044,
											"end": 10052,
											"name": "PUSH",
											"source": 4,
											"value": "1DFE200"
										},
										{
											"begin": 10036,
											"end": 10040,
											"name": "PUSH",
											"source": 4,
											"value": "3E8"
										},
										{
											"begin": 10021,
											"end": 10032,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10021,
											"end": 10032,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 10007,
											"end": 10018,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "212"
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "tag",
											"source": 4,
											"value": "212"
										},
										{
											"begin": 10007,
											"end": 10032,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 10006,
											"end": 10040,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10040,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10040,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 10006,
											"end": 10040,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "tag",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6649,
											"end": 6656,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6649,
											"end": 6656,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6685,
											"end": 6696,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6681,
											"end": 6736,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "218"
										},
										{
											"begin": 6681,
											"end": 6736,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6720,
											"end": 6721,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6720,
											"end": 6721,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6720,
											"end": 6721,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6712,
											"end": 6725,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "217"
										},
										{
											"begin": 6712,
											"end": 6725,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6681,
											"end": 6736,
											"name": "tag",
											"source": 4,
											"value": "218"
										},
										{
											"begin": 6681,
											"end": 6736,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6808,
											"end": 6812,
											"name": "PUSH",
											"source": 4,
											"value": "3E8"
										},
										{
											"begin": 6786,
											"end": 6804,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 6786,
											"end": 6804,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6777,
											"end": 6783,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "tag",
											"source": 4,
											"value": "219"
										},
										{
											"begin": 6777,
											"end": 6804,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "220"
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "tag",
											"source": 4,
											"value": "220"
										},
										{
											"begin": 6776,
											"end": 6812,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6766,
											"end": 6772,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "tag",
											"source": 4,
											"value": "221"
										},
										{
											"begin": 6766,
											"end": 6813,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6869,
											"end": 6873,
											"name": "PUSH",
											"source": 4,
											"value": "3E8"
										},
										{
											"begin": 6847,
											"end": 6865,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 6847,
											"end": 6865,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 6838,
											"end": 6844,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "tag",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 6838,
											"end": 6865,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "223"
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "tag",
											"source": 4,
											"value": "223"
										},
										{
											"begin": 6837,
											"end": 6873,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6827,
											"end": 6833,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "tag",
											"source": 4,
											"value": "224"
										},
										{
											"begin": 6827,
											"end": 6874,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6745,
											"end": 6884,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6745,
											"end": 6884,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6745,
											"end": 6884,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6745,
											"end": 6884,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "tag",
											"source": 4,
											"value": "217"
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6532,
											"end": 6891,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5852,
											"end": 6083,
											"name": "tag",
											"source": 4,
											"value": "207"
										},
										{
											"begin": 5852,
											"end": 6083,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5949,
											"end": 5956,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6068,
											"end": 6076,
											"name": "PUSH",
											"source": 4,
											"value": "1E13380"
										},
										{
											"begin": 6033,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "226"
										},
										{
											"begin": 6051,
											"end": 6056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6033,
											"end": 6048,
											"name": "TIMESTAMP",
											"source": 4
										},
										{
											"begin": 6033,
											"end": 6056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 6033,
											"end": 6056,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6033,
											"end": 6056,
											"name": "tag",
											"source": 4,
											"value": "226"
										},
										{
											"begin": 6033,
											"end": 6056,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6032,
											"end": 6064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "156"
										},
										{
											"begin": 6032,
											"end": 6064,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6060,
											"end": 6064,
											"name": "PUSH",
											"source": 4,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6032,
											"end": 6064,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 6032,
											"end": 6064,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "229"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "229"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "tag",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1092,
											"end": 1098,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1106,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1153,
											"end": 1155,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1141,
											"end": 1150,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1132,
											"end": 1139,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1128,
											"end": 1151,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1124,
											"end": 1156,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1169,
											"end": 1170,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1166,
											"end": 1167,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1159,
											"end": 1171,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "tag",
											"source": 5,
											"value": "236"
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1262,
											"end": 1264,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1234,
											"end": 1266,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 1234,
											"end": 1266,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "tag",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1336,
											"end": 1342,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1389,
											"end": 1391,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1377,
											"end": 1386,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1368,
											"end": 1375,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1364,
											"end": 1387,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1360,
											"end": 1392,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1405,
											"end": 1406,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1403,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1395,
											"end": 1407,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "tag",
											"source": 5,
											"value": "238"
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1428,
											"end": 1451,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 1428,
											"end": 1451,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1729,
											"end": 1735,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1782,
											"end": 1784,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1761,
											"end": 1768,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1757,
											"end": 1780,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1753,
											"end": 1785,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1798,
											"end": 1799,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1795,
											"end": 1796,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1788,
											"end": 1800,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "tag",
											"source": 5,
											"value": "241"
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1824,
											"end": 1847,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1824,
											"end": 1847,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1876,
											"end": 1907,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1876,
											"end": 1907,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1908,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1866,
											"end": 1908,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1919,
											"end": 1920,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1912,
											"end": 1924,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "tag",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1945,
											"end": 1950,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2153,
											"end": 2280,
											"name": "tag",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 2153,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2214,
											"end": 2224,
											"name": "PUSH",
											"source": 5,
											"value": "4E487B71"
										},
										{
											"begin": 2209,
											"end": 2212,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2205,
											"end": 2225,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2202,
											"end": 2203,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2226,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2245,
											"end": 2249,
											"name": "PUSH",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 2242,
											"end": 2243,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2235,
											"end": 2250,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2269,
											"end": 2273,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 2266,
											"end": 2267,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2259,
											"end": 2274,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2391,
											"end": 2392,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2387,
											"end": 2388,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 2379,
											"end": 2393,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2376,
											"end": 2377,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2373,
											"end": 2394,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2368,
											"end": 2369,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2361,
											"end": 2370,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2354,
											"end": 2371,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2350,
											"end": 2395,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "tag",
											"source": 5,
											"value": "247"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2438,
											"end": 2447,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 2438,
											"end": 2447,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2498,
											"end": 2499,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2524,
											"end": 2525,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2568,
											"end": 2578,
											"name": "PUSH",
											"source": 5,
											"value": "4E487B71"
										},
										{
											"begin": 2563,
											"end": 2566,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2559,
											"end": 2579,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2556,
											"end": 2557,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2549,
											"end": 2580,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2603,
											"end": 2607,
											"name": "PUSH",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2600,
											"end": 2601,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2593,
											"end": 2608,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2631,
											"end": 2635,
											"name": "PUSH",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 2628,
											"end": 2629,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2621,
											"end": 2636,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "tag",
											"source": 5,
											"value": "249"
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2660,
											"end": 2669,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2660,
											"end": 2669,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "tag",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2720,
											"end": 2723,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2751,
											"end": 2752,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2747,
											"end": 2753,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 2744,
											"end": 2745,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2741,
											"end": 2754,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "tag",
											"source": 5,
											"value": "252"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3092,
											"end": 3369,
											"name": "tag",
											"source": 5,
											"value": "118"
										},
										{
											"begin": 3092,
											"end": 3369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3159,
											"end": 3165,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3214,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3200,
											"end": 3209,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3191,
											"end": 3198,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 3187,
											"end": 3210,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3183,
											"end": 3215,
											"name": "SLT",
											"source": 5
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3228,
											"end": 3229,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3225,
											"end": 3226,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3218,
											"end": 3230,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "tag",
											"source": 5,
											"value": "255"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3260,
											"end": 3269,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3254,
											"end": 3270,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3306,
											"end": 3319,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3320,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3292,
											"end": 3297,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3289,
											"end": 3321,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 3279,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "242"
										},
										{
											"begin": 3279,
											"end": 3339,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3335,
											"end": 3336,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3332,
											"end": 3333,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3325,
											"end": 3337,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "tag",
											"source": 5,
											"value": "125"
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3576,
											"end": 3578,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3588,
											"end": 3618,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3654,
											"end": 3688,
											"name": "PUSH",
											"source": 5,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3649,
											"end": 3651,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3627,
											"end": 3689,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3721,
											"end": 3723,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3706,
											"end": 3724,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3706,
											"end": 3724,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4799,
											"end": 4924,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 4799,
											"end": 4924,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4839,
											"end": 4843,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4867,
											"end": 4868,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4864,
											"end": 4865,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4861,
											"end": 4869,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 4858,
											"end": 4892,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4858,
											"end": 4892,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 4858,
											"end": 4892,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4872,
											"end": 4890,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 4872,
											"end": 4890,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "231"
										},
										{
											"begin": 4872,
											"end": 4890,
											"name": "JUMP",
											"source": 5,
											"value": "[in]"
										},
										{
											"begin": 4872,
											"end": 4890,
											"name": "tag",
											"source": 5,
											"value": "263"
										},
										{
											"begin": 4872,
											"end": 4890,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4909,
											"end": 4918,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 4909,
											"end": 4918,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4799,
											"end": 4924,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_blockTimestamp()": "c63aa3e7",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"totalVoters()": "5f5300ff",
							"transferOwnership(address)": "f2fde38b",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stake-2.0.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Stake-2.0.sol\":{\"keccak256\":\"0xc6aab08b45a7cbc90f035493ad33520fe6b6f10a7a3875457b9d83a2d3e0f702\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://47d00964a8407211aa2cda5bed194ea7b1064d9dc1a8b2bc7f7146ec059a970e\",\"dweb:/ipfs/QmRrFcmTztuSzvZbfhwjHAECMwEv5L7pz6W5hJo3HMZFLw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 296,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 298,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 300,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 302,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 304,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 306,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 308,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "totalVoters",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 313,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "voters",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(Voter)292_storage)"
							},
							{
								"astId": 317,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "votedUsers",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 319,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "token_address",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							},
							{
								"astId": 384,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_struct(Stake)370_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)370_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)370_storage"
							},
							"t_mapping(t_address,t_struct(Voter)292_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)292_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)370_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 357,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 359,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 361,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 363,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 365,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 367,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 369,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)292_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Voter",
								"members": [
									{
										"astId": 287,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 291,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							244
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 245,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 244,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								244
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 234,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 234,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							244
						]
					},
					"id": 245,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:3"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 225,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 244,
							"linearizedBaseContracts": [
								244
							],
							"name": "Context",
							"nameLocation": "626:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 233,
										"nodeType": "Block",
										"src": "702:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 230,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 229,
												"id": 232,
												"nodeType": "Return",
												"src": "712:17:3"
											}
										]
									},
									"id": 234,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:3"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "693:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:3"
									},
									"scope": 244,
									"src": "640:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 242,
										"nodeType": "Block",
										"src": "809:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 239,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 238,
												"id": 241,
												"nodeType": "Return",
												"src": "819:15:3"
											}
										]
									},
									"id": 243,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:3"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 243,
												"src": "793:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 236,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:3"
									},
									"scope": 244,
									"src": "742:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 245,
							"src": "608:235:3",
							"usedErrors": []
						}
					],
					"src": "86:758:3"
				},
				"id": 3
			},
			"contracts/Stake-2.0.sol": {
				"ast": {
					"absolutePath": "contracts/Stake-2.0.sol",
					"exportedSymbols": {
						"Airdrop__claimableOnceAWeek": [
							272
						],
						"Context": [
							244
						],
						"Function__notAVoter": [
							254
						],
						"Function__notAuthorized": [
							252
						],
						"Function__votingNotAvailable": [
							256
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"Staking": [
							986
						],
						"Staking__airdropExceed20Percent": [
							265
						],
						"Staking__cannotStakeNothing": [
							259
						],
						"Staking__noStakingFound": [
							267
						],
						"Staking__penaltyExceed3Percent": [
							263
						],
						"Staking__userIsStaker": [
							261
						],
						"Staking_noStakingPackageFound": [
							269
						],
						"Voting__alreadyVoted": [
							277
						],
						"Voting__notEnoughVoters": [
							281
						],
						"Voting__notYetVoted": [
							279
						],
						"Voting__votingIsRunning": [
							275
						]
					},
					"id": 987,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 246,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 247,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 987,
							"sourceUnit": 223,
							"src": "64:56:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 248,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 987,
							"sourceUnit": 145,
							"src": "121:62:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 249,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 987,
							"sourceUnit": 105,
							"src": "184:52:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 250,
								"nodeType": "StructuredDocumentation",
								"src": "238:54:4",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 252,
							"name": "Function__notAuthorized",
							"nameLocation": "299:23:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 251,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "322:2:4"
							},
							"src": "293:32:4"
						},
						{
							"id": 254,
							"name": "Function__notAVoter",
							"nameLocation": "332:19:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 253,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "351:2:4"
							},
							"src": "326:28:4"
						},
						{
							"id": 256,
							"name": "Function__votingNotAvailable",
							"nameLocation": "361:28:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 255,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "389:2:4"
							},
							"src": "355:37:4"
						},
						{
							"documentation": {
								"id": 257,
								"nodeType": "StructuredDocumentation",
								"src": "394:63:4",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 259,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "464:27:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 258,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "491:2:4"
							},
							"src": "458:36:4"
						},
						{
							"id": 261,
							"name": "Staking__userIsStaker",
							"nameLocation": "501:21:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 260,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "522:2:4"
							},
							"src": "495:30:4"
						},
						{
							"id": 263,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "532:30:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 262,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "562:2:4"
							},
							"src": "526:39:4"
						},
						{
							"id": 265,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "572:31:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 264,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "603:2:4"
							},
							"src": "566:40:4"
						},
						{
							"id": 267,
							"name": "Staking__noStakingFound",
							"nameLocation": "613:23:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 266,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "636:2:4"
							},
							"src": "607:32:4"
						},
						{
							"id": 269,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "646:29:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 268,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "675:2:4"
							},
							"src": "640:38:4"
						},
						{
							"documentation": {
								"id": 270,
								"nodeType": "StructuredDocumentation",
								"src": "680:63:4",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 272,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "750:27:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 271,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "777:2:4"
							},
							"src": "744:36:4"
						},
						{
							"documentation": {
								"id": 273,
								"nodeType": "StructuredDocumentation",
								"src": "782:62:4",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 275,
							"name": "Voting__votingIsRunning",
							"nameLocation": "851:23:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 274,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "874:2:4"
							},
							"src": "845:32:4"
						},
						{
							"id": 277,
							"name": "Voting__alreadyVoted",
							"nameLocation": "884:20:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 276,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "904:2:4"
							},
							"src": "878:29:4"
						},
						{
							"id": 279,
							"name": "Voting__notYetVoted",
							"nameLocation": "914:19:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 278,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "933:2:4"
							},
							"src": "908:28:4"
						},
						{
							"id": 281,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "943:23:4",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 280,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "966:2:4"
							},
							"src": "937:32:4"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 282,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "991:15:4"
									},
									"id": 283,
									"nodeType": "InheritanceSpecifier",
									"src": "991:15:4"
								},
								{
									"baseName": {
										"id": 284,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "1008:7:4"
									},
									"id": 285,
									"nodeType": "InheritanceSpecifier",
									"src": "1008:7:4"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 986,
							"linearizedBaseContracts": [
								986,
								104,
								244,
								144
							],
							"name": "Staking",
							"nameLocation": "980:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Staking.Voter",
									"id": 292,
									"members": [
										{
											"constant": false,
											"id": 287,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1215:11:4",
											"nodeType": "VariableDeclaration",
											"scope": 292,
											"src": "1210:16:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 286,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1210:4:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 291,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1261:5:4",
											"nodeType": "VariableDeclaration",
											"scope": 292,
											"src": "1236:30:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 290,
												"keyType": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1244:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1236:24:4",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 289,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1255:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1194:5:4",
									"nodeType": "StructDefinition",
									"scope": 986,
									"src": "1187:86:4",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 296,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1316:14:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1279:51:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 295,
										"keyType": {
											"id": 293,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1287:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1279:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 294,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1298:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 298,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1352:18:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1337:33:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 297,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1337:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 300,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1391:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1376:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 299,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1376:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 302,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1423:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1408:27:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 301,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1408:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 304,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1456:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1442:27:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 303,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1442:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 306,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1492:9:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1475:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 305,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1475:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 308,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1522:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1507:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 307,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1507:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 313,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1572:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1539:39:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$292_storage_$",
										"typeString": "mapping(address => struct Staking.Voter)"
									},
									"typeName": {
										"id": 312,
										"keyType": {
											"id": 309,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1547:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1539:25:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$292_storage_$",
											"typeString": "mapping(address => struct Staking.Voter)"
										},
										"valueType": {
											"id": 311,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 310,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 292,
												"src": "1558:5:4"
											},
											"referencedDeclaration": 292,
											"src": "1558:5:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$292_storage_ptr",
												"typeString": "struct Staking.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 317,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1619:10:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1584:45:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 316,
										"keyType": {
											"id": 314,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1592:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1584:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 315,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1603:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 319,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1651:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "1636:28:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 318,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1636:7:4",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 354,
										"nodeType": "Block",
										"src": "1698:274:4",
										"statements": [
											{
												"expression": {
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 324,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "1770:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 325,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1791:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1770:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 327,
												"nodeType": "ExpressionStatement",
												"src": "1770:23:4"
											},
											{
												"expression": {
													"id": 330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 328,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "1803:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 329,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1817:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1803:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 331,
												"nodeType": "ExpressionStatement",
												"src": "1803:16:4"
											},
											{
												"expression": {
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 332,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "1830:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 333,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 321,
														"src": "1846:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1830:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "1830:21:4"
											},
											{
												"expression": {
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 336,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "1862:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 338,
														"indexExpression": {
															"hexValue": "3930",
															"id": 337,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1877:7:4",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1862:23:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 339,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1888:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1862:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 341,
												"nodeType": "ExpressionStatement",
												"src": "1862:27:4"
											},
											{
												"expression": {
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 342,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "1899:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 344,
														"indexExpression": {
															"hexValue": "313830",
															"id": 343,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1914:8:4",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1899:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 345,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1926:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1899:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "1899:28:4"
											},
											{
												"expression": {
													"id": 352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 348,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "1937:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 350,
														"indexExpression": {
															"hexValue": "333635",
															"id": 349,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1952:8:4",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1937:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 351,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1964:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "1937:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 353,
												"nodeType": "ExpressionStatement",
												"src": "1937:28:4"
											}
										]
									},
									"id": 355,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 355,
												"src": "1683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:15:4"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1698:0:4"
									},
									"scope": 986,
									"src": "1671:301:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 370,
									"members": [
										{
											"constant": false,
											"id": 357,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2236:6:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2228:14:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 356,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2228:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 359,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2260:5:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2252:13:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 358,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2252:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 361,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2283:9:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2275:17:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 360,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2275:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 363,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2310:11:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2302:19:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 362,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2302:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 365,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2438:9:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2430:17:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 364,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2430:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 367,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2465:16:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2457:24:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 366,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2457:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 369,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2499:15:4",
											"nodeType": "VariableDeclaration",
											"scope": 370,
											"src": "2491:23:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 368,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2491:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2212:5:4",
									"nodeType": "StructDefinition",
									"scope": 986,
									"src": "2205:316:4",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 378,
									"members": [
										{
											"constant": false,
											"id": 372,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2698:12:4",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "2690:20:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 371,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2690:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 374,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2728:7:4",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "2720:15:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 373,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2720:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 377,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2751:5:4",
											"nodeType": "VariableDeclaration",
											"scope": 378,
											"src": "2745:11:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 376,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 375,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 370,
													"src": "2745:5:4"
												},
												"referencedDeclaration": 370,
												"src": "2745:5:4",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2665:14:4",
									"nodeType": "StructDefinition",
									"scope": 986,
									"src": "2658:105:4",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 379,
										"nodeType": "StructuredDocumentation",
										"src": "2769:111:4",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 384,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2920:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 986,
									"src": "2885:47:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 383,
										"keyType": {
											"id": 380,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2893:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2885:25:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 382,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 381,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 370,
												"src": "2904:5:4"
											},
											"referencedDeclaration": 370,
											"src": "2904:5:4",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 385,
										"nodeType": "StructuredDocumentation",
										"src": "2939:124:4",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 395,
									"name": "Staked",
									"nameLocation": "3074:6:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3106:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3090:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3090:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3128:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3120:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3120:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3152:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3144:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3144:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 393,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "3179:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "3171:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3171:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3080:116:4"
									},
									"src": "3068:129:4"
								},
								{
									"anonymous": false,
									"id": 399,
									"name": "PenaltyChanged",
									"nameLocation": "3209:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3232:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "3224:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 396,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3224:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3223:16:4"
									},
									"src": "3203:37:4"
								},
								{
									"anonymous": false,
									"id": 403,
									"name": "AirdropChanged",
									"nameLocation": "3251:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3274:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "3266:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3266:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3265:16:4"
									},
									"src": "3245:37:4"
								},
								{
									"body": {
										"id": 418,
										"nodeType": "Block",
										"src": "3428:197:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 406,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "3525:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$292_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 409,
															"indexExpression": {
																"expression": {
																	"id": 407,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3532:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3532:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3525:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$292_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 410,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 287,
														"src": "3525:30:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 411,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3559:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3525:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 417,
												"nodeType": "IfStatement",
												"src": "3521:98:4",
												"trueBody": {
													"id": 416,
													"nodeType": "Block",
													"src": "3566:53:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 413,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "3587:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 414,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3587:21:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 415,
															"nodeType": "RevertStatement",
															"src": "3580:28:4"
														}
													]
												}
											}
										]
									},
									"id": 419,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3403:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3411:2:4"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3428:0:4"
									},
									"scope": 986,
									"src": "3394:231:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "3650:38:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 421,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 419,
														"src": "3660:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3660:10:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "3660:10:4"
											},
											{
												"id": 424,
												"nodeType": "PlaceholderStatement",
												"src": "3680:1:4"
											}
										]
									},
									"id": 426,
									"name": "isVoter",
									"nameLocation": "3640:7:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3647:2:4"
									},
									"src": "3631:57:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 436,
										"nodeType": "Block",
										"src": "3738:160:4",
										"statements": [
											{
												"condition": {
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3814:14:4",
													"subExpression": {
														"id": 429,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 304,
														"src": "3815:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 435,
												"nodeType": "IfStatement",
												"src": "3810:82:4",
												"trueBody": {
													"id": 434,
													"nodeType": "Block",
													"src": "3830:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 431,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 256,
																	"src": "3851:28:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3851:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 433,
															"nodeType": "RevertStatement",
															"src": "3844:37:4"
														}
													]
												}
											}
										]
									},
									"id": 437,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "3703:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 427,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3721:2:4"
									},
									"returnParameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3738:0:4"
									},
									"scope": 986,
									"src": "3694:204:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "3932:48:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 439,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 437,
														"src": "3942:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3942:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "3942:20:4"
											},
											{
												"id": 442,
												"nodeType": "PlaceholderStatement",
												"src": "3972:1:4"
											}
										]
									},
									"id": 444,
									"name": "votingStatusTrue",
									"nameLocation": "3913:16:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3929:2:4"
									},
									"src": "3904:76:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 537,
										"nodeType": "Block",
										"src": "4371:1163:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 454,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 384,
																"src": "4567:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 457,
															"indexExpression": {
																"expression": {
																	"id": 455,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4580:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4580:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4567:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 458,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "4567:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4602:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4567:36:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 465,
												"nodeType": "IfStatement",
												"src": "4563:97:4",
												"trueBody": {
													"id": 464,
													"nodeType": "Block",
													"src": "4605:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 461,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 261,
																	"src": "4626:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 462,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4626:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 463,
															"nodeType": "RevertStatement",
															"src": "4619:30:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 466,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 296,
															"src": "4674:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 468,
														"indexExpression": {
															"id": 467,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "4689:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4674:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 469,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4705:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4674:32:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 475,
												"nodeType": "IfStatement",
												"src": "4670:101:4",
												"trueBody": {
													"id": 474,
													"nodeType": "Block",
													"src": "4708:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 471,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 269,
																	"src": "4729:29:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4729:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 473,
															"nodeType": "RevertStatement",
															"src": "4722:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 476,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "4781:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4796:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4781:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 479,
												"nodeType": "ExpressionStatement",
												"src": "4781:16:4"
											},
											{
												"expression": {
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 480,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "4807:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$292_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 483,
															"indexExpression": {
																"expression": {
																	"id": 481,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4814:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 482,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4814:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4807:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$292_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 484,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 287,
														"src": "4807:30:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 485,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4840:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4807:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 487,
												"nodeType": "ExpressionStatement",
												"src": "4807:37:4"
											},
											{
												"assignments": [
													489
												],
												"declarations": [
													{
														"constant": false,
														"id": 489,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "4950:9:4",
														"nodeType": "VariableDeclaration",
														"scope": 537,
														"src": "4942:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 488,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4942:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 492,
												"initialValue": {
													"expression": {
														"id": 490,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "4962:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "4962:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4942:35:4"
											},
											{
												"expression": {
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 493,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "5106:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 496,
														"indexExpression": {
															"expression": {
																"id": 494,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5119:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 495,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5119:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5106:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 498,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 447,
																"src": "5152:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 499,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 489,
																"src": "5172:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 500,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 296,
																	"src": "5195:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 502,
																"indexExpression": {
																	"id": 501,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 449,
																	"src": "5210:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5195:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 503,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 449,
																			"src": "5237:11:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 504,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 489,
																			"src": "5251:9:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5237:23:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 506,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5236:25:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5275:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5290:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 509,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5305:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 497,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "5133:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$370_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 510,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5133:183:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "5106:210:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$370_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "5106:210:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 517,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5362:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5362:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 521,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5382:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$986",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$986",
																		"typeString": "contract Staking"
																	}
																],
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5374:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 519,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5374:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5374:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 523,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "5389:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 514,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 319,
																	"src": "5334:13:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 513,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5327:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 515,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5327:21:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														"id": 516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 203,
														"src": "5327:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5327:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "5327:69:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 527,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5470:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5470:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "5482:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 530,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5490:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 531,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 449,
																		"src": "5502:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 532,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 489,
																		"src": "5516:9:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5502:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 534,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5501:25:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 526,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 395,
														"src": "5463:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5463:64:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "EmitStatement",
												"src": "5458:69:4"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "4092:200:4",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 538,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 452,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 451,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "4358:12:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "4358:12:4"
										}
									],
									"name": "stake",
									"nameLocation": "4306:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4320:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "4312:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 446,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4312:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4336:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "4328:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4328:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4311:37:4"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4371:0:4"
									},
									"scope": 986,
									"src": "4297:1237:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 561,
										"nodeType": "Block",
										"src": "5601:245:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 545,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "5689:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 546,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5698:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "5689:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 552,
												"nodeType": "IfStatement",
												"src": "5685:81:4",
												"trueBody": {
													"id": 551,
													"nodeType": "Block",
													"src": "5702:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 548,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "5723:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5723:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 550,
															"nodeType": "RevertStatement",
															"src": "5716:39:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 553,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "5775:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 554,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 540,
														"src": "5796:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5775:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 556,
												"nodeType": "ExpressionStatement",
												"src": "5775:27:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 558,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "5832:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 557,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 399,
														"src": "5817:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5817:22:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 560,
												"nodeType": "EmitStatement",
												"src": "5812:27:4"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 562,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 543,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 542,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "5591:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "5591:9:4"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5549:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5574:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "5566:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 539,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5566:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5565:16:4"
									},
									"returnParameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5601:0:4"
									},
									"scope": 986,
									"src": "5540:306:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "5962:121:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 575,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 569,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6033:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 570,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6033:15:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 571,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 564,
																				"src": "6051:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6033:23:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 573,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6032:25:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6060:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "6032:32:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 576,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6031:34:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6068:8:4",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "6031:45:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 568,
												"id": 579,
												"nodeType": "Return",
												"src": "6024:52:4"
											}
										]
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "5861:25:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "5895:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5887:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 563,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5887:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5886:15:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "5949:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5949:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5948:9:4"
									},
									"scope": 986,
									"src": "5852:231:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 611,
										"nodeType": "Block",
										"src": "6205:321:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 592,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 589,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "6219:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 590,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "6219:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 591,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6240:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6219:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 596,
												"nodeType": "IfStatement",
												"src": "6215:61:4",
												"trueBody": {
													"id": 595,
													"nodeType": "Block",
													"src": "6243:33:4",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 593,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6264:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 588,
															"id": 594,
															"nodeType": "Return",
															"src": "6257:8:4"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 597,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 584,
																			"src": "6393:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 598,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 357,
																		"src": "6393:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 599,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 584,
																			"src": "6429:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 600,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 361,
																		"src": "6429:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6393:56:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 603,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 584,
																				"src": "6494:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 604,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 359,
																			"src": "6494:16:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 602,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 581,
																		"src": "6468:25:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6468:43:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6393:118:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 607,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6392:120:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 608,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6515:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6392:127:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 588,
												"id": 610,
												"nodeType": "Return",
												"src": "6373:146:4"
											}
										]
									},
									"id": 612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6098:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6133:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "6120:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 583,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 582,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 370,
														"src": "6120:5:4"
													},
													"referencedDeclaration": 370,
													"src": "6120:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6119:25:4"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "6192:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 586,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6192:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6191:9:4"
									},
									"scope": 986,
									"src": "6089:437:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "6671:220:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 623,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 614,
														"src": "6685:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6695:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6685:11:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 631,
												"nodeType": "IfStatement",
												"src": "6681:55:4",
												"trueBody": {
													"id": 630,
													"nodeType": "Block",
													"src": "6698:38:4",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 626,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6720:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 627,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6723:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 628,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6719:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 622,
															"id": 629,
															"nodeType": "Return",
															"src": "6712:13:4"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 632,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 614,
																"src": "6766:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 638,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 635,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 633,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 614,
																						"src": "6777:6:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 634,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 298,
																						"src": "6786:18:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6777:27:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 636,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6776:29:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 637,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6808:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "6776:36:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 639,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6775:38:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6766:47:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 641,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "6827:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 647,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 644,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 642,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 616,
																						"src": "6838:6:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 643,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 298,
																						"src": "6847:18:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6838:27:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 645,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6837:29:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 646,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6869:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "6837:36:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 648,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6836:38:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6827:47:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 650,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6752:132:4",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 622,
												"id": 651,
												"nodeType": "Return",
												"src": "6745:139:4"
											}
										]
									},
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "6541:28:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6578:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6570:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6570:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "6594:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6586:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6586:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6569:32:4"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6649:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6649:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "6658:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6658:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6648:18:4"
									},
									"scope": 986,
									"src": "6532:359:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 735,
										"nodeType": "Block",
										"src": "7285:875:4",
										"statements": [
											{
												"assignments": [
													661
												],
												"declarations": [
													{
														"constant": false,
														"id": 661,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "7416:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 735,
														"src": "7403:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 660,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 659,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 370,
																"src": "7403:5:4"
															},
															"referencedDeclaration": 370,
															"src": "7403:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 666,
												"initialValue": {
													"baseExpression": {
														"id": 662,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "7429:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 665,
													"indexExpression": {
														"expression": {
															"id": 663,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7442:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7442:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7429:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$370_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7403:50:4"
											},
											{
												"assignments": [
													668
												],
												"declarations": [
													{
														"constant": false,
														"id": 668,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7471:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 735,
														"src": "7463:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 667,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7463:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 672,
												"initialValue": {
													"arguments": [
														{
															"id": 670,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 661,
															"src": "7502:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 669,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 612,
														"src": "7480:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$370_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7480:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7463:50:4"
											},
											{
												"expression": {
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7524:31:4",
													"subExpression": {
														"baseExpression": {
															"id": 673,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7531:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 676,
														"indexExpression": {
															"expression": {
																"id": 674,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7544:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7544:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7531:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 678,
												"nodeType": "ExpressionStatement",
												"src": "7524:31:4"
											},
											{
												"expression": {
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 679,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "7565:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 680,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7580:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7565:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 682,
												"nodeType": "ExpressionStatement",
												"src": "7565:16:4"
											},
											{
												"expression": {
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7591:42:4",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 683,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 313,
																	"src": "7598:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$292_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 686,
																"indexExpression": {
																	"expression": {
																		"id": 684,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7605:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7605:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7598:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$292_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 687,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 291,
															"src": "7598:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 689,
														"indexExpression": {
															"id": 688,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 306,
															"src": "7623:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7598:35:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 691,
												"nodeType": "ExpressionStatement",
												"src": "7591:42:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 692,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 661,
															"src": "7648:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 693,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 363,
														"src": "7648:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 694,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7673:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7673:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7648:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 733,
													"nodeType": "Block",
													"src": "8011:143:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 724,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8073:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8073:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 729,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 726,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 661,
																						"src": "8102:10:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 727,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 357,
																					"src": "8102:17:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 728,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 668,
																					"src": "8122:6:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8102:26:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 730,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8101:28:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 721,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 319,
																				"src": "8032:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 720,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8025:6:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 722,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8025:21:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 723,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 171,
																	"src": "8025:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 731,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8025:118:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 732,
															"nodeType": "ExpressionStatement",
															"src": "8025:118:4"
														}
													]
												},
												"id": 734,
												"nodeType": "IfStatement",
												"src": "7644:510:4",
												"trueBody": {
													"id": 719,
													"nodeType": "Block",
													"src": "7690:315:4",
													"statements": [
														{
															"assignments": [
																698,
																700
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 698,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "7730:14:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 719,
																	"src": "7722:22:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 697,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7722:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 700,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "7770:14:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 719,
																	"src": "7762:22:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 699,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7762:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 706,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 702,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 661,
																			"src": "7830:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 703,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 357,
																		"src": "7830:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 704,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 668,
																		"src": "7849:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 701,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "7801:28:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7801:55:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7704:152:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 711,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "7919:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "7919:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 715,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 713,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 698,
																					"src": "7948:14:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 714,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 700,
																					"src": "7965:14:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:31:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 716,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7947:33:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 708,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 319,
																				"src": "7878:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 707,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "7871:6:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7871:21:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 171,
																	"src": "7871:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7871:123:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 718,
															"nodeType": "ExpressionStatement",
															"src": "7871:123:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "6897:335:4",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 736,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 657,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 656,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "7272:12:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "7272:12:4"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7247:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7260:2:4"
									},
									"returnParameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7285:0:4"
									},
									"scope": 986,
									"src": "7238:922:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 852,
										"nodeType": "Block",
										"src": "8232:958:4",
										"statements": [
											{
												"assignments": [
													744
												],
												"declarations": [
													{
														"constant": false,
														"id": 744,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8255:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 852,
														"src": "8242:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 743,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 742,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 370,
																"src": "8242:5:4"
															},
															"referencedDeclaration": 370,
															"src": "8242:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 749,
												"initialValue": {
													"baseExpression": {
														"id": 745,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "8268:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 748,
													"indexExpression": {
														"expression": {
															"id": 746,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8281:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 747,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8281:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8268:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$370_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8242:50:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 750,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8367:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 751,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "8367:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8388:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8367:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 758,
												"nodeType": "IfStatement",
												"src": "8363:85:4",
												"trueBody": {
													"id": 757,
													"nodeType": "Block",
													"src": "8391:57:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 754,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "8412:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 755,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8412:25:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 756,
															"nodeType": "RevertStatement",
															"src": "8405:32:4"
														}
													]
												}
											},
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "8479:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 852,
														"src": "8457:29:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 760,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 759,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 378,
																"src": "8457:14:4"
															},
															"referencedDeclaration": 378,
															"src": "8457:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$378_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 767,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8504:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8507:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 765,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8510:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 762,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 378,
														"src": "8489:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$378_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8489:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8457:64:4"
											},
											{
												"assignments": [
													769
												],
												"declarations": [
													{
														"constant": false,
														"id": 769,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8540:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 852,
														"src": "8532:14:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 768,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8532:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 773,
												"initialValue": {
													"arguments": [
														{
															"id": 771,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "8571:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 770,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 612,
														"src": "8549:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$370_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8549:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8532:50:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 774,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 761,
																"src": "8597:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 775,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 377,
															"src": "8597:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 776,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 363,
														"src": "8597:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 777,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8625:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 778,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8625:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8597:43:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 802,
												"nodeType": "IfStatement",
												"src": "8593:214:4",
												"trueBody": {
													"id": 801,
													"nodeType": "Block",
													"src": "8642:165:4",
													"statements": [
														{
															"expression": {
																"id": 799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 780,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 761,
																		"src": "8656:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 782,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 374,
																	"src": "8656:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 798,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 789,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 786,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 783,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 744,
																									"src": "8692:10:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 784,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 357,
																								"src": "8692:17:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 785,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 298,
																								"src": "8712:18:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "8692:38:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 787,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "8691:40:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 788,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8734:4:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "8691:47:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 790,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8690:49:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 796,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 793,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 791,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 769,
																								"src": "8760:6:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 792,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 298,
																								"src": "8769:18:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "8760:27:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 794,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "8759:29:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 795,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8791:4:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "8759:36:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 797,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8758:38:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8690:106:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8656:140:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 800,
															"nodeType": "ExpressionStatement",
															"src": "8656:140:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 804,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 744,
																	"src": "8835:10:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 805,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 369,
																"src": "8835:26:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 803,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 913,
															"src": "8821:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8821:41:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8865:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8821:45:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 833,
													"nodeType": "Block",
													"src": "9007:59:4",
													"statements": [
														{
															"expression": {
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 825,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 761,
																			"src": "9021:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 828,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 377,
																		"src": "9021:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 829,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "9021:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 830,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9054:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9021:34:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 832,
															"nodeType": "ExpressionStatement",
															"src": "9021:34:4"
														}
													]
												},
												"id": 834,
												"nodeType": "IfStatement",
												"src": "8817:249:4",
												"trueBody": {
													"id": 824,
													"nodeType": "Block",
													"src": "8868:133:4",
													"statements": [
														{
															"assignments": [
																810
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 810,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "8890:7:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 824,
																	"src": "8882:15:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 809,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8882:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 815,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 812,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 744,
																			"src": "8918:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 813,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 357,
																		"src": "8918:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 811,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 931,
																	"src": "8900:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8900:36:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8882:54:4"
														},
														{
															"expression": {
																"id": 822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 816,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 761,
																			"src": "8950:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 819,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 377,
																		"src": "8950:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 820,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "8950:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 821,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 810,
																	"src": "8983:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8950:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 823,
															"nodeType": "ExpressionStatement",
															"src": "8950:40:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 841,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 835,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 761,
																"src": "9076:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 838,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 377,
															"src": "9076:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 839,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 365,
														"src": "9076:23:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 840,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 769,
														"src": "9102:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9076:32:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 842,
												"nodeType": "ExpressionStatement",
												"src": "9076:32:4"
											},
											{
												"expression": {
													"id": 848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 843,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "9118:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 845,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 372,
														"src": "9118:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 846,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "9141:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 847,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "9141:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9118:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 849,
												"nodeType": "ExpressionStatement",
												"src": "9118:40:4"
											},
											{
												"expression": {
													"id": 850,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 761,
													"src": "9176:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 741,
												"id": 851,
												"nodeType": "Return",
												"src": "9169:14:4"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 853,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8175:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8183:2:4"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 853,
												"src": "8209:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$378_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 739,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 738,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 378,
														"src": "8209:14:4"
													},
													"referencedDeclaration": 378,
													"src": "8209:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$378_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8208:23:4"
									},
									"scope": 986,
									"src": "8166:1024:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 863,
										"nodeType": "Block",
										"src": "9345:47:4",
										"statements": [
											{
												"expression": {
													"id": 861,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 858,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "9355:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 859,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9370:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9370:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9355:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 862,
												"nodeType": "ExpressionStatement",
												"src": "9355:30:4"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 864,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 856,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 855,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9335:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "9335:9:4"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "9311:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9323:2:4"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9345:0:4"
									},
									"scope": 986,
									"src": "9302:90:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 887,
										"nodeType": "Block",
										"src": "9466:166:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 871,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "9480:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 872,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9489:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "9480:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 878,
												"nodeType": "IfStatement",
												"src": "9476:83:4",
												"trueBody": {
													"id": 877,
													"nodeType": "Block",
													"src": "9494:65:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 874,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 265,
																	"src": "9515:31:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9515:33:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 876,
															"nodeType": "RevertStatement",
															"src": "9508:40:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 879,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 300,
														"src": "9568:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 880,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "9582:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9568:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 882,
												"nodeType": "ExpressionStatement",
												"src": "9568:20:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 884,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 866,
															"src": "9618:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 883,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 403,
														"src": "9603:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9603:22:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 886,
												"nodeType": "EmitStatement",
												"src": "9598:27:4"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 888,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 869,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 868,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9456:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "9456:9:4"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "9407:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9439:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "9431:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9431:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9430:16:4"
									},
									"returnParameters": {
										"id": 870,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9466:0:4"
									},
									"scope": 986,
									"src": "9398:234:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 896,
										"nodeType": "Block",
										"src": "9695:39:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 893,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "9712:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "9712:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 892,
												"id": 895,
												"nodeType": "Return",
												"src": "9705:22:4"
											}
										]
									},
									"functionSelector": "c63aa3e7",
									"id": 897,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nameLocation": "9647:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9662:2:4"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 897,
												"src": "9686:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9686:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9685:9:4"
									},
									"scope": 986,
									"src": "9638:96:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 912,
										"nodeType": "Block",
										"src": "9812:62:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 904,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9830:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9830:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 906,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 899,
																	"src": "9848:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9830:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 908,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9829:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 909,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9861:6:4",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "9829:38:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 903,
												"id": 911,
												"nodeType": "Return",
												"src": "9822:45:4"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 913,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "9749:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "9771:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "9763:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9763:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9762:19:4"
									},
									"returnParameters": {
										"id": 903,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "9803:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 901,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9803:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9802:9:4"
									},
									"scope": 986,
									"src": "9740:134:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 930,
										"nodeType": "Block",
										"src": "9988:71:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 925,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 922,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 920,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 915,
																				"src": "10007:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 921,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 300,
																				"src": "10021:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10007:25:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 923,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10006:27:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10036:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10006:34:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 926,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10005:36:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 927,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10044:8:4",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10005:47:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 919,
												"id": 929,
												"nodeType": "Return",
												"src": "9998:54:4"
											}
										]
									},
									"id": 931,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "9889:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "9915:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "9907:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9907:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9906:21:4"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "9975:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9975:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9974:9:4"
									},
									"scope": 986,
									"src": "9880:179:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 984,
										"nodeType": "Block",
										"src": "10098:523:4",
										"statements": [
											{
												"assignments": [
													936
												],
												"declarations": [
													{
														"constant": false,
														"id": 936,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10174:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 984,
														"src": "10160:20:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 935,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 934,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 370,
																"src": "10160:5:4"
															},
															"referencedDeclaration": 370,
															"src": "10160:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 941,
												"initialValue": {
													"baseExpression": {
														"id": 937,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "10183:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$370_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 940,
													"indexExpression": {
														"expression": {
															"id": 938,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "10196:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "10196:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10183:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$370_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10160:47:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 942,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 936,
															"src": "10222:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 943,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "10222:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 944,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10238:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10222:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 983,
												"nodeType": "IfStatement",
												"src": "10218:397:4",
												"trueBody": {
													"id": 982,
													"nodeType": "Block",
													"src": "10241:374:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 947,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 936,
																				"src": "10273:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 948,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 369,
																			"src": "10273:22:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 946,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 913,
																		"src": "10259:13:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 949,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10259:37:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10300:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10259:42:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 956,
															"nodeType": "IfStatement",
															"src": "10255:117:4",
															"trueBody": {
																"id": 955,
																"nodeType": "Block",
																"src": "10303:69:4",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 952,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 272,
																				"src": "10328:27:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 953,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10328:29:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 954,
																		"nodeType": "RevertStatement",
																		"src": "10321:36:4"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 957,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 936,
																		"src": "10386:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 959,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "10386:23:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 960,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10412:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10386:27:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 962,
															"nodeType": "ExpressionStatement",
															"src": "10386:27:4"
														},
														{
															"expression": {
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 963,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 936,
																		"src": "10427:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 965,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 369,
																	"src": "10427:22:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 966,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10452:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10452:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10427:40:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 969,
															"nodeType": "ExpressionStatement",
															"src": "10427:40:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 974,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10530:3:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10530:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 977,
																					"name": "staker",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 936,
																					"src": "10576:6:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$370_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 978,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 357,
																				"src": "10576:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 976,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 931,
																			"src": "10558:17:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 979,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10558:32:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 971,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 319,
																				"src": "10489:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 970,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "10482:6:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10482:21:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 171,
																	"src": "10482:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10482:122:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 981,
															"nodeType": "ExpressionStatement",
															"src": "10482:122:4"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimAirdrop",
									"nameLocation": "10074:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10086:2:4"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10098:0:4"
									},
									"scope": 986,
									"src": "10065:556:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 987,
							"src": "971:11440:4",
							"usedErrors": [
								261,
								263,
								265,
								267,
								269,
								272
							]
						}
					],
					"src": "39:12373:4"
				},
				"id": 4
			}
		}
	}
}