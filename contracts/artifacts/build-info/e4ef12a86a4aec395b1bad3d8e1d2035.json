{
	"id": "e4ef12a86a4aec395b1bad3d8e1d2035",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stakable.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.11;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\ncontract Stakable {\r\n    /**\r\n     * @notice Constructor since this contract is not ment to be used without inheritance\r\n     * push once to stakeholders for it to work proplerly\r\n     */\r\n\r\n    uint256 private _stakingPenalty;\r\n\r\n    constructor(uint256 stakingPenalty_) {\r\n        // This push is needed so we avoid index 0 causing bug of index-1\r\n        stakeholders.push();\r\n\r\n        //Staking penalty in percentage\r\n        _stakingPenalty = stakingPenalty_;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * A stake struct is used to represent the way we store stakes,\r\n     * A Stake will contain the users address, the amount staked and a timestamp,\r\n     * Since which is when the stake was made\r\n     */\r\n    struct Stake {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 since;\r\n        // This claimable field is new and used to tell how big of a reward is currently available\r\n        uint256 claimable;\r\n        uint256 rewardAPY;\r\n        uint256 releaseTime;\r\n    }\r\n    /**\r\n     * @notice Stakeholder is a staker that has active stakes\r\n     */\r\n    struct Stakeholder {\r\n        address user;\r\n        Stake[] address_stakes;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\r\n     */\r\n    struct StakingSummary {\r\n        uint256 total_amount;\r\n        Stake[] stakes;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *   This is a array where we store all Stakes that are performed on the Contract\r\n     *   The stakes for each address are stored at a certain index, the index can be found using the stakes mapping\r\n     */\r\n    Stakeholder[] internal stakeholders;\r\n    /**\r\n     * @notice\r\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\r\n     */\r\n    mapping(address => uint256) internal stakes;\r\n\r\n    /**\r\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\r\n     */\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 index,\r\n        uint256 timestamp,\r\n        uint256 releaseTime\r\n    );\r\n\r\n    event PenaltyChanged(uint256 amount);\r\n\r\n    /**\r\n     * @notice _addStakeholder takes care of adding a stakeholder to the stakeholders array\r\n     */\r\n    function _addStakeholder(address staker) internal returns (uint256) {\r\n        // Push a empty item to the Array to make space for our new stakeholder\r\n        stakeholders.push();\r\n        // Calculate the index of the last item in the array by Len-1\r\n        uint256 userIndex = stakeholders.length - 1;\r\n        // Assign the address to the new index\r\n        stakeholders[userIndex].user = staker;\r\n        // Add index to the stakeHolders\r\n        stakes[staker] = userIndex;\r\n        return userIndex;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\r\n     * StakeID\r\n     */\r\n    function _stake(\r\n        uint256 _amount,\r\n        uint256 _stakePeriod,\r\n        uint256 _rewardRate\r\n    ) internal {\r\n        // Simple check so that user does not stake 0\r\n        require(_amount > 0, \"Stakable: Cannot stake nothing\");\r\n        // require(_amount > 1e18, \"Minimum stake is 1 TALAX\");\r\n\r\n        // Mappings in solidity creates all values, but empty, so we can just check the address\r\n        uint256 index = stakes[msg.sender];\r\n        // block.timestamp = timestamp of the current block in seconds since the epoch\r\n        uint256 timestamp = block.timestamp;\r\n        // See if the staker already has a staked index or if its the first time\r\n        if (index == 0) {\r\n            // This stakeholder stakes for the first time\r\n            // We need to add him to the stakeHolders and also map it into the Index of the stakes\r\n            // The index returned will be the index of the stakeholder in the stakeholders array\r\n            index = _addStakeholder(msg.sender);\r\n        }\r\n\r\n        // Use the index to push a new Stake\r\n        // push a newly created Stake with the current block timestamp.\r\n        stakeholders[index].address_stakes.push(\r\n            Stake(\r\n                msg.sender,\r\n                _amount,\r\n                timestamp,\r\n                0,\r\n                _rewardRate,\r\n                (_stakePeriod + timestamp)\r\n            )\r\n        );\r\n        // Emit an event that the stake has occured\r\n        emit Staked(\r\n            msg.sender,\r\n            _amount,\r\n            index,\r\n            timestamp,\r\n            (_stakePeriod + timestamp)\r\n        );\r\n    }\r\n\r\n    function _changePenaltyFee(uint256 amount_) internal {\r\n        require(amount_ <= 30, \"Stakable: Penalty fee cannot exceed 5 percent.\");\r\n        _stakingPenalty = amount_;\r\n        emit PenaltyChanged(amount_);\r\n    }\r\n\r\n    function penaltyFee() public view returns(uint256){\r\n        return _stakingPenalty;\r\n    }\r\n\r\n    function calculateStakingDuration(uint256 since_)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(since_ > 0, \"Stakable: Error timestamp 0\");\r\n        return\r\n            SafeMath.div(\r\n                (block.timestamp - since_) * 1e24,\r\n                365 days,\r\n                \"Stakable: Error cannot divide timestamp\"\r\n            );\r\n    }\r\n\r\n    function calculateStakeReward(Stake memory _current_stake, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_current_stake.amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return\r\n            (_amount *\r\n                _current_stake.rewardAPY *\r\n                calculateStakingDuration(_current_stake.since)) / 1e26;\r\n    }\r\n\r\n    function stakeSummary(address user_)\r\n        public\r\n        view\r\n        returns (StakingSummary memory)\r\n    {\r\n        StakingSummary memory summary = StakingSummary(\r\n            0,\r\n            stakeholders[stakes[user_]].address_stakes\r\n        );\r\n\r\n        return summary;\r\n    }\r\n\r\n    function calculateStakingWithPenalty(uint256 amount, uint256 reward)\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        if (amount == 0) {\r\n            return (0, 0);\r\n        }\r\n\r\n        return (\r\n            SafeMath.sub(\r\n                amount,\r\n                SafeMath.mul(amount, SafeMath.div(_stakingPenalty, 1000))\r\n            ),\r\n            SafeMath.sub(\r\n                reward,\r\n                SafeMath.mul(reward, SafeMath.div(_stakingPenalty, 1000))\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\r\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\r\n     * Will return the amount to MINT onto the acount\r\n     * Will also calculateStakeReward and reset timer\r\n     */\r\n    function _withdrawStake(uint256 amount, uint256 index)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        // Grab user_index which is the index to use to grab the Stake[]\r\n        uint256 user_index = stakes[msg.sender];\r\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\r\n            index\r\n        ];\r\n\r\n        // require(\r\n        //     current_stake.releaseTime <= block.timestamp,\r\n        //     \"Stakable: Cannot withdraw before the release time\"\r\n        // );\r\n\r\n        require(\r\n            current_stake.amount >= amount,\r\n            \"Stakable: Cannot withdraw more than you have staked\"\r\n        );\r\n\r\n        // Calculate available Reward first before we start modifying data\r\n        uint256 reward = calculateStakeReward(current_stake, amount);\r\n\r\n        /**\r\n         * @notice This is penalty given for early withdrawal before the designated time\r\n         */\r\n\r\n        if (current_stake.releaseTime < block.timestamp) {\r\n            return calculateStakingWithPenalty(amount, reward);\r\n        }\r\n\r\n        uint256 stakeDuration = current_stake.releaseTime - current_stake.since;\r\n        // Remove by subtracting the money unstaked\r\n        current_stake.amount = current_stake.amount - amount;\r\n        // If stake is empty, 0, then remove it from the array of stakes\r\n        if (current_stake.amount == 0) {\r\n            delete stakeholders[user_index].address_stakes[index];\r\n        } else {\r\n            stakeholders[user_index]\r\n                .address_stakes[index]\r\n                .amount = current_stake.amount;\r\n            // Reset timer of stake\r\n            stakeholders[user_index].address_stakes[index].since = block\r\n                .timestamp;\r\n            stakeholders[user_index].address_stakes[index].releaseTime =\r\n                block.timestamp +\r\n                stakeDuration;\r\n        }\r\n\r\n        return (amount, reward);\r\n    }\r\n\r\n    function _withdrawAllStake(uint256 index)\r\n        internal\r\n        returns (uint256, uint256)\r\n    {\r\n        // Grab user_index which is the index to use to grab the Stake[]\r\n        uint256 user_index = stakes[msg.sender];\r\n        Stake memory current_stake = stakeholders[user_index].address_stakes[\r\n            index\r\n        ];\r\n\r\n        // require(\r\n        //     current_stake.releaseTime <= block.timestamp,\r\n        //     \"Stakable: Cannot withdraw before the release time\"\r\n        // );\r\n\r\n        require(\r\n            current_stake.amount > 0,\r\n            \"Stakable: Cannot withdraw, you don't have any stake in this Index\"\r\n        );\r\n\r\n        // Calculate available Reward first before we start modifying data\r\n        uint256 amount = current_stake.amount;\r\n        uint256 reward = calculateStakeReward(current_stake, amount);\r\n\r\n        /**\r\n         * @notice This is penalty given for early withdrawal before the designated time\r\n         */\r\n\r\n        if (current_stake.releaseTime < block.timestamp) {\r\n            return calculateStakingWithPenalty(amount, reward);\r\n        }\r\n\r\n        delete stakeholders[user_index].address_stakes[index];\r\n\r\n        return (amount, reward);\r\n    }\r\n\r\n    function hasStake(address _staker)\r\n        public\r\n        view\r\n        returns (StakingSummary memory)\r\n    {\r\n        uint256 totalStakeAmount;\r\n\r\n        StakingSummary memory summary = StakingSummary(\r\n            0,\r\n            stakeholders[stakes[_staker]].address_stakes\r\n        );\r\n        require(\r\n            summary.stakes.length != 0,\r\n            \"Stakable: This address does not have any stakes\"\r\n        );\r\n\r\n        for (uint256 s = 0; s < summary.stakes.length; s += 1) {\r\n            uint256 availableReward = calculateStakeReward(\r\n                summary.stakes[s],\r\n                summary.stakes[s].amount\r\n            );\r\n            summary.stakes[s].claimable = availableReward;\r\n            totalStakeAmount = totalStakeAmount + summary.stakes[s].amount;\r\n        }\r\n\r\n        summary.total_amount = totalStakeAmount;\r\n        return summary;\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":467:6768  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fd04830778f7e44e9648e7a1e743f996041ee587daa54484479e0358db132f7064736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd04830778f7e44e9648e7a1e743f996041ee587daa54484479e0358db132f7064736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT DIV DUP4 SMOD PUSH25 0xF7E44E9648E7A1E743F996041EE587DAA54484479E0358DB13 0x2F PUSH17 0x64736F6C634300080B0033000000000000 ",
							"sourceMap": "467:6301:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6301:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd04830778f7e44e9648e7a1e743f996041ee587daa54484479e0358db132f7064736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT DIV DUP4 SMOD PUSH25 0xF7E44E9648E7A1E743F996041EE587DAA54484479E0358DB13 0x2F PUSH17 0x64736F6C634300080B0033000000000000 ",
							"sourceMap": "467:6301:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 467,
									"end": 6768,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fd04830778f7e44e9648e7a1e743f996041ee587daa54484479e0358db132f7064736f6c634300080b0033",
									".code": [
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 467,
											"end": 6768,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stakable.sol": {
				"Stakable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "stakingPenalty_",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_staker",
									"type": "address"
								}
							],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "address",
													"name": "user",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												}
											],
											"internalType": "struct Stakable.Stake[]",
											"name": "stakes",
											"type": "tuple[]"
										}
									],
									"internalType": "struct Stakable.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "penaltyFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user_",
									"type": "address"
								}
							],
							"name": "stakeSummary",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "address",
													"name": "user",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												}
											],
											"internalType": "struct Stakable.Stake[]",
											"name": "stakes",
											"type": "tuple[]"
										}
									],
									"internalType": "struct Stakable.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stakable.sol\":128:11141  contract Stakable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stakable.sol\":363:600  constructor(uint256 stakingPenalty_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/Stakable.sol\":486:498  stakeholders */\n  0x01\n    /* \"contracts/Stakable.sol\":486:505  stakeholders.push() */\n  dup1\n  sload\n  dup2\n  add\n  dup2\n  sstore\n  0x00\n  swap1\n  dup2\n  mstore\n    /* \"contracts/Stakable.sol\":559:592  _stakingPenalty = stakingPenalty_ */\n  sstore\n    /* \"contracts/Stakable.sol\":128:11141  contract Stakable {... */\n  jump(tag_8)\n    /* \"#utility.yul\":14:198   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_10\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_10:\n  pop\n    /* \"#utility.yul\":176:192   */\n  mload\n  swap2\n    /* \"#utility.yul\":14:198   */\n  swap1\n  pop\n  jump\t// out\ntag_8:\n    /* \"contracts/Stakable.sol\":128:11141  contract Stakable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stakable.sol\":128:11141  contract Stakable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3dc10ad4\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xb09d4b4e\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xe73e14bf\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stakable.sol\":5030:5121  function penaltyFee() public view returns(uint256){... */\n    tag_3:\n        /* \"contracts/Stakable.sol\":5072:5079  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":5098:5113  _stakingPenalty */\n      sload\n        /* \"contracts/Stakable.sol\":5030:5121  function penaltyFee() public view returns(uint256){... */\n      mload(0x40)\n        /* \"#utility.yul\":160:185   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":148:150   */\n      0x20\n        /* \"#utility.yul\":133:151   */\n      add\n        /* \"contracts/Stakable.sol\":5030:5121  function penaltyFee() public view returns(uint256){... */\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stakable.sol\":5909:6198  function stakeSummary(address user_)... */\n    tag_4:\n      tag_10\n      tag_11\n      calldatasize\n      0x04\n      tag_12\n      jump\t// in\n    tag_11:\n      tag_13\n      jump\t// in\n    tag_10:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_15\n      jump\t// in\n        /* \"contracts/Stakable.sol\":10257:11138  function hasStake(address _staker)... */\n    tag_5:\n      tag_10\n      tag_17\n      calldatasize\n      0x04\n      tag_12\n      jump\t// in\n    tag_17:\n      tag_18\n      jump\t// in\n        /* \"contracts/Stakable.sol\":5909:6198  function stakeSummary(address user_)... */\n    tag_13:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      0x60\n      0x20\n      dup3\n      add\n      mstore\n        /* \"contracts/Stakable.sol\":6033:6062  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stakable.sol\":6065:6163  StakingSummary(... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Stakable.sol\":6094:6095  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":6065:6163  StakingSummary(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stakable.sol\":6110:6122  stakeholders */\n      0x01\n        /* \"contracts/Stakable.sol\":6123:6129  stakes */\n      0x02\n        /* \"contracts/Stakable.sol\":6123:6136  stakes[user_] */\n      0x00\n        /* \"contracts/Stakable.sol\":6130:6135  user_ */\n      dup8\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":6123:6136  stakes[user_] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Stakable.sol\":6110:6137  stakeholders[stakes[user_]] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_25\n      jumpi\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x02\n      mul\n      add\n        /* \"contracts/Stakable.sol\":6110:6152  stakeholders[stakes[user_]].address_stakes */\n      0x01\n      add\n        /* \"contracts/Stakable.sol\":6065:6163  StakingSummary(... */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_28:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_29\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x06\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      0x01\n      dup1\n      dup3\n      add\n      sload\n      dup5\n      dup7\n      add\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap3\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      add\n      sload\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_28)\n    tag_29:\n      pop\n      pop\n      pop\n      swap2\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":6033:6163  StakingSummary memory summary = StakingSummary(... */\n      swap4\n        /* \"contracts/Stakable.sol\":5909:6198  function stakeSummary(address user_)... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":10257:11138  function hasStake(address _staker)... */\n    tag_18:\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x00\n      dup2\n      mstore\n      0x60\n      0x20\n      dup3\n      add\n      mstore\n        /* \"contracts/Stakable.sol\":10379:10403  uint256 totalStakeAmount */\n      0x00\n        /* \"contracts/Stakable.sol\":10416:10445  StakingSummary memory summary */\n      dup1\n        /* \"contracts/Stakable.sol\":10448:10548  StakingSummary(... */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n        /* \"contracts/Stakable.sol\":10477:10478  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":10448:10548  StakingSummary(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"contracts/Stakable.sol\":10493:10505  stakeholders */\n      0x01\n        /* \"contracts/Stakable.sol\":10506:10512  stakes */\n      0x02\n        /* \"contracts/Stakable.sol\":10506:10521  stakes[_staker] */\n      0x00\n        /* \"contracts/Stakable.sol\":10513:10520  _staker */\n      dup9\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stakable.sol\":10506:10521  stakes[_staker] */\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Stakable.sol\":10493:10522  stakeholders[stakes[_staker]] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_34\n      jumpi\n      tag_34\n      tag_26\n      jump\t// in\n    tag_34:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x02\n      mul\n      add\n        /* \"contracts/Stakable.sol\":10493:10537  stakeholders[stakes[_staker]].address_stakes */\n      0x01\n      add\n        /* \"contracts/Stakable.sol\":10448:10548  StakingSummary(... */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      swap1\n    tag_36:\n      dup3\n      dup3\n      lt\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup5\n      dup2\n      mstore\n      0x20\n      swap1\n      dup2\n      swap1\n      keccak256\n      0x40\n      dup1\n      mload\n      0xc0\n      dup2\n      add\n      dup3\n      mstore\n      0x06\n      dup7\n      mul\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup4\n      mstore\n      0x01\n      dup1\n      dup3\n      add\n      sload\n      dup5\n      dup7\n      add\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap3\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      add\n      sload\n      0xa0\n      dup4\n      add\n      mstore\n      swap1\n      dup4\n      mstore\n      swap1\n      swap3\n      add\n      swap2\n      add\n      jump(tag_36)\n    tag_37:\n      pop\n      pop\n      pop\n      swap2\n      mstore\n      pop\n        /* \"contracts/Stakable.sol\":10581:10595  summary.stakes */\n      0x20\n      dup2\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10581:10602  summary.stakes.length */\n      mload\n        /* \"contracts/Stakable.sol\":10416:10548  StakingSummary memory summary = StakingSummary(... */\n      swap1\n      swap2\n      pop\n        /* \"contracts/Stakable.sol\":10559:10682  require(... */\n      tag_39\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2040:2042   */\n      0x20\n        /* \"contracts/Stakable.sol\":10559:10682  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2022:2043   */\n      mstore\n        /* \"#utility.yul\":2079:2081   */\n      0x2f\n        /* \"#utility.yul\":2059:2077   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2052:2082   */\n      mstore\n        /* \"#utility.yul\":2118:2152   */\n      0x5374616b61626c653a2054686973206164647265737320646f6573206e6f7420\n        /* \"#utility.yul\":2098:2116   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2091:2153   */\n      mstore\n      shl(0x88, 0x6861766520616e79207374616b6573)\n        /* \"#utility.yul\":2169:2187   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2162:2207   */\n      mstore\n        /* \"#utility.yul\":2224:2243   */\n      0x84\n      add\n        /* \"contracts/Stakable.sol\":10559:10682  require(... */\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_39:\n        /* \"contracts/Stakable.sol\":10700:10709  uint256 s */\n      0x00\n        /* \"contracts/Stakable.sol\":10695:11054  for (uint256 s = 0; s < summary.stakes.length; s += 1) {... */\n    tag_42:\n        /* \"contracts/Stakable.sol\":10719:10726  summary */\n      dup2\n        /* \"contracts/Stakable.sol\":10719:10733  summary.stakes */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10719:10740  summary.stakes.length */\n      mload\n        /* \"contracts/Stakable.sol\":10715:10716  s */\n      dup2\n        /* \"contracts/Stakable.sol\":10715:10740  s < summary.stakes.length */\n      lt\n        /* \"contracts/Stakable.sol\":10695:11054  for (uint256 s = 0; s < summary.stakes.length; s += 1) {... */\n      iszero\n      tag_43\n      jumpi\n        /* \"contracts/Stakable.sol\":10765:10788  uint256 availableReward */\n      0x00\n        /* \"contracts/Stakable.sol\":10791:10905  calculateStakeReward(... */\n      tag_45\n        /* \"contracts/Stakable.sol\":10830:10837  summary */\n      dup4\n        /* \"contracts/Stakable.sol\":10830:10844  summary.stakes */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10845:10846  s */\n      dup4\n        /* \"contracts/Stakable.sol\":10830:10847  summary.stakes[s] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_47\n      jumpi\n      tag_47\n      tag_26\n      jump\t// in\n    tag_47:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10866:10873  summary */\n      dup5\n        /* \"contracts/Stakable.sol\":10866:10880  summary.stakes */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10881:10882  s */\n      dup5\n        /* \"contracts/Stakable.sol\":10866:10883  summary.stakes[s] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_49\n      jumpi\n      tag_49\n      tag_26\n      jump\t// in\n    tag_49:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10866:10890  summary.stakes[s].amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10791:10811  calculateStakeReward */\n      tag_50\n        /* \"contracts/Stakable.sol\":10791:10905  calculateStakeReward(... */\n      jump\t// in\n    tag_45:\n        /* \"contracts/Stakable.sol\":10765:10905  uint256 availableReward = calculateStakeReward(... */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":10950:10965  availableReward */\n      dup1\n        /* \"contracts/Stakable.sol\":10920:10927  summary */\n      dup4\n        /* \"contracts/Stakable.sol\":10920:10934  summary.stakes */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10935:10936  s */\n      dup4\n        /* \"contracts/Stakable.sol\":10920:10937  summary.stakes[s] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_52\n      jumpi\n      tag_52\n      tag_26\n      jump\t// in\n    tag_52:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10920:10947  summary.stakes[s].claimable */\n      0x60\n      add\n        /* \"contracts/Stakable.sol\":10920:10965  summary.stakes[s].claimable = availableReward */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"contracts/Stakable.sol\":11018:11025  summary */\n      dup3\n        /* \"contracts/Stakable.sol\":11018:11032  summary.stakes */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":11033:11034  s */\n      dup3\n        /* \"contracts/Stakable.sol\":11018:11035  summary.stakes[s] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_54\n      jumpi\n      tag_54\n      tag_26\n      jump\t// in\n    tag_54:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n        /* \"contracts/Stakable.sol\":11018:11042  summary.stakes[s].amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":10999:11015  totalStakeAmount */\n      dup5\n        /* \"contracts/Stakable.sol\":10999:11042  totalStakeAmount + summary.stakes[s].amount */\n      tag_55\n      swap2\n      swap1\n      tag_56\n      jump\t// in\n    tag_55:\n        /* \"contracts/Stakable.sol\":10980:11042  totalStakeAmount = totalStakeAmount + summary.stakes[s].amount */\n      swap4\n      pop\n        /* \"contracts/Stakable.sol\":10742:10748  s += 1 */\n      tag_57\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":10747:10748  1 */\n      0x01\n        /* \"contracts/Stakable.sol\":10742:10748  s += 1 */\n      dup3\n      tag_56\n      jump\t// in\n    tag_57:\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":10695:11054  for (uint256 s = 0; s < summary.stakes.length; s += 1) {... */\n      jump(tag_42)\n    tag_43:\n      pop\n        /* \"contracts/Stakable.sol\":11066:11105  summary.total_amount = totalStakeAmount */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stakable.sol\":11066:11073  summary */\n      swap3\n        /* \"contracts/Stakable.sol\":10257:11138  function hasStake(address _staker)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5517:5901  function calculateStakeReward(Stake memory _current_stake, uint256 _amount)... */\n    tag_50:\n        /* \"contracts/Stakable.sol\":5643:5650  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":5672:5686  _current_stake */\n      dup3\n        /* \"contracts/Stakable.sol\":5672:5693  _current_stake.amount */\n      0x20\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5697:5698  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":5672:5698  _current_stake.amount == 0 */\n      eq\n        /* \"contracts/Stakable.sol\":5668:5735  if (_current_stake.amount == 0) {... */\n      iszero\n      tag_59\n      jumpi\n      pop\n        /* \"contracts/Stakable.sol\":5722:5723  0 */\n      0x00\n        /* \"contracts/Stakable.sol\":5715:5723  return 0 */\n      jump(tag_58)\n        /* \"contracts/Stakable.sol\":5668:5735  if (_current_stake.amount == 0) {... */\n    tag_59:\n        /* \"contracts/Stakable.sol\":5889:5893  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stakable.sol\":5839:5885  calculateStakingDuration(_current_stake.since) */\n      tag_60\n        /* \"contracts/Stakable.sol\":5864:5878  _current_stake */\n      dup5\n        /* \"contracts/Stakable.sol\":5864:5884  _current_stake.since */\n      0x40\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5839:5863  calculateStakingDuration */\n      tag_61\n        /* \"contracts/Stakable.sol\":5839:5885  calculateStakingDuration(_current_stake.since) */\n      jump\t// in\n    tag_60:\n        /* \"contracts/Stakable.sol\":5795:5819  _current_stake.rewardAPY */\n      0x80\n      dup6\n      add\n      mload\n        /* \"contracts/Stakable.sol\":5768:5819  _amount *... */\n      tag_62\n      swap1\n        /* \"contracts/Stakable.sol\":5768:5775  _amount */\n      dup6\n        /* \"contracts/Stakable.sol\":5768:5819  _amount *... */\n      tag_63\n      jump\t// in\n    tag_62:\n        /* \"contracts/Stakable.sol\":5768:5885  _amount *... */\n      tag_64\n      swap2\n      swap1\n      tag_63\n      jump\t// in\n    tag_64:\n        /* \"contracts/Stakable.sol\":5767:5893  (_amount *... */\n      tag_65\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n        /* \"contracts/Stakable.sol\":5747:5893  return... */\n      swap1\n      pop\n        /* \"contracts/Stakable.sol\":5517:5901  function calculateStakeReward(Stake memory _current_stake, uint256 _amount)... */\n    tag_58:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stakable.sol\":5129:5509  function calculateStakingDuration(uint256 since_)... */\n    tag_61:\n        /* \"contracts/Stakable.sol\":5229:5236  uint256 */\n      0x00\n        /* \"contracts/Stakable.sol\":5271:5272  0 */\n      dup1\n        /* \"contracts/Stakable.sol\":5262:5268  since_ */\n      dup3\n        /* \"contracts/Stakable.sol\":5262:5272  since_ > 0 */\n      gt\n        /* \"contracts/Stakable.sol\":5254:5304  require(since_ > 0, \"Stakable: Error timestamp 0\") */\n      tag_68\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3248:3250   */\n      0x20\n        /* \"contracts/Stakable.sol\":5254:5304  require(since_ > 0, \"Stakable: Error timestamp 0\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3230:3251   */\n      mstore\n        /* \"#utility.yul\":3287:3289   */\n      0x1b\n        /* \"#utility.yul\":3267:3285   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3260:3290   */\n      mstore\n        /* \"#utility.yul\":3326:3355   */\n      0x5374616b61626c653a204572726f722074696d657374616d7020300000000000\n        /* \"#utility.yul\":3306:3324   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3299:3356   */\n      mstore\n        /* \"#utility.yul\":3373:3391   */\n      0x64\n      add\n        /* \"contracts/Stakable.sol\":5254:5304  require(since_ > 0, \"Stakable: Error timestamp 0\") */\n      tag_40\n        /* \"#utility.yul\":3046:3397   */\n      jump\n        /* \"contracts/Stakable.sol\":5254:5304  require(since_ > 0, \"Stakable: Error timestamp 0\") */\n    tag_68:\n        /* \"contracts/Stakable.sol\":5335:5501  SafeMath.div(... */\n      tag_58\n        /* \"contracts/Stakable.sol\":5367:5391  block.timestamp - since_ */\n      tag_72\n        /* \"contracts/Stakable.sol\":5385:5391  since_ */\n      dup4\n        /* \"contracts/Stakable.sol\":5367:5382  block.timestamp */\n      timestamp\n        /* \"contracts/Stakable.sol\":5367:5391  block.timestamp - since_ */\n      tag_73\n      jump\t// in\n    tag_72:\n        /* \"contracts/Stakable.sol\":5366:5399  (block.timestamp - since_) * 1e24 */\n      tag_74\n      swap1\n        /* \"contracts/Stakable.sol\":5395:5399  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stakable.sol\":5366:5399  (block.timestamp - since_) * 1e24 */\n      tag_63\n      jump\t// in\n    tag_74:\n        /* \"contracts/Stakable.sol\":5418:5426  365 days */\n      0x01e13380\n        /* \"contracts/Stakable.sol\":5335:5501  SafeMath.div(... */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x27\n      dup2\n      mstore\n      0x20\n      add\n      data_10b867070097d898ae15cd1bc384e389b4a7d91f05c0759c198c193c7fd91787\n      0x27\n      swap2\n      codecopy\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5776:5783  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5834:5846  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5827:5832  b > 0 */\n      dup4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5819:5847  require(b > 0, errorMessage) */\n      tag_77\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_40\n      swap2\n      swap1\n      tag_79\n      jump\t// in\n    tag_77:\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5872:5873  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5869  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5868:5873  a / b */\n      dup2\n      tag_81\n      jumpi\n      tag_81\n      tag_82\n      jump\t// in\n    tag_81:\n      div\n      swap5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5660:5890  function div(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":196:482   */\n    tag_12:\n        /* \"#utility.yul\":255:261   */\n      0x00\n        /* \"#utility.yul\":308:310   */\n      0x20\n        /* \"#utility.yul\":296:305   */\n      dup3\n        /* \"#utility.yul\":287:294   */\n      dup5\n        /* \"#utility.yul\":283:306   */\n      sub\n        /* \"#utility.yul\":279:311   */\n      slt\n        /* \"#utility.yul\":276:328   */\n      iszero\n      tag_87\n      jumpi\n        /* \"#utility.yul\":324:325   */\n      0x00\n        /* \"#utility.yul\":321:322   */\n      dup1\n        /* \"#utility.yul\":314:326   */\n      revert\n        /* \"#utility.yul\":276:328   */\n    tag_87:\n        /* \"#utility.yul\":350:373   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":402:433   */\n      dup2\n      and\n        /* \"#utility.yul\":392:434   */\n      dup2\n      eq\n        /* \"#utility.yul\":382:452   */\n      tag_88\n      jumpi\n        /* \"#utility.yul\":448:449   */\n      0x00\n        /* \"#utility.yul\":445:446   */\n      dup1\n        /* \"#utility.yul\":438:450   */\n      revert\n        /* \"#utility.yul\":382:452   */\n    tag_88:\n        /* \"#utility.yul\":471:476   */\n      swap4\n        /* \"#utility.yul\":196:482   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":487:1701   */\n    tag_15:\n        /* \"#utility.yul\":641:645   */\n      0x00\n        /* \"#utility.yul\":670:672   */\n      0x20\n        /* \"#utility.yul\":699:701   */\n      dup1\n        /* \"#utility.yul\":688:697   */\n      dup4\n        /* \"#utility.yul\":681:702   */\n      mstore\n        /* \"#utility.yul\":721:723   */\n      0x60\n        /* \"#utility.yul\":761:763   */\n      dup1\n        /* \"#utility.yul\":750:759   */\n      dup5\n        /* \"#utility.yul\":746:764   */\n      add\n        /* \"#utility.yul\":806:812   */\n      dup6\n        /* \"#utility.yul\":800:813   */\n      mload\n        /* \"#utility.yul\":795:797   */\n      dup4\n        /* \"#utility.yul\":784:793   */\n      dup7\n        /* \"#utility.yul\":780:798   */\n      add\n        /* \"#utility.yul\":773:814   */\n      mstore\n        /* \"#utility.yul\":861:863   */\n      dup3\n        /* \"#utility.yul\":853:859   */\n      dup7\n        /* \"#utility.yul\":849:864   */\n      add\n        /* \"#utility.yul\":843:865   */\n      mload\n        /* \"#utility.yul\":884:888   */\n      0x40\n        /* \"#utility.yul\":924:926   */\n      dup1\n        /* \"#utility.yul\":919:921   */\n      dup2\n        /* \"#utility.yul\":908:917   */\n      dup9\n        /* \"#utility.yul\":904:922   */\n      add\n        /* \"#utility.yul\":897:927   */\n      mstore\n        /* \"#utility.yul\":947:953   */\n      dup3\n        /* \"#utility.yul\":982:994   */\n      dup3\n        /* \"#utility.yul\":976:995   */\n      mload\n        /* \"#utility.yul\":1019:1025   */\n      dup1\n        /* \"#utility.yul\":1011:1017   */\n      dup6\n        /* \"#utility.yul\":1004:1026   */\n      mstore\n        /* \"#utility.yul\":1045:1048   */\n      0x80\n        /* \"#utility.yul\":1035:1048   */\n      swap5\n      pop\n        /* \"#utility.yul\":1079:1081   */\n      dup5\n        /* \"#utility.yul\":1068:1077   */\n      dup10\n        /* \"#utility.yul\":1064:1082   */\n      add\n        /* \"#utility.yul\":1057:1082   */\n      swap2\n      pop\n        /* \"#utility.yul\":1123:1125   */\n      dup7\n        /* \"#utility.yul\":1109:1121   */\n      dup5\n        /* \"#utility.yul\":1105:1126   */\n      add\n        /* \"#utility.yul\":1091:1126   */\n      swap4\n      pop\n        /* \"#utility.yul\":1144:1145   */\n      0x00\n        /* \"#utility.yul\":1154:1675   */\n    tag_90:\n        /* \"#utility.yul\":1168:1174   */\n      dup2\n        /* \"#utility.yul\":1165:1166   */\n      dup2\n        /* \"#utility.yul\":1162:1175   */\n      lt\n        /* \"#utility.yul\":1154:1675   */\n      iszero\n      tag_92\n      jumpi\n        /* \"#utility.yul\":1227:1240   */\n      dup5\n      mload\n        /* \"#utility.yul\":1269:1278   */\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1265:1300   */\n      and\n        /* \"#utility.yul\":1253:1301   */\n      dup5\n      mstore\n        /* \"#utility.yul\":1341:1352   */\n      dup9\n      dup2\n      add\n        /* \"#utility.yul\":1335:1353   */\n      mload\n        /* \"#utility.yul\":1321:1333   */\n      dup10\n      dup6\n      add\n        /* \"#utility.yul\":1314:1354   */\n      mstore\n        /* \"#utility.yul\":1394:1405   */\n      dup5\n      dup2\n      add\n        /* \"#utility.yul\":1388:1406   */\n      mload\n        /* \"#utility.yul\":1374:1386   */\n      dup6\n      dup6\n      add\n        /* \"#utility.yul\":1367:1407   */\n      mstore\n        /* \"#utility.yul\":1447:1458   */\n      dup8\n      dup2\n      add\n        /* \"#utility.yul\":1441:1459   */\n      mload\n        /* \"#utility.yul\":1427:1439   */\n      dup9\n      dup6\n      add\n        /* \"#utility.yul\":1420:1460   */\n      mstore\n        /* \"#utility.yul\":1500:1511   */\n      dup7\n      dup2\n      add\n        /* \"#utility.yul\":1494:1512   */\n      mload\n        /* \"#utility.yul\":1480:1492   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":1473:1513   */\n      mstore\n        /* \"#utility.yul\":1288:1291   */\n      0xa0\n        /* \"#utility.yul\":1580:1591   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":1574:1592   */\n      mload\n        /* \"#utility.yul\":1560:1572   */\n      swap1\n      dup5\n      add\n        /* \"#utility.yul\":1553:1593   */\n      mstore\n        /* \"#utility.yul\":1650:1665   */\n      swap4\n      dup8\n      add\n      swap4\n        /* \"#utility.yul\":1622:1626   */\n      0xc0\n        /* \"#utility.yul\":1613:1627   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":1297:1298   */\n      0x01\n        /* \"#utility.yul\":1183:1192   */\n      add\n        /* \"#utility.yul\":1154:1675   */\n      jump(tag_90)\n    tag_92:\n      pop\n        /* \"#utility.yul\":1692:1695   */\n      swap1\n      swap10\n        /* \"#utility.yul\":487:1701   */\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1706:1833   */\n    tag_26:\n        /* \"#utility.yul\":1767:1777   */\n      0x4e487b71\n        /* \"#utility.yul\":1762:1765   */\n      0xe0\n        /* \"#utility.yul\":1758:1778   */\n      shl\n        /* \"#utility.yul\":1755:1756   */\n      0x00\n        /* \"#utility.yul\":1748:1779   */\n      mstore\n        /* \"#utility.yul\":1798:1802   */\n      0x32\n        /* \"#utility.yul\":1795:1796   */\n      0x04\n        /* \"#utility.yul\":1788:1803   */\n      mstore\n        /* \"#utility.yul\":1822:1826   */\n      0x24\n        /* \"#utility.yul\":1819:1820   */\n      0x00\n        /* \"#utility.yul\":1812:1827   */\n      revert\n        /* \"#utility.yul\":2254:2381   */\n    tag_83:\n        /* \"#utility.yul\":2315:2325   */\n      0x4e487b71\n        /* \"#utility.yul\":2310:2313   */\n      0xe0\n        /* \"#utility.yul\":2306:2326   */\n      shl\n        /* \"#utility.yul\":2303:2304   */\n      0x00\n        /* \"#utility.yul\":2296:2327   */\n      mstore\n        /* \"#utility.yul\":2346:2350   */\n      0x11\n        /* \"#utility.yul\":2343:2344   */\n      0x04\n        /* \"#utility.yul\":2336:2351   */\n      mstore\n        /* \"#utility.yul\":2370:2374   */\n      0x24\n        /* \"#utility.yul\":2367:2368   */\n      0x00\n        /* \"#utility.yul\":2360:2375   */\n      revert\n        /* \"#utility.yul\":2386:2514   */\n    tag_56:\n        /* \"#utility.yul\":2426:2429   */\n      0x00\n        /* \"#utility.yul\":2457:2458   */\n      dup3\n        /* \"#utility.yul\":2453:2459   */\n      not\n        /* \"#utility.yul\":2450:2451   */\n      dup3\n        /* \"#utility.yul\":2447:2460   */\n      gt\n        /* \"#utility.yul\":2444:2483   */\n      iszero\n      tag_98\n      jumpi\n        /* \"#utility.yul\":2463:2481   */\n      tag_98\n      tag_83\n      jump\t// in\n    tag_98:\n      pop\n        /* \"#utility.yul\":2499:2508   */\n      add\n      swap1\n        /* \"#utility.yul\":2386:2514   */\n      jump\t// out\n        /* \"#utility.yul\":2519:2687   */\n    tag_63:\n        /* \"#utility.yul\":2559:2566   */\n      0x00\n        /* \"#utility.yul\":2625:2626   */\n      dup2\n        /* \"#utility.yul\":2621:2622   */\n      0x00\n        /* \"#utility.yul\":2617:2623   */\n      not\n        /* \"#utility.yul\":2613:2627   */\n      div\n        /* \"#utility.yul\":2610:2611   */\n      dup4\n        /* \"#utility.yul\":2607:2628   */\n      gt\n        /* \"#utility.yul\":2602:2603   */\n      dup3\n        /* \"#utility.yul\":2595:2604   */\n      iszero\n        /* \"#utility.yul\":2588:2605   */\n      iszero\n        /* \"#utility.yul\":2584:2629   */\n      and\n        /* \"#utility.yul\":2581:2652   */\n      iszero\n      tag_101\n      jumpi\n        /* \"#utility.yul\":2632:2650   */\n      tag_101\n      tag_83\n      jump\t// in\n    tag_101:\n      pop\n        /* \"#utility.yul\":2672:2681   */\n      mul\n      swap1\n        /* \"#utility.yul\":2519:2687   */\n      jump\t// out\n        /* \"#utility.yul\":2692:2819   */\n    tag_82:\n        /* \"#utility.yul\":2753:2763   */\n      0x4e487b71\n        /* \"#utility.yul\":2748:2751   */\n      0xe0\n        /* \"#utility.yul\":2744:2764   */\n      shl\n        /* \"#utility.yul\":2741:2742   */\n      0x00\n        /* \"#utility.yul\":2734:2765   */\n      mstore\n        /* \"#utility.yul\":2784:2788   */\n      0x12\n        /* \"#utility.yul\":2781:2782   */\n      0x04\n        /* \"#utility.yul\":2774:2789   */\n      mstore\n        /* \"#utility.yul\":2808:2812   */\n      0x24\n        /* \"#utility.yul\":2805:2806   */\n      0x00\n        /* \"#utility.yul\":2798:2813   */\n      revert\n        /* \"#utility.yul\":2824:3041   */\n    tag_66:\n        /* \"#utility.yul\":2864:2865   */\n      0x00\n        /* \"#utility.yul\":2890:2891   */\n      dup3\n        /* \"#utility.yul\":2880:3012   */\n      tag_104\n      jumpi\n        /* \"#utility.yul\":2934:2944   */\n      0x4e487b71\n        /* \"#utility.yul\":2929:2932   */\n      0xe0\n        /* \"#utility.yul\":2925:2945   */\n      shl\n        /* \"#utility.yul\":2922:2923   */\n      0x00\n        /* \"#utility.yul\":2915:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x12\n        /* \"#utility.yul\":2966:2967   */\n      0x04\n        /* \"#utility.yul\":2959:2974   */\n      mstore\n        /* \"#utility.yul\":2997:3001   */\n      0x24\n        /* \"#utility.yul\":2994:2995   */\n      0x00\n        /* \"#utility.yul\":2987:3002   */\n      revert\n        /* \"#utility.yul\":2880:3012   */\n    tag_104:\n      pop\n        /* \"#utility.yul\":3026:3035   */\n      div\n      swap1\n        /* \"#utility.yul\":2824:3041   */\n      jump\t// out\n        /* \"#utility.yul\":3402:3527   */\n    tag_73:\n        /* \"#utility.yul\":3442:3446   */\n      0x00\n        /* \"#utility.yul\":3470:3471   */\n      dup3\n        /* \"#utility.yul\":3467:3468   */\n      dup3\n        /* \"#utility.yul\":3464:3472   */\n      lt\n        /* \"#utility.yul\":3461:3495   */\n      iszero\n      tag_108\n      jumpi\n        /* \"#utility.yul\":3475:3493   */\n      tag_108\n      tag_83\n      jump\t// in\n    tag_108:\n      pop\n        /* \"#utility.yul\":3512:3521   */\n      sub\n      swap1\n        /* \"#utility.yul\":3402:3527   */\n      jump\t// out\n        /* \"#utility.yul\":3532:4129   */\n    tag_79:\n        /* \"#utility.yul\":3644:3648   */\n      0x00\n        /* \"#utility.yul\":3673:3675   */\n      0x20\n        /* \"#utility.yul\":3702:3704   */\n      dup1\n        /* \"#utility.yul\":3691:3700   */\n      dup4\n        /* \"#utility.yul\":3684:3705   */\n      mstore\n        /* \"#utility.yul\":3734:3740   */\n      dup4\n        /* \"#utility.yul\":3728:3741   */\n      mload\n        /* \"#utility.yul\":3777:3783   */\n      dup1\n        /* \"#utility.yul\":3772:3774   */\n      dup3\n        /* \"#utility.yul\":3761:3770   */\n      dup6\n        /* \"#utility.yul\":3757:3775   */\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3802:3803   */\n      0x00\n        /* \"#utility.yul\":3812:3952   */\n    tag_110:\n        /* \"#utility.yul\":3826:3832   */\n      dup2\n        /* \"#utility.yul\":3823:3824   */\n      dup2\n        /* \"#utility.yul\":3820:3833   */\n      lt\n        /* \"#utility.yul\":3812:3952   */\n      iszero\n      tag_112\n      jumpi\n        /* \"#utility.yul\":3921:3935   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":3917:3940   */\n      dup4\n      add\n        /* \"#utility.yul\":3911:3941   */\n      mload\n        /* \"#utility.yul\":3887:3904   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":3906:3908   */\n      0x40\n        /* \"#utility.yul\":3883:3909   */\n      add\n        /* \"#utility.yul\":3876:3942   */\n      mstore\n        /* \"#utility.yul\":3841:3851   */\n      dup3\n      add\n        /* \"#utility.yul\":3812:3952   */\n      jump(tag_110)\n    tag_112:\n        /* \"#utility.yul\":3970:3976   */\n      dup2\n        /* \"#utility.yul\":3967:3968   */\n      dup2\n        /* \"#utility.yul\":3964:3977   */\n      gt\n        /* \"#utility.yul\":3961:4052   */\n      iszero\n      tag_113\n      jumpi\n        /* \"#utility.yul\":4040:4041   */\n      0x00\n        /* \"#utility.yul\":4035:4037   */\n      0x40\n        /* \"#utility.yul\":4026:4032   */\n      dup4\n        /* \"#utility.yul\":4015:4024   */\n      dup8\n        /* \"#utility.yul\":4011:4033   */\n      add\n        /* \"#utility.yul\":4007:4038   */\n      add\n        /* \"#utility.yul\":4000:4042   */\n      mstore\n        /* \"#utility.yul\":3961:4052   */\n    tag_113:\n      pop\n        /* \"#utility.yul\":4113:4115   */\n      0x1f\n        /* \"#utility.yul\":4092:4107   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4088:4117   */\n      and\n        /* \"#utility.yul\":4073:4118   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":4120:4122   */\n      0x40\n        /* \"#utility.yul\":4069:4123   */\n      add\n      swap4\n        /* \"#utility.yul\":3532:4129   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_10b867070097d898ae15cd1bc384e389b4a7d91f05c0759c198c193c7fd91787 5374616b61626c653a204572726f722063616e6e6f74206469766964652074696d657374616d70\n\n    auxdata: 0xa26469706673582212200440a09b6a47d7035e61310f88a4fa2137e792dfacb21a86225967326ddc365e64736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_332": {
									"entryPoint": null,
									"id": 332,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 66,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:200:2",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:2",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:103:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:2"
															},
															"nodeType": "YulIf",
															"src": "105:52:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "166:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "182:9:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "176:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "176:16:2"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:2"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:2",
														"type": ""
													}
												],
												"src": "14:184:2"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506040516107a53803806107a583398101604081905261002f91610042565b600180548101815560009081525561005b565b60006020828403121561005457600080fd5b5051919050565b61073b8061006a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633dc10ad414610046578063b09d4b4e1461005c578063e73e14bf1461007c575b600080fd5b6000546040519081526020015b60405180910390f35b61006f61006a366004610511565b61008f565b6040516100539190610541565b61006f61008a366004610511565b61019f565b6040805180820190915260008152606060208201526000604051806040016040528060008152602001600160026000876001600160a01b03166001600160a01b0316815260200190815260200160002054815481106100f0576100f06105d7565b9060005260206000209060020201600101805480602002602001604051908101604052809291908181526020016000905b828210156101925760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101610121565b5050509152509392505050565b604080518082019091526000815260606020820152600080604051806040016040528060008152602001600160026000886001600160a01b03166001600160a01b031681526020019081526020016000205481548110610201576102016105d7565b9060005260206000209060020201600101805480602002602001604051908101604052809291908181526020016000905b828210156102a35760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101610232565b50505091525060208101515190915061031b5760405162461bcd60e51b815260206004820152602f60248201527f5374616b61626c653a2054686973206164647265737320646f6573206e6f742060448201526e6861766520616e79207374616b657360881b60648201526084015b60405180910390fd5b60005b8160200151518110156103e157600061037583602001518381518110610346576103466105d7565b602002602001015184602001518481518110610364576103646105d7565b6020026020010151602001516103eb565b9050808360200151838151811061038e5761038e6105d7565b60200260200101516060018181525050826020015182815181106103b4576103b46105d7565b602002602001015160200151846103cb9190610603565b93506103da9050600182610603565b905061031e565b5090815292915050565b600082602001516000141561040257506000610441565b6a52b7d2dcc80cd2e400000061041b8460400151610447565b608085015161042a908561061b565b610434919061061b565b61043e9190610650565b90505b92915050565b60008082116104985760405162461bcd60e51b815260206004820152601b60248201527f5374616b61626c653a204572726f722074696d657374616d70203000000000006044820152606401610312565b6104416104a58342610672565b6104b99069d3c21bcecceda100000061061b565b6301e133806040518060600160405280602781526020016106df60279139600081836104f85760405162461bcd60e51b81526004016103129190610689565b508284816105085761050861063a565b04949350505050565b60006020828403121561052357600080fd5b81356001600160a01b038116811461053a57600080fd5b9392505050565b6000602080835260608084018551838601528286015160408081880152828251808552608094508489019150868401935060005b818110156105c857845180516001600160a01b03168452888101518985015284810151858501528781015188850152868101518785015260a090810151908401529387019360c090920191600101610575565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610616576106166105ed565b500190565b6000816000190483118215151615610635576106356105ed565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261066d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610684576106846105ed565b500390565b600060208083528351808285015260005b818110156106b65785810183015185820160400152820161069a565b818111156106c8576000604083870101525b50601f01601f191692909201604001939250505056fe5374616b61626c653a204572726f722063616e6e6f74206469766964652074696d657374616d70a26469706673582212200440a09b6a47d7035e61310f88a4fa2137e792dfacb21a86225967326ddc365e64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x7A5 CODESIZE SUB DUP1 PUSH2 0x7A5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x42 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP2 ADD DUP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE SSTORE PUSH2 0x5B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x73B DUP1 PUSH2 0x6A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3DC10AD4 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xB09D4B4E EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0xE73E14BF EQ PUSH2 0x7C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x8F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x53 SWAP2 SWAP1 PUSH2 0x541 JUMP JUMPDEST PUSH2 0x6F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 SLOAD DUP2 LT PUSH2 0xF0 JUMPI PUSH2 0xF0 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x121 JUMP JUMPDEST POP POP POP SWAP2 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 SLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x201 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x232 JUMP JUMPDEST POP POP POP SWAP2 MSTORE POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD SWAP1 SWAP2 POP PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B61626C653A2054686973206164647265737320646F6573206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x6861766520616E79207374616B6573 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 PUSH2 0x375 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x346 JUMPI PUSH2 0x346 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x364 JUMPI PUSH2 0x364 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x3EB JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B4 JUMPI PUSH2 0x3B4 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST SWAP4 POP PUSH2 0x3DA SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x603 JUMP JUMPDEST SWAP1 POP PUSH2 0x31E JUMP JUMPDEST POP SWAP1 DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x402 JUMPI POP PUSH1 0x0 PUSH2 0x441 JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x41B DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x447 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x42A SWAP1 DUP6 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x434 SWAP2 SWAP1 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x43E SWAP2 SWAP1 PUSH2 0x650 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B61626C653A204572726F722074696D657374616D7020300000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x312 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x4A5 DUP4 TIMESTAMP PUSH2 0x672 JUMP JUMPDEST PUSH2 0x4B9 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x61B JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6DF PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x0 DUP2 DUP4 PUSH2 0x4F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x689 JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x508 JUMPI PUSH2 0x508 PUSH2 0x63A JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP6 MLOAD DUP4 DUP7 ADD MSTORE DUP3 DUP7 ADD MLOAD PUSH1 0x40 DUP1 DUP2 DUP9 ADD MSTORE DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x80 SWAP5 POP DUP5 DUP10 ADD SWAP2 POP DUP7 DUP5 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C8 JUMPI DUP5 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP9 DUP2 ADD MLOAD DUP10 DUP6 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP6 ADD MSTORE DUP8 DUP2 ADD MLOAD DUP9 DUP6 ADD MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD SWAP1 DUP5 ADD MSTORE SWAP4 DUP8 ADD SWAP4 PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x575 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x616 JUMPI PUSH2 0x616 PUSH2 0x5ED JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0x5ED JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x66D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x684 JUMPI PUSH2 0x684 PUSH2 0x5ED JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6B6 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x69A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID MSTORE8 PUSH21 0x616B61626C653A204572726F722063616E6E6F7420 PUSH5 0x6976696465 KECCAK256 PUSH21 0x696D657374616D70A26469706673582212200440A0 SWAP12 PUSH11 0x47D7035E61310F88A4FA21 CALLDATACOPY 0xE7 SWAP3 0xDF 0xAC 0xB2 BYTE DUP7 0x22 MSIZE PUSH8 0x326DDC365E64736F PUSH13 0x634300080B0033000000000000 ",
							"sourceMap": "128:11013:1:-:0;;;363:237;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;486:12;:19;;;;;;-1:-1:-1;486:19:1;;;559:33;128:11013;;14:184:2;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:2;;14:184;-1:-1:-1;14:184:2:o;:::-;128:11013:1;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@calculateStakeReward_584": {
									"entryPoint": 1003,
									"id": 584,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@calculateStakingDuration_552": {
									"entryPoint": 1095,
									"id": 552,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@div_285": {
									"entryPoint": null,
									"id": 285,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_946": {
									"entryPoint": 415,
									"id": 946,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@penaltyFee_524": {
									"entryPoint": null,
									"id": 524,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@stakeSummary_608": {
									"entryPoint": 143,
									"id": 608,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1297,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1673,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_455cb42bafa94547bd684738447987d7bf5acfcf63aa915627e25c94ff409337__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_eae138733ca93c0fbd122a38ff85e06b9b628584b782b941f578ba8b2c9830dd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$359_memory_ptr__to_t_struct$_StakingSummary_$359_memory_ptr__fromStack_reversed": {
									"entryPoint": 1345,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1539,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 1616,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1563,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1650,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1517,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 1594,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1495,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4131:2",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:2",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:2"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:2"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:2"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:2",
														"type": ""
													}
												],
												"src": "14:177:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "266:216:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "312:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "321:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "324:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "314:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "314:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "314:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "287:7:2"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "296:9:2"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "283:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "283:23:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "308:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "279:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "279:32:2"
															},
															"nodeType": "YulIf",
															"src": "276:52:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "337:36:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "363:9:2"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "350:12:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "350:23:2"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "341:5:2",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "436:16:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "445:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "448:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "438:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "438:12:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "438:12:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "395:5:2"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "406:5:2"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "421:3:2",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "426:1:2",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "417:3:2"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "417:11:2"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "430:1:2",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "413:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "413:19:2"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "402:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "402:31:2"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "392:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "392:42:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "385:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "385:50:2"
															},
															"nodeType": "YulIf",
															"src": "382:70:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "461:15:2",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "471:5:2"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "461:6:2"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "232:9:2",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "243:7:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "255:6:2",
														"type": ""
													}
												],
												"src": "196:286:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "650:1051:2",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "660:12:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "670:2:2",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "664:2:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "688:9:2"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "699:2:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "681:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "681:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "681:21:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "711:12:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "721:2:2",
																"type": "",
																"value": "96"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "715:2:2",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "732:32:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "750:9:2"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "761:2:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "746:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "746:18:2"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "736:6:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "784:9:2"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "795:2:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "780:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "780:18:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "806:6:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "800:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "800:13:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:41:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:41:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "823:42:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "853:6:2"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "861:2:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "849:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "849:15:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "843:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "843:22:2"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "827:12:2",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "874:14:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "884:4:2",
																"type": "",
																"value": "0x40"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "878:2:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "908:9:2"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "919:2:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "904:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "904:18:2"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "924:2:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "897:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "897:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "897:30:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "936:17:2",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "947:6:2"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "940:3:2",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "962:33:2",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "982:12:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "976:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "976:19:2"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "966:6:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "1011:6:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1019:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1004:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1004:22:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1004:22:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1035:13:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1045:3:2",
																"type": "",
																"value": "128"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "1039:2:2",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1057:25:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1068:9:2"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "1079:2:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1064:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1064:18:2"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "1057:3:2"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1091:35:2",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "1109:12:2"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1123:2:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1105:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1105:21:2"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "1095:6:2",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1135:10:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1144:1:2",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1139:1:2",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1203:472:2",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1217:23:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1233:6:2"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "1227:5:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1227:13:2"
																		},
																		"variables": [
																			{
																				"name": "_5",
																				"nodeType": "YulTypedName",
																				"src": "1221:2:2",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1260:3:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1275:2:2"
																								}
																							],
																							"functionName": {
																								"name": "mload",
																								"nodeType": "YulIdentifier",
																								"src": "1269:5:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1269:9:2"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1288:3:2",
																											"type": "",
																											"value": "160"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1293:1:2",
																											"type": "",
																											"value": "1"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "1284:3:2"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1284:11:2"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "1297:1:2",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "1280:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1280:19:2"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "1265:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1265:35:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1253:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1253:48:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1253:48:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1325:3:2"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "1330:2:2"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1321:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1321:12:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1345:2:2"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1349:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1341:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1341:11:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1335:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1335:18:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1314:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1314:40:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1314:40:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1378:3:2"
																						},
																						{
																							"name": "_3",
																							"nodeType": "YulIdentifier",
																							"src": "1383:2:2"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1374:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1374:12:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1398:2:2"
																								},
																								{
																									"name": "_3",
																									"nodeType": "YulIdentifier",
																									"src": "1402:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1394:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1394:11:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1388:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1388:18:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1367:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1367:40:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1367:40:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1431:3:2"
																						},
																						{
																							"name": "_2",
																							"nodeType": "YulIdentifier",
																							"src": "1436:2:2"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1427:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1427:12:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1451:2:2"
																								},
																								{
																									"name": "_2",
																									"nodeType": "YulIdentifier",
																									"src": "1455:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1447:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1447:11:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1441:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1441:18:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1420:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1420:40:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1420:40:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1484:3:2"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "1489:2:2"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1480:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1480:12:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1504:2:2"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "1508:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1500:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1500:11:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1494:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1494:18:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1473:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1473:40:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1473:40:2"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1526:14:2",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "1536:4:2",
																			"type": "",
																			"value": "0xa0"
																		},
																		"variables": [
																			{
																				"name": "_6",
																				"nodeType": "YulTypedName",
																				"src": "1530:2:2",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "1564:3:2"
																						},
																						{
																							"name": "_6",
																							"nodeType": "YulIdentifier",
																							"src": "1569:2:2"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1560:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1560:12:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "_5",
																									"nodeType": "YulIdentifier",
																									"src": "1584:2:2"
																								},
																								{
																									"name": "_6",
																									"nodeType": "YulIdentifier",
																									"src": "1588:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1580:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1580:11:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1574:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1574:18:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1553:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1553:40:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1553:40:2"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1606:21:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "1617:3:2"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1622:4:2",
																					"type": "",
																					"value": "0xc0"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1613:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1613:14:2"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1606:3:2"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "1640:25:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "1654:6:2"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1662:2:2"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1650:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1650:15:2"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1640:6:2"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1165:1:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1168:6:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1162:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1162:13:2"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1176:18:2",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1178:14:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1187:1:2"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1190:1:2",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1183:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1183:9:2"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1178:1:2"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1158:3:2",
																"statements": []
															},
															"src": "1154:521:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1684:11:2",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "1692:3:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1684:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$359_memory_ptr__to_t_struct$_StakingSummary_$359_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "619:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "630:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "641:4:2",
														"type": ""
													}
												],
												"src": "487:1214:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1738:95:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1755:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1762:3:2",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1767:10:2",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1758:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1758:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1748:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1748:31:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1748:31:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1795:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1798:4:2",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1788:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1788:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1788:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1819:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1822:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1812:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "1812:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1812:15:2"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "1706:127:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2012:237:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2029:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2040:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2022:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2022:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2022:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2063:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2074:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2059:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2059:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2079:2:2",
																		"type": "",
																		"value": "47"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2052:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2052:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2052:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2102:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2113:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2098:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2098:18:2"
																	},
																	{
																		"hexValue": "5374616b61626c653a2054686973206164647265737320646f6573206e6f7420",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2118:34:2",
																		"type": "",
																		"value": "Stakable: This address does not "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2091:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2091:62:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2091:62:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2173:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2184:2:2",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2169:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2169:18:2"
																	},
																	{
																		"hexValue": "6861766520616e79207374616b6573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2189:17:2",
																		"type": "",
																		"value": "have any stakes"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2162:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2162:45:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2162:45:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2216:27:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2228:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2239:3:2",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2224:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2224:19:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2216:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_455cb42bafa94547bd684738447987d7bf5acfcf63aa915627e25c94ff409337__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1989:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2003:4:2",
														"type": ""
													}
												],
												"src": "1838:411:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2286:95:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2303:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2310:3:2",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2315:10:2",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2306:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2306:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2296:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2296:31:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2296:31:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2343:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2346:4:2",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2336:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2336:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2336:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2367:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2370:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2360:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2360:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2360:15:2"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2254:127:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2434:80:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2461:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2463:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2463:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2463:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2450:1:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2457:1:2"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2453:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2453:6:2"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2447:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2447:13:2"
															},
															"nodeType": "YulIf",
															"src": "2444:39:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2492:16:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2503:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2506:1:2"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2499:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2499:9:2"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2492:3:2"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2417:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2420:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2426:3:2",
														"type": ""
													}
												],
												"src": "2386:128:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2571:116:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2630:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2632:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2632:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2632:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2602:1:2"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2595:6:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2595:9:2"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2588:6:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2588:17:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2610:1:2"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2621:1:2",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2617:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2617:6:2"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2625:1:2"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2613:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2613:14:2"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2607:2:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2607:21:2"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2584:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2584:45:2"
															},
															"nodeType": "YulIf",
															"src": "2581:71:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2661:20:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2676:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2679:1:2"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2672:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2672:9:2"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2661:7:2"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2550:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2553:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2559:7:2",
														"type": ""
													}
												],
												"src": "2519:168:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2724:95:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2741:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2748:3:2",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2753:10:2",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:20:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2734:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2734:31:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2734:31:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2781:1:2",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2784:4:2",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2774:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2774:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2774:15:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2805:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2808:4:2",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2798:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2798:15:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2798:15:2"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "2692:127:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2870:171:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2901:111:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2922:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2929:3:2",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2934:10:2",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2925:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2925:20:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2915:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2915:31:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2915:31:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:2",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:2",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:2"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2994:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2997:4:2",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2987:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2987:15:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2987:15:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2890:1:2"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2883:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "2883:9:2"
															},
															"nodeType": "YulIf",
															"src": "2880:132:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3021:14:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3030:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3033:1:2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "3026:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3026:9:2"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "3021:1:2"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2855:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2858:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "2864:1:2",
														"type": ""
													}
												],
												"src": "2824:217:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3220:177:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3237:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3248:2:2",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3230:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3230:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3230:21:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3271:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3282:2:2",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3267:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3267:18:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3287:2:2",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3260:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3260:30:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3260:30:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3310:9:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3321:2:2",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3306:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3306:18:2"
																	},
																	{
																		"hexValue": "5374616b61626c653a204572726f722074696d657374616d702030",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3326:29:2",
																		"type": "",
																		"value": "Stakable: Error timestamp 0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3299:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3299:57:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3299:57:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3365:26:2",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3377:9:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3388:2:2",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3373:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3373:18:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3365:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_eae138733ca93c0fbd122a38ff85e06b9b628584b782b941f578ba8b2c9830dd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3197:9:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3211:4:2",
														"type": ""
													}
												],
												"src": "3046:351:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3451:76:2",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3473:22:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "3475:16:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3475:18:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3475:18:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3467:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3470:1:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3464:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3464:8:2"
															},
															"nodeType": "YulIf",
															"src": "3461:34:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3504:17:2",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3516:1:2"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3519:1:2"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3512:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3512:9:2"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "3504:4:2"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "3433:1:2",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "3436:1:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "3442:4:2",
														"type": ""
													}
												],
												"src": "3402:125:2"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3653:476:2",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3663:12:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3673:2:2",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3667:2:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3691:9:2"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "3702:2:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3684:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3684:21:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3684:21:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3714:27:2",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3734:6:2"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3728:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3728:13:2"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3718:6:2",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:2"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3772:2:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3777:6:2"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:2"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:2"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3793:10:2",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3802:1:2",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "3797:1:2",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3862:90:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "3891:9:2"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3902:1:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3887:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3887:17:2"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "3906:2:2",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3883:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3883:26:2"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "3925:6:2"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "3933:1:2"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "3921:3:2"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3921:14:2"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "3937:2:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3917:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3917:23:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "3911:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3911:30:2"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "3876:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3876:66:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3876:66:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3823:1:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3826:6:2"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3820:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3820:13:2"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3834:19:2",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3836:15:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "3845:1:2"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "3848:2:2"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3841:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3841:10:2"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "3836:1:2"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3816:3:2",
																"statements": []
															},
															"src": "3812:140:2"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3986:66:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "4015:9:2"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "4026:6:2"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4011:3:2"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4011:22:2"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4035:2:2",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4007:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4007:31:2"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4040:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4000:6:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4000:42:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4000:42:2"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "3967:1:2"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3970:6:2"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3964:2:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "3964:13:2"
															},
															"nodeType": "YulIf",
															"src": "3961:91:2"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4061:62:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4077:9:2"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4096:6:2"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4104:2:2",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4092:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4092:15:2"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4113:2:2",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4109:3:2"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4109:7:2"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4088:3:2"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4088:29:2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4073:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4073:45:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4120:2:2",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4069:3:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "4069:54:2"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4061:4:2"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3622:9:2",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3633:6:2",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3644:4:2",
														"type": ""
													}
												],
												"src": "3532:597:2"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_struct$_StakingSummary_$359_memory_ptr__to_t_struct$_StakingSummary_$359_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let _2 := 96\n        let tail_1 := add(headStart, _2)\n        mstore(add(headStart, _1), mload(value0))\n        let memberValue0 := mload(add(value0, _1))\n        let _3 := 0x40\n        mstore(add(headStart, _3), _3)\n        let pos := tail_1\n        let length := mload(memberValue0)\n        mstore(tail_1, length)\n        let _4 := 128\n        pos := add(headStart, _4)\n        let srcPtr := add(memberValue0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _5 := mload(srcPtr)\n            mstore(pos, and(mload(_5), sub(shl(160, 1), 1)))\n            mstore(add(pos, _1), mload(add(_5, _1)))\n            mstore(add(pos, _3), mload(add(_5, _3)))\n            mstore(add(pos, _2), mload(add(_5, _2)))\n            mstore(add(pos, _4), mload(add(_5, _4)))\n            let _6 := 0xa0\n            mstore(add(pos, _6), mload(add(_5, _6)))\n            pos := add(pos, 0xc0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_455cb42bafa94547bd684738447987d7bf5acfcf63aa915627e25c94ff409337__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"Stakable: This address does not \")\n        mstore(add(headStart, 96), \"have any stakes\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_eae138733ca93c0fbd122a38ff85e06b9b628584b782b941f578ba8b2c9830dd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Stakable: Error timestamp 0\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 2,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80633dc10ad414610046578063b09d4b4e1461005c578063e73e14bf1461007c575b600080fd5b6000546040519081526020015b60405180910390f35b61006f61006a366004610511565b61008f565b6040516100539190610541565b61006f61008a366004610511565b61019f565b6040805180820190915260008152606060208201526000604051806040016040528060008152602001600160026000876001600160a01b03166001600160a01b0316815260200190815260200160002054815481106100f0576100f06105d7565b9060005260206000209060020201600101805480602002602001604051908101604052809291908181526020016000905b828210156101925760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101610121565b5050509152509392505050565b604080518082019091526000815260606020820152600080604051806040016040528060008152602001600160026000886001600160a01b03166001600160a01b031681526020019081526020016000205481548110610201576102016105d7565b9060005260206000209060020201600101805480602002602001604051908101604052809291908181526020016000905b828210156102a35760008481526020908190206040805160c0810182526006860290920180546001600160a01b031683526001808201548486015260028201549284019290925260038101546060840152600481015460808401526005015460a08301529083529092019101610232565b50505091525060208101515190915061031b5760405162461bcd60e51b815260206004820152602f60248201527f5374616b61626c653a2054686973206164647265737320646f6573206e6f742060448201526e6861766520616e79207374616b657360881b60648201526084015b60405180910390fd5b60005b8160200151518110156103e157600061037583602001518381518110610346576103466105d7565b602002602001015184602001518481518110610364576103646105d7565b6020026020010151602001516103eb565b9050808360200151838151811061038e5761038e6105d7565b60200260200101516060018181525050826020015182815181106103b4576103b46105d7565b602002602001015160200151846103cb9190610603565b93506103da9050600182610603565b905061031e565b5090815292915050565b600082602001516000141561040257506000610441565b6a52b7d2dcc80cd2e400000061041b8460400151610447565b608085015161042a908561061b565b610434919061061b565b61043e9190610650565b90505b92915050565b60008082116104985760405162461bcd60e51b815260206004820152601b60248201527f5374616b61626c653a204572726f722074696d657374616d70203000000000006044820152606401610312565b6104416104a58342610672565b6104b99069d3c21bcecceda100000061061b565b6301e133806040518060600160405280602781526020016106df60279139600081836104f85760405162461bcd60e51b81526004016103129190610689565b508284816105085761050861063a565b04949350505050565b60006020828403121561052357600080fd5b81356001600160a01b038116811461053a57600080fd5b9392505050565b6000602080835260608084018551838601528286015160408081880152828251808552608094508489019150868401935060005b818110156105c857845180516001600160a01b03168452888101518985015284810151858501528781015188850152868101518785015260a090810151908401529387019360c090920191600101610575565b50909998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610616576106166105ed565b500190565b6000816000190483118215151615610635576106356105ed565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261066d57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610684576106846105ed565b500390565b600060208083528351808285015260005b818110156106b65785810183015185820160400152820161069a565b818111156106c8576000604083870101525b50601f01601f191692909201604001939250505056fe5374616b61626c653a204572726f722063616e6e6f74206469766964652074696d657374616d70a26469706673582212200440a09b6a47d7035e61310f88a4fa2137e792dfacb21a86225967326ddc365e64736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3DC10AD4 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xB09D4B4E EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0xE73E14BF EQ PUSH2 0x7C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x8F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x53 SWAP2 SWAP1 PUSH2 0x541 JUMP JUMPDEST PUSH2 0x6F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 SLOAD DUP2 LT PUSH2 0xF0 JUMPI PUSH2 0xF0 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x121 JUMP JUMPDEST POP POP POP SWAP2 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP2 SLOAD DUP2 LT PUSH2 0x201 JUMPI PUSH2 0x201 PUSH2 0x5D7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD DUP3 MSTORE PUSH1 0x6 DUP7 MUL SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x1 DUP1 DUP3 ADD SLOAD DUP5 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 DUP4 MSTORE SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x232 JUMP JUMPDEST POP POP POP SWAP2 MSTORE POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD SWAP1 SWAP2 POP PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B61626C653A2054686973206164647265737320646F6573206E6F7420 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x6861766520616E79207374616B6573 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x0 PUSH2 0x375 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x346 JUMPI PUSH2 0x346 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x364 JUMPI PUSH2 0x364 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0x3EB JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH1 0x20 ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x38E JUMPI PUSH2 0x38E PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B4 JUMPI PUSH2 0x3B4 PUSH2 0x5D7 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD DUP5 PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0x603 JUMP JUMPDEST SWAP4 POP PUSH2 0x3DA SWAP1 POP PUSH1 0x1 DUP3 PUSH2 0x603 JUMP JUMPDEST SWAP1 POP PUSH2 0x31E JUMP JUMPDEST POP SWAP1 DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x402 JUMPI POP PUSH1 0x0 PUSH2 0x441 JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x41B DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0x447 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x42A SWAP1 DUP6 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x434 SWAP2 SWAP1 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x43E SWAP2 SWAP1 PUSH2 0x650 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 GT PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B61626C653A204572726F722074696D657374616D7020300000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x312 JUMP JUMPDEST PUSH2 0x441 PUSH2 0x4A5 DUP4 TIMESTAMP PUSH2 0x672 JUMP JUMPDEST PUSH2 0x4B9 SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x61B JUMP JUMPDEST PUSH4 0x1E13380 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6DF PUSH1 0x27 SWAP2 CODECOPY PUSH1 0x0 DUP2 DUP4 PUSH2 0x4F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x689 JUMP JUMPDEST POP DUP3 DUP5 DUP2 PUSH2 0x508 JUMPI PUSH2 0x508 PUSH2 0x63A JUMP JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x60 DUP1 DUP5 ADD DUP6 MLOAD DUP4 DUP7 ADD MSTORE DUP3 DUP7 ADD MLOAD PUSH1 0x40 DUP1 DUP2 DUP9 ADD MSTORE DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x80 SWAP5 POP DUP5 DUP10 ADD SWAP2 POP DUP7 DUP5 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x5C8 JUMPI DUP5 MLOAD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE DUP9 DUP2 ADD MLOAD DUP10 DUP6 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP6 ADD MSTORE DUP8 DUP2 ADD MLOAD DUP9 DUP6 ADD MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 DUP2 ADD MLOAD SWAP1 DUP5 ADD MSTORE SWAP4 DUP8 ADD SWAP4 PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x575 JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x616 JUMPI PUSH2 0x616 PUSH2 0x5ED JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x635 JUMPI PUSH2 0x635 PUSH2 0x5ED JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x66D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x684 JUMPI PUSH2 0x684 PUSH2 0x5ED JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6B6 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x69A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP INVALID MSTORE8 PUSH21 0x616B61626C653A204572726F722063616E6E6F7420 PUSH5 0x6976696465 KECCAK256 PUSH21 0x696D657374616D70A26469706673582212200440A0 SWAP12 PUSH11 0x47D7035E61310F88A4FA21 CALLDATACOPY 0xE7 SWAP3 0xDF 0xAC 0xB2 BYTE DUP7 0x22 MSIZE PUSH8 0x326DDC365E64736F PUSH13 0x634300080B0033000000000000 ",
							"sourceMap": "128:11013:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5030:91;5072:7;5098:15;5030:91;;160:25:2;;;148:2;133:18;5030:91:1;;;;;;;;5909:289;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;10257:881::-;;;;;;:::i;:::-;;:::i;5909:289::-;-1:-1:-1;;;;;;;;;;;;;;;;;6033:29:1;6065:98;;;;;;;;6094:1;6065:98;;;;6110:12;6123:6;:13;6130:5;-1:-1:-1;;;;;6123:13:1;-1:-1:-1;;;;;6123:13:1;;;;;;;;;;;;;6110:27;;;;;;;;:::i;:::-;;;;;;;;;;;:42;;6065:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6065:98:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6065:98:1;;-1:-1:-1;6033:130:1;5909:289;-1:-1:-1;;;5909:289:1:o;10257:881::-;-1:-1:-1;;;;;;;;;;;;;;;;;10379:24:1;10416:29;10448:100;;;;;;;;10477:1;10448:100;;;;10493:12;10506:6;:15;10513:7;-1:-1:-1;;;;;10506:15:1;-1:-1:-1;;;;;10506:15:1;;;;;;;;;;;;;10493:29;;;;;;;;:::i;:::-;;;;;;;;;;;:44;;10448:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10448:100:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;10448:100:1;;-1:-1:-1;10581:14:1;;;;:21;10416:132;;-1:-1:-1;10559:123:1;;;;-1:-1:-1;;;10559:123:1;;2040:2:2;10559:123:1;;;2022:21:2;2079:2;2059:18;;;2052:30;2118:34;2098:18;;;2091:62;-1:-1:-1;;;2169:18:2;;;2162:45;2224:19;;10559:123:1;;;;;;;;;10700:9;10695:359;10719:7;:14;;;:21;10715:1;:25;10695:359;;;10765:23;10791:114;10830:7;:14;;;10845:1;10830:17;;;;;;;;:::i;:::-;;;;;;;10866:7;:14;;;10881:1;10866:17;;;;;;;;:::i;:::-;;;;;;;:24;;;10791:20;:114::i;:::-;10765:140;;10950:15;10920:7;:14;;;10935:1;10920:17;;;;;;;;:::i;:::-;;;;;;;:27;;:45;;;;;11018:7;:14;;;11033:1;11018:17;;;;;;;;:::i;:::-;;;;;;;:24;;;10999:16;:43;;;;:::i;:::-;10980:62;-1:-1:-1;10742:6:1;;-1:-1:-1;10747:1:1;10742:6;;:::i;:::-;;;10695:359;;;-1:-1:-1;11066:39:1;;;:7;10257:881;-1:-1:-1;;10257:881:1:o;5517:384::-;5643:7;5672:14;:21;;;5697:1;5672:26;5668:67;;;-1:-1:-1;5722:1:1;5715:8;;5668:67;5889:4;5839:46;5864:14;:20;;;5839:24;:46::i;:::-;5795:24;;;;5768:51;;:7;:51;:::i;:::-;:117;;;;:::i;:::-;5767:126;;;;:::i;:::-;5747:146;;5517:384;;;;;:::o;5129:380::-;5229:7;5271:1;5262:6;:10;5254:50;;;;-1:-1:-1;;;5254:50:1;;3248:2:2;5254:50:1;;;3230:21:2;3287:2;3267:18;;;3260:30;3326:29;3306:18;;;3299:57;3373:18;;5254:50:1;3046:351:2;5254:50:1;5335:166;5367:24;5385:6;5367:15;:24;:::i;:::-;5366:33;;5395:4;5366:33;:::i;:::-;5418:8;5335:166;;;;;;;;;;;;;;;;;5776:7:0;5834:12;5827:5;5819:28;;;;-1:-1:-1;;;5819:28:0;;;;;;;;:::i;:::-;;5872:1;5868;:5;;;;;:::i;:::-;;;5660:230;-1:-1:-1;;;;5660:230:0:o;196:286:2:-;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;350:23;;-1:-1:-1;;;;;402:31:2;;392:42;;382:70;;448:1;445;438:12;382:70;471:5;196:286;-1:-1:-1;;;196:286:2:o;487:1214::-;641:4;670:2;699;688:9;681:21;721:2;761;750:9;746:18;806:6;800:13;795:2;784:9;780:18;773:41;861:2;853:6;849:15;843:22;884:4;924:2;919;908:9;904:18;897:30;947:6;982:12;976:19;1019:6;1011;1004:22;1045:3;1035:13;;1079:2;1068:9;1064:18;1057:25;;1123:2;1109:12;1105:21;1091:35;;1144:1;1154:521;1168:6;1165:1;1162:13;1154:521;;;1227:13;;1269:9;;-1:-1:-1;;;;;1265:35:2;1253:48;;1341:11;;;1335:18;1321:12;;;1314:40;1394:11;;;1388:18;1374:12;;;1367:40;1447:11;;;1441:18;1427:12;;;1420:40;1500:11;;;1494:18;1480:12;;;1473:40;1288:3;1580:11;;;1574:18;1560:12;;;1553:40;1650:15;;;;1622:4;1613:14;;;;1297:1;1183:9;1154:521;;;-1:-1:-1;1692:3:2;;487:1214;-1:-1:-1;;;;;;;;;487:1214:2:o;1706:127::-;1767:10;1762:3;1758:20;1755:1;1748:31;1798:4;1795:1;1788:15;1822:4;1819:1;1812:15;2254:127;2315:10;2310:3;2306:20;2303:1;2296:31;2346:4;2343:1;2336:15;2370:4;2367:1;2360:15;2386:128;2426:3;2457:1;2453:6;2450:1;2447:13;2444:39;;;2463:18;;:::i;:::-;-1:-1:-1;2499:9:2;;2386:128::o;2519:168::-;2559:7;2625:1;2621;2617:6;2613:14;2610:1;2607:21;2602:1;2595:9;2588:17;2584:45;2581:71;;;2632:18;;:::i;:::-;-1:-1:-1;2672:9:2;;2519:168::o;2692:127::-;2753:10;2748:3;2744:20;2741:1;2734:31;2784:4;2781:1;2774:15;2808:4;2805:1;2798:15;2824:217;2864:1;2890;2880:132;;2934:10;2929:3;2925:20;2922:1;2915:31;2969:4;2966:1;2959:15;2997:4;2994:1;2987:15;2880:132;-1:-1:-1;3026:9:2;;2824:217::o;3402:125::-;3442:4;3470:1;3467;3464:8;3461:34;;;3475:18;;:::i;:::-;-1:-1:-1;3512:9:2;;3402:125::o;3532:597::-;3644:4;3673:2;3702;3691:9;3684:21;3734:6;3728:13;3777:6;3772:2;3761:9;3757:18;3750:34;3802:1;3812:140;3826:6;3823:1;3820:13;3812:140;;;3921:14;;;3917:23;;3911:30;3887:17;;;3906:2;3883:26;3876:66;3841:10;;3812:140;;;3970:6;3967:1;3964:13;3961:91;;;4040:1;4035:2;4026:6;4015:9;4011:22;4007:31;4000:42;3961:91;-1:-1:-1;4113:2:2;4092:15;-1:-1:-1;;4088:29:2;4073:45;;;;4120:2;4069:54;;3532:597;-1:-1:-1;;;3532:597:2:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "370200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"hasStake(address)": "infinite",
								"penaltyFee()": "2247",
								"stakeSummary(address)": "infinite"
							},
							"internal": {
								"_addStakeholder(address)": "infinite",
								"_changePenaltyFee(uint256)": "infinite",
								"_stake(uint256,uint256,uint256)": "infinite",
								"_withdrawAllStake(uint256)": "infinite",
								"_withdrawStake(uint256,uint256)": "infinite",
								"calculateStakeReward(struct Stakable.Stake memory,uint256)": "infinite",
								"calculateStakingDuration(uint256)": "infinite",
								"calculateStakingWithPenalty(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "CODESIZE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSHSIZE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 363,
									"end": 600,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "JUMP",
									"source": 1,
									"value": "[in]"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "tag",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 363,
									"end": 600,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 486,
									"end": 498,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 486,
									"end": 505,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 486,
									"end": 505,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 486,
									"end": 505,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 559,
									"end": 592,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 176,
									"end": 192,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 176,
									"end": 192,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 14,
									"end": 198,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 128,
									"end": 11141,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200440a09b6a47d7035e61310f88a4fa2137e792dfacb21a86225967326ddc365e64736f6c634300080b0033",
									".code": [
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "3DC10AD4"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "B09D4B4E"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "E73E14BF"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 128,
											"end": 11141,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5072,
											"end": 5079,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5098,
											"end": 5113,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 160,
											"end": 185,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 160,
											"end": 185,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 148,
											"end": 150,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 133,
											"end": 151,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5121,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 6033,
											"end": 6062,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6094,
											"end": 6095,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6122,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6123,
											"end": 6129,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6130,
											"end": 6135,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6123,
											"end": 6136,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6137,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6110,
											"end": 6152,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6110,
											"end": 6152,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "tag",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "28"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "tag",
											"source": 1,
											"value": "29"
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6065,
											"end": 6163,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6033,
											"end": 6163,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5909,
											"end": 6198,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 10379,
											"end": 10403,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10416,
											"end": 10445,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10477,
											"end": 10478,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10505,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10506,
											"end": 10512,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10513,
											"end": 10520,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10506,
											"end": 10521,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10522,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10493,
											"end": 10537,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10493,
											"end": 10537,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "tag",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "36"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10448,
											"end": 10548,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10581,
											"end": 10595,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10581,
											"end": 10595,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10581,
											"end": 10595,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10581,
											"end": 10595,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10581,
											"end": 10602,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10416,
											"end": 10548,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10416,
											"end": 10548,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2022,
											"end": 2043,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2079,
											"end": 2081,
											"name": "PUSH",
											"source": 2,
											"value": "2F"
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2052,
											"end": 2082,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2118,
											"end": 2152,
											"name": "PUSH",
											"source": 2,
											"value": "5374616B61626C653A2054686973206164647265737320646F6573206E6F7420"
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2098,
											"end": 2116,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2091,
											"end": 2153,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6861766520616E79207374616B6573"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2187,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2169,
											"end": 2187,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2169,
											"end": 2187,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2162,
											"end": 2207,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2224,
											"end": 2243,
											"name": "PUSH",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 2224,
											"end": 2243,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "tag",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 10559,
											"end": 10682,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10700,
											"end": 10709,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10719,
											"end": 10726,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10719,
											"end": 10733,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10719,
											"end": 10733,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10719,
											"end": 10733,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10719,
											"end": 10740,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10715,
											"end": 10716,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10715,
											"end": 10740,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10765,
											"end": 10788,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10791,
											"end": 10905,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 10830,
											"end": 10837,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10844,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10830,
											"end": 10844,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10844,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10845,
											"end": 10846,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10830,
											"end": 10847,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10873,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10880,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10866,
											"end": 10880,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10880,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10881,
											"end": 10882,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10883,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10890,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10866,
											"end": 10890,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10866,
											"end": 10890,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10791,
											"end": 10811,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 10791,
											"end": 10905,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10791,
											"end": 10905,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 10791,
											"end": 10905,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10765,
											"end": 10905,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10765,
											"end": 10905,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10950,
											"end": 10965,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10927,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10934,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10920,
											"end": 10934,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10934,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10935,
											"end": 10936,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10937,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10947,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10920,
											"end": 10947,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10965,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10965,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10920,
											"end": 10965,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11025,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11032,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11032,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11032,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11033,
											"end": 11034,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11035,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11042,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11018,
											"end": 11042,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11018,
											"end": 11042,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 10999,
											"end": 11015,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 10999,
											"end": 11042,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10980,
											"end": 11042,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10747,
											"end": 10748,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "56"
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 10742,
											"end": 10748,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 10695,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11066,
											"end": 11105,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11066,
											"end": 11105,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 11066,
											"end": 11105,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11066,
											"end": 11073,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10257,
											"end": 11138,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5672,
											"end": 5686,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5672,
											"end": 5693,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5672,
											"end": 5693,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5672,
											"end": 5693,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5697,
											"end": 5698,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5672,
											"end": 5698,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5668,
											"end": 5735,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5668,
											"end": 5735,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 5668,
											"end": 5735,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5722,
											"end": 5723,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5715,
											"end": 5723,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 5715,
											"end": 5723,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5668,
											"end": 5735,
											"name": "tag",
											"source": 1,
											"value": "59"
										},
										{
											"begin": 5668,
											"end": 5735,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5889,
											"end": 5893,
											"name": "PUSH",
											"source": 1,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 5839,
											"end": 5885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 5864,
											"end": 5878,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5864,
											"end": 5884,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5864,
											"end": 5884,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5864,
											"end": 5884,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5839,
											"end": 5863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 5839,
											"end": 5885,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5839,
											"end": 5885,
											"name": "tag",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 5839,
											"end": 5885,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5819,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 5795,
											"end": 5819,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5819,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5819,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5775,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 5768,
											"end": 5819,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 5768,
											"end": 5885,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "tag",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 5767,
											"end": 5893,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5747,
											"end": 5893,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5747,
											"end": 5893,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "tag",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5517,
											"end": 5901,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5129,
											"end": 5509,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 5129,
											"end": 5509,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5229,
											"end": 5236,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5271,
											"end": 5272,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5262,
											"end": 5268,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5262,
											"end": 5272,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3248,
											"end": 3250,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3287,
											"end": 3289,
											"name": "PUSH",
											"source": 2,
											"value": "1B"
										},
										{
											"begin": 3267,
											"end": 3285,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3267,
											"end": 3285,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3267,
											"end": 3285,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3260,
											"end": 3290,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3326,
											"end": 3355,
											"name": "PUSH",
											"source": 2,
											"value": "5374616B61626C653A204572726F722074696D657374616D7020300000000000"
										},
										{
											"begin": 3306,
											"end": 3324,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3306,
											"end": 3324,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3306,
											"end": 3324,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3299,
											"end": 3356,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3373,
											"end": 3391,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 3373,
											"end": 3391,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3046,
											"end": 3397,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 5254,
											"end": 5304,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "58"
										},
										{
											"begin": 5367,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5385,
											"end": 5391,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5367,
											"end": 5382,
											"name": "TIMESTAMP",
											"source": 1
										},
										{
											"begin": 5367,
											"end": 5391,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "73"
										},
										{
											"begin": 5367,
											"end": 5391,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5367,
											"end": 5391,
											"name": "tag",
											"source": 1,
											"value": "72"
										},
										{
											"begin": 5367,
											"end": 5391,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5395,
											"end": 5399,
											"name": "PUSH",
											"source": 1,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "tag",
											"source": 1,
											"value": "74"
										},
										{
											"begin": 5366,
											"end": 5399,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5418,
											"end": 5426,
											"name": "PUSH",
											"source": 1,
											"value": "1E13380"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH data",
											"source": 1,
											"value": "10B867070097D898AE15CD1BC384E389B4A7D91F05C0759C198C193C7FD91787"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "PUSH",
											"source": 1,
											"value": "27"
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5335,
											"end": 5501,
											"name": "CODECOPY",
											"source": 1
										},
										{
											"begin": 5776,
											"end": 5783,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5846,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5827,
											"end": 5832,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5819,
											"end": 5847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 5872,
											"end": 5873,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5869,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 5868,
											"end": 5873,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5660,
											"end": 5890,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 196,
											"end": 482,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 196,
											"end": 482,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 255,
											"end": 261,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 308,
											"end": 310,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 296,
											"end": 305,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 287,
											"end": 294,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 283,
											"end": 306,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 279,
											"end": 311,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 276,
											"end": 328,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 276,
											"end": 328,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 276,
											"end": 328,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 324,
											"end": 325,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 321,
											"end": 322,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 314,
											"end": 326,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 276,
											"end": 328,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 276,
											"end": 328,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 350,
											"end": 373,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 350,
											"end": 373,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 402,
											"end": 433,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 402,
											"end": 433,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 392,
											"end": 434,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 392,
											"end": 434,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 382,
											"end": 452,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 382,
											"end": 452,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 448,
											"end": 449,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 445,
											"end": 446,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 438,
											"end": 450,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 382,
											"end": 452,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 382,
											"end": 452,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 471,
											"end": 476,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 196,
											"end": 482,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 196,
											"end": 482,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 487,
											"end": 1701,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 487,
											"end": 1701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 641,
											"end": 645,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 670,
											"end": 672,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 699,
											"end": 701,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 688,
											"end": 697,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 681,
											"end": 702,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 721,
											"end": 723,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 761,
											"end": 763,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 750,
											"end": 759,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 746,
											"end": 764,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 806,
											"end": 812,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 800,
											"end": 813,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 795,
											"end": 797,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 784,
											"end": 793,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 780,
											"end": 798,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 773,
											"end": 814,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 861,
											"end": 863,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 853,
											"end": 859,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 849,
											"end": 864,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 843,
											"end": 865,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 884,
											"end": 888,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 924,
											"end": 926,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 919,
											"end": 921,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 908,
											"end": 917,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 904,
											"end": 922,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 897,
											"end": 927,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 947,
											"end": 953,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 982,
											"end": 994,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 976,
											"end": 995,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1019,
											"end": 1025,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1011,
											"end": 1017,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1004,
											"end": 1026,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1045,
											"end": 1048,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1035,
											"end": 1048,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1035,
											"end": 1048,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1079,
											"end": 1081,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1068,
											"end": 1077,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 1064,
											"end": 1082,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1057,
											"end": 1082,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1057,
											"end": 1082,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1123,
											"end": 1125,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1109,
											"end": 1121,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1105,
											"end": 1126,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1091,
											"end": 1126,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1091,
											"end": 1126,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1144,
											"end": 1145,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1168,
											"end": 1174,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1165,
											"end": 1166,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1162,
											"end": 1175,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1227,
											"end": 1240,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1227,
											"end": 1240,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1269,
											"end": 1278,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1269,
											"end": 1278,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1265,
											"end": 1300,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1253,
											"end": 1301,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1253,
											"end": 1301,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1341,
											"end": 1352,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1341,
											"end": 1352,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1341,
											"end": 1352,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1335,
											"end": 1353,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1321,
											"end": 1333,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 1321,
											"end": 1333,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1321,
											"end": 1333,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1314,
											"end": 1354,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1394,
											"end": 1405,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1394,
											"end": 1405,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1394,
											"end": 1405,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1388,
											"end": 1406,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1374,
											"end": 1386,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1374,
											"end": 1386,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1374,
											"end": 1386,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1367,
											"end": 1407,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1458,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1458,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1447,
											"end": 1458,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1441,
											"end": 1459,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1427,
											"end": 1439,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 1427,
											"end": 1439,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1427,
											"end": 1439,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1420,
											"end": 1460,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1511,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1511,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1511,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1494,
											"end": 1512,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1480,
											"end": 1492,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1480,
											"end": 1492,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1480,
											"end": 1492,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1473,
											"end": 1513,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1288,
											"end": 1291,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1580,
											"end": 1591,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1574,
											"end": 1592,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1560,
											"end": 1572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1553,
											"end": 1593,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1650,
											"end": 1665,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1650,
											"end": 1665,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 1650,
											"end": 1665,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1650,
											"end": 1665,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1622,
											"end": 1626,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 1613,
											"end": 1627,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1613,
											"end": 1627,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1613,
											"end": 1627,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1613,
											"end": 1627,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1297,
											"end": 1298,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1183,
											"end": 1192,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 1154,
											"end": 1675,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1692,
											"end": 1695,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1692,
											"end": 1695,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 487,
											"end": 1701,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 487,
											"end": 1701,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1706,
											"end": 1833,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 1706,
											"end": 1833,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1767,
											"end": 1777,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 1762,
											"end": 1765,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1758,
											"end": 1778,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 1755,
											"end": 1756,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1748,
											"end": 1779,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1798,
											"end": 1802,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1795,
											"end": 1796,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1788,
											"end": 1803,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1822,
											"end": 1826,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1819,
											"end": 1820,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1812,
											"end": 1827,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2254,
											"end": 2381,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2254,
											"end": 2381,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2315,
											"end": 2325,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2310,
											"end": 2313,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2306,
											"end": 2326,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2303,
											"end": 2304,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2296,
											"end": 2327,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2346,
											"end": 2350,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2343,
											"end": 2344,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2336,
											"end": 2351,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2370,
											"end": 2374,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2367,
											"end": 2368,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2360,
											"end": 2375,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2386,
											"end": 2514,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2386,
											"end": 2514,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2426,
											"end": 2429,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2457,
											"end": 2458,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2453,
											"end": 2459,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2450,
											"end": 2451,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2447,
											"end": 2460,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2444,
											"end": 2483,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2444,
											"end": 2483,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2444,
											"end": 2483,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2463,
											"end": 2481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2463,
											"end": 2481,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2463,
											"end": 2481,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2463,
											"end": 2481,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 2463,
											"end": 2481,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2499,
											"end": 2508,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2499,
											"end": 2508,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2386,
											"end": 2514,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2519,
											"end": 2687,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 2519,
											"end": 2687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2559,
											"end": 2566,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2625,
											"end": 2626,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2621,
											"end": 2622,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2617,
											"end": 2623,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2613,
											"end": 2627,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2610,
											"end": 2611,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2607,
											"end": 2628,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2602,
											"end": 2603,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2595,
											"end": 2604,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2588,
											"end": 2605,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2584,
											"end": 2629,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2652,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2652,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2581,
											"end": 2652,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2632,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2632,
											"end": 2650,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2632,
											"end": 2650,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2632,
											"end": 2650,
											"name": "tag",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 2632,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2681,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2672,
											"end": 2681,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2519,
											"end": 2687,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2692,
											"end": 2819,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 2692,
											"end": 2819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2753,
											"end": 2763,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2748,
											"end": 2751,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2744,
											"end": 2764,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2741,
											"end": 2742,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2734,
											"end": 2765,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2784,
											"end": 2788,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2781,
											"end": 2782,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2774,
											"end": 2789,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2808,
											"end": 2812,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2805,
											"end": 2806,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2798,
											"end": 2813,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2824,
											"end": 3041,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2824,
											"end": 3041,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2864,
											"end": 2865,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2890,
											"end": 2891,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2880,
											"end": 3012,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2880,
											"end": 3012,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2934,
											"end": 2944,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2929,
											"end": 2932,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2925,
											"end": 2945,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2922,
											"end": 2923,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2915,
											"end": 2946,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2997,
											"end": 3001,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2994,
											"end": 2995,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2987,
											"end": 3002,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2880,
											"end": 3012,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 2880,
											"end": 3012,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3026,
											"end": 3035,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 3026,
											"end": 3035,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2824,
											"end": 3041,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3402,
											"end": 3527,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 3402,
											"end": 3527,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3442,
											"end": 3446,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3470,
											"end": 3471,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3467,
											"end": 3468,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3464,
											"end": 3472,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3461,
											"end": 3495,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3461,
											"end": 3495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3461,
											"end": 3495,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3475,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3475,
											"end": 3493,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 3475,
											"end": 3493,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3475,
											"end": 3493,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 3475,
											"end": 3493,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3512,
											"end": 3521,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3512,
											"end": 3521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3402,
											"end": 3527,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3532,
											"end": 4129,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 3532,
											"end": 4129,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3644,
											"end": 3648,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3673,
											"end": 3675,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3702,
											"end": 3704,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3691,
											"end": 3700,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3684,
											"end": 3705,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3734,
											"end": 3740,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3728,
											"end": 3741,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3777,
											"end": 3783,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3772,
											"end": 3774,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3761,
											"end": 3770,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3802,
											"end": 3803,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "tag",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3826,
											"end": 3832,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3823,
											"end": 3824,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3820,
											"end": 3833,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3921,
											"end": 3935,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3921,
											"end": 3935,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3921,
											"end": 3935,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3917,
											"end": 3940,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3917,
											"end": 3940,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3911,
											"end": 3941,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3887,
											"end": 3904,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3887,
											"end": 3904,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3887,
											"end": 3904,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3906,
											"end": 3908,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3883,
											"end": 3909,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3876,
											"end": 3942,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3841,
											"end": 3851,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3841,
											"end": 3851,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "110"
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 3812,
											"end": 3952,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3970,
											"end": 3976,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3967,
											"end": 3968,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3964,
											"end": 3977,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3961,
											"end": 4052,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3961,
											"end": 4052,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3961,
											"end": 4052,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 4040,
											"end": 4041,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4035,
											"end": 4037,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4026,
											"end": 4032,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4015,
											"end": 4024,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 4011,
											"end": 4033,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4007,
											"end": 4038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4000,
											"end": 4042,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3961,
											"end": 4052,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3961,
											"end": 4052,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4113,
											"end": 4115,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 4092,
											"end": 4107,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4088,
											"end": 4117,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4073,
											"end": 4118,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4073,
											"end": 4118,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4073,
											"end": 4118,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4073,
											"end": 4118,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4120,
											"end": 4122,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4069,
											"end": 4123,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4069,
											"end": 4123,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3532,
											"end": 4129,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3532,
											"end": 4129,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										}
									],
									".data": {
										"10B867070097D898AE15CD1BC384E389B4A7D91F05C0759C198C193C7FD91787": "5374616b61626c653a204572726f722063616e6e6f74206469766964652074696d657374616d70"
									}
								}
							}
						},
						"methodIdentifiers": {
							"hasStake(address)": "e73e14bf",
							"penaltyFee()": "3dc10ad4",
							"stakeSummary(address)": "b09d4b4e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingPenalty_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Stakable.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Stakable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"stakeSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Stakable.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Stakable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"Staked(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stakable.sol\":\"Stakable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973868f808e88e21a1a0a01d4839314515ee337ad096286c88e41b74dcc11fc2\",\"dweb:/ipfs/QmfYuZxRfx2J2xdk4EXN7jKg4bUYEMTaYk9BAw9Bqn4o2Y\"]},\"contracts/Stakable.sol\":{\"keccak256\":\"0x7558b6ffa48bbf4335f4f18d6563895007c12a6bc49aa6a66a610c17114a9fc2\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1d72bf17300e148a29c7129e5664810aca7306cdef9fc535460df4b7c537a059\",\"dweb:/ipfs/QmRfZNW5ZnT49emNEQxTdn1viwxpSpFVxYaTTtM2nwiwFH\"]}},\"version\":1}",
					"userdoc": {
						"events": {
							"Staked(address,uint256,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						]
					},
					"id": 312,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:0",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 311,
							"linearizedBaseContracts": [
								311
							],
							"name": "SafeMath",
							"nameLocation": "475:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 33,
										"nodeType": "Block",
										"src": "702:140:0",
										"statements": [
											{
												"id": 32,
												"nodeType": "UncheckedBlock",
												"src": "712:124:0",
												"statements": [
													{
														"assignments": [
															15
														],
														"declarations": [
															{
																"constant": false,
																"id": 15,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "744:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 32,
																"src": "736:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 14,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "736:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 19,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 18,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 16,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "748:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 17,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "752:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "748:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "736:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 20,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 15,
																"src": "771:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 21,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "775:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "771:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 27,
														"nodeType": "IfStatement",
														"src": "767:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 23,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "786:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 24,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "793:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 25,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "785:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 13,
															"id": 26,
															"nodeType": "Return",
															"src": "778:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 28,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "817:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 29,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "823:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 30,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "816:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 13,
														"id": 31,
														"nodeType": "Return",
														"src": "809:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "490:131:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 34,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "635:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "650:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "642:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "661:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "653:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:22:0"
									},
									"returnParameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "687:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "687:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "693:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 11,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "686:15:0"
									},
									"scope": 311,
									"src": "626:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 61,
										"nodeType": "Block",
										"src": "1064:113:0",
										"statements": [
											{
												"id": 60,
												"nodeType": "UncheckedBlock",
												"src": "1074:97:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 48,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 46,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 39,
																"src": "1102:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 47,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 37,
																"src": "1106:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1102:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 53,
														"nodeType": "IfStatement",
														"src": "1098:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 49,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1117:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 50,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1124:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 51,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1116:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 45,
															"id": 52,
															"nodeType": "Return",
															"src": "1109:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 54,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1148:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 55,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 37,
																		"src": "1154:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 56,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 39,
																		"src": "1158:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1154:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 58,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1147:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 45,
														"id": 59,
														"nodeType": "Return",
														"src": "1140:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "848:135:0",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 62,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "997:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1012:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1004:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1023:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1015:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:22:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1049:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1049:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "1055:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 43,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1055:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1048:15:0"
									},
									"scope": 311,
									"src": "988:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 103,
										"nodeType": "Block",
										"src": "1401:417:0",
										"statements": [
											{
												"id": 102,
												"nodeType": "UncheckedBlock",
												"src": "1411:401:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 76,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 74,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1669:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1674:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1669:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 81,
														"nodeType": "IfStatement",
														"src": "1665:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 77,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1685:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1691:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 79,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1684:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 80,
															"nodeType": "Return",
															"src": "1677:16:0"
														}
													},
													{
														"assignments": [
															83
														],
														"declarations": [
															{
																"constant": false,
																"id": 83,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1715:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 102,
																"src": "1707:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 82,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1707:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 87,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 84,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 65,
																"src": "1719:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 85,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1723:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1719:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1707:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 88,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1742:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 89,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "1746:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1742:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 91,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1751:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1742:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 97,
														"nodeType": "IfStatement",
														"src": "1738:33:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 93,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1762:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1769:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 95,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1761:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 73,
															"id": 96,
															"nodeType": "Return",
															"src": "1754:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 98,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 99,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1799:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 100,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1792:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 73,
														"id": 101,
														"nodeType": "Return",
														"src": "1785:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "1183:137:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 104,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1334:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1349:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1341:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1341:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1360:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1352:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1340:22:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1386:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 69,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1386:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "1392:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 71,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1392:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:15:0"
									},
									"scope": 311,
									"src": "1325:493:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 131,
										"nodeType": "Block",
										"src": "2043:114:0",
										"statements": [
											{
												"id": 130,
												"nodeType": "UncheckedBlock",
												"src": "2053:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 118,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 116,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 109,
																"src": "2081:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2086:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2081:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 123,
														"nodeType": "IfStatement",
														"src": "2077:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2097:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2104:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 121,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2096:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 115,
															"id": 122,
															"nodeType": "Return",
															"src": "2089:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2128:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 125,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 107,
																		"src": "2134:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 126,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 109,
																		"src": "2138:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2134:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 128,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2127:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 115,
														"id": 129,
														"nodeType": "Return",
														"src": "2120:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "1824:138:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1976:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1991:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1983:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1983:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2002:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "1994:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1982:22:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2028:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 111,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2028:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "2034:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2034:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2027:15:0"
									},
									"scope": 311,
									"src": "1967:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 159,
										"nodeType": "Block",
										"src": "2392:114:0",
										"statements": [
											{
												"id": 158,
												"nodeType": "UncheckedBlock",
												"src": "2402:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 144,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 137,
																"src": "2430:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2435:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2430:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 151,
														"nodeType": "IfStatement",
														"src": "2426:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2446:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2453:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2445:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 143,
															"id": 150,
															"nodeType": "Return",
															"src": "2438:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2477:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 153,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 135,
																		"src": "2483:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 154,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 137,
																		"src": "2487:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2483:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 156,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2476:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 143,
														"id": 157,
														"nodeType": "Return",
														"src": "2469:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2163:148:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 160,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2325:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2340:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2332:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2332:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2351:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2343:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2331:22:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2377:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 139,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "2383:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2383:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:15:0"
									},
									"scope": 311,
									"src": "2316:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 174,
										"nodeType": "Block",
										"src": "2808:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 170,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 163,
														"src": "2825:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 171,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2829:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2825:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 169,
												"id": 173,
												"nodeType": "Return",
												"src": "2818:12:0"
											}
										]
									},
									"documentation": {
										"id": 161,
										"nodeType": "StructuredDocumentation",
										"src": "2512:224:0",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nameLocation": "2750:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2762:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2754:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2754:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 165,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2773:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2765:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:22:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 175,
												"src": "2799:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2799:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2798:9:0"
									},
									"scope": 311,
									"src": "2741:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 189,
										"nodeType": "Block",
										"src": "3175:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 185,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 178,
														"src": "3192:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 186,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 180,
														"src": "3196:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3192:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 184,
												"id": 188,
												"nodeType": "Return",
												"src": "3185:12:0"
											}
										]
									},
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "2843:260:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "3117:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3129:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3121:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3121:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3140:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3132:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3120:22:0"
									},
									"returnParameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "3166:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3166:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3165:9:0"
									},
									"scope": 311,
									"src": "3108:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 204,
										"nodeType": "Block",
										"src": "3518:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 200,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3535:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 201,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 195,
														"src": "3539:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3535:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 199,
												"id": 203,
												"nodeType": "Return",
												"src": "3528:12:0"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "3210:236:0",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 205,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nameLocation": "3460:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3472:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3464:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3464:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3483:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3475:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3463:22:0"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "3509:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3509:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3508:9:0"
									},
									"scope": 311,
									"src": "3451:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 219,
										"nodeType": "Block",
										"src": "3903:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 215,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 208,
														"src": "3920:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 216,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 210,
														"src": "3924:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3920:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 214,
												"id": 218,
												"nodeType": "Return",
												"src": "3913:12:0"
											}
										]
									},
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "3553:278:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "3845:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3857:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3849:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3868:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3860:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:22:0"
									},
									"returnParameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "3894:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3894:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:9:0"
									},
									"scope": 311,
									"src": "3836:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4452:29:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 230,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "4469:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 231,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 225,
														"src": "4473:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4469:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 229,
												"id": 233,
												"nodeType": "Return",
												"src": "4462:12:0"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "3938:442:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "4394:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4406:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4398:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4417:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4409:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4397:22:0"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4443:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4443:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4442:9:0"
									},
									"scope": 311,
									"src": "4385:96:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 259,
										"nodeType": "Block",
										"src": "5070:106:0",
										"statements": [
											{
												"id": 258,
												"nodeType": "UncheckedBlock",
												"src": "5080:90:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 248,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "5112:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 249,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 238,
																		"src": "5117:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5112:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 251,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 242,
																	"src": "5120:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 247,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5104:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5104:29:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 253,
														"nodeType": "ExpressionStatement",
														"src": "5104:29:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 254,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 238,
																"src": "5154:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 255,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "5158:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5154:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 246,
														"id": 257,
														"nodeType": "Return",
														"src": "5147:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4487:453:0",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nameLocation": "4954:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "4975:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4967:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4967:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "4994:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "4986:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4986:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5019:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5005:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 241,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5005:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4957:80:0"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "5061:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:9:0"
									},
									"scope": 311,
									"src": "4945:231:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "5785:105:0",
										"statements": [
											{
												"id": 283,
												"nodeType": "UncheckedBlock",
												"src": "5795:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 273,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 265,
																		"src": "5827:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5831:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5827:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 276,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 267,
																	"src": "5834:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 272,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5819:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5819:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 278,
														"nodeType": "ExpressionStatement",
														"src": "5819:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 279,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 263,
																"src": "5868:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 280,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 265,
																"src": "5872:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5868:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 271,
														"id": 282,
														"nodeType": "Return",
														"src": "5861:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "5182:473:0",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nameLocation": "5669:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "5690:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5682:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "5709:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5701:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5734:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5720:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 266,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5720:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5672:80:0"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "5776:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:0"
									},
									"scope": 311,
									"src": "5660:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 309,
										"nodeType": "Block",
										"src": "6661:105:0",
										"statements": [
											{
												"id": 308,
												"nodeType": "UncheckedBlock",
												"src": "6671:89:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 300,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 298,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 290,
																		"src": "6703:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 299,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6707:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6703:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 301,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 292,
																	"src": "6710:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 297,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6695:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6695:28:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 303,
														"nodeType": "ExpressionStatement",
														"src": "6695:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 304,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 288,
																"src": "6744:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 305,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 290,
																"src": "6748:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6744:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 296,
														"id": 307,
														"nodeType": "Return",
														"src": "6737:12:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "5896:635:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 310,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nameLocation": "6545:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "6566:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6558:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "6585:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6577:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6577:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 292,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6610:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6596:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6596:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6548:80:0"
									},
									"returnParameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "6652:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6651:9:0"
									},
									"scope": 311,
									"src": "6536:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 312,
							"src": "467:6301:0",
							"usedErrors": []
						}
					],
					"src": "92:6677:0"
				},
				"id": 0
			},
			"contracts/Stakable.sol": {
				"ast": {
					"absolutePath": "contracts/Stakable.sol",
					"exportedSymbols": {
						"SafeMath": [
							311
						],
						"Stakable": [
							947
						]
					},
					"id": 948,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 313,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 948,
							"sourceUnit": 312,
							"src": "67:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Stakable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 947,
							"linearizedBaseContracts": [
								947
							],
							"name": "Stakable",
							"nameLocation": "137:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "153:162:1",
										"text": " @notice Constructor since this contract is not ment to be used without inheritance\n push once to stakeholders for it to work proplerly"
									},
									"id": 317,
									"mutability": "mutable",
									"name": "_stakingPenalty",
									"nameLocation": "339:15:1",
									"nodeType": "VariableDeclaration",
									"scope": 947,
									"src": "323:31:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "323:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 331,
										"nodeType": "Block",
										"src": "400:200:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 322,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "486:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
															}
														},
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "486:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage_ptr_$returns$_t_struct$_Stakeholder_$352_storage_$bound_to$_t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct Stakable.Stakeholder storage ref[] storage pointer) returns (struct Stakable.Stakeholder storage ref)"
														}
													},
													"id": 325,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "486:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
														"typeString": "struct Stakable.Stakeholder storage ref"
													}
												},
												"id": 326,
												"nodeType": "ExpressionStatement",
												"src": "486:19:1"
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_stakingPenalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "559:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "stakingPenalty_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "577:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "559:33:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "559:33:1"
											}
										]
									},
									"id": 332,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "stakingPenalty_",
												"nameLocation": "383:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "375:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "375:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "374:25:1"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "400:0:1"
									},
									"scope": 947,
									"src": "363:237:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.Stake",
									"id": 345,
									"members": [
										{
											"constant": false,
											"id": 334,
											"mutability": "mutable",
											"name": "user",
											"nameLocation": "873:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "865:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 333,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "865:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 336,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "896:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "888:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 335,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "888:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 338,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "921:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "913:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 337,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "913:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 340,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "1045:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "1037:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 339,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1037:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 342,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "1073:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "1065:17:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 341,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1065:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 344,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "1101:11:1",
											"nodeType": "VariableDeclaration",
											"scope": 345,
											"src": "1093:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 343,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1093:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "848:5:1",
									"nodeType": "StructDefinition",
									"scope": 947,
									"src": "841:279:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.Stakeholder",
									"id": 352,
									"members": [
										{
											"constant": false,
											"id": 347,
											"mutability": "mutable",
											"name": "user",
											"nameLocation": "1245:4:1",
											"nodeType": "VariableDeclaration",
											"scope": 352,
											"src": "1237:12:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 346,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1237:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 351,
											"mutability": "mutable",
											"name": "address_stakes",
											"nameLocation": "1268:14:1",
											"nodeType": "VariableDeclaration",
											"scope": 352,
											"src": "1260:22:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr",
												"typeString": "struct Stakable.Stake[]"
											},
											"typeName": {
												"baseType": {
													"id": 349,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 348,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 345,
														"src": "1260:5:1"
													},
													"referencedDeclaration": 345,
													"src": "1260:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$345_storage_ptr",
														"typeString": "struct Stakable.Stake"
													}
												},
												"id": 350,
												"nodeType": "ArrayTypeName",
												"src": "1260:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr",
													"typeString": "struct Stakable.Stake[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stakeholder",
									"nameLocation": "1214:11:1",
									"nodeType": "StructDefinition",
									"scope": 947,
									"src": "1207:83:1",
									"visibility": "public"
								},
								{
									"canonicalName": "Stakable.StakingSummary",
									"id": 359,
									"members": [
										{
											"constant": false,
											"id": 354,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "1474:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 359,
											"src": "1466:20:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 353,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1466:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 358,
											"mutability": "mutable",
											"name": "stakes",
											"nameLocation": "1505:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 359,
											"src": "1497:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr",
												"typeString": "struct Stakable.Stake[]"
											},
											"typeName": {
												"baseType": {
													"id": 356,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 355,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 345,
														"src": "1497:5:1"
													},
													"referencedDeclaration": 345,
													"src": "1497:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$345_storage_ptr",
														"typeString": "struct Stakable.Stake"
													}
												},
												"id": 357,
												"nodeType": "ArrayTypeName",
												"src": "1497:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr",
													"typeString": "struct Stakable.Stake[]"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "1440:14:1",
									"nodeType": "StructDefinition",
									"scope": 947,
									"src": "1433:86:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "1527:232:1",
										"text": " @notice\n   This is a array where we store all Stakes that are performed on the Contract\n   The stakes for each address are stored at a certain index, the index can be found using the stakes mapping"
									},
									"id": 364,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "1788:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 947,
									"src": "1765:35:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
										"typeString": "struct Stakable.Stakeholder[]"
									},
									"typeName": {
										"baseType": {
											"id": 362,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 361,
												"name": "Stakeholder",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 352,
												"src": "1765:11:1"
											},
											"referencedDeclaration": 352,
											"src": "1765:11:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stakeholder_$352_storage_ptr",
												"typeString": "struct Stakable.Stakeholder"
											}
										},
										"id": 363,
										"nodeType": "ArrayTypeName",
										"src": "1765:13:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage_ptr",
											"typeString": "struct Stakable.Stakeholder[]"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "1807:114:1",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 369,
									"mutability": "mutable",
									"name": "stakes",
									"nameLocation": "1964:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 947,
									"src": "1927:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 368,
										"keyType": {
											"id": 366,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1935:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1927:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 367,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1946:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "1979:126:1",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 382,
									"name": "Staked",
									"nameLocation": "2117:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "2150:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "2134:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2134:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2173:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "2165:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"indexed": false,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "2198:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "2190:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2190:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2222:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "2214:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2214:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 380,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "2250:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "2242:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2242:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2123:145:1"
									},
									"src": "2111:158:1"
								},
								{
									"anonymous": false,
									"id": 386,
									"name": "PenaltyChanged",
									"nameLocation": "2283:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2306:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 386,
												"src": "2298:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:16:1"
									},
									"src": "2277:37:1"
								},
								{
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "2501:446:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 394,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "2593:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
															}
														},
														"id": 396,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "2593:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage_ptr_$returns$_t_struct$_Stakeholder_$352_storage_$bound_to$_t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct Stakable.Stakeholder storage ref[] storage pointer) returns (struct Stakable.Stakeholder storage ref)"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2593:19:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
														"typeString": "struct Stakable.Stakeholder storage ref"
													}
												},
												"id": 398,
												"nodeType": "ExpressionStatement",
												"src": "2593:19:1"
											},
											{
												"assignments": [
													400
												],
												"declarations": [
													{
														"constant": false,
														"id": 400,
														"mutability": "mutable",
														"name": "userIndex",
														"nameLocation": "2702:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "2694:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 399,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2694:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 405,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 401,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "2714:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
															}
														},
														"id": 402,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2714:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"hexValue": "31",
														"id": 403,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2736:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2714:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2694:43:1"
											},
											{
												"expression": {
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 406,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "2796:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																}
															},
															"id": 408,
															"indexExpression": {
																"id": 407,
																"name": "userIndex",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "2809:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2796:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																"typeString": "struct Stakable.Stakeholder storage ref"
															}
														},
														"id": 409,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "user",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 347,
														"src": "2796:28:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 410,
														"name": "staker",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 389,
														"src": "2827:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2796:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 412,
												"nodeType": "ExpressionStatement",
												"src": "2796:37:1"
											},
											{
												"expression": {
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 413,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "2886:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 415,
														"indexExpression": {
															"id": 414,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 389,
															"src": "2893:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2886:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 416,
														"name": "userIndex",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "2903:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2886:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "2886:26:1"
											},
											{
												"expression": {
													"id": 419,
													"name": "userIndex",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 400,
													"src": "2930:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 393,
												"id": 420,
												"nodeType": "Return",
												"src": "2923:16:1"
											}
										]
									},
									"documentation": {
										"id": 387,
										"nodeType": "StructuredDocumentation",
										"src": "2322:105:1",
										"text": " @notice _addStakeholder takes care of adding a stakeholder to the stakeholders array"
									},
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_addStakeholder",
									"nameLocation": "2442:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "staker",
												"nameLocation": "2466:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "2458:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2457:16:1"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "2492:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2491:9:1"
									},
									"scope": 947,
									"src": "2433:514:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 494,
										"nodeType": "Block",
										"src": "3284:1511:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 433,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 425,
																"src": "3358:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3368:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3358:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a2043616e6e6f74207374616b65206e6f7468696e67",
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3371:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3813df9748c4436a7a2fd166053afb48801152fc793cbb0c0c94a59c88ffd3e0",
																"typeString": "literal_string \"Stakable: Cannot stake nothing\""
															},
															"value": "Stakable: Cannot stake nothing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3813df9748c4436a7a2fd166053afb48801152fc793cbb0c0c94a59c88ffd3e0",
																"typeString": "literal_string \"Stakable: Cannot stake nothing\""
															}
														],
														"id": 432,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3350:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3350:54:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "ExpressionStatement",
												"src": "3350:54:1"
											},
											{
												"assignments": [
													440
												],
												"declarations": [
													{
														"constant": false,
														"id": 440,
														"mutability": "mutable",
														"name": "index",
														"nameLocation": "3587:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 494,
														"src": "3579:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 439,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3579:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 445,
												"initialValue": {
													"baseExpression": {
														"id": 441,
														"name": "stakes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "3595:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 444,
													"indexExpression": {
														"expression": {
															"id": 442,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "3602:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 443,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "3602:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3595:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3579:34:1"
											},
											{
												"assignments": [
													447
												],
												"declarations": [
													{
														"constant": false,
														"id": 447,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "3720:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 494,
														"src": "3712:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 446,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3712:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 450,
												"initialValue": {
													"expression": {
														"id": 448,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "3732:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "3732:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3712:35:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 451,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "3844:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 452,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3853:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3844:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 462,
												"nodeType": "IfStatement",
												"src": "3840:335:1",
												"trueBody": {
													"id": 461,
													"nodeType": "Block",
													"src": "3856:319:1",
													"statements": [
														{
															"expression": {
																"id": 459,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 454,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4128:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 456,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "4152:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "sender",
																			"nodeType": "MemberAccess",
																			"src": "4152:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 455,
																		"name": "_addStakeholder",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 422,
																		"src": "4136:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 458,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4136:27:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4128:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 460,
															"nodeType": "ExpressionStatement",
															"src": "4128:35:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 469,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "4384:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "4384:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 471,
																	"name": "_amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "4413:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 472,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 447,
																	"src": "4439:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "30",
																	"id": 473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4467:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																{
																	"id": 474,
																	"name": "_rewardRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 429,
																	"src": "4487:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 475,
																				"name": "_stakePeriod",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 427,
																				"src": "4518:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"id": 476,
																				"name": "timestamp",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 447,
																				"src": "4533:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4518:24:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 478,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4517:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 468,
																"name": "Stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 345,
																"src": "4360:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_struct$_Stake_$345_storage_ptr_$",
																	"typeString": "type(struct Stakable.Stake storage pointer)"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "structConstructorCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4360:198:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														],
														"expression": {
															"expression": {
																"baseExpression": {
																	"id": 463,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "4306:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																		"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																	}
																},
																"id": 465,
																"indexExpression": {
																	"id": 464,
																	"name": "index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4319:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4306:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref"
																}
															},
															"id": 466,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "address_stakes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 351,
															"src": "4306:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														},
														"id": 467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "4306:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr_$_t_struct$_Stake_$345_storage_$returns$__$bound_to$_t_array$_t_struct$_Stake_$345_storage_$dyn_storage_ptr_$",
															"typeString": "function (struct Stakable.Stake storage ref[] storage pointer,struct Stakable.Stake storage ref)"
														}
													},
													"id": 480,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4306:263:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 481,
												"nodeType": "ExpressionStatement",
												"src": "4306:263:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 483,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4659:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4659:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 485,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "4684:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 486,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "4706:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 487,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "4726:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 488,
																		"name": "_stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 427,
																		"src": "4751:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 489,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 447,
																		"src": "4766:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4751:24:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 491,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4750:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 482,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 382,
														"src": "4638:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256,uint256)"
														}
													},
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4638:149:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 493,
												"nodeType": "EmitStatement",
												"src": "4633:154:1"
											}
										]
									},
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "2955:204:1",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"id": 495,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_stake",
									"nameLocation": "3174:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "3199:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "3191:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "_stakePeriod",
												"nameLocation": "3225:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "3217:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3217:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "_rewardRate",
												"nameLocation": "3256:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "3248:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3248:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3180:94:1"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3284:0:1"
									},
									"scope": 947,
									"src": "3165:1630:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 515,
										"nodeType": "Block",
										"src": "4856:166:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 501,
																"name": "amount_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "4875:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"hexValue": "3330",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4886:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_30_by_1",
																	"typeString": "int_const 30"
																},
																"value": "30"
															},
															"src": "4875:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a2050656e616c7479206665652063616e6e6f742065786365656420352070657263656e742e",
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4890:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_180bea940bb46e16124337966781522c26ac96d86aecd31891d0fc05cc3401e9",
																"typeString": "literal_string \"Stakable: Penalty fee cannot exceed 5 percent.\""
															},
															"value": "Stakable: Penalty fee cannot exceed 5 percent."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_180bea940bb46e16124337966781522c26ac96d86aecd31891d0fc05cc3401e9",
																"typeString": "literal_string \"Stakable: Penalty fee cannot exceed 5 percent.\""
															}
														],
														"id": 500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4867:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4867:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "4867:72:1"
											},
											{
												"expression": {
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 507,
														"name": "_stakingPenalty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "4950:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 508,
														"name": "amount_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "4968:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4950:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "4950:25:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 512,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 497,
															"src": "5006:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 511,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "4991:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 513,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4991:23:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 514,
												"nodeType": "EmitStatement",
												"src": "4986:28:1"
											}
										]
									},
									"id": 516,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_changePenaltyFee",
									"nameLocation": "4812:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "4838:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 516,
												"src": "4830:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4830:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4829:17:1"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4856:0:1"
									},
									"scope": 947,
									"src": "4803:219:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "5080:41:1",
										"statements": [
											{
												"expression": {
													"id": 521,
													"name": "_stakingPenalty",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 317,
													"src": "5098:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 520,
												"id": 522,
												"nodeType": "Return",
												"src": "5091:22:1"
											}
										]
									},
									"functionSelector": "3dc10ad4",
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "penaltyFee",
									"nameLocation": "5039:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5049:2:1"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "5072:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 518,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5072:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5071:9:1"
									},
									"scope": 947,
									"src": "5030:91:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 551,
										"nodeType": "Block",
										"src": "5243:266:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 532,
																"name": "since_",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 526,
																"src": "5262:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5271:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5262:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a204572726f722074696d657374616d702030",
															"id": 535,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5274:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eae138733ca93c0fbd122a38ff85e06b9b628584b782b941f578ba8b2c9830dd",
																"typeString": "literal_string \"Stakable: Error timestamp 0\""
															},
															"value": "Stakable: Error timestamp 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eae138733ca93c0fbd122a38ff85e06b9b628584b782b941f578ba8b2c9830dd",
																"typeString": "literal_string \"Stakable: Error timestamp 0\""
															}
														],
														"id": 531,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5254:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5254:50:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 537,
												"nodeType": "ExpressionStatement",
												"src": "5254:50:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 543,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 540,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "5367:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "5367:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 542,
																			"name": "since_",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 526,
																			"src": "5385:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5367:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 544,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5366:26:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653234",
																"id": 545,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5395:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000000000"
																},
																"value": "1e24"
															},
															"src": "5366:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "333635",
															"id": 547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5418:8:1",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														{
															"hexValue": "5374616b61626c653a204572726f722063616e6e6f74206469766964652074696d657374616d70",
															"id": 548,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5445:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_10b867070097d898ae15cd1bc384e389b4a7d91f05c0759c198c193c7fd91787",
																"typeString": "literal_string \"Stakable: Error cannot divide timestamp\""
															},
															"value": "Stakable: Error cannot divide timestamp"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															{
																"typeIdentifier": "t_stringliteral_10b867070097d898ae15cd1bc384e389b4a7d91f05c0759c198c193c7fd91787",
																"typeString": "literal_string \"Stakable: Error cannot divide timestamp\""
															}
														],
														"expression": {
															"id": 538,
															"name": "SafeMath",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "5335:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																"typeString": "type(library SafeMath)"
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 285,
														"src": "5335:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5335:166:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 530,
												"id": 550,
												"nodeType": "Return",
												"src": "5315:186:1"
											}
										]
									},
									"id": 552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakingDuration",
									"nameLocation": "5138:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "since_",
												"nameLocation": "5171:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "5163:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 525,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5163:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5162:16:1"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "5229:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5229:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:9:1"
									},
									"scope": 947,
									"src": "5129:380:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "5657:244:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 562,
															"name": "_current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "5672:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 563,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 336,
														"src": "5672:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 564,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5697:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5672:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 569,
												"nodeType": "IfStatement",
												"src": "5668:67:1",
												"trueBody": {
													"id": 568,
													"nodeType": "Block",
													"src": "5700:35:1",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5722:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 561,
															"id": 567,
															"nodeType": "Return",
															"src": "5715:8:1"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 570,
																		"name": "_amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "5768:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 571,
																			"name": "_current_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 555,
																			"src": "5795:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 572,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 342,
																		"src": "5795:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5768:51:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 575,
																				"name": "_current_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 555,
																				"src": "5864:14:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																					"typeString": "struct Stakable.Stake memory"
																				}
																			},
																			"id": 576,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 338,
																			"src": "5864:20:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 574,
																		"name": "calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 552,
																		"src": "5839:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5839:46:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5768:117:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 579,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "5767:119:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 580,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5889:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "5767:126:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 561,
												"id": 582,
												"nodeType": "Return",
												"src": "5747:146:1"
											}
										]
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakeReward",
									"nameLocation": "5526:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "_current_stake",
												"nameLocation": "5560:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "5547:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
													"typeString": "struct Stakable.Stake"
												},
												"typeName": {
													"id": 554,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 553,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 345,
														"src": "5547:5:1"
													},
													"referencedDeclaration": 345,
													"src": "5547:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$345_storage_ptr",
														"typeString": "struct Stakable.Stake"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "_amount",
												"nameLocation": "5584:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "5576:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5576:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5546:46:1"
									},
									"returnParameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "5643:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5642:9:1"
									},
									"scope": 947,
									"src": "5517:384:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 607,
										"nodeType": "Block",
										"src": "6022:176:1",
										"statements": [
											{
												"assignments": [
													594
												],
												"declarations": [
													{
														"constant": false,
														"id": 594,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "6055:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 607,
														"src": "6033:29:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
															"typeString": "struct Stakable.StakingSummary"
														},
														"typeName": {
															"id": 593,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 592,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 359,
																"src": "6033:14:1"
															},
															"referencedDeclaration": 359,
															"src": "6033:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$359_storage_ptr",
																"typeString": "struct Stakable.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 604,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6094:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 597,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "6110:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																		"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																	}
																},
																"id": 601,
																"indexExpression": {
																	"baseExpression": {
																		"id": 598,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 369,
																		"src": "6123:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 600,
																	"indexExpression": {
																		"id": 599,
																		"name": "user_",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 586,
																		"src": "6130:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6123:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6110:27:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref"
																}
															},
															"id": 602,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "address_stakes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 351,
															"src": "6110:42:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														],
														"id": 595,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "6065:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$359_storage_ptr_$",
															"typeString": "type(struct Stakable.StakingSummary storage pointer)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6065:98:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6033:130:1"
											},
											{
												"expression": {
													"id": 605,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 594,
													"src": "6183:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"functionReturnParameters": 591,
												"id": 606,
												"nodeType": "Return",
												"src": "6176:14:1"
											}
										]
									},
									"functionSelector": "b09d4b4e",
									"id": 608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "stakeSummary",
									"nameLocation": "5918:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "user_",
												"nameLocation": "5939:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "5931:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5930:15:1"
									},
									"returnParameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 608,
												"src": "5994:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
													"typeString": "struct Stakable.StakingSummary"
												},
												"typeName": {
													"id": 589,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 588,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 359,
														"src": "5994:14:1"
													},
													"referencedDeclaration": 359,
													"src": "5994:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_storage_ptr",
														"typeString": "struct Stakable.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5993:23:1"
									},
									"scope": 947,
									"src": "5909:289:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6348:392:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 610,
														"src": "6363:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 620,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6373:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6363:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 627,
												"nodeType": "IfStatement",
												"src": "6359:57:1",
												"trueBody": {
													"id": 626,
													"nodeType": "Block",
													"src": "6376:40:1",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 622,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6399:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 623,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6402:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 624,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6398:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 618,
															"id": 625,
															"nodeType": "Return",
															"src": "6391:13:1"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"id": 630,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 610,
																	"src": "6481:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 633,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 610,
																			"src": "6519:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 636,
																					"name": "_stakingPenalty",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 317,
																					"src": "6540:15:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"hexValue": "31303030",
																					"id": 637,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6557:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					}
																				],
																				"expression": {
																					"id": 634,
																					"name": "SafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 311,
																					"src": "6527:8:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																						"typeString": "type(library SafeMath)"
																					}
																				},
																				"id": 635,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "div",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 220,
																				"src": "6527:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 638,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6527:35:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 631,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 311,
																			"src": "6506:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 205,
																		"src": "6506:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6506:57:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 628,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "6450:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 190,
																"src": "6450:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6450:128:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 643,
																	"name": "reward",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 612,
																	"src": "6624:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 646,
																			"name": "reward",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 612,
																			"src": "6662:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"arguments": [
																				{
																					"id": 649,
																					"name": "_stakingPenalty",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 317,
																					"src": "6683:15:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"hexValue": "31303030",
																					"id": 650,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "6700:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					}
																				],
																				"expression": {
																					"id": 647,
																					"name": "SafeMath",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 311,
																					"src": "6670:8:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																						"typeString": "type(library SafeMath)"
																					}
																				},
																				"id": 648,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "div",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 220,
																				"src": "6670:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																					"typeString": "function (uint256,uint256) pure returns (uint256)"
																				}
																			},
																			"id": 651,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6670:35:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 644,
																			"name": "SafeMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 311,
																			"src": "6649:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																				"typeString": "type(library SafeMath)"
																			}
																		},
																		"id": 645,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "mul",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 205,
																		"src": "6649:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 652,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6649:57:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 641,
																	"name": "SafeMath",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "6593:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_SafeMath_$311_$",
																		"typeString": "type(library SafeMath)"
																	}
																},
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 190,
																"src": "6593:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6593:128:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 654,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6435:297:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 618,
												"id": 655,
												"nodeType": "Return",
												"src": "6428:304:1"
											}
										]
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateStakingWithPenalty",
									"nameLocation": "6215:27:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6251:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6243:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 609,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6243:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 612,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "6267:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6259:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6259:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6242:32:1"
									},
									"returnParameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6325:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 614,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6325:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6334:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 616,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6334:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6324:18:1"
									},
									"scope": 947,
									"src": "6206:534:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 784,
										"nodeType": "Block",
										"src": "7207:1816:1",
										"statements": [
											{
												"assignments": [
													670
												],
												"declarations": [
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "user_index",
														"nameLocation": "7300:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 784,
														"src": "7292:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 669,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7292:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 675,
												"initialValue": {
													"baseExpression": {
														"id": 671,
														"name": "stakes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "7313:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 674,
													"indexExpression": {
														"expression": {
															"id": 672,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7320:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 673,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7320:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7313:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7292:39:1"
											},
											{
												"assignments": [
													678
												],
												"declarations": [
													{
														"constant": false,
														"id": 678,
														"mutability": "mutable",
														"name": "current_stake",
														"nameLocation": "7355:13:1",
														"nodeType": "VariableDeclaration",
														"scope": 784,
														"src": "7342:26:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 677,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 676,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 345,
																"src": "7342:5:1"
															},
															"referencedDeclaration": 345,
															"src": "7342:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 685,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 679,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "7371:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																}
															},
															"id": 681,
															"indexExpression": {
																"id": 680,
																"name": "user_index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 670,
																"src": "7384:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "7371:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																"typeString": "struct Stakable.Stakeholder storage ref"
															}
														},
														"id": 682,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "address_stakes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 351,
														"src": "7371:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
															"typeString": "struct Stakable.Stake storage ref[] storage ref"
														}
													},
													"id": 684,
													"indexExpression": {
														"id": 683,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 662,
														"src": "7425:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7371:70:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$345_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7342:99:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 687,
																	"name": "current_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 678,
																	"src": "7644:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																		"typeString": "struct Stakable.Stake memory"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 336,
																"src": "7644:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 689,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "7668:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7644:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a2043616e6e6f74207769746864726177206d6f7265207468616e20796f752068617665207374616b6564",
															"id": 691,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7689:53:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ba87cd7e1180e1e202533737ef16f3dd080bebdde501c7b5915b283cf633ca4a",
																"typeString": "literal_string \"Stakable: Cannot withdraw more than you have staked\""
															},
															"value": "Stakable: Cannot withdraw more than you have staked"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ba87cd7e1180e1e202533737ef16f3dd080bebdde501c7b5915b283cf633ca4a",
																"typeString": "literal_string \"Stakable: Cannot withdraw more than you have staked\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7622:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7622:131:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 693,
												"nodeType": "ExpressionStatement",
												"src": "7622:131:1"
											},
											{
												"assignments": [
													695
												],
												"declarations": [
													{
														"constant": false,
														"id": 695,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7850:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 784,
														"src": "7842:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 694,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7842:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 700,
												"initialValue": {
													"arguments": [
														{
															"id": 697,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "7880:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														{
															"id": 698,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "7895:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 696,
														"name": "calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "7859:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$345_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (struct Stakable.Stake memory,uint256) view returns (uint256)"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7842:60:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 701,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "8037:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 702,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 344,
														"src": "8037:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 703,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8065:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8065:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8037:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": " @notice This is penalty given for early withdrawal before the designated time",
												"id": 712,
												"nodeType": "IfStatement",
												"src": "8033:126:1",
												"trueBody": {
													"id": 711,
													"nodeType": "Block",
													"src": "8082:77:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 707,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 660,
																		"src": "8132:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 708,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 695,
																		"src": "8140:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 706,
																	"name": "calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 657,
																	"src": "8104:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 709,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8104:43:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"functionReturnParameters": 668,
															"id": 710,
															"nodeType": "Return",
															"src": "8097:50:1"
														}
													]
												}
											},
											{
												"assignments": [
													714
												],
												"declarations": [
													{
														"constant": false,
														"id": 714,
														"mutability": "mutable",
														"name": "stakeDuration",
														"nameLocation": "8179:13:1",
														"nodeType": "VariableDeclaration",
														"scope": 784,
														"src": "8171:21:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 713,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 720,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 715,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "8195:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 716,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 344,
														"src": "8195:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"id": 717,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "8223:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 718,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "since",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 338,
														"src": "8223:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8195:47:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:71:1"
											},
											{
												"expression": {
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 721,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "8306:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 723,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 336,
														"src": "8306:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 724,
																"name": "current_stake",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 678,
																"src": "8329:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																	"typeString": "struct Stakable.Stake memory"
																}
															},
															"id": 725,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 336,
															"src": "8329:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"id": 726,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "8352:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "8329:29:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8306:52:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 729,
												"nodeType": "ExpressionStatement",
												"src": "8306:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 730,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "8447:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 336,
														"src": "8447:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 732,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8471:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8447:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 778,
													"nodeType": "Block",
													"src": "8560:420:1",
													"statements": [
														{
															"expression": {
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 743,
																					"name": "stakeholders",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 364,
																					"src": "8575:12:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																						"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																					}
																				},
																				"id": 745,
																				"indexExpression": {
																					"id": 744,
																					"name": "user_index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 670,
																					"src": "8588:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8575:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																					"typeString": "struct Stakable.Stakeholder storage ref"
																				}
																			},
																			"id": 746,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "address_stakes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 351,
																			"src": "8575:57:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																				"typeString": "struct Stakable.Stake storage ref[] storage ref"
																			}
																		},
																		"id": 748,
																		"indexExpression": {
																			"id": 747,
																			"name": "index",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 662,
																			"src": "8633:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8575:64:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_storage",
																			"typeString": "struct Stakable.Stake storage ref"
																		}
																	},
																	"id": 749,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 336,
																	"src": "8575:89:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 750,
																		"name": "current_stake",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 678,
																		"src": "8667:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 751,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 336,
																	"src": "8667:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8575:112:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 753,
															"nodeType": "ExpressionStatement",
															"src": "8575:112:1"
														},
														{
															"expression": {
																"id": 763,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 754,
																					"name": "stakeholders",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 364,
																					"src": "8739:12:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																						"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																					}
																				},
																				"id": 756,
																				"indexExpression": {
																					"id": 755,
																					"name": "user_index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 670,
																					"src": "8752:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8739:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																					"typeString": "struct Stakable.Stakeholder storage ref"
																				}
																			},
																			"id": 757,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "address_stakes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 351,
																			"src": "8739:39:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																				"typeString": "struct Stakable.Stake storage ref[] storage ref"
																			}
																		},
																		"id": 759,
																		"indexExpression": {
																			"id": 758,
																			"name": "index",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 662,
																			"src": "8779:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8739:46:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_storage",
																			"typeString": "struct Stakable.Stake storage ref"
																		}
																	},
																	"id": 760,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "since",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 338,
																	"src": "8739:52:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 761,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "8794:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 762,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "8794:33:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8739:88:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 764,
															"nodeType": "ExpressionStatement",
															"src": "8739:88:1"
														},
														{
															"expression": {
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"expression": {
																				"baseExpression": {
																					"id": 765,
																					"name": "stakeholders",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 364,
																					"src": "8842:12:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																						"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																					}
																				},
																				"id": 767,
																				"indexExpression": {
																					"id": 766,
																					"name": "user_index",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 670,
																					"src": "8855:10:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "8842:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																					"typeString": "struct Stakable.Stakeholder storage ref"
																				}
																			},
																			"id": 768,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "address_stakes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 351,
																			"src": "8842:39:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																				"typeString": "struct Stakable.Stake storage ref[] storage ref"
																			}
																		},
																		"id": 770,
																		"indexExpression": {
																			"id": 769,
																			"name": "index",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 662,
																			"src": "8882:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "8842:46:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_storage",
																			"typeString": "struct Stakable.Stake storage ref"
																		}
																	},
																	"id": 771,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "releaseTime",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 344,
																	"src": "8842:58:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 775,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 772,
																			"name": "block",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967292,
																			"src": "8920:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_block",
																				"typeString": "block"
																			}
																		},
																		"id": 773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "timestamp",
																		"nodeType": "MemberAccess",
																		"src": "8920:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 774,
																		"name": "stakeDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "8955:13:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8920:48:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8842:126:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 777,
															"nodeType": "ExpressionStatement",
															"src": "8842:126:1"
														}
													]
												},
												"id": 779,
												"nodeType": "IfStatement",
												"src": "8443:537:1",
												"trueBody": {
													"id": 742,
													"nodeType": "Block",
													"src": "8474:80:1",
													"statements": [
														{
															"expression": {
																"id": 740,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "delete",
																"prefix": true,
																"src": "8489:53:1",
																"subExpression": {
																	"baseExpression": {
																		"expression": {
																			"baseExpression": {
																				"id": 734,
																				"name": "stakeholders",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 364,
																				"src": "8496:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																					"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																				}
																			},
																			"id": 736,
																			"indexExpression": {
																				"id": 735,
																				"name": "user_index",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 670,
																				"src": "8509:10:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "8496:24:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																				"typeString": "struct Stakable.Stakeholder storage ref"
																			}
																		},
																		"id": 737,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "address_stakes",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 351,
																		"src": "8496:39:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																			"typeString": "struct Stakable.Stake storage ref[] storage ref"
																		}
																	},
																	"id": 739,
																	"indexExpression": {
																		"id": 738,
																		"name": "index",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 662,
																		"src": "8536:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "8496:46:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$345_storage",
																		"typeString": "struct Stakable.Stake storage ref"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 741,
															"nodeType": "ExpressionStatement",
															"src": "8489:53:1"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 780,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "9000:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 781,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "9008:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 782,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "8999:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 668,
												"id": 783,
												"nodeType": "Return",
												"src": "8992:23:1"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6748:339:1",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the acount\n Will also calculateStakeReward and reset timer"
									},
									"id": 785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdrawStake",
									"nameLocation": "7102:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7125:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "7117:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7117:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "7141:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "7133:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7133:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7116:31:1"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "7184:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7184:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 785,
												"src": "7193:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7193:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7183:18:1"
									},
									"scope": 947,
									"src": "7093:1930:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 855,
										"nodeType": "Block",
										"src": "9132:1117:1",
										"statements": [
											{
												"assignments": [
													795
												],
												"declarations": [
													{
														"constant": false,
														"id": 795,
														"mutability": "mutable",
														"name": "user_index",
														"nameLocation": "9225:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 855,
														"src": "9217:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 794,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9217:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 800,
												"initialValue": {
													"baseExpression": {
														"id": 796,
														"name": "stakes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 369,
														"src": "9238:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 799,
													"indexExpression": {
														"expression": {
															"id": 797,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "9245:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "9245:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9238:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9217:39:1"
											},
											{
												"assignments": [
													803
												],
												"declarations": [
													{
														"constant": false,
														"id": 803,
														"mutability": "mutable",
														"name": "current_stake",
														"nameLocation": "9280:13:1",
														"nodeType": "VariableDeclaration",
														"scope": 855,
														"src": "9267:26:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
															"typeString": "struct Stakable.Stake"
														},
														"typeName": {
															"id": 802,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 801,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 345,
																"src": "9267:5:1"
															},
															"referencedDeclaration": 345,
															"src": "9267:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_storage_ptr",
																"typeString": "struct Stakable.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 810,
												"initialValue": {
													"baseExpression": {
														"expression": {
															"baseExpression": {
																"id": 804,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "9296:12:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																}
															},
															"id": 806,
															"indexExpression": {
																"id": 805,
																"name": "user_index",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 795,
																"src": "9309:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9296:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																"typeString": "struct Stakable.Stakeholder storage ref"
															}
														},
														"id": 807,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "address_stakes",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 351,
														"src": "9296:39:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
															"typeString": "struct Stakable.Stake storage ref[] storage ref"
														}
													},
													"id": 809,
													"indexExpression": {
														"id": 808,
														"name": "index",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "9350:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9296:70:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$345_storage",
														"typeString": "struct Stakable.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9267:99:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 812,
																	"name": "current_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 803,
																	"src": "9569:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																		"typeString": "struct Stakable.Stake memory"
																	}
																},
																"id": 813,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 336,
																"src": "9569:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 814,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9592:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9569:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a2043616e6e6f742077697468647261772c20796f7520646f6e2774206861766520616e79207374616b6520696e207468697320496e646578",
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9608:67:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ae102850c2f1703c6769eb581fd09838202498e38bcb1417cbb4b7ff28347733",
																"typeString": "literal_string \"Stakable: Cannot withdraw, you don't have any stake in this Index\""
															},
															"value": "Stakable: Cannot withdraw, you don't have any stake in this Index"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ae102850c2f1703c6769eb581fd09838202498e38bcb1417cbb4b7ff28347733",
																"typeString": "literal_string \"Stakable: Cannot withdraw, you don't have any stake in this Index\""
															}
														],
														"id": 811,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9547:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9547:139:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 818,
												"nodeType": "ExpressionStatement",
												"src": "9547:139:1"
											},
											{
												"assignments": [
													820
												],
												"declarations": [
													{
														"constant": false,
														"id": 820,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "9783:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 855,
														"src": "9775:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 819,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9775:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 823,
												"initialValue": {
													"expression": {
														"id": 821,
														"name": "current_stake",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 803,
														"src": "9792:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
															"typeString": "struct Stakable.Stake memory"
														}
													},
													"id": 822,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "amount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 336,
													"src": "9792:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9775:37:1"
											},
											{
												"assignments": [
													825
												],
												"declarations": [
													{
														"constant": false,
														"id": 825,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "9831:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 855,
														"src": "9823:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 824,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9823:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 830,
												"initialValue": {
													"arguments": [
														{
															"id": 827,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 803,
															"src": "9861:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														{
															"id": 828,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 820,
															"src": "9876:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 826,
														"name": "calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "9840:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$345_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (struct Stakable.Stake memory,uint256) view returns (uint256)"
														}
													},
													"id": 829,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9840:43:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9823:60:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 835,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 831,
															"name": "current_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 803,
															"src": "10018:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																"typeString": "struct Stakable.Stake memory"
															}
														},
														"id": 832,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 344,
														"src": "10018:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 833,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "10046:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 834,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "10046:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10018:43:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": " @notice This is penalty given for early withdrawal before the designated time",
												"id": 842,
												"nodeType": "IfStatement",
												"src": "10014:126:1",
												"trueBody": {
													"id": 841,
													"nodeType": "Block",
													"src": "10063:77:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 837,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 820,
																		"src": "10113:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 838,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 825,
																		"src": "10121:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 836,
																	"name": "calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 657,
																	"src": "10085:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10085:43:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"functionReturnParameters": 793,
															"id": 840,
															"nodeType": "Return",
															"src": "10078:50:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "10152:53:1",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 843,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "10159:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																		"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																	}
																},
																"id": 845,
																"indexExpression": {
																	"id": 844,
																	"name": "user_index",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 795,
																	"src": "10172:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10159:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref"
																}
															},
															"id": 846,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "address_stakes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 351,
															"src": "10159:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														},
														"id": 848,
														"indexExpression": {
															"id": 847,
															"name": "index",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "10199:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10159:46:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$345_storage",
															"typeString": "struct Stakable.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "10152:53:1"
											},
											{
												"expression": {
													"components": [
														{
															"id": 851,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 820,
															"src": "10226:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 852,
															"name": "reward",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "10234:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 853,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "10225:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 793,
												"id": 854,
												"nodeType": "Return",
												"src": "10218:23:1"
											}
										]
									},
									"id": 856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdrawAllStake",
									"nameLocation": "9040:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "9066:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "9058:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9058:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9057:15:1"
									},
									"returnParameters": {
										"id": 793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "9109:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9109:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "9118:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 791,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9118:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9108:18:1"
									},
									"scope": 947,
									"src": "9031:1218:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 945,
										"nodeType": "Block",
										"src": "10368:770:1",
										"statements": [
											{
												"assignments": [
													865
												],
												"declarations": [
													{
														"constant": false,
														"id": 865,
														"mutability": "mutable",
														"name": "totalStakeAmount",
														"nameLocation": "10387:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 945,
														"src": "10379:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 864,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10379:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 866,
												"nodeType": "VariableDeclarationStatement",
												"src": "10379:24:1"
											},
											{
												"assignments": [
													869
												],
												"declarations": [
													{
														"constant": false,
														"id": 869,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "10438:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 945,
														"src": "10416:29:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
															"typeString": "struct Stakable.StakingSummary"
														},
														"typeName": {
															"id": 868,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 867,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 359,
																"src": "10416:14:1"
															},
															"referencedDeclaration": 359,
															"src": "10416:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$359_storage_ptr",
																"typeString": "struct Stakable.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 879,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 871,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10477:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 872,
																	"name": "stakeholders",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "10493:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Stakeholder_$352_storage_$dyn_storage",
																		"typeString": "struct Stakable.Stakeholder storage ref[] storage ref"
																	}
																},
																"id": 876,
																"indexExpression": {
																	"baseExpression": {
																		"id": 873,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 369,
																		"src": "10506:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 875,
																	"indexExpression": {
																		"id": 874,
																		"name": "_staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 858,
																		"src": "10513:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10506:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10493:29:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Stakeholder_$352_storage",
																	"typeString": "struct Stakable.Stakeholder storage ref"
																}
															},
															"id": 877,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "address_stakes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 351,
															"src": "10493:44:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_storage_$dyn_storage",
																"typeString": "struct Stakable.Stake storage ref[] storage ref"
															}
														],
														"id": 870,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "10448:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$359_storage_ptr_$",
															"typeString": "type(struct Stakable.StakingSummary storage pointer)"
														}
													},
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10448:100:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10416:132:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"expression": {
																		"id": 881,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "10581:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																			"typeString": "struct Stakable.StakingSummary memory"
																		}
																	},
																	"id": 882,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "stakes",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 358,
																	"src": "10581:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																		"typeString": "struct Stakable.Stake memory[] memory"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "10581:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"hexValue": "30",
																"id": 884,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10606:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10581:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5374616b61626c653a2054686973206164647265737320646f6573206e6f74206861766520616e79207374616b6573",
															"id": 886,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10622:49:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_455cb42bafa94547bd684738447987d7bf5acfcf63aa915627e25c94ff409337",
																"typeString": "literal_string \"Stakable: This address does not have any stakes\""
															},
															"value": "Stakable: This address does not have any stakes"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_455cb42bafa94547bd684738447987d7bf5acfcf63aa915627e25c94ff409337",
																"typeString": "literal_string \"Stakable: This address does not have any stakes\""
															}
														],
														"id": 880,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10559:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10559:123:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 888,
												"nodeType": "ExpressionStatement",
												"src": "10559:123:1"
											},
											{
												"body": {
													"id": 935,
													"nodeType": "Block",
													"src": "10750:304:1",
													"statements": [
														{
															"assignments": [
																903
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 903,
																	"mutability": "mutable",
																	"name": "availableReward",
																	"nameLocation": "10773:15:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 935,
																	"src": "10765:23:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 902,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10765:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 915,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"expression": {
																				"id": 905,
																				"name": "summary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 869,
																				"src": "10830:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																					"typeString": "struct Stakable.StakingSummary memory"
																				}
																			},
																			"id": 906,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "stakes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 358,
																			"src": "10830:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																				"typeString": "struct Stakable.Stake memory[] memory"
																			}
																		},
																		"id": 908,
																		"indexExpression": {
																			"id": 907,
																			"name": "s",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 890,
																			"src": "10845:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10830:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	{
																		"expression": {
																			"baseExpression": {
																				"expression": {
																					"id": 909,
																					"name": "summary",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 869,
																					"src": "10866:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																						"typeString": "struct Stakable.StakingSummary memory"
																					}
																				},
																				"id": 910,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "stakes",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 358,
																				"src": "10866:14:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																					"typeString": "struct Stakable.Stake memory[] memory"
																				}
																			},
																			"id": 912,
																			"indexExpression": {
																				"id": 911,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 890,
																				"src": "10881:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "10866:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 913,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 336,
																		"src": "10866:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 904,
																	"name": "calculateStakeReward",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "10791:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$345_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (struct Stakable.Stake memory,uint256) view returns (uint256)"
																	}
																},
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10791:114:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10765:140:1"
														},
														{
															"expression": {
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"expression": {
																				"id": 916,
																				"name": "summary",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 869,
																				"src": "10920:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																					"typeString": "struct Stakable.StakingSummary memory"
																				}
																			},
																			"id": 919,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "stakes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 358,
																			"src": "10920:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																				"typeString": "struct Stakable.Stake memory[] memory"
																			}
																		},
																		"id": 920,
																		"indexExpression": {
																			"id": 918,
																			"name": "s",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 890,
																			"src": "10935:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "10920:17:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																			"typeString": "struct Stakable.Stake memory"
																		}
																	},
																	"id": 921,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimable",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 340,
																	"src": "10920:27:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 922,
																	"name": "availableReward",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 903,
																	"src": "10950:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10920:45:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 924,
															"nodeType": "ExpressionStatement",
															"src": "10920:45:1"
														},
														{
															"expression": {
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 925,
																	"name": "totalStakeAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 865,
																	"src": "10980:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 926,
																		"name": "totalStakeAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 865,
																		"src": "10999:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"expression": {
																			"baseExpression": {
																				"expression": {
																					"id": 927,
																					"name": "summary",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 869,
																					"src": "11018:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																						"typeString": "struct Stakable.StakingSummary memory"
																					}
																				},
																				"id": 928,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "stakes",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 358,
																				"src": "11018:14:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																					"typeString": "struct Stakable.Stake memory[] memory"
																				}
																			},
																			"id": 930,
																			"indexExpression": {
																				"id": 929,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 890,
																				"src": "11033:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "11018:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$345_memory_ptr",
																				"typeString": "struct Stakable.Stake memory"
																			}
																		},
																		"id": 931,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 336,
																		"src": "11018:24:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10999:43:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10980:62:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 934,
															"nodeType": "ExpressionStatement",
															"src": "10980:62:1"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 893,
														"name": "s",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 890,
														"src": "10715:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"expression": {
																"id": 894,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 869,
																"src": "10719:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																	"typeString": "struct Stakable.StakingSummary memory"
																}
															},
															"id": 895,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stakes",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 358,
															"src": "10719:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_Stake_$345_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct Stakable.Stake memory[] memory"
															}
														},
														"id": 896,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "10719:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10715:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 936,
												"initializationExpression": {
													"assignments": [
														890
													],
													"declarations": [
														{
															"constant": false,
															"id": 890,
															"mutability": "mutable",
															"name": "s",
															"nameLocation": "10708:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 936,
															"src": "10700:9:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 889,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "10700:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 892,
													"initialValue": {
														"hexValue": "30",
														"id": 891,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10712:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10700:13:1"
												},
												"loopExpression": {
													"expression": {
														"id": 900,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"id": 898,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 890,
															"src": "10742:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "+=",
														"rightHandSide": {
															"hexValue": "31",
															"id": 899,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10747:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "10742:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 901,
													"nodeType": "ExpressionStatement",
													"src": "10742:6:1"
												},
												"nodeType": "ForStatement",
												"src": "10695:359:1"
											},
											{
												"expression": {
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 937,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 869,
															"src": "11066:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
																"typeString": "struct Stakable.StakingSummary memory"
															}
														},
														"id": 939,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 354,
														"src": "11066:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 940,
														"name": "totalStakeAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 865,
														"src": "11089:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11066:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "11066:39:1"
											},
											{
												"expression": {
													"id": 943,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 869,
													"src": "11123:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
														"typeString": "struct Stakable.StakingSummary memory"
													}
												},
												"functionReturnParameters": 863,
												"id": 944,
												"nodeType": "Return",
												"src": "11116:14:1"
											}
										]
									},
									"functionSelector": "e73e14bf",
									"id": 946,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "10266:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 858,
												"mutability": "mutable",
												"name": "_staker",
												"nameLocation": "10283:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "10275:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 857,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10275:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10274:17:1"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 946,
												"src": "10340:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$359_memory_ptr",
													"typeString": "struct Stakable.StakingSummary"
												},
												"typeName": {
													"id": 861,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 860,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 359,
														"src": "10340:14:1"
													},
													"referencedDeclaration": 359,
													"src": "10340:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$359_storage_ptr",
														"typeString": "struct Stakable.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10339:23:1"
									},
									"scope": 947,
									"src": "10257:881:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 948,
							"src": "128:11013:1",
							"usedErrors": []
						}
					],
					"src": "40:11103:1"
				},
				"id": 1
			}
		}
	}
}