{
	"id": "1cdf3b97d97d3e9cb04a95dfcc87760d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.11",
	"solcLongVersion": "0.8.11+commit.d7f03943",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Stake-2.0.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @notice Error handling message for Modifier\n */\nerror Function__notAuthorized();\nerror Function__notAVoter();\nerror Function__votingNotAvailable();\n\n/**\n * @notice Error handling message for Staking functions\n */\nerror Staking__cannotStakeNothing();\nerror Staking__userIsStaker();\nerror Staking__penaltyExceed3Percent();\nerror Staking__airdropExceed20Percent();\nerror Staking__noStakingFound();\nerror Staking_noStakingPackageFound();\n\n/**\n * @notice Error handling message for Airdrop functions\n */\nerror Airdrop__claimableOnceAWeek();\n\n/**\n * @notice Error handling message for Voting functions\n */\nerror Voting__votingIsRunning();\nerror Voting__alreadyVoted();\nerror Voting__notYetVoted();\nerror Voting__notEnoughVoters();\n\ncontract Staking is ReentrancyGuard, Ownable {\n    /**\n     * @notice Constructor since this contract is not meant to be used without inheritance\n     * push once to stakeholders for it to work properly\n     */\n\n    struct Voter {\n        bool votingRight;\n        mapping(uint256 => bool) voted;\n    }\n\n    mapping(uint256 => uint256) internal stakingPackage;\n\n    uint256 public stakingPenaltyRate;\n    uint256 public airdropRate;\n    uint256 public airdropSince;\n\n    bool internal _votingStatus;\n    uint256 internal _votingId;\n    uint256 public totalVoters;\n    mapping(address => Voter) public voters;\n    mapping(uint256 => uint256) public votedUsers;\n\n    address public token_address;\n\n    constructor(address token) {\n        //Staking penalty and Airdrop in 0.1 times percentage\n        stakingPenaltyRate = 15;\n        airdropRate = 80;\n\n        token_address = token;\n\n        stakingPackage[90 days] = 6;\n        stakingPackage[180 days] = 7;\n        stakingPackage[365 days] = 8;\n    }\n\n    /**\n     * @notice\n     * A stake struct is used to represent the way we store stakes,\n     * A Stake will contain the users address, the amount staked and a timestamp,\n     * Since which is when the stake was made\n     */\n    struct Stake {\n        uint256 amount;\n        uint256 since;\n        uint256 rewardAPY;\n        uint256 releaseTime;\n        // This claimable field is new and used to tell how big of a reward is currently available\n        uint256 claimable;\n        uint256 claimableAirdrop;\n        uint256 latestClaimDrop;\n    }\n\n    /**\n     * @notice\n     * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n     */\n    struct StakingSummary {\n        uint256 total_amount;\n        uint256 penalty;\n        Stake stake;\n    }\n\n    /**\n     * @notice\n     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n     */\n    mapping(address => Stake) internal stakeholders;\n\n    /**\n     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n     */\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp,\n        uint256 releaseTime\n    );\n\n    event PenaltyChanged(uint256 amount);\n    event AirdropChanged(uint256 amount);\n\n    /* ------------------------------------------ Modifier ------------------------------------------ */\n\n    function _isVoter() internal view {\n        // require(voters[msg.sender].votingRight == true, \"You are not a voter\");\n        if (voters[msg.sender].votingRight == false) {\n            revert Function__notAVoter();\n        }\n    }\n\n    modifier isVoter() {\n        _isVoter();\n        _;\n    }\n\n    function _checkVotingStatus() internal view {\n        // require(_votingStatus, \"Voting is not available\");\n        if (!_votingStatus) {\n            revert Function__votingNotAvailable();\n        }\n    }\n\n    modifier votingStatusTrue() {\n        _checkVotingStatus();\n        _;\n    }\n\n    /* ---------------------------------------------- - --------------------------------------------- */\n\n    /**\n     * @notice\n     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n     * StakeID\n     */\n    function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {\n        // Simple check so that user does not stake 0\n        // require(amount > 0, \"Cannot stake nothing\");\n        // require(stakeholders[user].amount == 0, \"User is a staker\");\n        if (stakeholders[msg.sender].amount != 0) {\n            revert Staking__userIsStaker();\n        }\n\n        if (stakingPackage[stakePeriod] == 0) {\n            revert Staking_noStakingPackageFound();\n        }\n\n        totalVoters += 1;\n        voters[msg.sender].votingRight = true;\n\n        // block.timestamp = timestamp of the current block in seconds since the epoch\n        uint256 timestamp = block.timestamp;\n\n        // Use the index to push a new Stake\n        // push a newly created Stake with the current block timestamp.\n\n        stakeholders[msg.sender] = Stake(\n            amount,\n            timestamp,\n            stakingPackage[stakePeriod],\n            (stakePeriod + timestamp),\n            0,\n            0,\n            0\n        );\n        SafeERC20.safeTransferFrom(IERC20(token_address),msg.sender,address(this),amount);\n        // Emit an event that the stake has occured\n        emit Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp));\n    }\n\n    function changePenaltyFee(uint256 amount) external onlyOwner {\n        // require(amount <= 30, \"Penalty fee cannot exceed 3 percent.\");\n        if (amount > 30) {\n            revert Staking__penaltyExceed3Percent();\n        }\n        stakingPenaltyRate = amount;\n        emit PenaltyChanged(amount);\n    }\n\n    function _calculateStakingDuration(uint256 since)\n        internal\n        view\n        returns (uint256)\n    {\n        // times by 1e24 so theres no missing value\n        return ((block.timestamp - since) * 1e24) / 365 days;\n    }\n\n    function _calculateStakeReward(Stake memory user_stake)\n        internal\n        view\n        returns (uint256)\n    {\n        if (user_stake.amount == 0) {\n            return 0;\n        }\n        // divided by 1e26 because 1e2 for APY and 1e24 from calculate staking duration\n        return\n            (user_stake.amount *\n                user_stake.rewardAPY *\n                _calculateStakingDuration(user_stake.since)) / 1e26;\n    }\n\n    function _calculateStakingWithPenalty(uint256 amount, uint256 reward)\n        internal\n        view\n        returns (uint256, uint256)\n    {\n        if (amount == 0) {\n            return (0, 0);\n        }\n        return (\n            amount - ((amount * stakingPenaltyRate) / 1000),\n            reward - ((reward * stakingPenaltyRate) / 1000)\n        );\n    }\n\n    /**\n     * @notice\n     * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n     * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n     * Will return the amount to MINT onto the account\n     * Will also _calculateStakeReward and reset timer\n     */\n\n    function withdrawStake() external nonReentrant {\n        // TODO: can be simplified\n        // Grab user_index which is the index to use to grab the Stake[]\n        Stake memory user_stake = stakeholders[msg.sender];\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        delete stakeholders[msg.sender];\n        totalVoters -= 1;\n        delete voters[msg.sender].voted[_votingId];\n\n        if (user_stake.releaseTime > block.timestamp) {\n            (\n                uint256 amount_reduced,\n                uint256 reward_reduced\n            ) = _calculateStakingWithPenalty(user_stake.amount, reward);\n\n            SafeERC20.safeTransfer(IERC20(token_address),msg.sender,(amount_reduced + reward_reduced));\n\n        } else {\n            \n            IERC20(token_address).transfer(\n                msg.sender,\n                (user_stake.amount + reward)\n            );\n        }\n    }\n\n    function hasStake() external view returns (StakingSummary memory) {\n        Stake memory user_stake = stakeholders[msg.sender];\n        // require(user_stake.amount > 0, \"No Stake Found\");\n        if (user_stake.amount <= 0) {\n            revert Staking__noStakingFound();\n        }\n        StakingSummary memory summary = StakingSummary(0, 0, user_stake);\n\n        uint256 reward = _calculateStakeReward(user_stake);\n\n        if (summary.stake.releaseTime > block.timestamp) {\n            summary.penalty =\n                ((user_stake.amount * stakingPenaltyRate) / 1000) +\n                ((reward * stakingPenaltyRate) / 1000);\n        }\n\n        if (calculateWeek(user_stake.latestClaimDrop) > 0) {\n            uint256 airdrop = _calculateAirdrop(user_stake.amount);\n            summary.stake.claimableAirdrop = airdrop;\n        } else {\n            summary.stake.claimableAirdrop = 0;\n        }\n\n        summary.stake.claimable = reward;\n        summary.total_amount = user_stake.amount;\n\n        return summary;\n    }\n\n    /* -------------------------------------- Airdrop functions ------------------------------------- */\n\n    function startAirdrop() external onlyOwner {\n        airdropSince = block.timestamp;\n    }\n\n    function changeAirdropPercentage(uint256 amount) external onlyOwner {\n        if (amount > 200) {\n            revert Staking__airdropExceed20Percent();\n        }\n        airdropRate = amount;\n        emit AirdropChanged(amount);\n    }\n\n    function _blockTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function calculateWeek(uint256 timestamp) public view returns (uint256) {\n        return (block.timestamp - timestamp) / 7 days;\n    }\n\n    function _calculateAirdrop(uint256 stakeAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return ((stakeAmount * airdropRate) / 1000) / 52 weeks;\n    }\n\n    function claimAirdrop() external {\n        // TODO: can be simplified if using address\n        Stake storage staker = stakeholders[msg.sender];\n\n        if (staker.amount > 0) {\n            if (calculateWeek(staker.latestClaimDrop) == 0) {\n                revert Airdrop__claimableOnceAWeek();\n            }\n\n            staker.claimableAirdrop = 0;\n            staker.latestClaimDrop = block.timestamp;\n\n            IERC20(token_address).transfer(\n                msg.sender,\n                _calculateAirdrop(staker.amount)\n            );\n        }\n    }\n\n    /* -------------------------------- Voting Functions for DAO Pool ------------------------------- */\n    // ! Replaceable with Governance token\n\n    // function getVoters(address user) external view returns (bool, bool) {\n    //     return (voters[user].votingRight, voters[user].voted[_votingId]);\n    // }\n\n    // // TODO: can be simplified since not connected directly\n    // function startVoting() external nonReentrant onlyOwner {\n    //     if (_votingStatus == true) {\n    //         revert Voting__votingIsRunning();\n    //     }\n\n    //     _votingStatus = true;\n    //     _votingId += 1;\n    // }\n\n    // function vote() public nonReentrant votingStatusTrue isVoter {\n    //     if (voters[msg.sender].voted[_votingId] == true) {\n    //         revert Voting__alreadyVoted();\n    //     }\n\n    //     voters[msg.sender].voted[_votingId] = true;\n    //     votedUsers[_votingId] += 1;\n    // }\n\n    // function retractVote() public nonReentrant votingStatusTrue isVoter {\n    //     if (voters[msg.sender].voted[_votingId] == false) {\n    //         revert Voting__notYetVoted();\n    //     }\n\n    //     voters[msg.sender].voted[_votingId] == false;\n    //     votedUsers[_votingId] -= 1;\n    // }\n\n    // function getVotingResult()\n    //     external\n    //     view\n    //     onlyOwner\n    //     votingStatusTrue\n    //     returns (bool)\n    // {\n    //     if (totalVoters <= 1) {\n    //         revert Voting__notEnoughVoters();\n    //     }\n    //     uint256 half_voters = (totalVoters * 5) / 10;\n\n    //     if (votedUsers[_votingId] > half_voters) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    // function stopVoting() external onlyOwner votingStatusTrue {\n    //     _votingStatus = false;\n    // }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":645:3915  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fa38fa743ec6bdc2800b82f86b695bc341d433c19e8f0d963e29be03b88723c964736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa38fa743ec6bdc2800b82f86b695bc341d433c19e8f0d963e29be03b88723c964736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CODESIZE STATICCALL PUSH21 0x3EC6BDC2800B82F86B695BC341D433C19E8F0D963E 0x29 0xBE SUB 0xB8 DUP8 0x23 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;645:3270:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fa38fa743ec6bdc2800b82f86b695bc341d433c19e8f0d963e29be03b88723c964736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL CODESIZE STATICCALL PUSH21 0x3EC6BDC2800B82F86B695BC341D433C19E8F0D963E 0x29 0xBE SUB 0xB8 DUP8 0x23 0xC9 PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "645:3270:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 645,
									"end": 3915,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fa38fa743ec6bdc2800b82f86b695bc341d433c19e8f0d963e29be03b88723c964736f6c634300080b0033",
									".code": [
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 645,
											"end": 3915,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":194:8255  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207c02349ddc25f6f38480603821492f5ac7a235c8078ce37b2280245b29ef951564736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c02349ddc25f6f38480603821492f5ac7a235c8078ce37b2280245b29ef951564736f6c634300080b0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x2349DDC25F6F38480603821492F5AC7A235C8078CE37B2280245B29EF SWAP6 ISZERO PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8061:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c02349ddc25f6f38480603821492f5ac7a235c8078ce37b2280245b29ef951564736f6c634300080b0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x2349DDC25F6F38480603821492F5AC7A235C8078CE37B2280245B29EF SWAP6 ISZERO PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
							"sourceMap": "194:8061:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 194,
									"end": 8255,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207c02349ddc25f6f38480603821492f5ac7a235c8078ce37b2280245b29ef951564736f6c634300080b0033",
									".code": [
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 194,
											"end": 8255,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Stake-2.0.sol": {
				"Staking": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "Airdrop__claimableOnceAWeek",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__airdropExceed20Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__noStakingFound",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__penaltyExceed3Percent",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking__userIsStaker",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Staking_noStakingPackageFound",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AirdropChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PenaltyChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "releaseTime",
									"type": "uint256"
								}
							],
							"name": "Staked",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "_blockTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "airdropSince",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "calculateWeek",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changeAirdropPercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "changePenaltyFee",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasStake",
							"outputs": [
								{
									"components": [
										{
											"internalType": "uint256",
											"name": "total_amount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "penalty",
											"type": "uint256"
										},
										{
											"components": [
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "since",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "rewardAPY",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "releaseTime",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimable",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "claimableAirdrop",
													"type": "uint256"
												},
												{
													"internalType": "uint256",
													"name": "latestClaimDrop",
													"type": "uint256"
												}
											],
											"internalType": "struct Staking.Stake",
											"name": "stake",
											"type": "tuple"
										}
									],
									"internalType": "struct Staking.StakingSummary",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "stakePeriod",
									"type": "uint256"
								}
							],
							"name": "stake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "stakingPenaltyRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startAirdrop",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "token_address",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalVoters",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "votedUsers",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "voters",
							"outputs": [
								{
									"internalType": "bool",
									"name": "votingRight",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Stake-2.0.sol\":980:12412  contract Staking is ReentrancyGuard, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Stake-2.0.sol\":1680:1981  constructor(address token) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n  0x01\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1813  _status */\n  0x00\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1806:1828  _status = _NOT_ENTERED */\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  tag_9\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:939  _transferOwnership */\n  tag_12\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":921:953  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_9:\n    /* \"contracts/Stake-2.0.sol\":1800:1802  15 */\n  0x0f\n    /* \"contracts/Stake-2.0.sol\":1779:1797  stakingPenaltyRate */\n  0x03\n    /* \"contracts/Stake-2.0.sol\":1779:1802  stakingPenaltyRate = 15 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1826:1828  80 */\n  0x50\n    /* \"contracts/Stake-2.0.sol\":1812:1823  airdropRate */\n  0x04\n    /* \"contracts/Stake-2.0.sol\":1812:1828  airdropRate = 80 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1839:1852  token_address */\n  0x0b\n    /* \"contracts/Stake-2.0.sol\":1839:1860  token_address = token */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  swap1\n  swap3\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1871:1885  stakingPackage */\n  0x02\n    /* \"contracts/Stake-2.0.sol\":1871:1894  stakingPackage[90 days] */\n  0x20\n  mstore\n    /* \"contracts/Stake-2.0.sol\":1897:1898  6 */\n  0x06\n    /* \"contracts/Stake-2.0.sol\":1871:1894  stakingPackage[90 days] */\n  0xa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c\n    /* \"contracts/Stake-2.0.sol\":1871:1898  stakingPackage[90 days] = 6 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1935:1936  7 */\n  0x07\n    /* \"contracts/Stake-2.0.sol\":1908:1932  stakingPackage[180 days] */\n  0x089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832\n    /* \"contracts/Stake-2.0.sol\":1908:1936  stakingPackage[180 days] = 7 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":1961:1969  365 days */\n  0x01e13380\n  0x00\n    /* \"contracts/Stake-2.0.sol\":1946:1970  stakingPackage[365 days] */\n  mstore\n    /* \"contracts/Stake-2.0.sol\":1973:1974  8 */\n  0x08\n    /* \"contracts/Stake-2.0.sol\":1946:1970  stakingPackage[365 days] */\n  0xdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b\n    /* \"contracts/Stake-2.0.sol\":1946:1974  stakingPackage[365 days] = 8 */\n  sstore\n    /* \"contracts/Stake-2.0.sol\":980:12412  contract Staking is ReentrancyGuard, Ownable {... */\n  jump(tag_17)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\ntag_12:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  0x01\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_19\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_19:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_20\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_20:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_17:\n    /* \"contracts/Stake-2.0.sol\":980:12412  contract Staking is ReentrancyGuard, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Stake-2.0.sol\":980:12412  contract Staking is ReentrancyGuard, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa143a5f2\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xc63aa3e7\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xc63aa3e7\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xcb79c2e1\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xd2a569c3\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xd5dbdf1b\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0xa143a5f2\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa3ec138d\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xb5d9df83\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb87da76d\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xbed9d861\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x7b0472f0\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x7b0472f0\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8891cf0d\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8c63f97f\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8c8e8fee\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x10486b6a\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x5b88349d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5f5300ff\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8167:9191  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_3:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n        /* \"#utility.yul\":168:172   */\n      0x00\n        /* \"#utility.yul\":210:213   */\n      0x0120\n        /* \"#utility.yul\":199:208   */\n      dup3\n        /* \"#utility.yul\":195:214   */\n      add\n        /* \"#utility.yul\":187:214   */\n      swap1\n      pop\n        /* \"#utility.yul\":247:253   */\n      dup3\n        /* \"#utility.yul\":241:254   */\n      mload\n        /* \"#utility.yul\":230:239   */\n      dup3\n        /* \"#utility.yul\":223:255   */\n      mstore\n        /* \"#utility.yul\":311:315   */\n      0x20\n        /* \"#utility.yul\":303:309   */\n      dup4\n        /* \"#utility.yul\":299:316   */\n      add\n        /* \"#utility.yul\":293:317   */\n      mload\n        /* \"#utility.yul\":286:290   */\n      0x20\n        /* \"#utility.yul\":275:284   */\n      dup4\n        /* \"#utility.yul\":271:291   */\n      add\n        /* \"#utility.yul\":264:318   */\n      mstore\n        /* \"#utility.yul\":365:369   */\n      0x40\n        /* \"#utility.yul\":357:363   */\n      dup4\n        /* \"#utility.yul\":353:370   */\n      add\n        /* \"#utility.yul\":347:371   */\n      mload\n        /* \"#utility.yul\":415:427   */\n      dup1\n        /* \"#utility.yul\":409:428   */\n      mload\n        /* \"#utility.yul\":402:406   */\n      0x40\n        /* \"#utility.yul\":391:400   */\n      dup5\n        /* \"#utility.yul\":387:407   */\n      add\n        /* \"#utility.yul\":380:429   */\n      mstore\n        /* \"#utility.yul\":489:493   */\n      0x20\n        /* \"#utility.yul\":475:487   */\n      dup2\n        /* \"#utility.yul\":471:494   */\n      add\n        /* \"#utility.yul\":465:495   */\n      mload\n        /* \"#utility.yul\":460:462   */\n      0x60\n        /* \"#utility.yul\":449:458   */\n      dup5\n        /* \"#utility.yul\":445:463   */\n      add\n        /* \"#utility.yul\":438:496   */\n      mstore\n        /* \"#utility.yul\":557:561   */\n      0x40\n        /* \"#utility.yul\":543:555   */\n      dup2\n        /* \"#utility.yul\":539:562   */\n      add\n        /* \"#utility.yul\":533:563   */\n      mload\n        /* \"#utility.yul\":527:530   */\n      0x80\n        /* \"#utility.yul\":516:525   */\n      dup5\n        /* \"#utility.yul\":512:531   */\n      add\n        /* \"#utility.yul\":505:564   */\n      mstore\n        /* \"#utility.yul\":625:627   */\n      0x60\n        /* \"#utility.yul\":611:623   */\n      dup2\n        /* \"#utility.yul\":607:628   */\n      add\n        /* \"#utility.yul\":601:629   */\n      mload\n        /* \"#utility.yul\":595:598   */\n      0xa0\n        /* \"#utility.yul\":584:593   */\n      dup5\n        /* \"#utility.yul\":580:599   */\n      add\n        /* \"#utility.yul\":573:630   */\n      mstore\n        /* \"#utility.yul\":691:694   */\n      0x80\n        /* \"#utility.yul\":677:689   */\n      dup2\n        /* \"#utility.yul\":673:695   */\n      add\n        /* \"#utility.yul\":667:696   */\n      mload\n        /* \"#utility.yul\":661:664   */\n      0xc0\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:665   */\n      add\n        /* \"#utility.yul\":639:697   */\n      mstore\n        /* \"#utility.yul\":758:761   */\n      0xa0\n        /* \"#utility.yul\":744:756   */\n      dup2\n        /* \"#utility.yul\":740:762   */\n      add\n        /* \"#utility.yul\":734:763   */\n      mload\n        /* \"#utility.yul\":728:731   */\n      0xe0\n        /* \"#utility.yul\":717:726   */\n      dup5\n        /* \"#utility.yul\":713:732   */\n      add\n        /* \"#utility.yul\":706:764   */\n      mstore\n        /* \"#utility.yul\":825:828   */\n      0xc0\n        /* \"#utility.yul\":811:823   */\n      dup2\n        /* \"#utility.yul\":807:829   */\n      add\n        /* \"#utility.yul\":801:830   */\n      mload\n        /* \"#utility.yul\":795:798   */\n      0x0100\n        /* \"#utility.yul\":784:793   */\n      dup5\n        /* \"#utility.yul\":780:799   */\n      add\n        /* \"#utility.yul\":773:831   */\n      mstore\n      pop\n        /* \"#utility.yul\":14:837   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"contracts/Stake-2.0.sol\":8167:9191  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Stake-2.0.sol\":10066:10622  function claimAirdrop() external {... */\n    tag_4:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      stop\n        /* \"contracts/Stake-2.0.sol\":1516:1542  uint256 public totalVoters */\n    tag_5:\n      tag_31\n      sload(0x08)\n      dup2\n      jump\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1516:1542  uint256 public totalVoters */\n      tag_27\n        /* \"#utility.yul\":842:1019   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_6:\n      tag_29\n      tag_36\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":4306:5554  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_7:\n      tag_29\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      tag_40\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1385:1411  uint256 public airdropRate */\n    tag_8:\n      tag_31\n      sload(0x04)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":5560:5866  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_9:\n      tag_29\n      tag_45\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_45:\n      tag_47\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1645:1673  address public token_address */\n    tag_10:\n      sload(0x0b)\n      tag_48\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_48:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1626:1658   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1608:1659   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1596:1598   */\n      0x20\n        /* \"#utility.yul\":1581:1599   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1645:1673  address public token_address */\n      tag_27\n        /* \"#utility.yul\":1462:1665   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1036:1121  function owner() public view virtual returns (address) {... */\n      jump(tag_48)\n        /* \"contracts/Stake-2.0.sol\":1593:1638  mapping(uint256 => uint256) public votedUsers */\n    tag_12:\n      tag_31\n      tag_56\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_56:\n      mstore(0x20, 0x0a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":1548:1587  mapping(address => Voter) public voters */\n    tag_13:\n      tag_59\n      tag_60\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_60:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\n    tag_59:\n      mload(0x40)\n        /* \"#utility.yul\":2126:2140   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2119:2141   */\n      iszero\n        /* \"#utility.yul\":2101:2142   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2089:2091   */\n      0x20\n        /* \"#utility.yul\":2074:2092   */\n      add\n        /* \"contracts/Stake-2.0.sol\":1548:1587  mapping(address => Voter) public voters */\n      tag_27\n        /* \"#utility.yul\":1961:2148   */\n      jump\n        /* \"contracts/Stake-2.0.sol\":9741:9875  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_14:\n      tag_31\n      tag_66\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":1417:1444  uint256 public airdropSince */\n    tag_15:\n      tag_31\n      sload(0x05)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":7258:8161  function withdrawStake() external nonReentrant {... */\n    tag_16:\n      tag_29\n      tag_73\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9639:9735  function _blockTimestamp() public view returns (uint256) {... */\n    tag_17:\n        /* \"contracts/Stake-2.0.sol\":9713:9728  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9639:9735  function _blockTimestamp() public view returns (uint256) {... */\n      jump(tag_31)\n        /* \"contracts/Stake-2.0.sol\":1346:1379  uint256 public stakingPenaltyRate */\n    tag_18:\n      tag_31\n      sload(0x03)\n      dup2\n      jump\n        /* \"contracts/Stake-2.0.sol\":9303:9393  function startAirdrop() external onlyOwner {... */\n    tag_19:\n      tag_29\n      tag_81\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9399:9633  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_20:\n      tag_29\n      tag_83\n      calldatasize\n      0x04\n      tag_46\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_21:\n      tag_29\n      tag_86\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":8167:9191  function hasStake() external view returns (StakingSummary memory) {... */\n    tag_26:\n        /* \"contracts/Stake-2.0.sol\":8210:8231  StakingSummary memory */\n      tag_88\n      tag_89\n      jump\t// in\n    tag_88:\n        /* \"contracts/Stake-2.0.sol\":8282:8292  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":8243:8266  Stake memory user_stake */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8269:8293  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8269:8281  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":8269:8293  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":8243:8293  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n      mload\n      0xe0\n      dup2\n      add\n      dup5\n      mstore\n      dup2\n      sload\n      dup1\n      dup3\n      mstore\n      0x01\n      dup4\n      add\n      sload\n      swap4\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x02\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x03\n      dup2\n      add\n      sload\n      0x60\n      dup5\n      add\n      mstore\n      0x04\n      dup2\n      add\n      sload\n      0x80\n      dup5\n      add\n      mstore\n      0x05\n      dup2\n      add\n      sload\n      0xa0\n      dup5\n      add\n      mstore\n      0x06\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8364:8449  if (user_stake.amount <= 0) {... */\n      tag_91\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8413:8438  Staking__noStakingFound() */\n      mload(0x40)\n      shl(0xe0, 0xb018f087)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":8364:8449  if (user_stake.amount <= 0) {... */\n    tag_91:\n        /* \"contracts/Stake-2.0.sol\":8490:8522  StakingSummary(0, 0, user_stake) */\n      0x40\n      dup1\n      mload\n      0x60\n      dup2\n      add\n      dup3\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8458:8487  StakingSummary memory summary */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8490:8522  StakingSummary(0, 0, user_stake) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      swap2\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8550:8583  _calculateStakeReward(user_stake) */\n      tag_92\n        /* \"contracts/Stake-2.0.sol\":8511:8521  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":8550:8571  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":8550:8583  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_92:\n        /* \"contracts/Stake-2.0.sol\":8533:8583  uint256 reward = _calculateStakeReward(user_stake) */\n      swap1\n      pop\n        /* \"contracts/Stake-2.0.sol\":8626:8641  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":8598:8605  summary */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":8598:8611  summary.stake */\n      0x40\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8598:8623  summary.stake.releaseTime */\n      0x60\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8598:8641  summary.stake.releaseTime > block.timestamp */\n      gt\n        /* \"contracts/Stake-2.0.sol\":8594:8808  if (summary.stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8792:8796  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":8770:8788  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":8761:8767  reward */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":8761:8788  reward * stakingPenaltyRate */\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n        /* \"contracts/Stake-2.0.sol\":8760:8796  (reward * stakingPenaltyRate) / 1000 */\n      tag_97\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n        /* \"contracts/Stake-2.0.sol\":8713:8731  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":8693:8710  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stake-2.0.sol\":8735:8739  1000 */\n      0x03e8\n      swap2\n        /* \"contracts/Stake-2.0.sol\":8693:8731  user_stake.amount * stakingPenaltyRate */\n      tag_99\n      swap2\n      tag_96\n      jump\t// in\n    tag_99:\n        /* \"contracts/Stake-2.0.sol\":8692:8739  (user_stake.amount * stakingPenaltyRate) / 1000 */\n      tag_100\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_100:\n        /* \"contracts/Stake-2.0.sol\":8691:8797  ((user_stake.amount * stakingPenaltyRate) / 1000) +... */\n      tag_101\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_101:\n        /* \"contracts/Stake-2.0.sol\":8657:8672  summary.penalty */\n      0x20\n      dup4\n      add\n        /* \"contracts/Stake-2.0.sol\":8657:8797  summary.penalty =... */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8594:8808  if (summary.stake.releaseTime > block.timestamp) {... */\n    tag_94:\n        /* \"contracts/Stake-2.0.sol\":8866:8867  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8822:8863  calculateWeek(user_stake.latestClaimDrop) */\n      tag_103\n        /* \"contracts/Stake-2.0.sol\":8836:8846  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8836:8862  user_stake.latestClaimDrop */\n      0xc0\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8822:8835  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":8822:8863  calculateWeek(user_stake.latestClaimDrop) */\n      jump\t// in\n    tag_103:\n        /* \"contracts/Stake-2.0.sol\":8822:8867  calculateWeek(user_stake.latestClaimDrop) > 0 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":8818:9067  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      iszero\n      tag_104\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":8883:8898  uint256 airdrop */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":8901:8937  _calculateAirdrop(user_stake.amount) */\n      tag_105\n        /* \"contracts/Stake-2.0.sol\":8919:8929  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":8919:8936  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8901:8918  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":8901:8937  _calculateAirdrop(user_stake.amount) */\n      jump\t// in\n    tag_105:\n        /* \"contracts/Stake-2.0.sol\":8951:8964  summary.stake */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":8951:8981  summary.stake.claimableAirdrop */\n      0xa0\n      add\n        /* \"contracts/Stake-2.0.sol\":8951:8991  summary.stake.claimableAirdrop = airdrop */\n      mstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":8818:9067  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n      jump(tag_107)\n    tag_104:\n        /* \"contracts/Stake-2.0.sol\":9022:9035  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9055:9056  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9022:9052  summary.stake.claimableAirdrop */\n      0xa0\n      swap1\n      swap2\n      add\n        /* \"contracts/Stake-2.0.sol\":9022:9056  summary.stake.claimableAirdrop = 0 */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":8818:9067  if (calculateWeek(user_stake.latestClaimDrop) > 0) {... */\n    tag_107:\n        /* \"contracts/Stake-2.0.sol\":9077:9090  summary.stake */\n      0x40\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":9077:9100  summary.stake.claimable */\n      0x80\n      add\n        /* \"contracts/Stake-2.0.sol\":9077:9109  summary.stake.claimable = reward */\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9142:9159  user_stake.amount */\n      swap1\n      mload\n        /* \"contracts/Stake-2.0.sol\":9119:9159  summary.total_amount = user_stake.amount */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9077:9084  summary */\n      swap2\n        /* \"contracts/Stake-2.0.sol\":8167:9191  function hasStake() external view returns (StakingSummary memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":10066:10622  function claimAirdrop() external {... */\n    tag_30:\n        /* \"contracts/Stake-2.0.sol\":10197:10207  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":10161:10181  Stake storage staker */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10184:10208  stakeholders[msg.sender] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":10184:10196  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":10184:10208  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":10223:10236  staker.amount */\n      dup1\n      sload\n        /* \"contracts/Stake-2.0.sol\":10223:10240  staker.amount > 0 */\n      iszero\n        /* \"contracts/Stake-2.0.sol\":10219:10616  if (staker.amount > 0) {... */\n      tag_109\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10260:10297  calculateWeek(staker.latestClaimDrop) */\n      tag_110\n        /* \"contracts/Stake-2.0.sol\":10274:10280  staker */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":10274:10296  staker.latestClaimDrop */\n      0x06\n      add\n      sload\n        /* \"contracts/Stake-2.0.sol\":10260:10273  calculateWeek */\n      tag_67\n        /* \"contracts/Stake-2.0.sol\":10260:10297  calculateWeek(staker.latestClaimDrop) */\n      jump\t// in\n    tag_110:\n        /* \"contracts/Stake-2.0.sol\":10256:10373  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n      tag_111\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":10329:10358  Airdrop__claimableOnceAWeek() */\n      mload(0x40)\n      shl(0xe2, 0x376115b3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":10256:10373  if (calculateWeek(staker.latestClaimDrop) == 0) {... */\n    tag_111:\n        /* \"contracts/Stake-2.0.sol\":10413:10414  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10387:10410  staker.claimableAirdrop */\n      0x05\n      dup3\n      add\n        /* \"contracts/Stake-2.0.sol\":10387:10414  staker.claimableAirdrop = 0 */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":10453:10468  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":10428:10450  staker.latestClaimDrop */\n      0x06\n      dup3\n      add\n        /* \"contracts/Stake-2.0.sol\":10428:10468  staker.latestClaimDrop = block.timestamp */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":10490:10503  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":10577:10590  staker.amount */\n      dup2\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":10490:10503  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10483:10513  IERC20(token_address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10531:10541  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10559:10591  _calculateAirdrop(staker.amount) */\n      tag_112\n      swap1\n        /* \"contracts/Stake-2.0.sol\":10559:10576  _calculateAirdrop */\n      tag_106\n        /* \"contracts/Stake-2.0.sol\":10559:10591  _calculateAirdrop(staker.amount) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/Stake-2.0.sol\":10483:10605  IERC20(token_address).transfer(... */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Stake-2.0.sol\":10483:10605  IERC20(token_address).transfer(... */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3047:3081   */\n      mstore\n        /* \"#utility.yul\":2960:2978   */\n      0x44\n      add\n        /* \"contracts/Stake-2.0.sol\":10483:10605  IERC20(token_address).transfer(... */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_116\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_116:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_117\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_117:\n      pop\n        /* \"contracts/Stake-2.0.sol\":10219:10616  if (staker.amount > 0) {... */\n    tag_109:\n        /* \"contracts/Stake-2.0.sol\":10099:10622  {... */\n      pop\n        /* \"contracts/Stake-2.0.sol\":10066:10622  function claimAirdrop() external {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_124:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      tag_127\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1759:1760  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1750  _transferOwnership */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1732:1762  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1668:1769  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":4306:5554  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3937:3939   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3919:3940   */\n      mstore\n        /* \"#utility.yul\":3976:3978   */\n      0x1f\n        /* \"#utility.yul\":3956:3974   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3949:3979   */\n      mstore\n        /* \"#utility.yul\":4015:4048   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3995:4013   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3988:4049   */\n      mstore\n        /* \"#utility.yul\":4066:4084   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_124\n        /* \"#utility.yul\":3735:4090   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_130:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      swap1\n      dup2\n      sstore\n        /* \"contracts/Stake-2.0.sol\":4589:4599  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4576:4600  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4576:4588  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":4576:4600  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4576:4607  stakeholders[msg.sender].amount */\n      sload\n        /* \"contracts/Stake-2.0.sol\":4576:4612  stakeholders[msg.sender].amount != 0 */\n      iszero\n        /* \"contracts/Stake-2.0.sol\":4572:4669  if (stakeholders[msg.sender].amount != 0) {... */\n      tag_134\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4635:4658  Staking__userIsStaker() */\n      mload(0x40)\n      shl(0xe0, 0x04462d27)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4572:4669  if (stakeholders[msg.sender].amount != 0) {... */\n    tag_134:\n        /* \"contracts/Stake-2.0.sol\":4683:4710  stakingPackage[stakePeriod] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4683:4697  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":4683:4710  stakingPackage[stakePeriod] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":4679:4780  if (stakingPackage[stakePeriod] == 0) {... */\n      tag_135\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":4738:4769  Staking_noStakingPackageFound() */\n      mload(0x40)\n      shl(0xe2, 0x254ddef9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":4679:4780  if (stakingPackage[stakePeriod] == 0) {... */\n    tag_135:\n        /* \"contracts/Stake-2.0.sol\":4805:4806  1 */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4790:4801  totalVoters */\n      0x08\n      0x00\n        /* \"contracts/Stake-2.0.sol\":4790:4806  totalVoters += 1 */\n      dup3\n      dup3\n      sload\n      tag_136\n      swap2\n      swap1\n      tag_102\n      jump\t// in\n    tag_136:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":4823:4833  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":4816:4834  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4816:4822  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":4816:4834  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":4816:4853  voters[msg.sender].votingRight = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/Stake-2.0.sol\":4849:4853  true */\n      0x01\n        /* \"contracts/Stake-2.0.sol\":4816:4853  voters[msg.sender].votingRight = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      dup1\n      mload\n      0xe0\n      dup2\n      add\n      dup3\n      mstore\n      dup6\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4971:4986  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      dup2\n      dup5\n      add\n      dup2\n      swap1\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5204:5231  stakingPackage[stakePeriod] */\n      dup6\n      dup6\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5204:5218  stakingPackage */\n      0x02\n        /* \"contracts/Stake-2.0.sol\":5204:5231  stakingPackage[stakePeriod] */\n      swap1\n      swap4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n      sload\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      swap1\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":4971:4986  block.timestamp */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      0x60\n      dup2\n      add\n        /* \"contracts/Stake-2.0.sol\":5246:5269  stakePeriod + timestamp */\n      tag_137\n        /* \"contracts/Stake-2.0.sol\":4971:4986  block.timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":5219:5230  stakePeriod */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":5246:5269  stakePeriod + timestamp */\n      tag_102\n      jump\t// in\n    tag_137:\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5284:5285  0 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":5142:5325  Stake(... */\n      0x20\n      dup1\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n      0x40\n      dup1\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n      0x60\n      swap4\n      dup5\n      add\n      dup4\n      swap1\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5128:5138  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5115:5139  stakeholders[msg.sender] */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5115:5127  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":5115:5139  stakeholders[msg.sender] */\n      dup4\n      mstore\n      swap3\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":5115:5325  stakeholders[msg.sender] = Stake(... */\n      dup6\n      mload\n      dup2\n      sstore\n      swap2\n      dup6\n      add\n      mload\n      0x01\n      dup4\n      add\n      sstore\n      dup5\n      add\n      mload\n      0x02\n      dup3\n      add\n      sstore\n      swap2\n      dup4\n      add\n      mload\n      0x03\n      dup4\n      add\n      sstore\n      0x80\n      dup4\n      add\n      mload\n      0x04\n      dup4\n      add\n      sstore\n      0xa0\n      dup4\n      add\n      mload\n      0x05\n      dup4\n      add\n      sstore\n      0xc0\n      swap1\n      swap3\n      add\n      mload\n      0x06\n      swap1\n      swap2\n      add\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5369:5382  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":5335:5416  SafeERC20.safeTransferFrom(IERC20(token_address),msg.sender,address(this),amount) */\n      tag_138\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":5369:5382  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":5403:5407  this */\n      address\n        /* \"contracts/Stake-2.0.sol\":5409:5415  amount */\n      dup7\n        /* \"contracts/Stake-2.0.sol\":5335:5361  SafeERC20.safeTransferFrom */\n      tag_139\n        /* \"contracts/Stake-2.0.sol\":5335:5416  SafeERC20.safeTransferFrom(IERC20(token_address),msg.sender,address(this),amount) */\n      jump\t// in\n    tag_138:\n        /* \"contracts/Stake-2.0.sol\":5490:5500  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":5483:5547  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed\n        /* \"contracts/Stake-2.0.sol\":5502:5508  amount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":5510:5519  timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":5522:5545  stakePeriod + timestamp */\n      tag_140\n        /* \"contracts/Stake-2.0.sol\":5510:5519  timestamp */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":5522:5533  stakePeriod */\n      dup8\n        /* \"contracts/Stake-2.0.sol\":5522:5545  stakePeriod + timestamp */\n      tag_102\n      jump\t// in\n    tag_140:\n        /* \"contracts/Stake-2.0.sol\":5483:5547  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      0x40\n      dup1\n      mload\n        /* \"#utility.yul\":4297:4322   */\n      swap4\n      dup5\n      mstore\n        /* \"#utility.yul\":4353:4355   */\n      0x20\n        /* \"#utility.yul\":4338:4356   */\n      dup5\n      add\n        /* \"#utility.yul\":4331:4365   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":4381:4399   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4374:4408   */\n      mstore\n        /* \"#utility.yul\":4285:4287   */\n      0x60\n        /* \"#utility.yul\":4270:4288   */\n      add\n        /* \"contracts/Stake-2.0.sol\":5483:5547  Staked(msg.sender, amount, timestamp, (stakePeriod + timestamp)) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n      pop\n        /* \"contracts/Stake-2.0.sol\":4306:5554  function stake(uint256 amount, uint256 stakePeriod) external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":5560:5866  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n    tag_47:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_146\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_146:\n        /* \"contracts/Stake-2.0.sol\":5718:5720  30 */\n      0x1e\n        /* \"contracts/Stake-2.0.sol\":5709:5715  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":5709:5720  amount > 30 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":5705:5786  if (amount > 30) {... */\n      iszero\n      tag_149\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":5743:5775  Staking__penaltyExceed3Percent() */\n      mload(0x40)\n      shl(0xe0, 0xf1a470d7)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":5705:5786  if (amount > 30) {... */\n    tag_149:\n        /* \"contracts/Stake-2.0.sol\":5795:5813  stakingPenaltyRate */\n      0x03\n        /* \"contracts/Stake-2.0.sol\":5795:5822  stakingPenaltyRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":5837:5859  PenaltyChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":5837:5859  PenaltyChanged(amount) */\n      0xcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9\n      swap1\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":5837:5859  PenaltyChanged(amount) */\n    tag_150:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Stake-2.0.sol\":5560:5866  function changePenaltyFee(uint256 amount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9741:9875  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n    tag_67:\n        /* \"contracts/Stake-2.0.sol\":9804:9811  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":9862:9868  7 days */\n      0x093a80\n        /* \"contracts/Stake-2.0.sol\":9831:9858  block.timestamp - timestamp */\n      tag_153\n        /* \"contracts/Stake-2.0.sol\":9849:9858  timestamp */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":9831:9846  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9831:9858  block.timestamp - timestamp */\n      tag_154\n      jump\t// in\n    tag_153:\n        /* \"contracts/Stake-2.0.sol\":9830:9868  (block.timestamp - timestamp) / 7 days */\n      tag_155\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_155:\n        /* \"contracts/Stake-2.0.sol\":9823:9868  return (block.timestamp - timestamp) / 7 days */\n      swap3\n        /* \"contracts/Stake-2.0.sol\":9741:9875  function calculateWeek(uint256 timestamp) public view returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":7258:8161  function withdrawStake() external nonReentrant {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2332  _status */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2325:2344  _status != _ENTERED */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3937:3939   */\n      0x20\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3919:3940   */\n      mstore\n        /* \"#utility.yul\":3976:3978   */\n      0x1f\n        /* \"#utility.yul\":3956:3974   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3949:3979   */\n      mstore\n        /* \"#utility.yul\":4015:4048   */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"#utility.yul\":3995:4013   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3988:4049   */\n      mstore\n        /* \"#utility.yul\":4066:4084   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n      tag_124\n        /* \"#utility.yul\":3735:4090   */\n      jump\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2317:2380  require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\") */\n    tag_157:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1744:1745  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2462  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2455:2473  _status = _ENTERED */\n      dup2\n      dup2\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7462:7472  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7449:7473  stakeholders[msg.sender] */\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7449:7461  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7449:7473  stakeholders[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7423:7473  Stake memory user_stake = stakeholders[msg.sender] */\n      dup2\n      mload\n      0xe0\n      dup2\n      add\n      dup4\n      mstore\n      dup2\n      sload\n      dup2\n      mstore\n      0x01\n      dup3\n      add\n      sload\n      swap4\n      dup2\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      swap4\n      dup5\n      add\n      sload\n      swap1\n      dup3\n      add\n      mstore\n      0x03\n      dup4\n      add\n      sload\n      0x60\n      dup3\n      add\n      mstore\n      0x04\n      dup4\n      add\n      sload\n      0x80\n      dup3\n      add\n      mstore\n      0x05\n      dup4\n      add\n      sload\n      0xa0\n      dup3\n      add\n      mstore\n      0x06\n      swap1\n      swap3\n      add\n      sload\n      0xc0\n      dup4\n      add\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7500:7533  _calculateStakeReward(user_stake) */\n      tag_160\n        /* \"contracts/Stake-2.0.sol\":7423:7473  Stake memory user_stake = stakeholders[msg.sender] */\n      dup3\n        /* \"contracts/Stake-2.0.sol\":7500:7521  _calculateStakeReward */\n      tag_93\n        /* \"contracts/Stake-2.0.sol\":7500:7533  _calculateStakeReward(user_stake) */\n      jump\t// in\n    tag_160:\n        /* \"contracts/Stake-2.0.sol\":7564:7574  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7551:7575  stakeholders[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7551:7563  stakeholders */\n      0x0c\n        /* \"contracts/Stake-2.0.sol\":7551:7575  stakeholders[msg.sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7544:7575  delete stakeholders[msg.sender] */\n      dup2\n      dup2\n      sstore\n      0x01\n      dup1\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x02\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x03\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x04\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x05\n      dup3\n      add\n      dup4\n      swap1\n      sstore\n      0x06\n      swap1\n      swap2\n      add\n      dup3\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7585:7596  totalVoters */\n      0x08\n        /* \"contracts/Stake-2.0.sol\":7585:7601  totalVoters -= 1 */\n      dup1\n      sload\n        /* \"contracts/Stake-2.0.sol\":7483:7533  uint256 reward = _calculateStakeReward(user_stake) */\n      swap4\n      swap5\n      pop\n        /* \"contracts/Stake-2.0.sol\":7544:7575  delete stakeholders[msg.sender] */\n      swap1\n      swap3\n        /* \"contracts/Stake-2.0.sol\":7585:7596  totalVoters */\n      swap1\n      swap2\n        /* \"contracts/Stake-2.0.sol\":7551:7575  stakeholders[msg.sender] */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7585:7601  totalVoters -= 1 */\n      tag_161\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7544:7575  delete stakeholders[msg.sender] */\n      dup5\n      swap1\n        /* \"contracts/Stake-2.0.sol\":7585:7601  totalVoters -= 1 */\n      tag_154\n      jump\t// in\n    tag_161:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7625:7635  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7618:7636  voters[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7618:7624  voters */\n      0x09\n        /* \"contracts/Stake-2.0.sol\":7618:7636  voters[msg.sender] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7643:7652  _votingId */\n      sload(0x07)\n        /* \"contracts/Stake-2.0.sol\":7618:7653  voters[msg.sender].voted[_votingId] */\n      dup5\n      mstore\n        /* \"contracts/Stake-2.0.sol\":7618:7642  voters[msg.sender].voted */\n      0x01\n      add\n        /* \"contracts/Stake-2.0.sol\":7618:7653  voters[msg.sender].voted[_votingId] */\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n        /* \"contracts/Stake-2.0.sol\":7611:7653  delete voters[msg.sender].voted[_votingId] */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7668:7690  user_stake.releaseTime */\n      0x60\n      dup3\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":7693:7708  block.timestamp */\n      timestamp\n      lt\n        /* \"contracts/Stake-2.0.sol\":7664:8155  if (user_stake.releaseTime > block.timestamp) {... */\n      iszero\n      tag_162\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":7742:7764  uint256 amount_reduced */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":7782:7804  uint256 reward_reduced */\n      dup1\n        /* \"contracts/Stake-2.0.sol\":7821:7876  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      tag_163\n        /* \"contracts/Stake-2.0.sol\":7850:7860  user_stake */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7850:7867  user_stake.amount */\n      0x00\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":7869:7875  reward */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":7821:7849  _calculateStakingWithPenalty */\n      tag_164\n        /* \"contracts/Stake-2.0.sol\":7821:7876  _calculateStakingWithPenalty(user_stake.amount, reward) */\n      jump\t// in\n    tag_163:\n        /* \"contracts/Stake-2.0.sol\":7921:7934  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":7724:7876  (... */\n      swap2\n      swap4\n      pop\n      swap2\n      pop\n        /* \"contracts/Stake-2.0.sol\":7891:7981  SafeERC20.safeTransfer(IERC20(token_address),msg.sender,(amount_reduced + reward_reduced)) */\n      tag_165\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":7921:7934  token_address */\n      and\n        /* \"contracts/Stake-2.0.sol\":7936:7946  msg.sender */\n      caller\n        /* \"contracts/Stake-2.0.sol\":7948:7979  amount_reduced + reward_reduced */\n      tag_166\n        /* \"contracts/Stake-2.0.sol\":7724:7876  (... */\n      dup5\n      dup7\n        /* \"contracts/Stake-2.0.sol\":7948:7979  amount_reduced + reward_reduced */\n      tag_102\n      jump\t// in\n    tag_166:\n        /* \"contracts/Stake-2.0.sol\":7891:7913  SafeERC20.safeTransfer */\n      tag_167\n        /* \"contracts/Stake-2.0.sol\":7891:7981  SafeERC20.safeTransfer(IERC20(token_address),msg.sender,(amount_reduced + reward_reduced)) */\n      jump\t// in\n    tag_165:\n        /* \"contracts/Stake-2.0.sol\":7710:7993  {... */\n      pop\n      pop\n        /* \"contracts/Stake-2.0.sol\":7664:8155  if (user_stake.releaseTime > block.timestamp) {... */\n      jump(tag_168)\n    tag_162:\n        /* \"contracts/Stake-2.0.sol\":8033:8046  token_address */\n      sload(0x0b)\n        /* \"contracts/Stake-2.0.sol\":8103:8120  user_stake.amount */\n      dup3\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Stake-2.0.sol\":8033:8046  token_address */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8026:8056  IERC20(token_address).transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8074:8084  msg.sender */\n      caller\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8103:8129  user_stake.amount + reward */\n      tag_169\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8123:8129  reward */\n      dup6\n      swap1\n        /* \"contracts/Stake-2.0.sol\":8103:8129  user_stake.amount + reward */\n      tag_102\n      jump\t// in\n    tag_169:\n        /* \"contracts/Stake-2.0.sol\":8026:8144  IERC20(token_address).transfer(... */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup6\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      swap1\n      swap3\n      and\n        /* \"contracts/Stake-2.0.sol\":8026:8144  IERC20(token_address).transfer(... */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3047:3081   */\n      mstore\n        /* \"#utility.yul\":2960:2978   */\n      0x44\n      add\n        /* \"contracts/Stake-2.0.sol\":8026:8144  IERC20(token_address).transfer(... */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_172\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_172:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_173\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_173:\n      pop\n        /* \"contracts/Stake-2.0.sol\":7664:8155  if (user_stake.releaseTime > block.timestamp) {... */\n    tag_168:\n      pop\n      pop\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1701:1702  1 */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2635  _status */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2628:2650  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":7258:8161  function withdrawStake() external nonReentrant {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9303:9393  function startAirdrop() external onlyOwner {... */\n    tag_81:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_178\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_178:\n        /* \"contracts/Stake-2.0.sol\":9371:9386  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":9356:9368  airdropSince */\n      0x05\n        /* \"contracts/Stake-2.0.sol\":9356:9386  airdropSince = block.timestamp */\n      sstore\n        /* \"contracts/Stake-2.0.sol\":9303:9393  function startAirdrop() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":9399:9633  function changeAirdropPercentage(uint256 amount) external onlyOwner {... */\n    tag_84:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_184:\n        /* \"contracts/Stake-2.0.sol\":9490:9493  200 */\n      0xc8\n        /* \"contracts/Stake-2.0.sol\":9481:9487  amount */\n      dup2\n        /* \"contracts/Stake-2.0.sol\":9481:9493  amount > 200 */\n      gt\n        /* \"contracts/Stake-2.0.sol\":9477:9560  if (amount > 200) {... */\n      iszero\n      tag_187\n      jumpi\n        /* \"contracts/Stake-2.0.sol\":9516:9549  Staking__airdropExceed20Percent() */\n      mload(0x40)\n      shl(0xe4, 0x0a552cf1)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/Stake-2.0.sol\":9477:9560  if (amount > 200) {... */\n    tag_187:\n        /* \"contracts/Stake-2.0.sol\":9569:9580  airdropRate */\n      0x04\n        /* \"contracts/Stake-2.0.sol\":9569:9589  airdropRate = amount */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/Stake-2.0.sol\":9604:9626  AirdropChanged(amount) */\n      mload(0x40)\n        /* \"#utility.yul\":988:1013   */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/Stake-2.0.sol\":9604:9626  AirdropChanged(amount) */\n      0xcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e\n      swap1\n        /* \"#utility.yul\":976:978   */\n      0x20\n        /* \"#utility.yul\":961:979   */\n      add\n        /* \"contracts/Stake-2.0.sol\":9604:9626  AirdropChanged(amount) */\n      tag_150\n        /* \"#utility.yul\":842:1019   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1918:2116  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1108:1114  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1248:1271  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1240:1308  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_192\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap1\n      tag_125\n      jump\t// in\n    tag_192:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2006:2028  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_195\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4751:4753   */\n      0x20\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4733:4754   */\n      mstore\n        /* \"#utility.yul\":4790:4792   */\n      0x26\n        /* \"#utility.yul\":4770:4788   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4763:4793   */\n      mstore\n        /* \"#utility.yul\":4829:4863   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":4809:4827   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4802:4864   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":4880:4898   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4873:4909   */\n      mstore\n        /* \"#utility.yul\":4926:4945   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_124\n        /* \"#utility.yul\":4549:4951   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1998:2071  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_195:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      tag_109\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2100:2108  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2099  _transferOwnership */\n      tag_128\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2109  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":6109:6546  function _calculateStakeReward(Stake memory user_stake)... */\n    tag_93:\n        /* \"contracts/Stake-2.0.sol\":6239:6256  user_stake.amount */\n      dup1\n      mload\n        /* \"contracts/Stake-2.0.sol\":6212:6219  uint256 */\n      0x00\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6235:6296  if (user_stake.amount == 0) {... */\n      tag_200\n      jumpi\n      pop\n        /* \"contracts/Stake-2.0.sol\":6284:6285  0 */\n      0x00\n      swap2\n        /* \"contracts/Stake-2.0.sol\":6109:6546  function _calculateStakeReward(Stake memory user_stake)... */\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6235:6296  if (user_stake.amount == 0) {... */\n    tag_200:\n        /* \"contracts/Stake-2.0.sol\":6535:6539  1e26 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/Stake-2.0.sol\":6488:6531  _calculateStakingDuration(user_stake.since) */\n      tag_201\n        /* \"contracts/Stake-2.0.sol\":6514:6524  user_stake */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6514:6530  user_stake.since */\n      0x20\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6488:6513  _calculateStakingDuration */\n      tag_202\n        /* \"contracts/Stake-2.0.sol\":6488:6531  _calculateStakingDuration(user_stake.since) */\n      jump\t// in\n    tag_201:\n        /* \"contracts/Stake-2.0.sol\":6449:6469  user_stake.rewardAPY */\n      0x40\n      dup5\n      add\n      mload\n        /* \"contracts/Stake-2.0.sol\":6413:6430  user_stake.amount */\n      dup5\n      mload\n        /* \"contracts/Stake-2.0.sol\":6413:6469  user_stake.amount *... */\n      tag_203\n      swap2\n        /* \"contracts/Stake-2.0.sol\":6449:6469  user_stake.rewardAPY */\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6413:6469  user_stake.amount *... */\n      tag_96\n      jump\t// in\n    tag_203:\n        /* \"contracts/Stake-2.0.sol\":6413:6531  user_stake.amount *... */\n      tag_153\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n        /* \"contracts/Stake-2.0.sol\":9881:10060  function _calculateAirdrop(uint256 stakeAmount)... */\n    tag_106:\n        /* \"contracts/Stake-2.0.sol\":9976:9983  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":10045:10053  52 weeks */\n      0x01dfe200\n        /* \"contracts/Stake-2.0.sol\":10037:10041  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":10022:10033  airdropRate */\n      sload(0x04)\n        /* \"contracts/Stake-2.0.sol\":10008:10019  stakeAmount */\n      dup5\n        /* \"contracts/Stake-2.0.sol\":10008:10033  stakeAmount * airdropRate */\n      tag_207\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_207:\n        /* \"contracts/Stake-2.0.sol\":10007:10041  (stakeAmount * airdropRate) / 1000 */\n      tag_153\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_128:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2378:2395  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2362:2368  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2343:2359  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2410:2450  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2333:2457  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2270:2457  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n    tag_139:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5214:5229   */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":5196:5230   */\n      mstore\n        /* \"#utility.yul\":5266:5281   */\n      dup4\n      and\n        /* \"#utility.yul\":5246:5264   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5239:5282   */\n      mstore\n        /* \"#utility.yul\":5298:5316   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":5291:5325   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_213\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1070:1075  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1100:1127  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":5131:5149   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1077:1145  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_214:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1069  _callOptionalReturn */\n      tag_216\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1050:1146  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_213:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":912:1153  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":6552:6911  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_164:\n        /* \"contracts/Stake-2.0.sol\":6669:6676  uint256 */\n      0x00\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6705:6716  amount == 0 */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6701:6756  if (amount == 0) {... */\n      tag_218\n      jumpi\n      pop\n        /* \"contracts/Stake-2.0.sol\":6740:6741  0 */\n      0x00\n      swap1\n      pop\n      dup1\n        /* \"contracts/Stake-2.0.sol\":6732:6745  return (0, 0) */\n      jump(tag_217)\n        /* \"contracts/Stake-2.0.sol\":6701:6756  if (amount == 0) {... */\n    tag_218:\n        /* \"contracts/Stake-2.0.sol\":6828:6832  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":6806:6824  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":6797:6803  amount */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6797:6824  amount * stakingPenaltyRate */\n      tag_219\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_219:\n        /* \"contracts/Stake-2.0.sol\":6796:6832  (amount * stakingPenaltyRate) / 1000 */\n      tag_220\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_220:\n        /* \"contracts/Stake-2.0.sol\":6786:6833  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_221\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6786:6792  amount */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6786:6833  amount - ((amount * stakingPenaltyRate) / 1000) */\n      tag_154\n      jump\t// in\n    tag_221:\n        /* \"contracts/Stake-2.0.sol\":6889:6893  1000 */\n      0x03e8\n        /* \"contracts/Stake-2.0.sol\":6867:6885  stakingPenaltyRate */\n      sload(0x03)\n        /* \"contracts/Stake-2.0.sol\":6858:6864  reward */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6858:6885  reward * stakingPenaltyRate */\n      tag_222\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_222:\n        /* \"contracts/Stake-2.0.sol\":6857:6893  (reward * stakingPenaltyRate) / 1000 */\n      tag_223\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_223:\n        /* \"contracts/Stake-2.0.sol\":6847:6894  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_224\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6847:6853  reward */\n      dup6\n        /* \"contracts/Stake-2.0.sol\":6847:6894  reward - ((reward * stakingPenaltyRate) / 1000) */\n      tag_154\n      jump\t// in\n    tag_224:\n        /* \"contracts/Stake-2.0.sol\":6765:6904  return (... */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/Stake-2.0.sol\":6552:6911  function _calculateStakingWithPenalty(uint256 amount, uint256 reward)... */\n    tag_217:\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n    tag_167:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3005:3037   */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2987:3038   */\n      mstore\n        /* \"#utility.yul\":3054:3072   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3047:3081   */\n      dup3\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_226\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":833:838  token */\n      dup5\n      swap1\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":863:886  token.transfer.selector */\n      swap1\n        /* \"#utility.yul\":2960:2978   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":840:898  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      tag_214\n        /* \"#utility.yul\":2813:3087   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":813:899  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_226:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":701:906  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Stake-2.0.sol\":5872:6103  function _calculateStakingDuration(uint256 since)... */\n    tag_202:\n        /* \"contracts/Stake-2.0.sol\":5969:5976  uint256 */\n      0x00\n        /* \"contracts/Stake-2.0.sol\":6088:6096  365 days */\n      0x01e13380\n        /* \"contracts/Stake-2.0.sol\":6053:6076  block.timestamp - since */\n      tag_229\n        /* \"contracts/Stake-2.0.sol\":6071:6076  since */\n      dup4\n        /* \"contracts/Stake-2.0.sol\":6053:6068  block.timestamp */\n      timestamp\n        /* \"contracts/Stake-2.0.sol\":6053:6076  block.timestamp - since */\n      tag_154\n      jump\t// in\n    tag_229:\n        /* \"contracts/Stake-2.0.sol\":6052:6084  (block.timestamp - since) * 1e24 */\n      tag_153\n      swap1\n        /* \"contracts/Stake-2.0.sol\":6080:6084  1e24 */\n      0xd3c21bcecceda1000000\n        /* \"contracts/Stake-2.0.sol\":6052:6084  (block.timestamp - since) * 1e24 */\n      tag_96\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3207:3913  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_216:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3649  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_233\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3680:3684  data */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3660:3665  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3679  address(token).functionCall */\n      and\n      tag_234\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3652:3721  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_233:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3752  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3626:3721  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3735:3756  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3731:3907  if (returndata.length > 0) {... */\n      tag_226\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3830:3840  returndata */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3819:3849  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_236\n      swap2\n      swap1\n      tag_118\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_226\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5538:5540   */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5520:5541   */\n      mstore\n        /* \"#utility.yul\":5577:5579   */\n      0x2a\n        /* \"#utility.yul\":5557:5575   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5550:5580   */\n      mstore\n        /* \"#utility.yul\":5616:5650   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":5596:5614   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5589:5651   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":5667:5685   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5660:5700   */\n      mstore\n        /* \"#utility.yul\":5717:5736   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":3811:3896  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_124\n        /* \"#utility.yul\":5336:5742   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_234:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3994:4006  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_241\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4047:4053  target */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4055:4059  data */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4061:4062  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4064:4076  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4046  functionCallWithValue */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4025:4077  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_241:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4018:4077  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3861:4084  function functionCall(... */\n    tag_240:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5113:5125  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5170:5175  value */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5166  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5145:5175  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_244\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5949:5951   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5931:5952   */\n      mstore\n        /* \"#utility.yul\":5988:5990   */\n      0x26\n        /* \"#utility.yul\":5968:5986   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5961:5991   */\n      mstore\n        /* \"#utility.yul\":6027:6061   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":6007:6025   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6000:6062   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":6078:6096   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6071:6107   */\n      mstore\n        /* \"#utility.yul\":6124:6143   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_124\n        /* \"#utility.yul\":5747:6149   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5137:5218  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_244:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":1465:1484  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_249\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6356:6358   */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6338:6359   */\n      mstore\n        /* \"#utility.yul\":6395:6397   */\n      0x1d\n        /* \"#utility.yul\":6375:6393   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6368:6398   */\n      mstore\n        /* \"#utility.yul\":6434:6465   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":6414:6432   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6407:6466   */\n      mstore\n        /* \"#utility.yul\":6483:6501   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n      tag_124\n        /* \"#utility.yul\":6154:6507   */\n      jump\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5228:5288  require(isContract(target), \"Address: call to non-contract\") */\n    tag_249:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5300:5312  bool success */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5314:5337  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5347  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5352  target.call */\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5360:5365  value */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5367:5371  data */\n      dup8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5341:5372  target.call{value: value}(data) */\n      mload(0x40)\n      tag_252\n      swap2\n      swap1\n      tag_253\n      jump\t// in\n    tag_252:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_256\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_255)\n    tag_256:\n      0x60\n      swap2\n      pop\n    tag_255:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5299:5372  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      tag_257\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5406:5413  success */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5415:5425  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5427:5439  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5405  verifyCallResult */\n      tag_258\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5389:5440  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_257:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5382:5440  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4948:5447  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7561:8253  function verifyCallResult(... */\n    tag_258:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7707:7719  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7735:7742  success */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n      iszero\n      tag_261\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7765:7775  returndata */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7758:7775  return returndata */\n      jump(tag_240)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7731:8247  if (success) {... */\n    tag_261:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7893  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7876:7897  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n      tag_263\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8070:8080  returndata */\n      dup3\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8064:8081  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8130:8145  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8117:8127  returndata */\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8113:8115  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8109:8128  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8102:8146  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":7872:8237  if (returndata.length > 0) {... */\n    tag_263:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8209:8221  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":8202:8222  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_124\n      swap2\n      swap1\n      tag_266\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      tag_267\n      mload(0x40)\n      dup1\n      0xe0\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_267:\n      swap1\n      mstore\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":1024:1272   */\n    tag_39:\n        /* \"#utility.yul\":1092:1098   */\n      0x00\n        /* \"#utility.yul\":1100:1106   */\n      dup1\n        /* \"#utility.yul\":1153:1155   */\n      0x40\n        /* \"#utility.yul\":1141:1150   */\n      dup4\n        /* \"#utility.yul\":1132:1139   */\n      dup6\n        /* \"#utility.yul\":1128:1151   */\n      sub\n        /* \"#utility.yul\":1124:1156   */\n      slt\n        /* \"#utility.yul\":1121:1173   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":1169:1170   */\n      0x00\n        /* \"#utility.yul\":1166:1167   */\n      dup1\n        /* \"#utility.yul\":1159:1171   */\n      revert\n        /* \"#utility.yul\":1121:1173   */\n    tag_275:\n      pop\n      pop\n        /* \"#utility.yul\":1192:1215   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":1262:1264   */\n      0x20\n        /* \"#utility.yul\":1247:1265   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1234:1266   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1024:1272   */\n      jump\t// out\n        /* \"#utility.yul\":1277:1457   */\n    tag_46:\n        /* \"#utility.yul\":1336:1342   */\n      0x00\n        /* \"#utility.yul\":1389:1391   */\n      0x20\n        /* \"#utility.yul\":1377:1386   */\n      dup3\n        /* \"#utility.yul\":1368:1375   */\n      dup5\n        /* \"#utility.yul\":1364:1387   */\n      sub\n        /* \"#utility.yul\":1360:1392   */\n      slt\n        /* \"#utility.yul\":1357:1409   */\n      iszero\n      tag_277\n      jumpi\n        /* \"#utility.yul\":1405:1406   */\n      0x00\n        /* \"#utility.yul\":1402:1403   */\n      dup1\n        /* \"#utility.yul\":1395:1407   */\n      revert\n        /* \"#utility.yul\":1357:1409   */\n    tag_277:\n      pop\n        /* \"#utility.yul\":1428:1451   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1277:1457   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1670:1956   */\n    tag_61:\n        /* \"#utility.yul\":1729:1735   */\n      0x00\n        /* \"#utility.yul\":1782:1784   */\n      0x20\n        /* \"#utility.yul\":1770:1779   */\n      dup3\n        /* \"#utility.yul\":1761:1768   */\n      dup5\n        /* \"#utility.yul\":1757:1780   */\n      sub\n        /* \"#utility.yul\":1753:1785   */\n      slt\n        /* \"#utility.yul\":1750:1802   */\n      iszero\n      tag_280\n      jumpi\n        /* \"#utility.yul\":1798:1799   */\n      0x00\n        /* \"#utility.yul\":1795:1796   */\n      dup1\n        /* \"#utility.yul\":1788:1800   */\n      revert\n        /* \"#utility.yul\":1750:1802   */\n    tag_280:\n        /* \"#utility.yul\":1824:1847   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1876:1907   */\n      dup2\n      and\n        /* \"#utility.yul\":1866:1908   */\n      dup2\n      eq\n        /* \"#utility.yul\":1856:1926   */\n      tag_240\n      jumpi\n        /* \"#utility.yul\":1922:1923   */\n      0x00\n        /* \"#utility.yul\":1919:1920   */\n      dup1\n        /* \"#utility.yul\":1912:1924   */\n      revert\n        /* \"#utility.yul\":2153:2280   */\n    tag_269:\n        /* \"#utility.yul\":2214:2224   */\n      0x4e487b71\n        /* \"#utility.yul\":2209:2212   */\n      0xe0\n        /* \"#utility.yul\":2205:2225   */\n      shl\n        /* \"#utility.yul\":2202:2203   */\n      0x00\n        /* \"#utility.yul\":2195:2226   */\n      mstore\n        /* \"#utility.yul\":2245:2249   */\n      0x11\n        /* \"#utility.yul\":2242:2243   */\n      0x04\n        /* \"#utility.yul\":2235:2250   */\n      mstore\n        /* \"#utility.yul\":2269:2273   */\n      0x24\n        /* \"#utility.yul\":2266:2267   */\n      0x00\n        /* \"#utility.yul\":2259:2274   */\n      revert\n        /* \"#utility.yul\":2285:2453   */\n    tag_96:\n        /* \"#utility.yul\":2325:2332   */\n      0x00\n        /* \"#utility.yul\":2391:2392   */\n      dup2\n        /* \"#utility.yul\":2387:2388   */\n      0x00\n        /* \"#utility.yul\":2383:2389   */\n      not\n        /* \"#utility.yul\":2379:2393   */\n      div\n        /* \"#utility.yul\":2376:2377   */\n      dup4\n        /* \"#utility.yul\":2373:2394   */\n      gt\n        /* \"#utility.yul\":2368:2369   */\n      dup3\n        /* \"#utility.yul\":2361:2370   */\n      iszero\n        /* \"#utility.yul\":2354:2371   */\n      iszero\n        /* \"#utility.yul\":2350:2395   */\n      and\n        /* \"#utility.yul\":2347:2418   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":2398:2416   */\n      tag_286\n      tag_269\n      jump\t// in\n    tag_286:\n      pop\n        /* \"#utility.yul\":2438:2447   */\n      mul\n      swap1\n        /* \"#utility.yul\":2285:2453   */\n      jump\t// out\n        /* \"#utility.yul\":2458:2675   */\n    tag_98:\n        /* \"#utility.yul\":2498:2499   */\n      0x00\n        /* \"#utility.yul\":2524:2525   */\n      dup3\n        /* \"#utility.yul\":2514:2646   */\n      tag_288\n      jumpi\n        /* \"#utility.yul\":2568:2578   */\n      0x4e487b71\n        /* \"#utility.yul\":2563:2566   */\n      0xe0\n        /* \"#utility.yul\":2559:2579   */\n      shl\n        /* \"#utility.yul\":2556:2557   */\n      0x00\n        /* \"#utility.yul\":2549:2580   */\n      mstore\n        /* \"#utility.yul\":2603:2607   */\n      0x12\n        /* \"#utility.yul\":2600:2601   */\n      0x04\n        /* \"#utility.yul\":2593:2608   */\n      mstore\n        /* \"#utility.yul\":2631:2635   */\n      0x24\n        /* \"#utility.yul\":2628:2629   */\n      0x00\n        /* \"#utility.yul\":2621:2636   */\n      revert\n        /* \"#utility.yul\":2514:2646   */\n    tag_288:\n      pop\n        /* \"#utility.yul\":2660:2669   */\n      div\n      swap1\n        /* \"#utility.yul\":2458:2675   */\n      jump\t// out\n        /* \"#utility.yul\":2680:2808   */\n    tag_102:\n        /* \"#utility.yul\":2720:2723   */\n      0x00\n        /* \"#utility.yul\":2751:2752   */\n      dup3\n        /* \"#utility.yul\":2747:2753   */\n      not\n        /* \"#utility.yul\":2744:2745   */\n      dup3\n        /* \"#utility.yul\":2741:2754   */\n      gt\n        /* \"#utility.yul\":2738:2777   */\n      iszero\n      tag_291\n      jumpi\n        /* \"#utility.yul\":2757:2775   */\n      tag_291\n      tag_269\n      jump\t// in\n    tag_291:\n      pop\n        /* \"#utility.yul\":2793:2802   */\n      add\n      swap1\n        /* \"#utility.yul\":2680:2808   */\n      jump\t// out\n        /* \"#utility.yul\":3092:3369   */\n    tag_118:\n        /* \"#utility.yul\":3159:3165   */\n      0x00\n        /* \"#utility.yul\":3212:3214   */\n      0x20\n        /* \"#utility.yul\":3200:3209   */\n      dup3\n        /* \"#utility.yul\":3191:3198   */\n      dup5\n        /* \"#utility.yul\":3187:3210   */\n      sub\n        /* \"#utility.yul\":3183:3215   */\n      slt\n        /* \"#utility.yul\":3180:3232   */\n      iszero\n      tag_294\n      jumpi\n        /* \"#utility.yul\":3228:3229   */\n      0x00\n        /* \"#utility.yul\":3225:3226   */\n      dup1\n        /* \"#utility.yul\":3218:3230   */\n      revert\n        /* \"#utility.yul\":3180:3232   */\n    tag_294:\n        /* \"#utility.yul\":3260:3269   */\n      dup2\n        /* \"#utility.yul\":3254:3270   */\n      mload\n        /* \"#utility.yul\":3313:3318   */\n      dup1\n        /* \"#utility.yul\":3306:3319   */\n      iszero\n        /* \"#utility.yul\":3299:3320   */\n      iszero\n        /* \"#utility.yul\":3292:3297   */\n      dup2\n        /* \"#utility.yul\":3289:3321   */\n      eq\n        /* \"#utility.yul\":3279:3339   */\n      tag_240\n      jumpi\n        /* \"#utility.yul\":3335:3336   */\n      0x00\n        /* \"#utility.yul\":3332:3333   */\n      dup1\n        /* \"#utility.yul\":3325:3337   */\n      revert\n        /* \"#utility.yul\":3374:3730   */\n    tag_125:\n        /* \"#utility.yul\":3576:3578   */\n      0x20\n        /* \"#utility.yul\":3558:3579   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3595:3613   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":3588:3618   */\n      mstore\n        /* \"#utility.yul\":3654:3688   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":3649:3651   */\n      0x40\n        /* \"#utility.yul\":3634:3652   */\n      dup3\n      add\n        /* \"#utility.yul\":3627:3689   */\n      mstore\n        /* \"#utility.yul\":3721:3723   */\n      0x60\n        /* \"#utility.yul\":3706:3724   */\n      add\n      swap1\n        /* \"#utility.yul\":3374:3730   */\n      jump\t// out\n        /* \"#utility.yul\":4419:4544   */\n    tag_154:\n        /* \"#utility.yul\":4459:4463   */\n      0x00\n        /* \"#utility.yul\":4487:4488   */\n      dup3\n        /* \"#utility.yul\":4484:4485   */\n      dup3\n        /* \"#utility.yul\":4481:4489   */\n      lt\n        /* \"#utility.yul\":4478:4512   */\n      iszero\n      tag_301\n      jumpi\n        /* \"#utility.yul\":4492:4510   */\n      tag_301\n      tag_269\n      jump\t// in\n    tag_301:\n      pop\n        /* \"#utility.yul\":4529:4538   */\n      sub\n      swap1\n        /* \"#utility.yul\":4419:4544   */\n      jump\t// out\n        /* \"#utility.yul\":6512:6770   */\n    tag_270:\n        /* \"#utility.yul\":6584:6585   */\n      0x00\n        /* \"#utility.yul\":6594:6707   */\n    tag_308:\n        /* \"#utility.yul\":6608:6614   */\n      dup4\n        /* \"#utility.yul\":6605:6606   */\n      dup2\n        /* \"#utility.yul\":6602:6615   */\n      lt\n        /* \"#utility.yul\":6594:6707   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":6684:6695   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":6678:6696   */\n      mload\n        /* \"#utility.yul\":6665:6676   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":6658:6697   */\n      mstore\n        /* \"#utility.yul\":6630:6632   */\n      0x20\n        /* \"#utility.yul\":6623:6633   */\n      add\n        /* \"#utility.yul\":6594:6707   */\n      jump(tag_308)\n    tag_310:\n        /* \"#utility.yul\":6725:6731   */\n      dup4\n        /* \"#utility.yul\":6722:6723   */\n      dup2\n        /* \"#utility.yul\":6719:6732   */\n      gt\n        /* \"#utility.yul\":6716:6764   */\n      iszero\n      tag_213\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":6760:6761   */\n      0x00\n        /* \"#utility.yul\":6742:6758   */\n      swap2\n      add\n        /* \"#utility.yul\":6735:6762   */\n      mstore\n        /* \"#utility.yul\":6512:6770   */\n      jump\t// out\n        /* \"#utility.yul\":6775:7049   */\n    tag_253:\n        /* \"#utility.yul\":6904:6907   */\n      0x00\n        /* \"#utility.yul\":6942:6948   */\n      dup3\n        /* \"#utility.yul\":6936:6949   */\n      mload\n        /* \"#utility.yul\":6958:7011   */\n      tag_313\n        /* \"#utility.yul\":7004:7010   */\n      dup2\n        /* \"#utility.yul\":6999:7002   */\n      dup5\n        /* \"#utility.yul\":6992:6996   */\n      0x20\n        /* \"#utility.yul\":6984:6990   */\n      dup8\n        /* \"#utility.yul\":6980:6997   */\n      add\n        /* \"#utility.yul\":6958:7011   */\n      tag_270\n      jump\t// in\n    tag_313:\n        /* \"#utility.yul\":7027:7043   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":6775:7049   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7054:7437   */\n    tag_266:\n        /* \"#utility.yul\":7203:7205   */\n      0x20\n        /* \"#utility.yul\":7192:7201   */\n      dup2\n        /* \"#utility.yul\":7185:7206   */\n      mstore\n        /* \"#utility.yul\":7166:7170   */\n      0x00\n        /* \"#utility.yul\":7235:7241   */\n      dup3\n        /* \"#utility.yul\":7229:7242   */\n      mload\n        /* \"#utility.yul\":7278:7284   */\n      dup1\n        /* \"#utility.yul\":7273:7275   */\n      0x20\n        /* \"#utility.yul\":7262:7271   */\n      dup5\n        /* \"#utility.yul\":7258:7276   */\n      add\n        /* \"#utility.yul\":7251:7285   */\n      mstore\n        /* \"#utility.yul\":7294:7360   */\n      tag_315\n        /* \"#utility.yul\":7353:7359   */\n      dup2\n        /* \"#utility.yul\":7348:7350   */\n      0x40\n        /* \"#utility.yul\":7337:7346   */\n      dup6\n        /* \"#utility.yul\":7333:7351   */\n      add\n        /* \"#utility.yul\":7328:7330   */\n      0x20\n        /* \"#utility.yul\":7320:7326   */\n      dup8\n        /* \"#utility.yul\":7316:7331   */\n      add\n        /* \"#utility.yul\":7294:7360   */\n      tag_270\n      jump\t// in\n    tag_315:\n        /* \"#utility.yul\":7421:7423   */\n      0x1f\n        /* \"#utility.yul\":7400:7415   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":7396:7425   */\n      and\n        /* \"#utility.yul\":7381:7426   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":7428:7430   */\n      0x40\n        /* \"#utility.yul\":7377:7431   */\n      add\n      swap3\n        /* \"#utility.yul\":7054:7437   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122005591cc2eb4d622ad0c2d73de1686f328ad4a8819e9cc6b319d714c75099946164736f6c634300080b0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_123": {
									"entryPoint": null,
									"id": 123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_23": {
									"entryPoint": null,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_874": {
									"entryPoint": null,
									"id": 874,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 229,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 311,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:306:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:7"
															},
															"nodeType": "YulIf",
															"src": "105:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:7"
															},
															"nodeType": "YulIf",
															"src": "204:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:7",
														"type": ""
													}
												],
												"src": "14:290:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060405161137038038061137083398101604081905261002f91610137565b600160005561003d336100e5565b600f6003556050600455600b80546001600160a01b0319166001600160a01b0392909216919091179055600260205260067fa1ef5b42f18533d67a183a193ea6c3fabfaa3bdabc3fc0e3f65b19b517df6e8c5560077f089cfcbf844e824feee5f634cbc488382291f3c9e0de5905f3c30812390dd832556301e1338060005260087fdc083eb4da7563bbd761324b5158d9d40af7c7174afe39b0b31a7577c44fc33b55610167565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561014957600080fd5b81516001600160a01b038116811461016057600080fd5b9392505050565b6111fa806101766000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a143a5f2116100ad578063c63aa3e711610071578063c63aa3e7146102b1578063cb79c2e1146102b7578063d2a569c3146102c0578063d5dbdf1b146102c8578063f2fde38b146102db57600080fd5b8063a143a5f21461023a578063a3ec138d1461025a578063b5d9df831461028d578063b87da76d146102a0578063bed9d861146102a957600080fd5b80637b0472f0116100f45780637b0472f0146101cf5780638891cf0d146101e25780638c63f97f146101eb5780638c8e8fee146101fe5780638da5cb5b1461022957600080fd5b806310486b6a146101265780635b88349d146101a65780635f5300ff146101b0578063715018a6146101c7575b600080fd5b61012e6102ee565b60405161019d919060006101208201905082518252602083015160208301526040830151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a081015160e084015260c08101516101008401525092915050565b60405180910390f35b6101ae610444565b005b6101b960085481565b60405190815260200161019d565b6101ae610527565b6101ae6101dd366004611008565b610566565b6101b960045481565b6101ae6101f936600461102a565b610754565b600b54610211906001600160a01b031681565b6040516001600160a01b03909116815260200161019d565b6001546001600160a01b0316610211565b6101b961024836600461102a565b600a6020526000908152604090205481565b61027d610268366004611043565b60096020526000908152604090205460ff1681565b604051901515815260200161019d565b6101b961029b36600461102a565b6107dc565b6101b960055481565b6101ae6107fc565b426101b9565b6101b960035481565b6101ae610a1f565b6101ae6102d636600461102a565b610a4f565b6101ae6102e9366004611043565b610ad0565b6102f6610faa565b336000908152600c6020908152604091829020825160e08101845281548082526001830154938201939093526002820154938101939093526003810154606084015260048101546080840152600581015460a08401526006015460c08301526103725760405163b018f08760e01b815260040160405180910390fd5b604080516060810182526000808252602082018190529181018390529061039883610b68565b90504282604001516060015111156103f1576103e8600354826103bb9190611082565b6103c591906110a1565b60035484516103e8916103d791611082565b6103e191906110a1565b6103eb91906110c3565b60208301525b60006104008460c001516107dc565b11156104245760006104158460000151610bad565b604084015160a0015250610432565b6040820151600060a0909101525b60408201516080015290518152919050565b336000908152600c602052604090208054156105245761046781600601546107dc565b6104845760405163376115b360e21b815260040160405180910390fd5b60006005820155426006820155600b5481546001600160a01b039091169063a9059cbb9033906104b390610bad565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052291906110db565b505b50565b6001546001600160a01b0316331461055a5760405162461bcd60e51b8152600401610551906110fd565b60405180910390fd5b6105646000610bcf565b565b600260005414156105b95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026000908155338152600c6020526040902054156105eb576040516304462d2760e01b815260040160405180910390fd5b6000818152600260205260409020546106175760405163254ddef960e21b815260040160405180910390fd5b60016008600082825461062a91906110c3565b9091555050336000908152600960209081526040808320805460ff19166001179055805160e081018252858152428184018190528585526002909352928190205490830152906060810161067e83856110c3565b8152600060208083018290526040808401839052606093840183905233808452600c8352928190208551815591850151600183015584015160028201559183015160038301556080830151600483015560a0830151600583015560c090920151600690910155600b546106fe916001600160a01b03909116903086610c21565b337fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed848361072c81876110c3565b6040805193845260208401929092529082015260600160405180910390a25050600160005550565b6001546001600160a01b0316331461077e5760405162461bcd60e51b8152600401610551906110fd565b601e8111156107a05760405163f1a470d760e01b815260040160405180910390fd5b60038190556040518181527fcfa4f4cf1cd64d13a167a8e75605e0c0c9d6700e903d17c5dc11f593254a04a9906020015b60405180910390a150565b600062093a806107ec8342611132565b6107f691906110a1565b92915050565b6002600054141561084f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610551565b60026000818155338152600c60209081526040808320815160e0810183528154815260018201549381019390935293840154908201526003830154606082015260048301546080820152600583015460a082015260069092015460c08301526108b782610b68565b336000908152600c60205260408120818155600180820183905560028201839055600382018390556004820183905560058201839055600690910182905560088054939450909290919061090c908490611132565b909155505033600090815260096020908152604080832060075484526001019091529020805460ff19169055606082015142101561098157600080610955846000015184610c92565b600b54919350915061097a906001600160a01b03163361097584866110c3565b610cfb565b5050610a16565b600b5482516001600160a01b039091169063a9059cbb9033906109a59085906110c3565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1491906110db565b505b50506001600055565b6001546001600160a01b03163314610a495760405162461bcd60e51b8152600401610551906110fd565b42600555565b6001546001600160a01b03163314610a795760405162461bcd60e51b8152600401610551906110fd565b60c8811115610a9b57604051630a552cf160e41b815260040160405180910390fd5b60048190556040518181527fcc672f1026b958c0cfbfdd89ebe8ddcbc127f16ec24da6c2c7a4de26a8b1857e906020016107d1565b6001546001600160a01b03163314610afa5760405162461bcd60e51b8152600401610551906110fd565b6001600160a01b038116610b5f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610551565b61052481610bcf565b8051600090610b7957506000919050565b6a52b7d2dcc80cd2e4000000610b928360200151610d30565b60408401518451610ba39190611082565b6107ec9190611082565b60006301dfe2006103e860045484610bc59190611082565b6107ec91906110a1565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c8c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610d55565b50505050565b60008083610ca557506000905080610cf4565b6103e860035485610cb69190611082565b610cc091906110a1565b610cca9085611132565b6103e860035485610cdb9190611082565b610ce591906110a1565b610cef9085611132565b915091505b9250929050565b6040516001600160a01b038316602482015260448101829052610d2b90849063a9059cbb60e01b90606401610c55565b505050565b60006301e13380610d418342611132565b6107ec9069d3c21bcecceda1000000611082565b6000610daa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e279092919063ffffffff16565b805190915015610d2b5780806020019051810190610dc891906110db565b610d2b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610551565b6060610e368484600085610e40565b90505b9392505050565b606082471015610ea15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610551565b6001600160a01b0385163b610ef85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610551565b600080866001600160a01b03168587604051610f149190611175565b60006040518083038185875af1925050503d8060008114610f51576040519150601f19603f3d011682016040523d82523d6000602084013e610f56565b606091505b5091509150610f66828286610f71565b979650505050505050565b60608315610f80575081610e39565b825115610f905782518084602001fd5b8160405162461bcd60e51b81526004016105519190611191565b604051806060016040528060008152602001600081526020016110036040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b6000806040838503121561101b57600080fd5b50508035926020909101359150565b60006020828403121561103c57600080fd5b5035919050565b60006020828403121561105557600080fd5b81356001600160a01b0381168114610e3957600080fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561109c5761109c61106c565b500290565b6000826110be57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156110d6576110d661106c565b500190565b6000602082840312156110ed57600080fd5b81518015158114610e3957600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000828210156111445761114461106c565b500390565b60005b8381101561116457818101518382015260200161114c565b83811115610c8c5750506000910152565b60008251611187818460208701611149565b9190910192915050565b60208152600082518060208401526111b0816040850160208701611149565b601f01601f1916919091016040019291505056fea264697066735822122005591cc2eb4d622ad0c2d73de1686f328ad4a8819e9cc6b319d714c75099946164736f6c634300080b0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1370 CODESIZE SUB DUP1 PUSH2 0x1370 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x137 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE PUSH2 0x3D CALLER PUSH2 0xE5 JUMP JUMPDEST PUSH1 0xF PUSH1 0x3 SSTORE PUSH1 0x50 PUSH1 0x4 SSTORE PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x6 PUSH32 0xA1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C SSTORE PUSH1 0x7 PUSH32 0x89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832 SSTORE PUSH4 0x1E13380 PUSH1 0x0 MSTORE PUSH1 0x8 PUSH32 0xDC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B SSTORE PUSH2 0x167 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x149 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x11FA DUP1 PUSH2 0x176 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19D SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH2 0x444 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x527 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x211 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x7FC JUMP JUMPDEST TIMESTAMP PUSH2 0x1B9 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH2 0xAD0 JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0xFAA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB018F087 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x398 DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3F1 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x3D7 SWAP2 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x7DC JUMP JUMPDEST GT ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 PUSH2 0x415 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x524 JUMPI PUSH2 0x467 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0x7DC JUMP JUMPDEST PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH4 0x376115B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x4B3 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x522 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 PUSH1 0x0 PUSH2 0xBCF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4462D27 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0x254DDEF9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x67E DUP4 DUP6 PUSH2 0x10C3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x6FE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP7 PUSH2 0xC21 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x72C DUP2 DUP8 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF1A470D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x7EC DUP4 TIMESTAMP PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x84F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x8B7 DUP3 PUSH2 0xB68 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x90C SWAP1 DUP5 SWAP1 PUSH2 0x1132 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 PUSH2 0x955 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x97A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x975 DUP5 DUP7 PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST POP POP PUSH2 0xA16 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x9A5 SWAP1 DUP6 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA14 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA552CF1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH2 0x524 DUP2 PUSH2 0xBCF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xB79 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xB92 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xBA3 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x7EC SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x7EC SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xC8C SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xD55 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xCA5 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0xCCA SWAP1 DUP6 PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xCDB SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xCE5 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0xCEF SWAP1 DUP6 PUSH2 0x1132 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xD2B SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xC55 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xD41 DUP4 TIMESTAMP PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x7EC SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDAA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE27 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD2B JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDC8 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE36 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xE40 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xEA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xEF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xF14 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xF66 DUP3 DUP3 DUP7 PUSH2 0xF71 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xF80 JUMPI POP DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xF90 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1003 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x101B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x109C JUMPI PUSH2 0x109C PUSH2 0x106C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x10D6 JUMPI PUSH2 0x10D6 PUSH2 0x106C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1144 JUMPI PUSH2 0x1144 PUSH2 0x106C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1164 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x114C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC8C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1187 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1149 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x11B0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1149 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV MSIZE SHR 0xC2 0xEB 0x4D PUSH3 0x2AD0C2 0xD7 RETURNDATASIZE 0xE1 PUSH9 0x6F328AD4A8819E9CC6 0xB3 NOT 0xD7 EQ 0xC7 POP SWAP10 SWAP5 PUSH2 0x6473 PUSH16 0x6C634300080B00330000000000000000 ",
							"sourceMap": "980:11432:6:-:0;;;1680:301;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1701:1:1;1806:7;:22;921:32:0;719:10:5;921:18:0;:32::i;:::-;1800:2:6;1779:18;:23;1826:2;1812:11;:16;1839:13;:21;;-1:-1:-1;;;;;;1839:21:6;-1:-1:-1;;;;;1839:21:6;;;;;;;;;;1871:14;:23;;1897:1;1871:23;:27;1935:1;1908:24;:28;1961:8;-1:-1:-1;1946:24:6;1973:1;1946:24;:28;980:11432;;2270:187:0;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;14:290:7:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:7;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:7:o;:::-;980:11432:6;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_blockTimestamp_1420": {
									"entryPoint": null,
									"id": 1420,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_calculateAirdrop_1454": {
									"entryPoint": 2989,
									"id": 1454,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakeReward_1133": {
									"entryPoint": 2920,
									"id": 1133,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingDuration_1102": {
									"entryPoint": 3376,
									"id": 1102,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_calculateStakingWithPenalty_1174": {
									"entryPoint": 3218,
									"id": 1174,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"@_callOptionalReturn_445": {
									"entryPoint": 3413,
									"id": 445,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_753": {
									"entryPoint": null,
									"id": 753,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_103": {
									"entryPoint": 3023,
									"id": 103,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@airdropRate_819": {
									"entryPoint": null,
									"id": 819,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@airdropSince_821": {
									"entryPoint": null,
									"id": 821,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@calculateWeek_1436": {
									"entryPoint": 2012,
									"id": 1436,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@changeAirdropPercentage_1411": {
									"entryPoint": 2639,
									"id": 1411,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@changePenaltyFee_1083": {
									"entryPoint": 1876,
									"id": 1083,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@claimAirdrop_1508": {
									"entryPoint": 1092,
									"id": 1508,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_605": {
									"entryPoint": 3648,
									"id": 605,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_535": {
									"entryPoint": 3623,
									"id": 535,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@hasStake_1376": {
									"entryPoint": 750,
									"id": 1376,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isContract_464": {
									"entryPoint": null,
									"id": 464,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_60": {
									"entryPoint": 1319,
									"id": 60,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_279": {
									"entryPoint": 3105,
									"id": 279,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@safeTransfer_253": {
									"entryPoint": 3323,
									"id": 253,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@stake_1059": {
									"entryPoint": 1382,
									"id": 1059,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@stakingPenaltyRate_817": {
									"entryPoint": null,
									"id": 817,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@startAirdrop_1387": {
									"entryPoint": 2591,
									"id": 1387,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@token_address_838": {
									"entryPoint": null,
									"id": 838,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@totalVoters_827": {
									"entryPoint": null,
									"id": 827,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_83": {
									"entryPoint": 2768,
									"id": 83,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResult_740": {
									"entryPoint": 3953,
									"id": 740,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@votedUsers_836": {
									"entryPoint": null,
									"id": 836,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@voters_832": {
									"entryPoint": null,
									"id": 832,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawStake_1259": {
									"entryPoint": 2044,
									"id": 1259,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4163,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 4315,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4138,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 4104,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4469,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4497,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4349,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 4257,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 4226,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 4402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory": {
									"entryPoint": 4425,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 4204,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7439:7",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:660:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "187:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "199:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "210:3:7",
																		"type": "",
																		"value": "288"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "195:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "187:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "230:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "247:6:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "241:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "241:13:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:32:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "223:32:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "275:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "286:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "303:6:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "311:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "299:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "299:17:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "293:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "293:24:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "264:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "264:54:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "264:54:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "327:44:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "365:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:17:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "347:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "347:24:7"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "331:12:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "391:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "402:4:7",
																				"type": "",
																				"value": "0x40"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "387:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "387:20:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "memberValue0",
																				"nodeType": "YulIdentifier",
																				"src": "415:12:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "409:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "409:19:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "380:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "380:49:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "380:49:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "449:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "460:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "445:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "445:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "475:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "489:4:7",
																						"type": "",
																						"value": "0x20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "471:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "471:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "465:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "465:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "438:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "438:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "516:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "527:3:7",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "512:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "512:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "543:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "557:4:7",
																						"type": "",
																						"value": "0x40"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "539:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "539:23:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "533:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "533:30:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "505:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "505:59:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "584:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "595:3:7",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "580:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "580:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "611:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "625:2:7",
																						"type": "",
																						"value": "96"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "607:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "607:21:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "601:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "601:28:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "573:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "573:57:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "573:57:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:3:7",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "677:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "691:3:7",
																						"type": "",
																						"value": "128"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "673:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "673:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "667:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "667:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "639:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "639:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "717:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "728:3:7",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "713:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "744:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "758:3:7",
																						"type": "",
																						"value": "160"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "740:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "740:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "734:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "734:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "706:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "706:58:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "784:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "795:3:7",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "780:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "780:19:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memberValue0",
																						"nodeType": "YulIdentifier",
																						"src": "811:12:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "825:3:7",
																						"type": "",
																						"value": "192"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "807:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "807:22:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "801:5:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "801:29:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "773:58:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "773:58:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "146:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "157:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "168:4:7",
														"type": ""
													}
												],
												"src": "14:823:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "943:76:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "953:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "965:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "976:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "961:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "961:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "953:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "995:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1006:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "988:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "988:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "988:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "912:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "923:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "934:4:7",
														"type": ""
													}
												],
												"src": "842:177:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1111:161:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1157:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1166:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1169:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1159:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1159:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1159:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1132:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1141:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1128:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1128:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1153:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1124:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1124:32:7"
															},
															"nodeType": "YulIf",
															"src": "1121:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1182:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1205:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1192:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1192:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1182:6:7"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1224:42:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1251:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1262:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1247:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1247:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1234:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1234:32:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1224:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1069:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1080:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1092:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1100:6:7",
														"type": ""
													}
												],
												"src": "1024:248:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1347:110:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1393:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1402:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1405:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1395:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1395:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1395:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1368:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1377:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1364:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1364:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1389:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1360:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1360:32:7"
															},
															"nodeType": "YulIf",
															"src": "1357:52:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1418:33:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1441:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1428:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1428:23:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1418:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1313:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1324:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1336:6:7",
														"type": ""
													}
												],
												"src": "1277:180:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1563:102:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1573:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1585:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1596:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1581:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1581:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1573:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1615:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1630:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1646:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1651:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1642:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1642:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1655:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1638:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1638:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1626:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1626:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1608:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1608:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1608:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1532:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1543:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1554:4:7",
														"type": ""
													}
												],
												"src": "1462:203:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1740:216:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1786:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1795:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1798:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1788:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1788:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1788:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1761:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1770:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1757:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1757:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1782:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1753:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1753:32:7"
															},
															"nodeType": "YulIf",
															"src": "1750:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1811:36:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1837:9:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1824:12:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1824:23:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1815:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1910:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1919:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1922:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1912:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1912:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1912:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1880:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1895:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1900:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1891:3:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1891:11:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1904:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1887:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1887:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1876:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1876:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1866:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1859:50:7"
															},
															"nodeType": "YulIf",
															"src": "1856:70:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1935:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1945:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1935:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1706:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1717:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1729:6:7",
														"type": ""
													}
												],
												"src": "1670:286:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2056:92:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2066:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2078:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2089:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2074:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2074:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2066:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2108:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2133:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2126:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2126:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2119:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2119:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2101:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2101:41:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2101:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2025:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2036:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2047:4:7",
														"type": ""
													}
												],
												"src": "1961:187:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2185:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2202:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2209:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2214:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2205:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2205:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2195:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2195:31:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2195:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2242:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2245:4:7",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2235:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2235:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2235:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2266:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2259:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2259:15:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2259:15:7"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2153:127:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2337:116:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2396:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2398:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2398:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2398:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2368:1:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2361:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2361:9:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2354:6:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:17:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2376:1:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2387:1:7",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2383:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2383:6:7"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "2391:1:7"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "2379:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2379:14:7"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2373:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2373:21:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2350:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2350:45:7"
															},
															"nodeType": "YulIf",
															"src": "2347:71:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2427:20:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2442:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2445:1:7"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2438:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2438:9:7"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "2427:7:7"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2316:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2319:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "2325:7:7",
														"type": ""
													}
												],
												"src": "2285:168:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2504:171:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2535:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2556:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2563:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2568:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2559:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2559:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2549:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2549:31:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2549:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2600:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2603:4:7",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2593:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2593:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2593:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2628:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2631:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2621:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2621:15:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2621:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2524:1:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2517:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2517:9:7"
															},
															"nodeType": "YulIf",
															"src": "2514:132:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2655:14:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2664:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2667:1:7"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2660:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2660:9:7"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "2655:1:7"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2489:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2492:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "2498:1:7",
														"type": ""
													}
												],
												"src": "2458:217:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2728:80:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2755:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2757:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2757:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2757:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2744:1:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2751:1:7"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2747:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2747:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2741:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2741:13:7"
															},
															"nodeType": "YulIf",
															"src": "2738:39:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2786:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2797:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "2800:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2793:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2793:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2786:3:7"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2711:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2714:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2720:3:7",
														"type": ""
													}
												],
												"src": "2680:128:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2942:145:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2952:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2964:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2975:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2960:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2960:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2952:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2994:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3009:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3025:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3030:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3021:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3021:11:7"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3034:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3017:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3017:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3005:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3005:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2987:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2987:51:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2987:51:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3058:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3069:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3054:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3054:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3074:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3047:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3047:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3047:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2903:9:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2914:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2922:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2933:4:7",
														"type": ""
													}
												],
												"src": "2813:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3170:199:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3216:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3225:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3228:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3218:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3218:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3218:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3191:7:7"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3200:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3187:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3187:23:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3212:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3183:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3183:32:7"
															},
															"nodeType": "YulIf",
															"src": "3180:52:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3241:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3260:9:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3254:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3254:16:7"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3245:5:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3323:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3332:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3335:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3325:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3325:12:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3325:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3292:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3313:5:7"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3306:6:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3306:13:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3299:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3299:21:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3289:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3289:32:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3282:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3282:40:7"
															},
															"nodeType": "YulIf",
															"src": "3279:60:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3348:15:7",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3358:5:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3348:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3136:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3147:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3159:6:7",
														"type": ""
													}
												],
												"src": "3092:277:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:182:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3565:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3576:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3558:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3558:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3558:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3599:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3595:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3595:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3615:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3588:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3588:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3588:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3638:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3649:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3634:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3634:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3654:34:7",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3627:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3627:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3627:62:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3698:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3710:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3721:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3706:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3706:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3698:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3525:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3539:4:7",
														"type": ""
													}
												],
												"src": "3374:356:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3909:181:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3926:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3937:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3919:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3919:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3919:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3960:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3971:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3956:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3956:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3976:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3949:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3949:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3949:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3999:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4010:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3995:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3995:18:7"
																	},
																	{
																		"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4015:33:7",
																		"type": "",
																		"value": "ReentrancyGuard: reentrant call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3988:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3988:61:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3988:61:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4058:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4070:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4081:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4066:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4066:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4058:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3886:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3900:4:7",
														"type": ""
													}
												],
												"src": "3735:355:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4252:162:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4262:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4274:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4285:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4270:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4270:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4262:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4304:9:7"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4315:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4297:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4297:25:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4297:25:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4342:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4353:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4338:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4338:18:7"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4358:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4331:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4331:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4331:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4385:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4396:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4381:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4381:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "4401:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4374:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4374:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4374:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4205:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4216:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4224:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4232:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4243:4:7",
														"type": ""
													}
												],
												"src": "4095:319:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4468:76:7",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4490:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4492:16:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4492:18:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4492:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4484:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4487:1:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4481:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4481:8:7"
															},
															"nodeType": "YulIf",
															"src": "4478:34:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4521:17:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4533:1:7"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4536:1:7"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "4529:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4529:9:7"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "4521:4:7"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4450:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4453:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "4459:4:7",
														"type": ""
													}
												],
												"src": "4419:125:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4723:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4740:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4751:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4733:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4733:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4733:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4774:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4785:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4770:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4770:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4790:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4763:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4763:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4763:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4813:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4824:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4809:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4809:18:7"
																	},
																	{
																		"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4829:34:7",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4802:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4802:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4802:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4884:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4895:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4880:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4880:18:7"
																	},
																	{
																		"hexValue": "646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4900:8:7",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4873:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4873:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4873:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4918:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4930:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4941:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4926:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "4926:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4918:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4700:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4714:4:7",
														"type": ""
													}
												],
												"src": "4549:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5113:218:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5123:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5135:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5146:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5131:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5131:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5123:4:7"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5158:29:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5176:3:7",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5181:1:7",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5172:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5172:11:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5185:1:7",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5168:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5168:19:7"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5162:2:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5203:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5218:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5226:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5214:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5214:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5196:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5196:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5196:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5250:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5261:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5246:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5246:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "5270:6:7"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5278:2:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5266:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5266:15:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5239:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5239:43:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5239:43:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5302:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5313:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5298:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5298:18:7"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5318:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5291:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5291:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5291:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5066:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5077:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5085:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5093:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5104:4:7",
														"type": ""
													}
												],
												"src": "4956:375:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5510:232:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5527:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5538:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5520:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5520:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5520:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5561:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5572:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5557:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5557:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5577:2:7",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5550:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5550:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5550:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5600:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5611:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5596:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5596:18:7"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5616:34:7",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5589:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5589:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5589:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5671:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5682:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5667:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5667:18:7"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5687:12:7",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5660:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:40:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5660:40:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5709:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5721:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5732:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5717:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5717:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5709:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5487:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5501:4:7",
														"type": ""
													}
												],
												"src": "5336:406:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5921:228:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5938:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5949:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5931:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5931:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5931:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5972:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5983:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5968:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5968:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5988:2:7",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5961:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5961:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5961:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6011:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6022:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6007:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6007:18:7"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6027:34:7",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6000:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6000:62:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6000:62:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6082:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6093:2:7",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6078:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6078:18:7"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6098:8:7",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6071:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6071:36:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6071:36:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6116:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6128:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6139:3:7",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6124:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6124:19:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6116:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5898:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5912:4:7",
														"type": ""
													}
												],
												"src": "5747:402:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6328:179:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6345:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6356:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6338:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6338:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6338:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6379:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6390:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6375:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6375:18:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6395:2:7",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6368:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6368:30:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6368:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6418:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6429:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6414:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6414:18:7"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6434:31:7",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6407:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6407:59:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6407:59:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6475:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6487:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6498:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6483:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6483:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6475:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6305:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6319:4:7",
														"type": ""
													}
												],
												"src": "6154:353:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6565:205:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6575:10:7",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6584:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "6579:1:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6644:63:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6669:3:7"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6674:1:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6665:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6665:11:7"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "6688:3:7"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6693:1:7"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6684:3:7"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6684:11:7"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "6678:5:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6678:18:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6658:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6658:39:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6658:39:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6605:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6608:6:7"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6602:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6602:13:7"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "6616:19:7",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6618:15:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "6627:1:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6630:2:7",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6623:3:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6623:10:7"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "6618:1:7"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "6598:3:7",
																"statements": []
															},
															"src": "6594:113:7"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6733:31:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "6746:3:7"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "6751:6:7"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6742:3:7"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6742:16:7"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6760:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6735:6:7"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6735:27:7"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6735:27:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "6722:1:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6725:6:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6719:2:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6719:13:7"
															},
															"nodeType": "YulIf",
															"src": "6716:48:7"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "6543:3:7",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "6548:3:7",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6553:6:7",
														"type": ""
													}
												],
												"src": "6512:258:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6912:137:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6922:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6942:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6936:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6936:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6926:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6984:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6992:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6980:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6980:17:7"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6999:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7004:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "6958:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "6958:53:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6958:53:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7020:23:7",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7031:3:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7036:6:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7027:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7027:16:7"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7020:3:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6888:3:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6893:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6904:3:7",
														"type": ""
													}
												],
												"src": "6775:274:7"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7175:262:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7192:9:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7203:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7185:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7185:21:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7185:21:7"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7215:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7235:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7229:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7229:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7219:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7262:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7273:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7258:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7258:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7278:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7251:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7251:34:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7251:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7320:6:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7328:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7316:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7316:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7337:9:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7348:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7333:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7333:18:7"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7353:6:7"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "7294:21:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7294:66:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7294:66:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7369:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7385:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "7404:6:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7412:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "7400:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7400:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7421:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "7417:3:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7417:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7396:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7396:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7381:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7381:45:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7428:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7377:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "7377:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7369:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7144:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7155:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7166:4:7",
														"type": ""
													}
												],
												"src": "7054:383:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_struct$_StakingSummary_$897_memory_ptr__to_t_struct$_StakingSummary_$897_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 288)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        let memberValue0 := mload(add(value0, 0x40))\n        mstore(add(headStart, 0x40), mload(memberValue0))\n        mstore(add(headStart, 96), mload(add(memberValue0, 0x20)))\n        mstore(add(headStart, 128), mload(add(memberValue0, 0x40)))\n        mstore(add(headStart, 160), mload(add(memberValue0, 96)))\n        mstore(add(headStart, 192), mload(add(memberValue0, 128)))\n        mstore(add(headStart, 224), mload(add(memberValue0, 160)))\n        mstore(add(headStart, 256), mload(add(memberValue0, 192)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA143A5F2 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xC63AA3E7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC63AA3E7 EQ PUSH2 0x2B1 JUMPI DUP1 PUSH4 0xCB79C2E1 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0xD2A569C3 EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0xD5DBDF1B EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA143A5F2 EQ PUSH2 0x23A JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xB5D9DF83 EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xB87DA76D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0xBED9D861 EQ PUSH2 0x2A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0472F0 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x8891CF0D EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x8C63F97F EQ PUSH2 0x1EB JUMPI DUP1 PUSH4 0x8C8E8FEE EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10486B6A EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x5B88349D EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x5F5300FF EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1C7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19D SWAP2 SWAP1 PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD DUP1 MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AE PUSH2 0x444 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x527 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x1008 JUMP JUMPDEST PUSH2 0x566 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH2 0x211 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x211 JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x248 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x27D PUSH2 0x268 CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x19D JUMP JUMPDEST PUSH2 0x1B9 PUSH2 0x29B CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x7FC JUMP JUMPDEST TIMESTAMP PUSH2 0x1B9 JUMP JUMPDEST PUSH2 0x1B9 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1AE PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x102A JUMP JUMPDEST PUSH2 0xA4F JUMP JUMPDEST PUSH2 0x1AE PUSH2 0x2E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH2 0xAD0 JUMP JUMPDEST PUSH2 0x2F6 PUSH2 0xFAA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xE0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x372 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB018F087 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 PUSH2 0x398 DUP4 PUSH2 0xB68 JUMP JUMPDEST SWAP1 POP TIMESTAMP DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x60 ADD MLOAD GT ISZERO PUSH2 0x3F1 JUMPI PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP3 PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x3C5 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP5 MLOAD PUSH2 0x3E8 SWAP2 PUSH2 0x3D7 SWAP2 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0x3EB SWAP2 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE JUMPDEST PUSH1 0x0 PUSH2 0x400 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x7DC JUMP JUMPDEST GT ISZERO PUSH2 0x424 JUMPI PUSH1 0x0 PUSH2 0x415 DUP5 PUSH1 0x0 ADD MLOAD PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xA0 ADD MSTORE POP PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x0 PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x80 ADD MSTORE SWAP1 MLOAD DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0x524 JUMPI PUSH2 0x467 DUP2 PUSH1 0x6 ADD SLOAD PUSH2 0x7DC JUMP JUMPDEST PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH4 0x376115B3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE PUSH1 0xB SLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x4B3 SWAP1 PUSH2 0xBAD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x522 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 PUSH1 0x0 PUSH2 0xBCF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x5B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4462D27 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH4 0x254DDEF9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x8 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x62A SWAP2 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE TIMESTAMP DUP2 DUP5 ADD DUP2 SWAP1 MSTORE DUP6 DUP6 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 DUP4 ADD MSTORE SWAP1 PUSH1 0x60 DUP2 ADD PUSH2 0x67E DUP4 DUP6 PUSH2 0x10C3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP5 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 SWAP4 DUP5 ADD DUP4 SWAP1 MSTORE CALLER DUP1 DUP5 MSTORE PUSH1 0xC DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP2 DUP6 ADD MLOAD PUSH1 0x1 DUP4 ADD SSTORE DUP5 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE SWAP2 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE PUSH1 0xB SLOAD PUSH2 0x6FE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP7 PUSH2 0xC21 JUMP JUMPDEST CALLER PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED DUP5 DUP4 PUSH2 0x72C DUP2 DUP8 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x77E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x1E DUP2 GT ISZERO PUSH2 0x7A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF1A470D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A80 PUSH2 0x7EC DUP4 TIMESTAMP PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x84F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP2 DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP4 DUP5 ADD SLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x8B7 DUP3 PUSH2 0xB68 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x6 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x90C SWAP1 DUP5 SWAP1 PUSH2 0x1132 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x7 SLOAD DUP5 MSTORE PUSH1 0x1 ADD SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x60 DUP3 ADD MLOAD TIMESTAMP LT ISZERO PUSH2 0x981 JUMPI PUSH1 0x0 DUP1 PUSH2 0x955 DUP5 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0xC92 JUMP JUMPDEST PUSH1 0xB SLOAD SWAP2 SWAP4 POP SWAP2 POP PUSH2 0x97A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH2 0x975 DUP5 DUP7 PUSH2 0x10C3 JUMP JUMPDEST PUSH2 0xCFB JUMP JUMPDEST POP POP PUSH2 0xA16 JUMP JUMPDEST PUSH1 0xB SLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 CALLER SWAP1 PUSH2 0x9A5 SWAP1 DUP6 SWAP1 PUSH2 0x10C3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9F0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA14 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST TIMESTAMP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0xC8 DUP2 GT ISZERO PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH4 0xA552CF1 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xCC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E SWAP1 PUSH1 0x20 ADD PUSH2 0x7D1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP1 PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB5F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH2 0x524 DUP2 PUSH2 0xBCF JUMP JUMPDEST DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0xB79 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0xB92 DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xD30 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP5 MLOAD PUSH2 0xBA3 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x7EC SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1DFE200 PUSH2 0x3E8 PUSH1 0x4 SLOAD DUP5 PUSH2 0xBC5 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0x7EC SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xC8C SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xD55 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH2 0xCA5 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xCB6 SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xCC0 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0xCCA SWAP1 DUP6 PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x3E8 PUSH1 0x3 SLOAD DUP6 PUSH2 0xCDB SWAP2 SWAP1 PUSH2 0x1082 JUMP JUMPDEST PUSH2 0xCE5 SWAP2 SWAP1 PUSH2 0x10A1 JUMP JUMPDEST PUSH2 0xCEF SWAP1 DUP6 PUSH2 0x1132 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0xD2B SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0xC55 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1E13380 PUSH2 0xD41 DUP4 TIMESTAMP PUSH2 0x1132 JUMP JUMPDEST PUSH2 0x7EC SWAP1 PUSH10 0xD3C21BCECCEDA1000000 PUSH2 0x1082 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDAA DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xE27 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xD2B JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDC8 SWAP2 SWAP1 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE36 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xE40 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xEA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xEF8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x551 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xF14 SWAP2 SWAP1 PUSH2 0x1175 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xF51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xF66 DUP3 DUP3 DUP7 PUSH2 0xF71 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xF80 JUMPI POP DUP2 PUSH2 0xE39 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xF90 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x1191 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1003 PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x101B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x109C JUMPI PUSH2 0x109C PUSH2 0x106C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x10BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x10D6 JUMPI PUSH2 0x10D6 PUSH2 0x106C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1144 JUMPI PUSH2 0x1144 PUSH2 0x106C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1164 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x114C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC8C JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1187 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1149 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x11B0 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1149 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV MSIZE SHR 0xC2 0xEB 0x4D PUSH3 0x2AD0C2 0xD7 RETURNDATASIZE 0xE1 PUSH9 0x6F328AD4A8819E9CC6 0xB3 NOT 0xD7 EQ 0xC7 POP SWAP10 SWAP5 PUSH2 0x6473 PUSH16 0x6C634300080B00330000000000000000 ",
							"sourceMap": "980:11432:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8167:1024;;;:::i;:::-;;;;;;168:4:7;210:3;199:9;195:19;187:27;;247:6;241:13;230:9;223:32;311:4;303:6;299:17;293:24;286:4;275:9;271:20;264:54;365:4;357:6;353:17;347:24;415:12;409:19;402:4;391:9;387:20;380:49;489:4;475:12;471:23;465:30;460:2;449:9;445:18;438:58;557:4;543:12;539:23;533:30;527:3;516:9;512:19;505:59;625:2;611:12;607:21;601:28;595:3;584:9;580:19;573:57;691:3;677:12;673:22;667:29;661:3;650:9;646:19;639:58;758:3;744:12;740:22;734:29;728:3;717:9;713:19;706:58;825:3;811:12;807:22;801:29;795:3;784:9;780:19;773:58;;14:823;;;;;8167:1024:6;;;;;;;;10066:556;;;:::i;:::-;;1516:26;;;;;;;;;988:25:7;;;976:2;961:18;1516:26:6;842:177:7;1668:101:0;;;:::i;4306:1248:6:-;;;;;;:::i;:::-;;:::i;1385:26::-;;;;;;5560:306;;;;;;:::i;:::-;;:::i;1645:28::-;;;;;-1:-1:-1;;;;;1645:28:6;;;;;;-1:-1:-1;;;;;1626:32:7;;;1608:51;;1596:2;1581:18;1645:28:6;1462:203:7;1036:85:0;1108:6;;-1:-1:-1;;;;;1108:6:0;1036:85;;1593:45:6;;;;;;:::i;:::-;;;;;;;;;;;;;;1548:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2126:14:7;;2119:22;2101:41;;2089:2;2074:18;1548:39:6;1961:187:7;9741:134:6;;;;;;:::i;:::-;;:::i;1417:27::-;;;;;;7258:903;;;:::i;9639:96::-;9713:15;9639:96;;1346:33;;;;;;9303:90;;;:::i;9399:234::-;;;;;;:::i;:::-;;:::i;1918:198:0:-;;;;;;:::i;:::-;;:::i;8167:1024:6:-;8210:21;;:::i;:::-;8282:10;8243:23;8269:24;;;:12;:24;;;;;;;;;8243:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8364:85;;8413:25;;-1:-1:-1;;;8413:25:6;;;;;;;;;;;8364:85;8490:32;;;;;;;;8458:29;8490:32;;;;;;;;;;;;;;;;8550:33;8511:10;8550:21;:33::i;:::-;8533:50;;8626:15;8598:7;:13;;;:25;;;:43;8594:214;;;8792:4;8770:18;;8761:6;:27;;;;:::i;:::-;8760:36;;;;:::i;:::-;8713:18;;8693:17;;8735:4;;8693:38;;;:::i;:::-;8692:47;;;;:::i;:::-;8691:106;;;;:::i;:::-;8657:15;;;:140;8594:214;8866:1;8822:41;8836:10;:26;;;8822:13;:41::i;:::-;:45;8818:249;;;8883:15;8901:36;8919:10;:17;;;8901;:36::i;:::-;8951:13;;;;:30;;:40;-1:-1:-1;8818:249:6;;;9022:13;;;;9055:1;9022:30;;;;:34;8818:249;9077:13;;;;:23;;:32;9142:17;;9119:40;;9077:7;8167:1024;-1:-1:-1;8167:1024:6:o;10066:556::-;10197:10;10161:20;10184:24;;;:12;:24;;;;;10223:13;;:17;10219:397;;10260:37;10274:6;:22;;;10260:13;:37::i;:::-;10256:117;;10329:29;;-1:-1:-1;;;10329:29:6;;;;;;;;;;;10256:117;10413:1;10387:23;;;:27;10453:15;10428:22;;;:40;10490:13;;10577;;-1:-1:-1;;;;;10490:13:6;;;;10483:30;;10531:10;;10559:32;;:17;:32::i;:::-;10483:122;;-1:-1:-1;;;;;;10483:122:6;;;;;;;-1:-1:-1;;;;;3005:32:7;;;10483:122:6;;;2987:51:7;3054:18;;;3047:34;2960:18;;10483:122:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10219:397;10099:523;10066:556::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;;;;;;;;;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;4306:1248:6:-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;3937:2:7;2317:63:1;;;3919:21:7;3976:2;3956:18;;;3949:30;4015:33;3995:18;;;3988:61;4066:18;;2317:63:1;3735:355:7;2317:63:1;1744:1;2455:7;:18;;;4589:10:6::1;4576:24:::0;;:12:::1;:24;::::0;;;;:31;:36;4572:97:::1;;4635:23;;-1:-1:-1::0;;;4635:23:6::1;;;;;;;;;;;4572:97;4683:27;::::0;;;:14:::1;:27;::::0;;;;;4679:101:::1;;4738:31;;-1:-1:-1::0;;;4738:31:6::1;;;;;;;;;;;4679:101;4805:1;4790:11;;:16;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;4823:10:6::1;4816:18;::::0;;;:6:::1;:18;::::0;;;;;;;:37;;-1:-1:-1;;4816:37:6::1;4849:4;4816:37;::::0;;5142:183;;::::1;::::0;::::1;::::0;;;;;4971:15:::1;5142:183:::0;;::::1;::::0;;;5204:27;;;:14:::1;:27:::0;;;;;;;;5142:183;;;;4971:15;5142:183;;;5246:23:::1;4971:15:::0;5219:11;5246:23:::1;:::i;:::-;5142:183:::0;;5284:1:::1;5142:183;::::0;;::::1;::::0;;;;;;;;;;;;;;;;;5128:10:::1;5115:24:::0;;;:12:::1;:24:::0;;;;;;:210;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;5369:13:::1;::::0;5335:81:::1;::::0;-1:-1:-1;;;;;5369:13:6;;::::1;::::0;5403:4:::1;5409:6:::0;5335:26:::1;:81::i;:::-;5490:10;5483:64;5502:6:::0;5510:9;5522:23:::1;5510:9:::0;5522:11;:23:::1;:::i;:::-;5483:64;::::0;;4297:25:7;;;4353:2;4338:18;;4331:34;;;;4381:18;;;4374:34;4285:2;4270:18;5483:64:6::1;;;;;;;-1:-1:-1::0;;1701:1:1;2628:7;:22;-1:-1:-1;4306:1248:6:o;5560:306::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;5718:2:6::1;5709:6;:11;5705:81;;;5743:32;;-1:-1:-1::0;;;5743:32:6::1;;;;;;;;;;;5705:81;5795:18;:27:::0;;;5837:22:::1;::::0;988:25:7;;;5837:22:6::1;::::0;976:2:7;961:18;5837:22:6::1;;;;;;;;5560:306:::0;:::o;9741:134::-;9804:7;9862:6;9831:27;9849:9;9831:15;:27;:::i;:::-;9830:38;;;;:::i;:::-;9823:45;9741:134;-1:-1:-1;;9741:134:6:o;7258:903::-;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;3937:2:7;2317:63:1;;;3919:21:7;3976:2;3956:18;;;3949:30;4015:33;3995:18;;;3988:61;4066:18;;2317:63:1;3735:355:7;2317:63:1;1744:1;2455:7;:18;;;7462:10:6::1;7449:24:::0;;:12:::1;:24;::::0;;;;;;;7423:50;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;::::1;::::0;;;;;::::1;::::0;;::::1;::::0;;;;;7500:33:::1;7423:50:::0;7500:21:::1;:33::i;:::-;7564:10;7551:24;::::0;;;:12:::1;:24;::::0;;;;7544:31;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;7585:11:::1;:16:::0;;7483:50;;-1:-1:-1;7544:31:6;;7585:11;;7551:24;7585:16:::1;::::0;7544:31;;7585:16:::1;:::i;:::-;::::0;;;-1:-1:-1;;7625:10:6::1;7618:18;::::0;;;:6:::1;:18;::::0;;;;;;;7643:9:::1;::::0;7618:35;;:24:::1;;:35:::0;;;;;7611:42;;-1:-1:-1;;7611:42:6::1;::::0;;7668:22:::1;::::0;::::1;::::0;7693:15:::1;-1:-1:-1::0;7664:491:6::1;;;7742:22;7782::::0;7821:55:::1;7850:10;:17;;;7869:6;7821:28;:55::i;:::-;7921:13;::::0;7724:152;;-1:-1:-1;7724:152:6;-1:-1:-1;7891:90:6::1;::::0;-1:-1:-1;;;;;7921:13:6::1;7936:10;7948:31;7724:152:::0;;7948:31:::1;:::i;:::-;7891:22;:90::i;:::-;7710:283;;7664:491;;;8033:13;::::0;8103:17;;-1:-1:-1;;;;;8033:13:6;;::::1;::::0;8026:30:::1;::::0;8074:10:::1;::::0;8103:26:::1;::::0;8123:6;;8103:26:::1;:::i;:::-;8026:118;::::0;-1:-1:-1;;;;;;8026:118:6::1;::::0;;;;;;-1:-1:-1;;;;;3005:32:7;;;8026:118:6::1;::::0;::::1;2987:51:7::0;3054:18;;;3047:34;2960:18;;8026:118:6::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7664:491;-1:-1:-1::0;;1701:1:1;2628:7;:22;7258:903:6:o;9303:90::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;9371:15:6::1;9356:12;:30:::0;9303:90::o;9399:234::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;9490:3:6::1;9481:6;:12;9477:83;;;9516:33;;-1:-1:-1::0;;;9516:33:6::1;;;;;;;;;;;9477:83;9569:11;:20:::0;;;9604:22:::1;::::0;988:25:7;;;9604:22:6::1;::::0;976:2:7;961:18;9604:22:6::1;842:177:7::0;1918:198:0;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:5;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;4751:2:7;1998:73:0::1;::::0;::::1;4733:21:7::0;4790:2;4770:18;;;4763:30;4829:34;4809:18;;;4802:62;-1:-1:-1;;;4880:18:7;;;4873:36;4926:19;;1998:73:0::1;4549:402:7::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;6109:437:6:-:0;6239:17;;6212:7;;6235:61;;-1:-1:-1;6284:1:6;;6109:437;-1:-1:-1;6109:437:6:o;6235:61::-;6535:4;6488:43;6514:10;:16;;;6488:25;:43::i;:::-;6449:20;;;;6413:17;;:56;;6449:20;6413:56;:::i;:::-;:118;;;;:::i;9881:179::-;9976:7;10045:8;10037:4;10022:11;;10008;:25;;;;:::i;:::-;10007:34;;;;:::i;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2333:124;2270:187;:::o;912:241:3:-;1077:68;;-1:-1:-1;;;;;5214:15:7;;;1077:68:3;;;5196:34:7;5266:15;;5246:18;;;5239:43;5298:18;;;5291:34;;;1050:96:3;;1070:5;;-1:-1:-1;;;1100:27:3;5131:18:7;;1077:68:3;;;;-1:-1:-1;;1077:68:3;;;;;;;;;;;;;;-1:-1:-1;;;;;1077:68:3;-1:-1:-1;;;;;;1077:68:3;;;;;;;;;;1050:19;:96::i;:::-;912:241;;;;:::o;6552:359:6:-;6669:7;;6705:11;6701:55;;-1:-1:-1;6740:1:6;;-1:-1:-1;6740:1:6;6732:13;;6701:55;6828:4;6806:18;;6797:6;:27;;;;:::i;:::-;6796:36;;;;:::i;:::-;6786:47;;:6;:47;:::i;:::-;6889:4;6867:18;;6858:6;:27;;;;:::i;:::-;6857:36;;;;:::i;:::-;6847:47;;:6;:47;:::i;:::-;6765:139;;;;6552:359;;;;;;:::o;701:205:3:-;840:58;;-1:-1:-1;;;;;3005:32:7;;840:58:3;;;2987:51:7;3054:18;;;3047:34;;;813:86:3;;833:5;;-1:-1:-1;;;863:23:3;2960:18:7;;840:58:3;2813:274:7;813:86:3;701:205;;;:::o;5872:231:6:-;5969:7;6088:8;6053:23;6071:5;6053:15;:23;:::i;:::-;6052:32;;6080:4;6052:32;:::i;3207:706:3:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:3;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:3;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:3;;5538:2:7;3811:85:3;;;5520:21:7;5577:2;5557:18;;;5550:30;5616:34;5596:18;;;5589:62;-1:-1:-1;;;5667:18:7;;;5660:40;5717:19;;3811:85:3;5336:406:7;3861:223:4;3994:12;4025:52;4047:6;4055:4;4061:1;4064:12;4025:21;:52::i;:::-;4018:59;;3861:223;;;;;;:::o;4948:499::-;5113:12;5170:5;5145:21;:30;;5137:81;;;;-1:-1:-1;;;5137:81:4;;5949:2:7;5137:81:4;;;5931:21:7;5988:2;5968:18;;;5961:30;6027:34;6007:18;;;6000:62;-1:-1:-1;;;6078:18:7;;;6071:36;6124:19;;5137:81:4;5747:402:7;5137:81:4;-1:-1:-1;;;;;1465:19:4;;;5228:60;;;;-1:-1:-1;;;5228:60:4;;6356:2:7;5228:60:4;;;6338:21:7;6395:2;6375:18;;;6368:30;6434:31;6414:18;;;6407:59;6483:18;;5228:60:4;6154:353:7;5228:60:4;5300:12;5314:23;5341:6;-1:-1:-1;;;;;5341:11:4;5360:5;5367:4;5341:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5299:73;;;;5389:51;5406:7;5415:10;5427:12;5389:16;:51::i;:::-;5382:58;4948:499;-1:-1:-1;;;;;;;4948:499:4:o;7561:692::-;7707:12;7735:7;7731:516;;;-1:-1:-1;7765:10:4;7758:17;;7731:516;7876:17;;:21;7872:365;;8070:10;8064:17;8130:15;8117:10;8113:2;8109:19;8102:44;7872:365;8209:12;8202:20;;-1:-1:-1;;;8202:20:4;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1024:248:7:-;1092:6;1100;1153:2;1141:9;1132:7;1128:23;1124:32;1121:52;;;1169:1;1166;1159:12;1121:52;-1:-1:-1;;1192:23:7;;;1262:2;1247:18;;;1234:32;;-1:-1:-1;1024:248:7:o;1277:180::-;1336:6;1389:2;1377:9;1368:7;1364:23;1360:32;1357:52;;;1405:1;1402;1395:12;1357:52;-1:-1:-1;1428:23:7;;1277:180;-1:-1:-1;1277:180:7:o;1670:286::-;1729:6;1782:2;1770:9;1761:7;1757:23;1753:32;1750:52;;;1798:1;1795;1788:12;1750:52;1824:23;;-1:-1:-1;;;;;1876:31:7;;1866:42;;1856:70;;1922:1;1919;1912:12;2153:127;2214:10;2209:3;2205:20;2202:1;2195:31;2245:4;2242:1;2235:15;2269:4;2266:1;2259:15;2285:168;2325:7;2391:1;2387;2383:6;2379:14;2376:1;2373:21;2368:1;2361:9;2354:17;2350:45;2347:71;;;2398:18;;:::i;:::-;-1:-1:-1;2438:9:7;;2285:168::o;2458:217::-;2498:1;2524;2514:132;;2568:10;2563:3;2559:20;2556:1;2549:31;2603:4;2600:1;2593:15;2631:4;2628:1;2621:15;2514:132;-1:-1:-1;2660:9:7;;2458:217::o;2680:128::-;2720:3;2751:1;2747:6;2744:1;2741:13;2738:39;;;2757:18;;:::i;:::-;-1:-1:-1;2793:9:7;;2680:128::o;3092:277::-;3159:6;3212:2;3200:9;3191:7;3187:23;3183:32;3180:52;;;3228:1;3225;3218:12;3180:52;3260:9;3254:16;3313:5;3306:13;3299:21;3292:5;3289:32;3279:60;;3335:1;3332;3325:12;3374:356;3576:2;3558:21;;;3595:18;;;3588:30;3654:34;3649:2;3634:18;;3627:62;3721:2;3706:18;;3374:356::o;4419:125::-;4459:4;4487:1;4484;4481:8;4478:34;;;4492:18;;:::i;:::-;-1:-1:-1;4529:9:7;;4419:125::o;6512:258::-;6584:1;6594:113;6608:6;6605:1;6602:13;6594:113;;;6684:11;;;6678:18;6665:11;;;6658:39;6630:2;6623:10;6594:113;;;6725:6;6722:1;6719:13;6716:48;;;-1:-1:-1;;6760:1:7;6742:16;;6735:27;6512:258::o;6775:274::-;6904:3;6942:6;6936:13;6958:53;7004:6;6999:3;6992:4;6984:6;6980:17;6958:53;:::i;:::-;7027:16;;;;;6775:274;-1:-1:-1;;6775:274:7:o;7054:383::-;7203:2;7192:9;7185:21;7166:4;7235:6;7229:13;7278:6;7273:2;7262:9;7258:18;7251:34;7294:66;7353:6;7348:2;7337:9;7333:18;7328:2;7320:6;7316:15;7294:66;:::i;:::-;7421:2;7400:15;-1:-1:-1;;7396:29:7;7381:45;;;;7428:2;7377:54;;7054:383;-1:-1:-1;;7054:383:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "920400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"_blockTimestamp()": "213",
								"airdropRate()": "2340",
								"airdropSince()": "2384",
								"calculateWeek(uint256)": "487",
								"changeAirdropPercentage(uint256)": "25655",
								"changePenaltyFee(uint256)": "25623",
								"claimAirdrop()": "infinite",
								"hasStake()": "infinite",
								"owner()": "2442",
								"renounceOwnership()": "28207",
								"stake(uint256,uint256)": "infinite",
								"stakingPenaltyRate()": "2339",
								"startAirdrop()": "24455",
								"token_address()": "2426",
								"totalVoters()": "2363",
								"transferOwnership(address)": "28387",
								"votedUsers(uint256)": "2461",
								"voters(address)": "2541",
								"withdrawStake()": "infinite"
							},
							"internal": {
								"_calculateAirdrop(uint256)": "infinite",
								"_calculateStakeReward(struct Staking.Stake memory)": "infinite",
								"_calculateStakingDuration(uint256)": "243",
								"_calculateStakingWithPenalty(uint256,uint256)": "infinite",
								"_checkVotingStatus()": "infinite",
								"_isVoter()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CODESIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSHSIZE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMP",
									"source": 6,
									"value": "[in]"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1680,
									"end": 1981,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1701,
									"end": 1702,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1806,
									"end": 1813,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1806,
									"end": 1828,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 921,
									"end": 953,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 921,
									"end": 939,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 921,
									"end": 953,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1800,
									"end": 1802,
									"name": "PUSH",
									"source": 6,
									"value": "F"
								},
								{
									"begin": 1779,
									"end": 1797,
									"name": "PUSH",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 1779,
									"end": 1802,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1826,
									"end": 1828,
									"name": "PUSH",
									"source": 6,
									"value": "50"
								},
								{
									"begin": 1812,
									"end": 1823,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1812,
									"end": 1828,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1852,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SLOAD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "AND",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1839,
									"end": 1860,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1871,
									"end": 1885,
									"name": "PUSH",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1897,
									"end": 1898,
									"name": "PUSH",
									"source": 6,
									"value": "6"
								},
								{
									"begin": 1871,
									"end": 1894,
									"name": "PUSH",
									"source": 6,
									"value": "A1EF5B42F18533D67A183A193EA6C3FABFAA3BDABC3FC0E3F65B19B517DF6E8C"
								},
								{
									"begin": 1871,
									"end": 1898,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1935,
									"end": 1936,
									"name": "PUSH",
									"source": 6,
									"value": "7"
								},
								{
									"begin": 1908,
									"end": 1932,
									"name": "PUSH",
									"source": 6,
									"value": "89CFCBF844E824FEEE5F634CBC488382291F3C9E0DE5905F3C30812390DD832"
								},
								{
									"begin": 1908,
									"end": 1936,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 1961,
									"end": 1969,
									"name": "PUSH",
									"source": 6,
									"value": "1E13380"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1946,
									"end": 1970,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1973,
									"end": 1974,
									"name": "PUSH",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 1946,
									"end": 1970,
									"name": "PUSH",
									"source": 6,
									"value": "DC083EB4DA7563BBD761324B5158D9D40AF7C7174AFE39B0B31A7577C44FC33B"
								},
								{
									"begin": 1946,
									"end": 1974,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "17"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "tag",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2378,
									"end": 2395,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 2362,
									"end": 2368,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2343,
									"end": 2359,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2410,
									"end": 2450,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2333,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2270,
									"end": 2457,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 7
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 7
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 7,
									"value": "17"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 980,
									"end": 12412,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122005591cc2eb4d622ad0c2d73de1686f328ad4a8819e9cc6b319d714c75099946164736f6c634300080b0033",
									".code": [
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "CALLVALUE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "tag",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "C63AA3E7"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "CB79C2E1"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "D2A569C3"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "D5DBDF1B"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "F2FDE38B"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "21"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "tag",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "A143A5F2"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "A3EC138D"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "B5D9DF83"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "B87DA76D"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "BED9D861"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "tag",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "7B0472F0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "8891CF0D"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "8C63F97F"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "8C8E8FEE"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "8DA5CB5B"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "tag",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "10486B6A"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "5B88349D"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "5F5300FF"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "715018A6"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "tag",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 980,
											"end": 12412,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "tag",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "tag",
											"source": 6,
											"value": "25"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 168,
											"end": 172,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 210,
											"end": 213,
											"name": "PUSH",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 199,
											"end": 208,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 195,
											"end": 214,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 187,
											"end": 214,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 187,
											"end": 214,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 247,
											"end": 253,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 241,
											"end": 254,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 230,
											"end": 239,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 223,
											"end": 255,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 311,
											"end": 315,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 303,
											"end": 309,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 299,
											"end": 316,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 293,
											"end": 317,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 286,
											"end": 290,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 275,
											"end": 284,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 271,
											"end": 291,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 264,
											"end": 318,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 365,
											"end": 369,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 357,
											"end": 363,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 353,
											"end": 370,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 347,
											"end": 371,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 415,
											"end": 427,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 409,
											"end": 428,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 402,
											"end": 406,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 391,
											"end": 400,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 387,
											"end": 407,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 380,
											"end": 429,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 489,
											"end": 493,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 475,
											"end": 487,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 471,
											"end": 494,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 465,
											"end": 495,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 460,
											"end": 462,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 449,
											"end": 458,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 445,
											"end": 463,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 438,
											"end": 496,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 557,
											"end": 561,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 543,
											"end": 555,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 539,
											"end": 562,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 533,
											"end": 563,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 527,
											"end": 530,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 516,
											"end": 525,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 512,
											"end": 531,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 505,
											"end": 564,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 625,
											"end": 627,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 611,
											"end": 623,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 607,
											"end": 628,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 601,
											"end": 629,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 595,
											"end": 598,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 584,
											"end": 593,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 580,
											"end": 599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 573,
											"end": 630,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 691,
											"end": 694,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 677,
											"end": 689,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 673,
											"end": 695,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 667,
											"end": 696,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 661,
											"end": 664,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 646,
											"end": 665,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 639,
											"end": 697,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 758,
											"end": 761,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 744,
											"end": 756,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 740,
											"end": 762,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 734,
											"end": 763,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 728,
											"end": 731,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 717,
											"end": 726,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 713,
											"end": 732,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 706,
											"end": 764,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 825,
											"end": 828,
											"name": "PUSH",
											"source": 7,
											"value": "C0"
										},
										{
											"begin": 811,
											"end": 823,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 807,
											"end": 829,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 801,
											"end": 830,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 795,
											"end": 798,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 784,
											"end": 793,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 780,
											"end": 799,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 773,
											"end": 831,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 773,
											"end": 831,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 837,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "RETURN",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "tag",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "STOP",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "tag",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "tag",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1516,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 842,
											"end": 1019,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "tag",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "39"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "tag",
											"source": 6,
											"value": "38"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1385,
											"end": 1411,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "tag",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "tag",
											"source": 6,
											"value": "10"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1626,
											"end": 1658,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1608,
											"end": 1659,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1608,
											"end": 1659,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1596,
											"end": 1598,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1599,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1645,
											"end": 1673,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 1462,
											"end": 1665,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1036,
											"end": 1121,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "A"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1593,
											"end": 1638,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "tag",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2126,
											"end": 2140,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2126,
											"end": 2140,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2119,
											"end": 2141,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2101,
											"end": 2142,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2101,
											"end": 2142,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2089,
											"end": 2091,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2074,
											"end": 2092,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1548,
											"end": 1587,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 1961,
											"end": 2148,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "tag",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1417,
											"end": 1444,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "tag",
											"source": 6,
											"value": "16"
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9639,
											"end": 9735,
											"name": "tag",
											"source": 6,
											"value": "17"
										},
										{
											"begin": 9639,
											"end": 9735,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9713,
											"end": 9728,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9639,
											"end": 9735,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 9639,
											"end": 9735,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1379,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "tag",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "46"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "tag",
											"source": 6,
											"value": "83"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "tag",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8210,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 8210,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "89"
										},
										{
											"begin": 8210,
											"end": 8231,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8210,
											"end": 8231,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 8210,
											"end": 8231,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8282,
											"end": 8292,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8266,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8281,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8269,
											"end": 8293,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8243,
											"end": 8293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8364,
											"end": 8449,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8364,
											"end": 8449,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B018F087"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8413,
											"end": 8438,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8364,
											"end": 8449,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 8364,
											"end": 8449,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8458,
											"end": 8487,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8490,
											"end": 8522,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8550,
											"end": 8583,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 8511,
											"end": 8521,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8550,
											"end": 8571,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 8550,
											"end": 8583,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8550,
											"end": 8583,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 8550,
											"end": 8583,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8583,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8533,
											"end": 8583,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8626,
											"end": 8641,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8605,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8611,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8598,
											"end": 8611,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8611,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8623,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8598,
											"end": 8623,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8623,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8598,
											"end": 8641,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8594,
											"end": 8808,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8594,
											"end": 8808,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 8594,
											"end": 8808,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8792,
											"end": 8796,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 8770,
											"end": 8788,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8770,
											"end": 8788,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8761,
											"end": 8767,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "tag",
											"source": 6,
											"value": "95"
										},
										{
											"begin": 8761,
											"end": 8788,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 8760,
											"end": 8796,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8713,
											"end": 8731,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 8713,
											"end": 8731,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8693,
											"end": 8710,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8693,
											"end": 8710,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8735,
											"end": 8739,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 8735,
											"end": 8739,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "tag",
											"source": 6,
											"value": "99"
										},
										{
											"begin": 8693,
											"end": 8731,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "tag",
											"source": 6,
											"value": "100"
										},
										{
											"begin": 8692,
											"end": 8739,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "tag",
											"source": 6,
											"value": "101"
										},
										{
											"begin": 8691,
											"end": 8797,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8657,
											"end": 8672,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8657,
											"end": 8672,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8657,
											"end": 8672,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8657,
											"end": 8797,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8594,
											"end": 8808,
											"name": "tag",
											"source": 6,
											"value": "94"
										},
										{
											"begin": 8594,
											"end": 8808,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8866,
											"end": 8867,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8822,
											"end": 8863,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 8836,
											"end": 8846,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8836,
											"end": 8862,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 8836,
											"end": 8862,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8836,
											"end": 8862,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8822,
											"end": 8835,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 8822,
											"end": 8863,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8822,
											"end": 8863,
											"name": "tag",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 8822,
											"end": 8863,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8822,
											"end": 8867,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8883,
											"end": 8898,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8901,
											"end": 8937,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 8919,
											"end": 8929,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8919,
											"end": 8936,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8919,
											"end": 8936,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8919,
											"end": 8936,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8901,
											"end": 8918,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 8901,
											"end": 8937,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8901,
											"end": 8937,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 8901,
											"end": 8937,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8951,
											"end": 8964,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8951,
											"end": 8964,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 8951,
											"end": 8964,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8951,
											"end": 8964,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8951,
											"end": 8981,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 8951,
											"end": 8981,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8951,
											"end": 8991,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9035,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9022,
											"end": 9035,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9035,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9035,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9055,
											"end": 9056,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9022,
											"end": 9052,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 9022,
											"end": 9052,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9052,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9052,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9022,
											"end": 9056,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 8818,
											"end": 9067,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9090,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9077,
											"end": 9090,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9090,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9090,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9100,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 9077,
											"end": 9100,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9109,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9142,
											"end": 9159,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9142,
											"end": 9159,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9159,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9119,
											"end": 9159,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9077,
											"end": 9084,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8167,
											"end": 9191,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "tag",
											"source": 6,
											"value": "30"
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10197,
											"end": 10207,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10161,
											"end": 10181,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10184,
											"end": 10196,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10184,
											"end": 10208,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 10223,
											"end": 10236,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10223,
											"end": 10236,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10223,
											"end": 10240,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10219,
											"end": 10616,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10219,
											"end": 10616,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10260,
											"end": 10297,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10274,
											"end": 10280,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10274,
											"end": 10296,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10274,
											"end": 10296,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10274,
											"end": 10296,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10260,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 10260,
											"end": 10297,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10260,
											"end": 10297,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 10260,
											"end": 10297,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "376115B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10329,
											"end": 10358,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 10256,
											"end": 10373,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10413,
											"end": 10414,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10387,
											"end": 10410,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 10387,
											"end": 10410,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10387,
											"end": 10410,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10387,
											"end": 10414,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10453,
											"end": 10468,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 10428,
											"end": 10450,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 10428,
											"end": 10450,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10428,
											"end": 10450,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10428,
											"end": 10468,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10577,
											"end": 10590,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10577,
											"end": 10590,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10490,
											"end": 10503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10513,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 10483,
											"end": 10513,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10531,
											"end": 10541,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 10531,
											"end": 10541,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10559,
											"end": 10591,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 10559,
											"end": 10591,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10559,
											"end": 10576,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 10559,
											"end": 10591,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10559,
											"end": 10591,
											"name": "tag",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 10559,
											"end": 10591,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "tag",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10483,
											"end": 10605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10219,
											"end": 10616,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 10219,
											"end": 10616,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10099,
											"end": 10622,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 10066,
											"end": 10622,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "123"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1732,
											"end": 1750,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1732,
											"end": 1762,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1668,
											"end": 1769,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "tag",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3937,
											"end": 3939,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3919,
											"end": 3940,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3976,
											"end": 3978,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3949,
											"end": 3979,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4015,
											"end": 4048,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3988,
											"end": 4049,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3735,
											"end": 4090,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "130"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4588,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4600,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4607,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4576,
											"end": 4612,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4572,
											"end": 4669,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 4572,
											"end": 4669,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4462D27"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4658,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4572,
											"end": 4669,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 4572,
											"end": 4669,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4697,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4679,
											"end": 4780,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4679,
											"end": 4780,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "254DDEF9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4738,
											"end": 4769,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4679,
											"end": 4780,
											"name": "tag",
											"source": 6,
											"value": "135"
										},
										{
											"begin": 4679,
											"end": 4780,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4823,
											"end": 4833,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4822,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4834,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 4849,
											"end": 4853,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4816,
											"end": 4853,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4971,
											"end": 4986,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5218,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5204,
											"end": 5231,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4971,
											"end": 4986,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5246,
											"end": 5269,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 4971,
											"end": 4986,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5219,
											"end": 5230,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5246,
											"end": 5269,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5246,
											"end": 5269,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5246,
											"end": 5269,
											"name": "tag",
											"source": 6,
											"value": "137"
										},
										{
											"begin": 5246,
											"end": 5269,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5284,
											"end": 5285,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5325,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5138,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5127,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5139,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5325,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 5335,
											"end": 5416,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 5335,
											"end": 5416,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 5369,
											"end": 5382,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5403,
											"end": 5407,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 5409,
											"end": 5415,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5335,
											"end": 5361,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 5335,
											"end": 5416,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5335,
											"end": 5416,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 5335,
											"end": 5416,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5490,
											"end": 5500,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "PUSH",
											"source": 6,
											"value": "B4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED"
										},
										{
											"begin": 5502,
											"end": 5508,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5510,
											"end": 5519,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 5510,
											"end": 5519,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5533,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 5522,
											"end": 5545,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 5522,
											"end": 5545,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5522,
											"end": 5545,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 5522,
											"end": 5545,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 4297,
											"end": 4322,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4322,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4322,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4353,
											"end": 4355,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4338,
											"end": 4356,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4338,
											"end": 4356,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4331,
											"end": 4365,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4331,
											"end": 4365,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4331,
											"end": 4365,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4331,
											"end": 4365,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4381,
											"end": 4399,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4381,
											"end": 4399,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4381,
											"end": 4399,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4374,
											"end": 4408,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4285,
											"end": 4287,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 4270,
											"end": 4288,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5483,
											"end": 5547,
											"name": "LOG2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4306,
											"end": 5554,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5718,
											"end": 5720,
											"name": "PUSH",
											"source": 6,
											"value": "1E"
										},
										{
											"begin": 5709,
											"end": 5715,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5709,
											"end": 5720,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5786,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5786,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 5705,
											"end": 5786,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F1A470D7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5743,
											"end": 5775,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5786,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 5705,
											"end": 5786,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5813,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 5795,
											"end": 5822,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5822,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5795,
											"end": 5822,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "PUSH",
											"source": 6,
											"value": "CFA4F4CF1CD64D13A167A8E75605E0C0C9D6700E903D17C5DC11F593254A04A9"
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5837,
											"end": 5859,
											"name": "LOG1",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5560,
											"end": 5866,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9804,
											"end": 9811,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 9862,
											"end": 9868,
											"name": "PUSH",
											"source": 6,
											"value": "93A80"
										},
										{
											"begin": 9831,
											"end": 9858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 9849,
											"end": 9858,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 9831,
											"end": 9846,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9831,
											"end": 9858,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 9831,
											"end": 9858,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9831,
											"end": 9858,
											"name": "tag",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 9831,
											"end": 9858,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 9830,
											"end": 9868,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9823,
											"end": 9868,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9741,
											"end": 9875,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "tag",
											"source": 6,
											"value": "73"
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2325,
											"end": 2344,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3937,
											"end": 3939,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3919,
											"end": 3940,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3976,
											"end": 3978,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3956,
											"end": 3974,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3949,
											"end": 3979,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4015,
											"end": 4048,
											"name": "PUSH",
											"source": 7,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3995,
											"end": 4013,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3988,
											"end": 4049,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4066,
											"end": 4084,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "124"
										},
										{
											"begin": 3735,
											"end": 4090,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "tag",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 2317,
											"end": 2380,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1744,
											"end": 1745,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 2455,
											"end": 2462,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2455,
											"end": 2473,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7462,
											"end": 7472,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7461,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7449,
											"end": 7473,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "A0"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "PUSH",
											"source": 6,
											"value": "C0"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7500,
											"end": 7533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 7423,
											"end": 7473,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7500,
											"end": 7521,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 7500,
											"end": 7533,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7500,
											"end": 7533,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 7500,
											"end": 7533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7564,
											"end": 7574,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7563,
											"name": "PUSH",
											"source": 6,
											"value": "C"
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "PUSH",
											"source": 6,
											"value": "6"
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7596,
											"name": "PUSH",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7483,
											"end": 7533,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 7483,
											"end": 7533,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7596,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7596,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7551,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7544,
											"end": 7575,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7585,
											"end": 7601,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7625,
											"end": 7635,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7624,
											"name": "PUSH",
											"source": 6,
											"value": "9"
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7636,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7643,
											"end": 7652,
											"name": "PUSH",
											"source": 6,
											"value": "7"
										},
										{
											"begin": 7643,
											"end": 7652,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7642,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 7618,
											"end": 7642,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7618,
											"end": 7653,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7653,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7653,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7611,
											"end": 7653,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7653,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7611,
											"end": 7653,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 7668,
											"end": 7690,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 7668,
											"end": 7690,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7668,
											"end": 7690,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7668,
											"end": 7690,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7693,
											"end": 7708,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 7742,
											"end": 7764,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7782,
											"end": 7804,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 7821,
											"end": 7876,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 7850,
											"end": 7860,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7850,
											"end": 7867,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7850,
											"end": 7867,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7850,
											"end": 7867,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 7869,
											"end": 7875,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7821,
											"end": 7849,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 7821,
											"end": 7876,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7821,
											"end": 7876,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 7821,
											"end": 7876,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7921,
											"end": 7934,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 7921,
											"end": 7934,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 7724,
											"end": 7876,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7724,
											"end": 7876,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7724,
											"end": 7876,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7891,
											"end": 7981,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 7891,
											"end": 7981,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7921,
											"end": 7934,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 7936,
											"end": 7946,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 7724,
											"end": 7876,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7724,
											"end": 7876,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "tag",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 7948,
											"end": 7979,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7891,
											"end": 7913,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 7891,
											"end": 7981,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 7891,
											"end": 7981,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 7891,
											"end": 7981,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7710,
											"end": 7993,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7710,
											"end": 7993,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "tag",
											"source": 6,
											"value": "162"
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "PUSH",
											"source": 6,
											"value": "B"
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8033,
											"end": 8046,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8056,
											"name": "PUSH",
											"source": 6,
											"value": "A9059CBB"
										},
										{
											"begin": 8026,
											"end": 8056,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8074,
											"end": 8084,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 8074,
											"end": 8084,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8129,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8123,
											"end": 8129,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 8103,
											"end": 8129,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "RETURNDATACOPY",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "tag",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8026,
											"end": 8144,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "tag",
											"source": 6,
											"value": "168"
										},
										{
											"begin": 7664,
											"end": 8155,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1701,
											"end": 1702,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2628,
											"end": 2635,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2628,
											"end": 2650,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 7258,
											"end": 8161,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9371,
											"end": 9386,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 9356,
											"end": 9368,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 9356,
											"end": 9386,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9303,
											"end": 9393,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "tag",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 9399,
											"end": 9633,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 9490,
											"end": 9493,
											"name": "PUSH",
											"source": 6,
											"value": "C8"
										},
										{
											"begin": 9481,
											"end": 9487,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9481,
											"end": 9493,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 9477,
											"end": 9560,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 9477,
											"end": 9560,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 9477,
											"end": 9560,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A552CF1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9516,
											"end": 9549,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 9477,
											"end": 9560,
											"name": "tag",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 9477,
											"end": 9560,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9569,
											"end": 9580,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 9569,
											"end": 9589,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9569,
											"end": 9589,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9569,
											"end": 9589,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 9604,
											"end": 9626,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 9604,
											"end": 9626,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 988,
											"end": 1013,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9604,
											"end": 9626,
											"name": "PUSH",
											"source": 6,
											"value": "CC672F1026B958C0CFBFDD89EBE8DDCBC127F16EC24DA6C2C7A4DE26A8B1857E"
										},
										{
											"begin": 9604,
											"end": 9626,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 976,
											"end": 978,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 961,
											"end": 979,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9604,
											"end": 9626,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 842,
											"end": 1019,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1918,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1108,
											"end": 1114,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1248,
											"end": 1271,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 1240,
											"end": 1308,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2006,
											"end": 2028,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4751,
											"end": 4753,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4733,
											"end": 4754,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4790,
											"end": 4792,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 4770,
											"end": 4788,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4770,
											"end": 4788,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4770,
											"end": 4788,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4763,
											"end": 4793,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4829,
											"end": 4863,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 4809,
											"end": 4827,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 4809,
											"end": 4827,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4809,
											"end": 4827,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4802,
											"end": 4864,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4880,
											"end": 4898,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 4880,
											"end": 4898,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4880,
											"end": 4898,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4873,
											"end": 4909,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4926,
											"end": 4945,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 4926,
											"end": 4945,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 4549,
											"end": 4951,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1998,
											"end": 2071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2100,
											"end": 2108,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2081,
											"end": 2109,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 6109,
											"end": 6546,
											"name": "tag",
											"source": 6,
											"value": "93"
										},
										{
											"begin": 6109,
											"end": 6546,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6239,
											"end": 6256,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6239,
											"end": 6256,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6212,
											"end": 6219,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6212,
											"end": 6219,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6235,
											"end": 6296,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 6235,
											"end": 6296,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6284,
											"end": 6285,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6284,
											"end": 6285,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6109,
											"end": 6546,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6109,
											"end": 6546,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 6235,
											"end": 6296,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 6235,
											"end": 6296,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6535,
											"end": 6539,
											"name": "PUSH",
											"source": 6,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 6488,
											"end": 6531,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 6514,
											"end": 6524,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6514,
											"end": 6530,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6514,
											"end": 6530,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6514,
											"end": 6530,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6488,
											"end": 6513,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 6488,
											"end": 6531,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6488,
											"end": 6531,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 6488,
											"end": 6531,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6449,
											"end": 6469,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 6449,
											"end": 6469,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6449,
											"end": 6469,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6449,
											"end": 6469,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6430,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6430,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6449,
											"end": 6469,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "tag",
											"source": 6,
											"value": "203"
										},
										{
											"begin": 6413,
											"end": 6469,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6531,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 6413,
											"end": 6531,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6531,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6413,
											"end": 6531,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6413,
											"end": 6531,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 9881,
											"end": 10060,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 9881,
											"end": 10060,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9976,
											"end": 9983,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 10045,
											"end": 10053,
											"name": "PUSH",
											"source": 6,
											"value": "1DFE200"
										},
										{
											"begin": 10037,
											"end": 10041,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 10022,
											"end": 10033,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 10022,
											"end": 10033,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 10008,
											"end": 10019,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 10008,
											"end": 10033,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 10007,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 10007,
											"end": 10041,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 10007,
											"end": 10041,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 10007,
											"end": 10041,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 10007,
											"end": 10041,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2378,
											"end": 2395,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2362,
											"end": 2368,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2343,
											"end": 2359,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2410,
											"end": 2450,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2333,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2270,
											"end": 2457,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "tag",
											"source": 3,
											"value": "139"
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5214,
											"end": 5229,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5214,
											"end": 5229,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5214,
											"end": 5229,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5196,
											"end": 5230,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5266,
											"end": 5281,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5266,
											"end": 5281,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5246,
											"end": 5264,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5246,
											"end": 5264,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5246,
											"end": 5264,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5239,
											"end": 5282,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5298,
											"end": 5316,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5298,
											"end": 5316,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5298,
											"end": 5316,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5291,
											"end": 5325,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5291,
											"end": 5325,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5291,
											"end": 5325,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1070,
											"end": 1075,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1100,
											"end": 1127,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5131,
											"end": 5149,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 5131,
											"end": 5149,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "tag",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1077,
											"end": 1145,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1050,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "tag",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 1050,
											"end": 1146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 912,
											"end": 1153,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "tag",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6669,
											"end": 6676,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6669,
											"end": 6676,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6705,
											"end": 6716,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6701,
											"end": 6756,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 6701,
											"end": 6756,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6740,
											"end": 6741,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6740,
											"end": 6741,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6740,
											"end": 6741,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6732,
											"end": 6745,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 6732,
											"end": 6745,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6701,
											"end": 6756,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 6701,
											"end": 6756,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6828,
											"end": 6832,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 6806,
											"end": 6824,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6806,
											"end": 6824,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6797,
											"end": 6803,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "tag",
											"source": 6,
											"value": "219"
										},
										{
											"begin": 6797,
											"end": 6824,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 6796,
											"end": 6832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6786,
											"end": 6792,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 6786,
											"end": 6833,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6889,
											"end": 6893,
											"name": "PUSH",
											"source": 6,
											"value": "3E8"
										},
										{
											"begin": 6867,
											"end": 6885,
											"name": "PUSH",
											"source": 6,
											"value": "3"
										},
										{
											"begin": 6867,
											"end": 6885,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6864,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 6858,
											"end": 6885,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "98"
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 6857,
											"end": 6893,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6847,
											"end": 6853,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "tag",
											"source": 6,
											"value": "224"
										},
										{
											"begin": 6847,
											"end": 6894,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6904,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6904,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6904,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6765,
											"end": 6904,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "tag",
											"source": 6,
											"value": "217"
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6552,
											"end": 6911,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3005,
											"end": 3037,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 840,
											"end": 898,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 840,
											"end": 898,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2987,
											"end": 3038,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3054,
											"end": 3072,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3047,
											"end": 3081,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 813,
											"end": 899,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 833,
											"end": 838,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 863,
											"end": 886,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2960,
											"end": 2978,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 840,
											"end": 898,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 2813,
											"end": 3087,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 813,
											"end": 899,
											"name": "tag",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 813,
											"end": 899,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 701,
											"end": 906,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 5872,
											"end": 6103,
											"name": "tag",
											"source": 6,
											"value": "202"
										},
										{
											"begin": 5872,
											"end": 6103,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5969,
											"end": 5976,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6088,
											"end": 6096,
											"name": "PUSH",
											"source": 6,
											"value": "1E13380"
										},
										{
											"begin": 6053,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 6071,
											"end": 6076,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6053,
											"end": 6068,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 6053,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 6053,
											"end": 6076,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 6053,
											"end": 6076,
											"name": "tag",
											"source": 6,
											"value": "229"
										},
										{
											"begin": 6053,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6052,
											"end": 6084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "153"
										},
										{
											"begin": 6052,
											"end": 6084,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6080,
											"end": 6084,
											"name": "PUSH",
											"source": 6,
											"value": "D3C21BCECCEDA1000000"
										},
										{
											"begin": 6052,
											"end": 6084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "96"
										},
										{
											"begin": 6052,
											"end": 6084,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "tag",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 3207,
											"end": 3913,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3649,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 3680,
											"end": 3684,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3660,
											"end": 3665,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "234"
										},
										{
											"begin": 3652,
											"end": 3679,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "tag",
											"source": 3,
											"value": "233"
										},
										{
											"begin": 3652,
											"end": 3721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3735,
											"end": 3752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3626,
											"end": 3721,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3735,
											"end": 3756,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3731,
											"end": 3907,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3830,
											"end": 3840,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "236"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "tag",
											"source": 3,
											"value": "236"
										},
										{
											"begin": 3819,
											"end": 3849,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5538,
											"end": 5540,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5520,
											"end": 5541,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5577,
											"end": 5579,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 5557,
											"end": 5575,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5557,
											"end": 5575,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5557,
											"end": 5575,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5550,
											"end": 5580,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5616,
											"end": 5650,
											"name": "PUSH",
											"source": 7,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 5596,
											"end": 5614,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 5596,
											"end": 5614,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5596,
											"end": 5614,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5589,
											"end": 5651,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5660,
											"end": 5700,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5717,
											"end": 5736,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 5717,
											"end": 5736,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3811,
											"end": 3896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 5336,
											"end": 5742,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "234"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3994,
											"end": 4006,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 4047,
											"end": 4053,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4055,
											"end": 4059,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4061,
											"end": 4062,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4064,
											"end": 4076,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4025,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 4025,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "tag",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3861,
											"end": 4084,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "tag",
											"source": 4,
											"value": "242"
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5113,
											"end": 5125,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5170,
											"end": 5175,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5166,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 5145,
											"end": 5175,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5949,
											"end": 5951,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5931,
											"end": 5952,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5988,
											"end": 5990,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 5968,
											"end": 5986,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 5968,
											"end": 5986,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5968,
											"end": 5986,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5961,
											"end": 5991,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6027,
											"end": 6061,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 6007,
											"end": 6025,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6007,
											"end": 6025,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6007,
											"end": 6025,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6000,
											"end": 6062,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6078,
											"end": 6096,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6078,
											"end": 6096,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6078,
											"end": 6096,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6071,
											"end": 6107,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6124,
											"end": 6143,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 6124,
											"end": 6143,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 5747,
											"end": 6149,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "tag",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 5137,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6356,
											"end": 6358,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6338,
											"end": 6359,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6395,
											"end": 6397,
											"name": "PUSH",
											"source": 7,
											"value": "1D"
										},
										{
											"begin": 6375,
											"end": 6393,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 6375,
											"end": 6393,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6375,
											"end": 6393,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6368,
											"end": 6398,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6434,
											"end": 6465,
											"name": "PUSH",
											"source": 7,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 6414,
											"end": 6432,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 6414,
											"end": 6432,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6414,
											"end": 6432,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6407,
											"end": 6466,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6483,
											"end": 6501,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 6483,
											"end": 6501,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 6154,
											"end": 6507,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "tag",
											"source": 4,
											"value": "249"
										},
										{
											"begin": 5228,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5300,
											"end": 5312,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5314,
											"end": 5337,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5347,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5341,
											"end": 5352,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5360,
											"end": 5365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5367,
											"end": 5371,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "252"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "tag",
											"source": 4,
											"value": "255"
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5341,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5299,
											"end": 5372,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 5406,
											"end": 5413,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5415,
											"end": 5425,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5427,
											"end": 5439,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5389,
											"end": 5405,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "tag",
											"source": 4,
											"value": "257"
										},
										{
											"begin": 5389,
											"end": 5440,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5382,
											"end": 5440,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4948,
											"end": 5447,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "tag",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 7561,
											"end": 8253,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7707,
											"end": 7719,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 7735,
											"end": 7742,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7765,
											"end": 7775,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "240"
										},
										{
											"begin": 7758,
											"end": 7775,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "tag",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 7731,
											"end": 8247,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7893,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7876,
											"end": 7897,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "263"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8070,
											"end": 8080,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8064,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8130,
											"end": 8145,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8117,
											"end": 8127,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8113,
											"end": 8115,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8109,
											"end": 8128,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8102,
											"end": 8146,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "tag",
											"source": 4,
											"value": "263"
										},
										{
											"begin": 7872,
											"end": 8237,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8209,
											"end": 8221,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "266"
										},
										{
											"begin": 8202,
											"end": 8222,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "89"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "267"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "267"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1092,
											"end": 1098,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1100,
											"end": 1106,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1153,
											"end": 1155,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1141,
											"end": 1150,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1132,
											"end": 1139,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1128,
											"end": 1151,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1124,
											"end": 1156,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1169,
											"end": 1170,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1166,
											"end": 1167,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1159,
											"end": 1171,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "tag",
											"source": 7,
											"value": "275"
										},
										{
											"begin": 1121,
											"end": 1173,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1192,
											"end": 1215,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1262,
											"end": 1264,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1247,
											"end": 1265,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1234,
											"end": 1266,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1234,
											"end": 1266,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1024,
											"end": 1272,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1336,
											"end": 1342,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1389,
											"end": 1391,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1377,
											"end": 1386,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1368,
											"end": 1375,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1364,
											"end": 1387,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1360,
											"end": 1392,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1405,
											"end": 1406,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1402,
											"end": 1403,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1395,
											"end": 1407,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "tag",
											"source": 7,
											"value": "277"
										},
										{
											"begin": 1357,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1428,
											"end": 1451,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1428,
											"end": 1451,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1277,
											"end": 1457,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 1670,
											"end": 1956,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1729,
											"end": 1735,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1782,
											"end": 1784,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1770,
											"end": 1779,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1761,
											"end": 1768,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1757,
											"end": 1780,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1753,
											"end": 1785,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1798,
											"end": 1799,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1795,
											"end": 1796,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1788,
											"end": 1800,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "tag",
											"source": 7,
											"value": "280"
										},
										{
											"begin": 1750,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1824,
											"end": 1847,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1824,
											"end": 1847,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1876,
											"end": 1907,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1876,
											"end": 1907,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1866,
											"end": 1908,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1866,
											"end": 1908,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "240"
										},
										{
											"begin": 1856,
											"end": 1926,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1919,
											"end": 1920,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1912,
											"end": 1924,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2153,
											"end": 2280,
											"name": "tag",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 2153,
											"end": 2280,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2214,
											"end": 2224,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 2209,
											"end": 2212,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2205,
											"end": 2225,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2202,
											"end": 2203,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2226,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2245,
											"end": 2249,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 2242,
											"end": 2243,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2235,
											"end": 2250,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2273,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2266,
											"end": 2267,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2259,
											"end": 2274,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2325,
											"end": 2332,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2391,
											"end": 2392,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2388,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2379,
											"end": 2393,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2376,
											"end": 2377,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2373,
											"end": 2394,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2368,
											"end": 2369,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2361,
											"end": 2370,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2354,
											"end": 2371,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2350,
											"end": 2395,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 2347,
											"end": 2418,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "tag",
											"source": 7,
											"value": "286"
										},
										{
											"begin": 2398,
											"end": 2416,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2438,
											"end": 2447,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 2438,
											"end": 2447,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2285,
											"end": 2453,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2498,
											"end": 2499,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2524,
											"end": 2525,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2568,
											"end": 2578,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 2563,
											"end": 2566,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2559,
											"end": 2579,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2556,
											"end": 2557,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2549,
											"end": 2580,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2603,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 2600,
											"end": 2601,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2593,
											"end": 2608,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2631,
											"end": 2635,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2628,
											"end": 2629,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2621,
											"end": 2636,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "tag",
											"source": 7,
											"value": "288"
										},
										{
											"begin": 2514,
											"end": 2646,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2660,
											"end": 2669,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2660,
											"end": 2669,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2458,
											"end": 2675,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2720,
											"end": 2723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2751,
											"end": 2752,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2747,
											"end": 2753,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2744,
											"end": 2745,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2741,
											"end": 2754,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 2738,
											"end": 2777,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "tag",
											"source": 7,
											"value": "291"
										},
										{
											"begin": 2757,
											"end": 2775,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2793,
											"end": 2802,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2680,
											"end": 2808,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3092,
											"end": 3369,
											"name": "tag",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 3092,
											"end": 3369,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3159,
											"end": 3165,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3214,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3200,
											"end": 3209,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3191,
											"end": 3198,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3187,
											"end": 3210,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3183,
											"end": 3215,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3228,
											"end": 3229,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3225,
											"end": 3226,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3218,
											"end": 3230,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "tag",
											"source": 7,
											"value": "294"
										},
										{
											"begin": 3180,
											"end": 3232,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3260,
											"end": 3269,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3254,
											"end": 3270,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3313,
											"end": 3318,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3306,
											"end": 3319,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3299,
											"end": 3320,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3292,
											"end": 3297,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3289,
											"end": 3321,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3279,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "240"
										},
										{
											"begin": 3279,
											"end": 3339,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3335,
											"end": 3336,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3332,
											"end": 3333,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3325,
											"end": 3337,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "tag",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3576,
											"end": 3578,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3558,
											"end": 3579,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3595,
											"end": 3613,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3588,
											"end": 3618,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3654,
											"end": 3688,
											"name": "PUSH",
											"source": 7,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 3649,
											"end": 3651,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3634,
											"end": 3652,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3627,
											"end": 3689,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3721,
											"end": 3723,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3706,
											"end": 3724,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3706,
											"end": 3724,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3374,
											"end": 3730,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4419,
											"end": 4544,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 4419,
											"end": 4544,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4459,
											"end": 4463,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4487,
											"end": 4488,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4484,
											"end": 4485,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4481,
											"end": 4489,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4512,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4478,
											"end": 4512,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 4478,
											"end": 4512,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "269"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "tag",
											"source": 7,
											"value": "301"
										},
										{
											"begin": 4492,
											"end": 4510,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4529,
											"end": 4538,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4529,
											"end": 4538,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4419,
											"end": 4544,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6512,
											"end": 6770,
											"name": "tag",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 6512,
											"end": 6770,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6584,
											"end": 6585,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "tag",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6608,
											"end": 6614,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6605,
											"end": 6606,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6602,
											"end": 6615,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6684,
											"end": 6695,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6684,
											"end": 6695,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6684,
											"end": 6695,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6678,
											"end": 6696,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6665,
											"end": 6676,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6665,
											"end": 6676,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6665,
											"end": 6676,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6658,
											"end": 6697,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6630,
											"end": 6632,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6623,
											"end": 6633,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "308"
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "tag",
											"source": 7,
											"value": "310"
										},
										{
											"begin": 6594,
											"end": 6707,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6725,
											"end": 6731,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6722,
											"end": 6723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6719,
											"end": 6732,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 6716,
											"end": 6764,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6716,
											"end": 6764,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "213"
										},
										{
											"begin": 6716,
											"end": 6764,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6760,
											"end": 6761,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6742,
											"end": 6758,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6742,
											"end": 6758,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6735,
											"end": 6762,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6512,
											"end": 6770,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6775,
											"end": 7049,
											"name": "tag",
											"source": 7,
											"value": "253"
										},
										{
											"begin": 6775,
											"end": 7049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6904,
											"end": 6907,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6942,
											"end": 6948,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6936,
											"end": 6949,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6958,
											"end": 7011,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 7004,
											"end": 7010,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6999,
											"end": 7002,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 6996,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6984,
											"end": 6990,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 6980,
											"end": 6997,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6958,
											"end": 7011,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 6958,
											"end": 7011,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6958,
											"end": 7011,
											"name": "tag",
											"source": 7,
											"value": "313"
										},
										{
											"begin": 6958,
											"end": 7011,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7027,
											"end": 7043,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6775,
											"end": 7049,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6775,
											"end": 7049,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7054,
											"end": 7437,
											"name": "tag",
											"source": 7,
											"value": "266"
										},
										{
											"begin": 7054,
											"end": 7437,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7203,
											"end": 7205,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7192,
											"end": 7201,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7185,
											"end": 7206,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7166,
											"end": 7170,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7235,
											"end": 7241,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7229,
											"end": 7242,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7278,
											"end": 7284,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7273,
											"end": 7275,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7262,
											"end": 7271,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7258,
											"end": 7276,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7251,
											"end": 7285,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7294,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 7353,
											"end": 7359,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7348,
											"end": 7350,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7337,
											"end": 7346,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 7333,
											"end": 7351,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7328,
											"end": 7330,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7320,
											"end": 7326,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7316,
											"end": 7331,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7294,
											"end": 7360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "270"
										},
										{
											"begin": 7294,
											"end": 7360,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7294,
											"end": 7360,
											"name": "tag",
											"source": 7,
											"value": "315"
										},
										{
											"begin": 7294,
											"end": 7360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7421,
											"end": 7423,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7400,
											"end": 7415,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7396,
											"end": 7425,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7381,
											"end": 7426,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7381,
											"end": 7426,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7381,
											"end": 7426,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7381,
											"end": 7426,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7428,
											"end": 7430,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7377,
											"end": 7431,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7377,
											"end": 7431,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7054,
											"end": 7437,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7054,
											"end": 7437,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"_blockTimestamp()": "c63aa3e7",
							"airdropRate()": "8891cf0d",
							"airdropSince()": "b87da76d",
							"calculateWeek(uint256)": "b5d9df83",
							"changeAirdropPercentage(uint256)": "d5dbdf1b",
							"changePenaltyFee(uint256)": "8c63f97f",
							"claimAirdrop()": "5b88349d",
							"hasStake()": "10486b6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"stake(uint256,uint256)": "7b0472f0",
							"stakingPenaltyRate()": "cb79c2e1",
							"startAirdrop()": "d2a569c3",
							"token_address()": "8c8e8fee",
							"totalVoters()": "5f5300ff",
							"transferOwnership(address)": "f2fde38b",
							"votedUsers(uint256)": "a143a5f2",
							"voters(address)": "a3ec138d",
							"withdrawStake()": "bed9d861"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Airdrop__claimableOnceAWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__airdropExceed20Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__noStakingFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__penaltyExceed3Percent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__userIsStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking_noStakingPackageFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_blockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropSince\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"calculateWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeAirdropPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAirdrop\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimDrop\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Stake\",\"name\":\"stake\",\"type\":\"tuple\"}],\"internalType\":\"struct Staking.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakePeriod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPenaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVoters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"votingRight\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"Airdrop__claimableOnceAWeek()\":[{\"notice\":\"Error handling message for Airdrop functions\"}]},\"events\":{\"Staked(address,uint256,uint256,uint256)\":{\"notice\":\"Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\"}},\"kind\":\"user\",\"methods\":{\"stake(uint256,uint256)\":{\"notice\":\"_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID\"},\"withdrawStake()\":{\"notice\":\"withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Stake-2.0.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a2f8d5814dd0f05f22b740f18ca8321acc21c9bd03a6cb2203ea626e2f3f2\",\"dweb:/ipfs/QmZRQv9iuwU817VuqkA2WweiaibKii69x9QxYBBEfbNEud\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/Stake-2.0.sol\":{\"keccak256\":\"0x99a762ba61a80c62e18c3ef426629140cf820788804b6e3183ade5349d130d4a\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://5ea9a7da60968f60ef16f578b7b7660fc35e1585e9c0205f1b42b385ace74d20\",\"dweb:/ipfs/QmeqTce9NiE32nUpKQ4oswgmJQ2ZjWVSTSQ9WgApsWfHiY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 115,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 7,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_owner",
								"offset": 0,
								"slot": "1",
								"type": "t_address"
							},
							{
								"astId": 815,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPackage",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 817,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakingPenaltyRate",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 819,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 821,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "airdropSince",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 823,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingStatus",
								"offset": 0,
								"slot": "6",
								"type": "t_bool"
							},
							{
								"astId": 825,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "_votingId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 827,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "totalVoters",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 832,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "voters",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_struct(Voter)811_storage)"
							},
							{
								"astId": 836,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "votedUsers",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 838,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "token_address",
								"offset": 0,
								"slot": "11",
								"type": "t_address"
							},
							{
								"astId": 903,
								"contract": "contracts/Stake-2.0.sol:Staking",
								"label": "stakeholders",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_struct(Stake)889_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_struct(Stake)889_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Stake)",
								"numberOfBytes": "32",
								"value": "t_struct(Stake)889_storage"
							},
							"t_mapping(t_address,t_struct(Voter)811_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct Staking.Voter)",
								"numberOfBytes": "32",
								"value": "t_struct(Voter)811_storage"
							},
							"t_mapping(t_uint256,t_bool)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_struct(Stake)889_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Stake",
								"members": [
									{
										"astId": 876,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "amount",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 878,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "since",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 880,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "rewardAPY",
										"offset": 0,
										"slot": "2",
										"type": "t_uint256"
									},
									{
										"astId": 882,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "releaseTime",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 884,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimable",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 886,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "claimableAirdrop",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 888,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "latestClaimDrop",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "224"
							},
							"t_struct(Voter)811_storage": {
								"encoding": "inplace",
								"label": "struct Staking.Voter",
								"members": [
									{
										"astId": 806,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "votingRight",
										"offset": 0,
										"slot": "0",
										"type": "t_bool"
									},
									{
										"astId": 810,
										"contract": "contracts/Stake-2.0.sol:Staking",
										"label": "voted",
										"offset": 0,
										"slot": "1",
										"type": "t_mapping(t_uint256,t_bool)"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"errors": {
							"Airdrop__claimableOnceAWeek()": [
								{
									"notice": "Error handling message for Airdrop functions"
								}
							]
						},
						"events": {
							"Staked(address,uint256,uint256,uint256)": {
								"notice": "Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
							}
						},
						"kind": "user",
						"methods": {
							"stake(uint256,uint256)": {
								"notice": "_Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container StakeID"
							},
							"withdrawStake()": {
								"notice": "withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake Notice index of the stake is the users stake counter, starting at 0 for the first stake Will return the amount to MINT onto the account Will also _calculateStakeReward and reset timer"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							763
						],
						"Ownable": [
							104
						]
					},
					"id": 105,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 105,
							"sourceUnit": 764,
							"src": "112:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 763,
										"src": "668:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "668:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "144:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 104,
							"linearizedBaseContracts": [
								104,
								763
							],
							"name": "Ownable",
							"nameLocation": "657:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "698:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 104,
									"src": "682:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "682:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nameLocation": "717:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "754:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "738:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "785:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "769:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "769:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "737:57:0"
									},
									"src": "711:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "911:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 753,
																"src": "940:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "940:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "921:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "921:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "921:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "801:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "911:0:0"
									},
									"scope": 104,
									"src": "897:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "1091:30:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1108:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 28,
												"id": 30,
												"nodeType": "Return",
												"src": "1101:13:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "966:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 32,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1045:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1050:2:0"
									},
									"returnParameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1082:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1082:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1081:9:0"
									},
									"scope": 104,
									"src": "1036:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1230:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 40,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 36,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 32,
																	"src": "1248:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 37,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1248:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 38,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 753,
																	"src": "1259:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1259:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1248:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1273:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 35,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1240:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1240:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1240:68:0"
											},
											{
												"id": 44,
												"nodeType": "PlaceholderStatement",
												"src": "1318:1:0"
											}
										]
									},
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1127:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 46,
									"name": "onlyOwner",
									"nameLocation": "1218:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1227:2:0"
									},
									"src": "1209:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1722:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 55,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1751:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 53,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1751:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1751:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 52,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "1732:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 57,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1732:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 58,
												"nodeType": "ExpressionStatement",
												"src": "1732:30:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1332:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 60,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 50,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 49,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1712:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1712:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1677:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1694:2:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1722:0:0"
									},
									"scope": 104,
									"src": "1668:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 82,
										"nodeType": "Block",
										"src": "1988:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 69,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 63,
																"src": "2006:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 72,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2026:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2018:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 70,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2018:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 73,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2018:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2006:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2030:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 68,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 76,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 77,
												"nodeType": "ExpressionStatement",
												"src": "1998:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 79,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "2100:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 78,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2081:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2081:28:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1775:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 83,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 66,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 65,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "1927:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1953:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1945:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1944:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 104,
									"src": "1918:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2333:124:0",
										"statements": [
											{
												"assignments": [
													90
												],
												"declarations": [
													{
														"constant": false,
														"id": 90,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2351:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "2343:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 89,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2343:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 92,
												"initialValue": {
													"id": 91,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2362:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2343:25:0"
											},
											{
												"expression": {
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 93,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2378:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 94,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 86,
														"src": "2387:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2378:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2378:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 98,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 90,
															"src": "2431:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 99,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "2441:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 97,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2410:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2410:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 101,
												"nodeType": "EmitStatement",
												"src": "2405:45:0"
											}
										]
									},
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "2122:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2279:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2306:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2298:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2298:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2297:18:0"
									},
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2333:0:0"
									},
									"scope": 104,
									"src": "2270:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 105,
							"src": "639:1820:0",
							"usedErrors": []
						}
					],
					"src": "87:2373:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							144
						]
					},
					"id": 145,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 106,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 107,
								"nodeType": "StructuredDocumentation",
								"src": "122:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 144,
							"linearizedBaseContracts": [
								144
							],
							"name": "ReentrancyGuard",
							"nameLocation": "891:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 110,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1686:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1661:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1661:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 109,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1701:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 113,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1733:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1708:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 111,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1708:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 112,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1744:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 115,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1768:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 144,
									"src": "1752:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 114,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1752:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 122,
										"nodeType": "Block",
										"src": "1796:39:1",
										"statements": [
											{
												"expression": {
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 118,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "1806:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 119,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "1816:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1806:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1806:22:1"
											}
										]
									},
									"id": 123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1793:2:1"
									},
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1796:0:1"
									},
									"scope": 144,
									"src": "1782:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2236:421:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 129,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 127,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 115,
																"src": "2325:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 128,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 113,
																"src": "2336:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2325:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 130,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2346:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 126,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2317:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 132,
												"nodeType": "ExpressionStatement",
												"src": "2317:63:1"
											},
											{
												"expression": {
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 133,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2455:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 134,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 113,
														"src": "2465:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2455:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2455:18:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2484:1:1"
											},
											{
												"expression": {
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 138,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 139,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 110,
														"src": "2638:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2628:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 141,
												"nodeType": "ExpressionStatement",
												"src": "2628:22:1"
											}
										]
									},
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "1841:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 143,
									"name": "nonReentrant",
									"nameLocation": "2221:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2233:2:1"
									},
									"src": "2212:445:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 145,
							"src": "873:1786:1",
							"usedErrors": []
						}
					],
					"src": "97:2563:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							222
						]
					},
					"id": 223,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 146,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 222,
							"linearizedBaseContracts": [
								222
							],
							"name": "IERC20",
							"nameLocation": "212:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 148,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 153,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:2"
									},
									"returnParameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "342:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:2"
									},
									"scope": 222,
									"src": "296:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:2"
									},
									"returnParameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "493:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:2"
									},
									"scope": 222,
									"src": "434:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "733:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "745:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:2"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "779:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 168,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:2"
									},
									"scope": 222,
									"src": "715:70:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1079:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1094:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:2"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1134:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:2"
									},
									"scope": 222,
									"src": "1060:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1830:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:2"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1864:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 188,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:2"
									},
									"scope": 222,
									"src": "1796:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:2",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 203,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2199:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2241:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:2"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "2280:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 200,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:2"
									},
									"scope": 222,
									"src": "2168:118:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 212,
									"name": "Transfer",
									"nameLocation": "2461:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2470:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2492:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 210,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2512:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 209,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:2"
									},
									"src": "2455:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 221,
									"name": "Approval",
									"nameLocation": "2692:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2701:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2724:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:2"
									},
									"src": "2686:78:2"
								}
							],
							"scope": 223,
							"src": "202:2564:2",
							"usedErrors": []
						}
					],
					"src": "106:2661:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"IERC20": [
							222
						],
						"SafeERC20": [
							446
						]
					},
					"id": 447,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 224,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 225,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 223,
							"src": "125:23:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 226,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 447,
							"sourceUnit": 742,
							"src": "149:36:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 227,
								"nodeType": "StructuredDocumentation",
								"src": "187:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 446,
							"linearizedBaseContracts": [
								446
							],
							"name": "SafeERC20",
							"nameLocation": "653:9:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 230,
									"libraryName": {
										"id": 228,
										"name": "Address",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "675:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "669:26:3",
									"typeName": {
										"id": 229,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "687:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 252,
										"nodeType": "Block",
										"src": "803:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 241,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 233,
															"src": "833:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 244,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 233,
																			"src": "863:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 171,
																		"src": "863:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "863:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 247,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 235,
																	"src": "888:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 248,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 237,
																	"src": "892:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 242,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "840:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "840:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 249,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "840:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 240,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "813:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "813:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 251,
												"nodeType": "ExpressionStatement",
												"src": "813:86:3"
											}
										]
									},
									"id": 253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "739:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "732:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 232,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 231,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "732:6:3"
													},
													"referencedDeclaration": 222,
													"src": "732:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 235,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "762:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "754:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "754:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "782:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "774:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "774:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "722:71:3"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "803:0:3"
									},
									"scope": 446,
									"src": "701:205:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "1040:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 266,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 256,
															"src": "1070:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 269,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 256,
																			"src": "1100:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 203,
																		"src": "1100:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1100:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 272,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "1129:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "1135:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 262,
																	"src": "1139:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1077:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1077:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1077:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 265,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1050:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "1050:96:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "921:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "954:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "947:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 255,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 254,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "947:6:3"
													},
													"referencedDeclaration": 222,
													"src": "947:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "977:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "969:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "969:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "999:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "991:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "991:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1019:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "1011:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1011:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:93:3"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:3"
									},
									"scope": 446,
									"src": "912:241:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 322,
										"nodeType": "Block",
										"src": "1519:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 306,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 291,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "1768:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1777:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1768:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 294,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1767:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 304,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 299,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1808:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$446",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 298,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1800:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 297,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1800:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 300,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1800:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 301,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 285,
																					"src": "1815:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 295,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 283,
																					"src": "1784:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 181,
																				"src": "1784:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 302,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1784:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 303,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1827:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1784:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 305,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1783:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1767:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 307,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1843:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 290,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1746:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 308,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1746:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 309,
												"nodeType": "ExpressionStatement",
												"src": "1746:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 311,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "1939:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 314,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 283,
																			"src": "1969:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "1969:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1969:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 317,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 285,
																	"src": "1993:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 318,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "2002:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 312,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1946:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 313,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1946:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1946:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 310,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "1919:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1919:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 321,
												"nodeType": "ExpressionStatement",
												"src": "1919:90:3"
											}
										]
									},
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "1159:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1422:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1450:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1443:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 282,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 281,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "1443:6:3"
													},
													"referencedDeclaration": 222,
													"src": "1443:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1473:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1465:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1498:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "1490:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1433:76:3"
									},
									"returnParameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1519:0:3"
									},
									"scope": 446,
									"src": "1413:603:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2138:194:3",
										"statements": [
											{
												"assignments": [
													334
												],
												"declarations": [
													{
														"constant": false,
														"id": 334,
														"mutability": "mutable",
														"name": "newAllowance",
														"nameLocation": "2156:12:3",
														"nodeType": "VariableDeclaration",
														"scope": 358,
														"src": "2148:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 333,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2148:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 345,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 339,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2195:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20_$446",
																			"typeString": "library SafeERC20"
																		}
																	],
																	"id": 338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2187:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 337,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2187:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 340,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2187:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 341,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 328,
																"src": "2202:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 335,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2171:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$222",
																	"typeString": "contract IERC20"
																}
															},
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 181,
															"src": "2171:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 342,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2171:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 343,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "2213:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2171:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2148:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 347,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 326,
															"src": "2248:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 350,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 326,
																			"src": "2278:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$222",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 191,
																		"src": "2278:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 352,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2278:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 353,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 328,
																	"src": "2302:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 354,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 334,
																	"src": "2311:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 348,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2255:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 349,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2255:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2255:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 346,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 445,
														"src": "2228:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2228:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2228:97:3"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2031:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2069:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2062:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 324,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2062:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2062:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2092:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2084:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2084:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2117:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "2109:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2109:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2052:76:3"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2138:0:3"
									},
									"scope": 446,
									"src": "2022:310:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "2454:370:3",
										"statements": [
											{
												"id": 405,
												"nodeType": "UncheckedBlock",
												"src": "2464:354:3",
												"statements": [
													{
														"assignments": [
															370
														],
														"declarations": [
															{
																"constant": false,
																"id": 370,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "2496:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2488:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 369,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2488:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 379,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 375,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2535:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$446",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2527:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 373,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2527:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 376,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2527:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 377,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "2542:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 371,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2511:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 181,
																"src": "2511:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2511:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2488:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "2572:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 382,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "2588:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2572:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2595:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 380,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2564:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2564:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 386,
														"nodeType": "ExpressionStatement",
														"src": "2564:75:3"
													},
													{
														"assignments": [
															388
														],
														"declarations": [
															{
																"constant": false,
																"id": 388,
																"mutability": "mutable",
																"name": "newAllowance",
																"nameLocation": "2661:12:3",
																"nodeType": "VariableDeclaration",
																"scope": 405,
																"src": "2653:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 387,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2653:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 392,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 391,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 389,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 370,
																"src": "2676:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 390,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 366,
																"src": "2691:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2676:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2653:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 394,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "2730:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 362,
																					"src": "2760:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$222",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 398,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 191,
																				"src": "2760:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 399,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2760:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 400,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 364,
																			"src": "2784:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "2793:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 395,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2737:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2737:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2737:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 393,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "2710:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2710:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 404,
														"nodeType": "ExpressionStatement",
														"src": "2710:97:3"
													}
												]
											}
										]
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2347:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2385:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2378:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 361,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 360,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "2378:6:3"
													},
													"referencedDeclaration": 222,
													"src": "2378:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2408:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2400:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2400:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2433:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "2425:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2425:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2368:76:3"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2454:0:3"
									},
									"scope": 446,
									"src": "2338:486:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 444,
										"nodeType": "Block",
										"src": "3277:636:3",
										"statements": [
											{
												"assignments": [
													417
												],
												"declarations": [
													{
														"constant": false,
														"id": 417,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3639:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 444,
														"src": "3626:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 416,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3626:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 426,
												"initialValue": {
													"arguments": [
														{
															"id": 423,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3680:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 424,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3686:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "3660:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$222",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3652:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3652:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3652:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 535,
														"src": "3652:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3652:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3626:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 427,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 417,
															"src": "3735:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3735:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 429,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3755:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3735:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 443,
												"nodeType": "IfStatement",
												"src": "3731:176:3",
												"trueBody": {
													"id": 442,
													"nodeType": "Block",
													"src": "3758:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 434,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 417,
																				"src": "3830:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 436,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3843:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 435,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3843:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 437,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3842:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 432,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3819:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 433,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3819:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3819:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3851:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 431,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3811:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3811:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 441,
															"nodeType": "ExpressionStatement",
															"src": "3811:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "2830:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 445,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "3216:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3243:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3236:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$222",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 222,
														"src": "3236:6:3"
													},
													"referencedDeclaration": 222,
													"src": "3236:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$222",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3263:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "3250:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 412,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3250:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:33:3"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3277:0:3"
									},
									"scope": 446,
									"src": "3207:706:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 447,
							"src": "645:3270:3",
							"usedErrors": []
						}
					],
					"src": "100:3816:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							741
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 448,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 449,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741
							],
							"name": "Address",
							"nameLocation": "202:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 463,
										"nodeType": "Block",
										"src": "1241:254:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 457,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 452,
																"src": "1465:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1465:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1465:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1487:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1465:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 456,
												"id": 462,
												"nodeType": "Return",
												"src": "1458:30:4"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "216:954:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 464,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1184:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1203:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1195:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 451,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1195:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:17:4"
									},
									"returnParameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 464,
												"src": "1235:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 454,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1235:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1234:6:4"
									},
									"scope": 741,
									"src": "1175:320:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 497,
										"nodeType": "Block",
										"src": "2483:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 475,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2509:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2501:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 473,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2501:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 476,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2501:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2501:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 478,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2526:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2501:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2534:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 472,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2493:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "2493:73:4"
											},
											{
												"assignments": [
													484,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2583:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 497,
														"src": "2578:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 483,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2578:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 491,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2626:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 485,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 467,
																"src": "2596:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 486,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2596:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 487,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "2618:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2596:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2596:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 484,
															"src": "2647:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2656:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 492,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2639:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2639:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "2639:78:4"
											}
										]
									},
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "1501:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2421:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 467,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2447:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2431:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2431:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2466:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 498,
												"src": "2458:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2458:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2430:43:4"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2483:0:4"
									},
									"scope": 741,
									"src": "2412:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 514,
										"nodeType": "Block",
										"src": "3555:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 509,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 501,
															"src": "3585:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 510,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 503,
															"src": "3593:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3599:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 508,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															515,
															535
														],
														"referencedDeclaration": 535,
														"src": "3572:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 507,
												"id": 513,
												"nodeType": "Return",
												"src": "3565:67:4"
											}
										]
									},
									"documentation": {
										"id": 499,
										"nodeType": "StructuredDocumentation",
										"src": "2730:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3475:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3496:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3488:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3517:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3504:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 502,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3504:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:35:4"
									},
									"returnParameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "3541:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 505,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3541:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3540:14:4"
									},
									"scope": 741,
									"src": "3466:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 534,
										"nodeType": "Block",
										"src": "4008:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 528,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4047:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 529,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 520,
															"src": "4055:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 530,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4061:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 531,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 522,
															"src": "4064:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 527,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4025:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4025:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 526,
												"id": 533,
												"nodeType": "Return",
												"src": "4018:59:4"
											}
										]
									},
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "3645:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 535,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3870:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3900:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3892:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 517,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3892:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 520,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3929:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3916:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 519,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3916:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3957:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3943:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 521,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3943:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3882:93:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "3994:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3993:14:4"
									},
									"scope": 741,
									"src": "3861:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "4589:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 538,
															"src": "4628:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "4636:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "4642:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4649:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 547,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															555,
															605
														],
														"referencedDeclaration": 605,
														"src": "4606:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4606:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 546,
												"id": 553,
												"nodeType": "Return",
												"src": "4599:94:4"
											}
										]
									},
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "4090:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4455:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4494:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4486:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4523:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4510:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 539,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4510:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4545:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4537:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 541,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4537:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4476:80:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "4575:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 544,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4575:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4574:14:4"
									},
									"scope": 741,
									"src": "4446:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "5127:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 572,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5153:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$741",
																				"typeString": "library Address"
																			}
																		],
																		"id": 571,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5145:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 570,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5145:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5145:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5145:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 575,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5170:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5145:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5177:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 569,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5137:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5137:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "5137:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 582,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "5247:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 581,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "5236:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 583,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5236:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5256:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 580,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5228:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 585,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5228:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 586,
												"nodeType": "ExpressionStatement",
												"src": "5228:60:4"
											},
											{
												"assignments": [
													588,
													590
												],
												"declarations": [
													{
														"constant": false,
														"id": 588,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5305:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5300:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 587,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 590,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5327:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 604,
														"src": "5314:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 589,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5314:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"initialValue": {
													"arguments": [
														{
															"id": 595,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 560,
															"src": "5367:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 591,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 558,
																"src": "5341:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5341:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 594,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 593,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 562,
																"src": "5360:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5341:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5341:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5299:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 599,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5406:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 600,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "5415:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 601,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "5427:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 598,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "5389:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5389:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 568,
												"id": 603,
												"nodeType": "Return",
												"src": "5382:58:4"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "4706:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4957:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4996:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "4988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5025:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5012:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 559,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5012:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5047:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5039:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5039:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5076:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5062:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 563,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5062:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4978:116:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 605,
												"src": "5113:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 566,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5113:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5112:14:4"
									},
									"scope": 741,
									"src": "4948:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "5724:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 616,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5760:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 610,
															"src": "5768:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5774:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 615,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															622,
															657
														],
														"referencedDeclaration": 657,
														"src": "5741:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5741:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 614,
												"id": 620,
												"nodeType": "Return",
												"src": "5734:80:4"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "5453:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5633:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5660:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 607,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 610,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5681:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5668:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 609,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5668:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5651:35:4"
									},
									"returnParameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "5710:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5710:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5709:14:4"
									},
									"scope": 741,
									"src": "5624:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 656,
										"nodeType": "Block",
										"src": "6163:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 636,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 625,
																	"src": "6192:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 635,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "6181:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6181:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6201:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 634,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6173:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6173:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6173:67:4"
											},
											{
												"assignments": [
													642,
													644
												],
												"declarations": [
													{
														"constant": false,
														"id": 642,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6257:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 641,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 644,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6279:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 656,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 643,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "6311:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 645,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "6293:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6293:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "6350:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 652,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "6359:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 653,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "6371:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 650,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "6333:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6333:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 633,
												"id": 655,
												"nodeType": "Return",
												"src": "6326:58:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "5827:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6014:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6050:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6042:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6079:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6066:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6066:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6107:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6093:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 628,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6093:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6032:93:4"
									},
									"returnParameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 657,
												"src": "6149:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 631,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6149:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:14:4"
									},
									"scope": 741,
									"src": "6005:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 673,
										"nodeType": "Block",
										"src": "6667:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "6705:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 669,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "6713:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6719:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 667,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															674,
															709
														],
														"referencedDeclaration": 709,
														"src": "6684:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 666,
												"id": 672,
												"nodeType": "Return",
												"src": "6677:84:4"
											}
										]
									},
									"documentation": {
										"id": 658,
										"nodeType": "StructuredDocumentation",
										"src": "6397:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 674,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6579:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6608:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6600:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 659,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6600:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6616:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6599:35:4"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "6653:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6653:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6652:14:4"
									},
									"scope": 741,
									"src": "6570:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7109:232:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 688,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "7138:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 687,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 464,
																"src": "7127:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7127:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 690,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7147:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 686,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7119:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 691,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 692,
												"nodeType": "ExpressionStatement",
												"src": "7119:69:4"
											},
											{
												"assignments": [
													694,
													696
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7205:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7200:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 693,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7200:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 696,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7227:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7214:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 695,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7214:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [
														{
															"id": 699,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "7261:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 697,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "7241:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7241:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7241:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7199:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 703,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7300:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 704,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 705,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 681,
															"src": "7321:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 702,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7283:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7283:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 685,
												"id": 707,
												"nodeType": "Return",
												"src": "7276:58:4"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "6774:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6963:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7001:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "6993:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6993:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7030:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7017:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 678,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7017:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7058:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7044:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 680,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7044:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6983:93:4"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7095:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7095:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7094:14:4"
									},
									"scope": 741,
									"src": "6954:387:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "7721:532:4",
										"statements": [
											{
												"condition": {
													"id": 721,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 712,
													"src": "7735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "7792:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 725,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 714,
																		"src": "7876:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7876:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 727,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7896:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7876:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 735,
																"nodeType": "Block",
																"src": "8184:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 732,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 716,
																					"src": "8209:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 731,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "8202:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8202:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 734,
																		"nodeType": "ExpressionStatement",
																		"src": "8202:20:4"
																	}
																]
															},
															"id": 736,
															"nodeType": "IfStatement",
															"src": "7872:365:4",
															"trueBody": {
																"id": 730,
																"nodeType": "Block",
																"src": "7899:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8019:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8041:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8070:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8064:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8064:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8045:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8113:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8117:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8109:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8109:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8130:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8102:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8102:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8102:44:4"
																				}
																			]
																		},
																		"evmVersion": "london",
																		"externalReferences": [
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8070:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 714,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8117:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 729,
																		"nodeType": "InlineAssembly",
																		"src": "8010:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "7731:516:4",
												"trueBody": {
													"id": 724,
													"nodeType": "Block",
													"src": "7744:42:4",
													"statements": [
														{
															"expression": {
																"id": 722,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "7765:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 720,
															"id": 723,
															"nodeType": "Return",
															"src": "7758:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7347:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7570:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7601:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7596:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7596:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7631:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7618:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 713,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7618:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7665:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7651:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 715,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7651:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7586:97:4"
									},
									"returnParameters": {
										"id": 720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "7707:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 718,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7707:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:14:4"
									},
									"scope": 741,
									"src": "7561:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "194:8061:4",
							"usedErrors": []
						}
					],
					"src": "101:8155:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							763
						]
					},
					"id": 764,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 763,
							"linearizedBaseContracts": [
								763
							],
							"name": "Context",
							"nameLocation": "626:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 752,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 749,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 748,
												"id": 751,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 763,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 761,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 758,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 757,
												"id": 760,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 762,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 754,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 755,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 763,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 764,
							"src": "608:235:5",
							"usedErrors": []
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"contracts/Stake-2.0.sol": {
				"ast": {
					"absolutePath": "contracts/Stake-2.0.sol",
					"exportedSymbols": {
						"Address": [
							741
						],
						"Airdrop__claimableOnceAWeek": [
							791
						],
						"Context": [
							763
						],
						"Function__notAVoter": [
							773
						],
						"Function__notAuthorized": [
							771
						],
						"Function__votingNotAvailable": [
							775
						],
						"IERC20": [
							222
						],
						"Ownable": [
							104
						],
						"ReentrancyGuard": [
							144
						],
						"SafeERC20": [
							446
						],
						"Staking": [
							1509
						],
						"Staking__airdropExceed20Percent": [
							784
						],
						"Staking__cannotStakeNothing": [
							778
						],
						"Staking__noStakingFound": [
							786
						],
						"Staking__penaltyExceed3Percent": [
							782
						],
						"Staking__userIsStaker": [
							780
						],
						"Staking_noStakingPackageFound": [
							788
						],
						"Voting__alreadyVoted": [
							796
						],
						"Voting__notEnoughVoters": [
							800
						],
						"Voting__notYetVoted": [
							798
						],
						"Voting__votingIsRunning": [
							794
						]
					},
					"id": 1510,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 765,
							"literals": [
								"solidity",
								"0.8",
								".11"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 766,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1510,
							"sourceUnit": 447,
							"src": "64:65:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 767,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1510,
							"sourceUnit": 145,
							"src": "130:62:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 768,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1510,
							"sourceUnit": 105,
							"src": "193:52:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"documentation": {
								"id": 769,
								"nodeType": "StructuredDocumentation",
								"src": "247:54:6",
								"text": " @notice Error handling message for Modifier"
							},
							"id": 771,
							"name": "Function__notAuthorized",
							"nameLocation": "308:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 770,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "331:2:6"
							},
							"src": "302:32:6"
						},
						{
							"id": 773,
							"name": "Function__notAVoter",
							"nameLocation": "341:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 772,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "360:2:6"
							},
							"src": "335:28:6"
						},
						{
							"id": 775,
							"name": "Function__votingNotAvailable",
							"nameLocation": "370:28:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 774,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "398:2:6"
							},
							"src": "364:37:6"
						},
						{
							"documentation": {
								"id": 776,
								"nodeType": "StructuredDocumentation",
								"src": "403:63:6",
								"text": " @notice Error handling message for Staking functions"
							},
							"id": 778,
							"name": "Staking__cannotStakeNothing",
							"nameLocation": "473:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 777,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "500:2:6"
							},
							"src": "467:36:6"
						},
						{
							"id": 780,
							"name": "Staking__userIsStaker",
							"nameLocation": "510:21:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 779,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "531:2:6"
							},
							"src": "504:30:6"
						},
						{
							"id": 782,
							"name": "Staking__penaltyExceed3Percent",
							"nameLocation": "541:30:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 781,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "571:2:6"
							},
							"src": "535:39:6"
						},
						{
							"id": 784,
							"name": "Staking__airdropExceed20Percent",
							"nameLocation": "581:31:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 783,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "612:2:6"
							},
							"src": "575:40:6"
						},
						{
							"id": 786,
							"name": "Staking__noStakingFound",
							"nameLocation": "622:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 785,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "645:2:6"
							},
							"src": "616:32:6"
						},
						{
							"id": 788,
							"name": "Staking_noStakingPackageFound",
							"nameLocation": "655:29:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 787,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "684:2:6"
							},
							"src": "649:38:6"
						},
						{
							"documentation": {
								"id": 789,
								"nodeType": "StructuredDocumentation",
								"src": "689:63:6",
								"text": " @notice Error handling message for Airdrop functions"
							},
							"id": 791,
							"name": "Airdrop__claimableOnceAWeek",
							"nameLocation": "759:27:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 790,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "786:2:6"
							},
							"src": "753:36:6"
						},
						{
							"documentation": {
								"id": 792,
								"nodeType": "StructuredDocumentation",
								"src": "791:62:6",
								"text": " @notice Error handling message for Voting functions"
							},
							"id": 794,
							"name": "Voting__votingIsRunning",
							"nameLocation": "860:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 793,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "883:2:6"
							},
							"src": "854:32:6"
						},
						{
							"id": 796,
							"name": "Voting__alreadyVoted",
							"nameLocation": "893:20:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 795,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "913:2:6"
							},
							"src": "887:29:6"
						},
						{
							"id": 798,
							"name": "Voting__notYetVoted",
							"nameLocation": "923:19:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 797,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "942:2:6"
							},
							"src": "917:28:6"
						},
						{
							"id": 800,
							"name": "Voting__notEnoughVoters",
							"nameLocation": "952:23:6",
							"nodeType": "ErrorDefinition",
							"parameters": {
								"id": 799,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "975:2:6"
							},
							"src": "946:32:6"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 801,
										"name": "ReentrancyGuard",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 144,
										"src": "1000:15:6"
									},
									"id": 802,
									"nodeType": "InheritanceSpecifier",
									"src": "1000:15:6"
								},
								{
									"baseName": {
										"id": 803,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 104,
										"src": "1017:7:6"
									},
									"id": 804,
									"nodeType": "InheritanceSpecifier",
									"src": "1017:7:6"
								}
							],
							"canonicalName": "Staking",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1509,
							"linearizedBaseContracts": [
								1509,
								104,
								763,
								144
							],
							"name": "Staking",
							"nameLocation": "989:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Staking.Voter",
									"id": 811,
									"members": [
										{
											"constant": false,
											"id": 806,
											"mutability": "mutable",
											"name": "votingRight",
											"nameLocation": "1224:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1219:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 805,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1219:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 810,
											"mutability": "mutable",
											"name": "voted",
											"nameLocation": "1270:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 811,
											"src": "1245:30:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
												"typeString": "mapping(uint256 => bool)"
											},
											"typeName": {
												"id": 809,
												"keyType": {
													"id": 807,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1253:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "Mapping",
												"src": "1245:24:6",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
													"typeString": "mapping(uint256 => bool)"
												},
												"valueType": {
													"id": 808,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1264:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Voter",
									"nameLocation": "1203:5:6",
									"nodeType": "StructDefinition",
									"scope": 1509,
									"src": "1196:86:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 815,
									"mutability": "mutable",
									"name": "stakingPackage",
									"nameLocation": "1325:14:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1288:51:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 814,
										"keyType": {
											"id": 812,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1296:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1288:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 813,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1307:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "cb79c2e1",
									"id": 817,
									"mutability": "mutable",
									"name": "stakingPenaltyRate",
									"nameLocation": "1361:18:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1346:33:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 816,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1346:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8891cf0d",
									"id": 819,
									"mutability": "mutable",
									"name": "airdropRate",
									"nameLocation": "1400:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1385:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 818,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1385:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b87da76d",
									"id": 821,
									"mutability": "mutable",
									"name": "airdropSince",
									"nameLocation": "1432:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1417:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 820,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1417:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 823,
									"mutability": "mutable",
									"name": "_votingStatus",
									"nameLocation": "1465:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1451:27:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 822,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1451:4:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 825,
									"mutability": "mutable",
									"name": "_votingId",
									"nameLocation": "1501:9:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1484:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 824,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1484:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "5f5300ff",
									"id": 827,
									"mutability": "mutable",
									"name": "totalVoters",
									"nameLocation": "1531:11:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1516:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 826,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1516:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a3ec138d",
									"id": 832,
									"mutability": "mutable",
									"name": "voters",
									"nameLocation": "1581:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1548:39:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
										"typeString": "mapping(address => struct Staking.Voter)"
									},
									"typeName": {
										"id": 831,
										"keyType": {
											"id": 828,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1556:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1548:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
											"typeString": "mapping(address => struct Staking.Voter)"
										},
										"valueType": {
											"id": 830,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 829,
												"name": "Voter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 811,
												"src": "1567:5:6"
											},
											"referencedDeclaration": 811,
											"src": "1567:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Voter_$811_storage_ptr",
												"typeString": "struct Staking.Voter"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a143a5f2",
									"id": 836,
									"mutability": "mutable",
									"name": "votedUsers",
									"nameLocation": "1628:10:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1593:45:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 835,
										"keyType": {
											"id": 833,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1601:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1593:27:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 834,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1612:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8c8e8fee",
									"id": 838,
									"mutability": "mutable",
									"name": "token_address",
									"nameLocation": "1660:13:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "1645:28:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 837,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1645:7:6",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 873,
										"nodeType": "Block",
										"src": "1707:274:6",
										"statements": [
											{
												"expression": {
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 843,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "1779:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3135",
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1800:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_15_by_1",
															"typeString": "int_const 15"
														},
														"value": "15"
													},
													"src": "1779:23:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 846,
												"nodeType": "ExpressionStatement",
												"src": "1779:23:6"
											},
											{
												"expression": {
													"id": 849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 847,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "1812:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "3830",
														"id": 848,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1826:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_80_by_1",
															"typeString": "int_const 80"
														},
														"value": "80"
													},
													"src": "1812:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 850,
												"nodeType": "ExpressionStatement",
												"src": "1812:16:6"
											},
											{
												"expression": {
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 851,
														"name": "token_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 838,
														"src": "1839:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 852,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 840,
														"src": "1855:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1839:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 854,
												"nodeType": "ExpressionStatement",
												"src": "1839:21:6"
											},
											{
												"expression": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 855,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1871:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 857,
														"indexExpression": {
															"hexValue": "3930",
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1886:7:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7776000_by_1",
																"typeString": "int_const 7776000"
															},
															"value": "90"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1871:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "36",
														"id": 858,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1897:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_6_by_1",
															"typeString": "int_const 6"
														},
														"value": "6"
													},
													"src": "1871:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 860,
												"nodeType": "ExpressionStatement",
												"src": "1871:27:6"
											},
											{
												"expression": {
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 861,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1908:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 863,
														"indexExpression": {
															"hexValue": "313830",
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1923:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_15552000_by_1",
																"typeString": "int_const 15552000"
															},
															"value": "180"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1908:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "37",
														"id": 864,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1935:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_7_by_1",
															"typeString": "int_const 7"
														},
														"value": "7"
													},
													"src": "1908:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 866,
												"nodeType": "ExpressionStatement",
												"src": "1908:28:6"
											},
											{
												"expression": {
													"id": 871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 867,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "1946:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 869,
														"indexExpression": {
															"hexValue": "333635",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1961:8:6",
															"subdenomination": "days",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_31536000_by_1",
																"typeString": "int_const 31536000"
															},
															"value": "365"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1946:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "38",
														"id": 870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1973:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "1946:28:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 872,
												"nodeType": "ExpressionStatement",
												"src": "1946:28:6"
											}
										]
									},
									"id": 874,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1700:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 874,
												"src": "1692:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1692:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1691:15:6"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1707:0:6"
									},
									"scope": 1509,
									"src": "1680:301:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.Stake",
									"id": 889,
									"members": [
										{
											"constant": false,
											"id": 876,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2245:6:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2237:14:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 875,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2237:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 878,
											"mutability": "mutable",
											"name": "since",
											"nameLocation": "2269:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2261:13:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2261:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 880,
											"mutability": "mutable",
											"name": "rewardAPY",
											"nameLocation": "2292:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2284:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 879,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2284:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 882,
											"mutability": "mutable",
											"name": "releaseTime",
											"nameLocation": "2319:11:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2311:19:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 881,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2311:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 884,
											"mutability": "mutable",
											"name": "claimable",
											"nameLocation": "2447:9:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2439:17:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 883,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2439:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 886,
											"mutability": "mutable",
											"name": "claimableAirdrop",
											"nameLocation": "2474:16:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2466:24:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 885,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2466:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 888,
											"mutability": "mutable",
											"name": "latestClaimDrop",
											"nameLocation": "2508:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 889,
											"src": "2500:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 887,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2500:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Stake",
									"nameLocation": "2221:5:6",
									"nodeType": "StructDefinition",
									"scope": 1509,
									"src": "2214:316:6",
									"visibility": "public"
								},
								{
									"canonicalName": "Staking.StakingSummary",
									"id": 897,
									"members": [
										{
											"constant": false,
											"id": 891,
											"mutability": "mutable",
											"name": "total_amount",
											"nameLocation": "2707:12:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2699:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 890,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2699:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 893,
											"mutability": "mutable",
											"name": "penalty",
											"nameLocation": "2737:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2729:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 892,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2729:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 896,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "2760:5:6",
											"nodeType": "VariableDeclaration",
											"scope": 897,
											"src": "2754:11:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											},
											"typeName": {
												"id": 895,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 894,
													"name": "Stake",
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 889,
													"src": "2754:5:6"
												},
												"referencedDeclaration": 889,
												"src": "2754:5:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
													"typeString": "struct Staking.Stake"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StakingSummary",
									"nameLocation": "2674:14:6",
									"nodeType": "StructDefinition",
									"scope": 1509,
									"src": "2667:105:6",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "2778:111:6",
										"text": " @notice\n stakes is used to keep track of the INDEX for the stakers in the stakes array"
									},
									"id": 903,
									"mutability": "mutable",
									"name": "stakeholders",
									"nameLocation": "2929:12:6",
									"nodeType": "VariableDeclaration",
									"scope": 1509,
									"src": "2894:47:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
										"typeString": "mapping(address => struct Staking.Stake)"
									},
									"typeName": {
										"id": 902,
										"keyType": {
											"id": 899,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2902:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2894:25:6",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
											"typeString": "mapping(address => struct Staking.Stake)"
										},
										"valueType": {
											"id": 901,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 900,
												"name": "Stake",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 889,
												"src": "2913:5:6"
											},
											"referencedDeclaration": 889,
											"src": "2913:5:6",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
												"typeString": "struct Staking.Stake"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "2948:124:6",
										"text": " @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable"
									},
									"id": 914,
									"name": "Staked",
									"nameLocation": "3083:6:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "3115:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3099:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3099:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3137:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3129:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 907,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3129:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"indexed": false,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "3161:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3153:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3153:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 912,
												"indexed": false,
												"mutability": "mutable",
												"name": "releaseTime",
												"nameLocation": "3188:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 914,
												"src": "3180:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 911,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3089:116:6"
									},
									"src": "3077:129:6"
								},
								{
									"anonymous": false,
									"id": 918,
									"name": "PenaltyChanged",
									"nameLocation": "3218:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3241:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 918,
												"src": "3233:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:6"
									},
									"src": "3212:37:6"
								},
								{
									"anonymous": false,
									"id": 922,
									"name": "AirdropChanged",
									"nameLocation": "3260:14:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 921,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 920,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3283:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "3275:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 919,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3275:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3274:16:6"
									},
									"src": "3254:37:6"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "3437:197:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 931,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 925,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "3534:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 928,
															"indexExpression": {
																"expression": {
																	"id": 926,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3541:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3541:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "3534:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "3534:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "66616c7365",
														"id": 930,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3568:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "3534:39:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 936,
												"nodeType": "IfStatement",
												"src": "3530:98:6",
												"trueBody": {
													"id": 935,
													"nodeType": "Block",
													"src": "3575:53:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 932,
																	"name": "Function__notAVoter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 773,
																	"src": "3596:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3596:21:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 934,
															"nodeType": "RevertStatement",
															"src": "3589:28:6"
														}
													]
												}
											}
										]
									},
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isVoter",
									"nameLocation": "3412:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 923,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3420:2:6"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3437:0:6"
									},
									"scope": 1509,
									"src": "3403:231:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 944,
										"nodeType": "Block",
										"src": "3659:38:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 940,
														"name": "_isVoter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 938,
														"src": "3669:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3669:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "3669:10:6"
											},
											{
												"id": 943,
												"nodeType": "PlaceholderStatement",
												"src": "3689:1:6"
											}
										]
									},
									"id": 945,
									"name": "isVoter",
									"nameLocation": "3649:7:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3656:2:6"
									},
									"src": "3640:57:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 955,
										"nodeType": "Block",
										"src": "3747:160:6",
										"statements": [
											{
												"condition": {
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3823:14:6",
													"subExpression": {
														"id": 948,
														"name": "_votingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "3824:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 954,
												"nodeType": "IfStatement",
												"src": "3819:82:6",
												"trueBody": {
													"id": 953,
													"nodeType": "Block",
													"src": "3839:62:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 950,
																	"name": "Function__votingNotAvailable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 775,
																	"src": "3860:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3860:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 952,
															"nodeType": "RevertStatement",
															"src": "3853:37:6"
														}
													]
												}
											}
										]
									},
									"id": 956,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkVotingStatus",
									"nameLocation": "3712:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3730:2:6"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3747:0:6"
									},
									"scope": 1509,
									"src": "3703:204:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 962,
										"nodeType": "Block",
										"src": "3941:48:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 958,
														"name": "_checkVotingStatus",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 956,
														"src": "3951:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3951:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "3951:20:6"
											},
											{
												"id": 961,
												"nodeType": "PlaceholderStatement",
												"src": "3981:1:6"
											}
										]
									},
									"id": 963,
									"name": "votingStatusTrue",
									"nameLocation": "3922:16:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3938:2:6"
									},
									"src": "3913:76:6",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "4380:1174:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"baseExpression": {
																"id": 973,
																"name": "stakeholders",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 903,
																"src": "4576:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																	"typeString": "mapping(address => struct Staking.Stake storage ref)"
																}
															},
															"id": 976,
															"indexExpression": {
																"expression": {
																	"id": 974,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4589:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4589:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4576:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage",
																"typeString": "struct Staking.Stake storage ref"
															}
														},
														"id": 977,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "4576:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4611:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4576:36:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 984,
												"nodeType": "IfStatement",
												"src": "4572:97:6",
												"trueBody": {
													"id": 983,
													"nodeType": "Block",
													"src": "4614:55:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 980,
																	"name": "Staking__userIsStaker",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 780,
																	"src": "4635:21:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4635:23:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 982,
															"nodeType": "RevertStatement",
															"src": "4628:30:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 985,
															"name": "stakingPackage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "4683:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 987,
														"indexExpression": {
															"id": 986,
															"name": "stakePeriod",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 968,
															"src": "4698:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4683:27:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4714:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4683:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"nodeType": "IfStatement",
												"src": "4679:101:6",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "4717:63:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 990,
																	"name": "Staking_noStakingPackageFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 788,
																	"src": "4738:29:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4738:31:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 992,
															"nodeType": "RevertStatement",
															"src": "4731:38:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 995,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "4790:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4805:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4790:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 998,
												"nodeType": "ExpressionStatement",
												"src": "4790:16:6"
											},
											{
												"expression": {
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"baseExpression": {
																"id": 999,
																"name": "voters",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 832,
																"src": "4816:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																	"typeString": "mapping(address => struct Staking.Voter storage ref)"
																}
															},
															"id": 1002,
															"indexExpression": {
																"expression": {
																	"id": 1000,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4823:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4823:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4816:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Voter_$811_storage",
																"typeString": "struct Staking.Voter storage ref"
															}
														},
														"id": 1003,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "votingRight",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 806,
														"src": "4816:30:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4849:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4816:37:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1006,
												"nodeType": "ExpressionStatement",
												"src": "4816:37:6"
											},
											{
												"assignments": [
													1008
												],
												"declarations": [
													{
														"constant": false,
														"id": 1008,
														"mutability": "mutable",
														"name": "timestamp",
														"nameLocation": "4959:9:6",
														"nodeType": "VariableDeclaration",
														"scope": 1058,
														"src": "4951:17:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1007,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4951:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1011,
												"initialValue": {
													"expression": {
														"id": 1009,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "4971:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1010,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "4971:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4951:35:6"
											},
											{
												"expression": {
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1012,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "5115:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1015,
														"indexExpression": {
															"expression": {
																"id": 1013,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5128:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5128:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5115:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1017,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 966,
																"src": "5161:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1018,
																"name": "timestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1008,
																"src": "5181:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"baseExpression": {
																	"id": 1019,
																	"name": "stakingPackage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 815,
																	"src": "5204:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																		"typeString": "mapping(uint256 => uint256)"
																	}
																},
																"id": 1021,
																"indexExpression": {
																	"id": 1020,
																	"name": "stakePeriod",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 968,
																	"src": "5219:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "5204:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1024,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1022,
																			"name": "stakePeriod",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 968,
																			"src": "5246:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"id": 1023,
																			"name": "timestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1008,
																			"src": "5260:9:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5246:23:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1025,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5245:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 1026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5284:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5299:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															{
																"hexValue": "30",
																"id": 1028,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5314:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1016,
															"name": "Stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "5142:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Stake_$889_storage_ptr_$",
																"typeString": "type(struct Staking.Stake storage pointer)"
															}
														},
														"id": 1029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5142:183:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake memory"
														}
													},
													"src": "5115:210:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"id": 1031,
												"nodeType": "ExpressionStatement",
												"src": "5115:210:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1036,
																	"name": "token_address",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 838,
																	"src": "5369:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1035,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5362:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5362:21:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1038,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5384:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5384:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1042,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5403:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Staking_$1509",
																		"typeString": "contract Staking"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Staking_$1509",
																		"typeString": "contract Staking"
																	}
																],
																"id": 1041,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5395:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1040,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5395:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5395:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1044,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5409:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$222",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1032,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "5335:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1034,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "5335:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5335:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1046,
												"nodeType": "ExpressionStatement",
												"src": "5335:81:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1048,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5490:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5490:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1050,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "5502:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1051,
															"name": "timestamp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1008,
															"src": "5510:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1054,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1052,
																		"name": "stakePeriod",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 968,
																		"src": "5522:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 1053,
																		"name": "timestamp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1008,
																		"src": "5536:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5522:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1055,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5521:25:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1047,
														"name": "Staked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "5483:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5483:64:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1057,
												"nodeType": "EmitStatement",
												"src": "5478:69:6"
											}
										]
									},
									"documentation": {
										"id": 964,
										"nodeType": "StructuredDocumentation",
										"src": "4101:200:6",
										"text": " @notice\n _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n StakeID"
									},
									"functionSelector": "7b0472f0",
									"id": 1059,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 971,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 970,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "4367:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "4367:12:6"
										}
									],
									"name": "stake",
									"nameLocation": "4315:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4329:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4321:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4321:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "stakePeriod",
												"nameLocation": "4345:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "4337:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4337:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4320:37:6"
									},
									"returnParameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4380:0:6"
									},
									"scope": 1509,
									"src": "4306:1248:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "5621:245:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1066,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "5709:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3330",
														"id": 1067,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5718:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_30_by_1",
															"typeString": "int_const 30"
														},
														"value": "30"
													},
													"src": "5709:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1073,
												"nodeType": "IfStatement",
												"src": "5705:81:6",
												"trueBody": {
													"id": 1072,
													"nodeType": "Block",
													"src": "5722:64:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1069,
																	"name": "Staking__penaltyExceed3Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "5743:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1070,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5743:32:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1071,
															"nodeType": "RevertStatement",
															"src": "5736:39:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1074,
														"name": "stakingPenaltyRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "5795:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1075,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1061,
														"src": "5816:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5795:27:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1077,
												"nodeType": "ExpressionStatement",
												"src": "5795:27:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1079,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "5852:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1078,
														"name": "PenaltyChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 918,
														"src": "5837:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5837:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1081,
												"nodeType": "EmitStatement",
												"src": "5832:27:6"
											}
										]
									},
									"functionSelector": "8c63f97f",
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1064,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1063,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "5611:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "5611:9:6"
										}
									],
									"name": "changePenaltyFee",
									"nameLocation": "5569:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5594:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "5586:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1060,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5586:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5585:16:6"
									},
									"returnParameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5621:0:6"
									},
									"scope": 1509,
									"src": "5560:306:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1101,
										"nodeType": "Block",
										"src": "5982:121:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1096,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"expression": {
																					"id": 1090,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "6053:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1091,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "6053:15:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 1092,
																				"name": "since",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1085,
																				"src": "6071:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6053:23:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1094,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6052:25:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"hexValue": "31653234",
																	"id": 1095,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6080:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
																		"typeString": "int_const 1000000000000000000000000"
																	},
																	"value": "1e24"
																},
																"src": "6052:32:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1097,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6051:34:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "333635",
														"id": 1098,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6088:8:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31536000_by_1",
															"typeString": "int_const 31536000"
														},
														"value": "365"
													},
													"src": "6051:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1089,
												"id": 1100,
												"nodeType": "Return",
												"src": "6044:52:6"
											}
										]
									},
									"id": 1102,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingDuration",
									"nameLocation": "5881:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1085,
												"mutability": "mutable",
												"name": "since",
												"nameLocation": "5915:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "5907:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5907:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5906:15:6"
									},
									"returnParameters": {
										"id": 1089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1102,
												"src": "5969:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5969:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5968:9:6"
									},
									"scope": 1509,
									"src": "5872:231:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1132,
										"nodeType": "Block",
										"src": "6225:321:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1110,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1105,
															"src": "6239:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1111,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "6239:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1112,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6260:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6239:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1117,
												"nodeType": "IfStatement",
												"src": "6235:61:6",
												"trueBody": {
													"id": 1116,
													"nodeType": "Block",
													"src": "6263:33:6",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1114,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6284:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1109,
															"id": 1115,
															"nodeType": "Return",
															"src": "6277:8:6"
														}
													]
												}
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1122,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1118,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "6413:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "6413:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"expression": {
																			"id": 1120,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "6449:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1121,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "rewardAPY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 880,
																		"src": "6449:20:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6413:56:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1124,
																				"name": "user_stake",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1105,
																				"src": "6514:10:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																					"typeString": "struct Staking.Stake memory"
																				}
																			},
																			"id": 1125,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "since",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 878,
																			"src": "6514:16:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1123,
																		"name": "_calculateStakingDuration",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1102,
																		"src": "6488:25:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6488:43:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6413:118:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1128,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6412:120:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "31653236",
														"id": 1129,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6535:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
															"typeString": "int_const 100000000000000000000000000"
														},
														"value": "1e26"
													},
													"src": "6412:127:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1109,
												"id": 1131,
												"nodeType": "Return",
												"src": "6393:146:6"
											}
										]
									},
									"id": 1133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakeReward",
									"nameLocation": "6118:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "user_stake",
												"nameLocation": "6153:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "6140:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
													"typeString": "struct Staking.Stake"
												},
												"typeName": {
													"id": 1104,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1103,
														"name": "Stake",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 889,
														"src": "6140:5:6"
													},
													"referencedDeclaration": 889,
													"src": "6140:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
														"typeString": "struct Staking.Stake"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6139:25:6"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1133,
												"src": "6212:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6212:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6211:9:6"
									},
									"scope": 1509,
									"src": "6109:437:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1173,
										"nodeType": "Block",
										"src": "6691:220:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1144,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1135,
														"src": "6705:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1145,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6715:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6705:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1152,
												"nodeType": "IfStatement",
												"src": "6701:55:6",
												"trueBody": {
													"id": 1151,
													"nodeType": "Block",
													"src": "6718:38:6",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"hexValue": "30",
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6740:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	{
																		"hexValue": "30",
																		"id": 1148,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6743:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1149,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6739:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$",
																	"typeString": "tuple(int_const 0,int_const 0)"
																}
															},
															"functionReturnParameters": 1143,
															"id": 1150,
															"nodeType": "Return",
															"src": "6732:13:6"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1153,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1135,
																"src": "6786:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1156,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1154,
																						"name": "amount",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1135,
																						"src": "6797:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1155,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "6806:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6797:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1157,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6796:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6828:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "6796:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6795:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6786:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1162,
																"name": "reward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1137,
																"src": "6847:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1165,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1163,
																						"name": "reward",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1137,
																						"src": "6858:6:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 1164,
																						"name": "stakingPenaltyRate",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 817,
																						"src": "6867:18:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "6858:27:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 1166,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "6857:29:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"hexValue": "31303030",
																			"id": 1167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6889:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000_by_1",
																				"typeString": "int_const 1000"
																			},
																			"value": "1000"
																		},
																		"src": "6857:36:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1169,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6856:38:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6847:47:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 1171,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6772:132:6",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
														"typeString": "tuple(uint256,uint256)"
													}
												},
												"functionReturnParameters": 1143,
												"id": 1172,
												"nodeType": "Return",
												"src": "6765:139:6"
											}
										]
									},
									"id": 1174,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateStakingWithPenalty",
									"nameLocation": "6561:28:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6598:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6590:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6590:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "reward",
												"nameLocation": "6614:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6606:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1136,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6606:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6589:32:6"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6669:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6669:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1174,
												"src": "6678:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6678:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6668:18:6"
									},
									"scope": 1509,
									"src": "6552:359:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1258,
										"nodeType": "Block",
										"src": "7305:856:6",
										"statements": [
											{
												"assignments": [
													1182
												],
												"declarations": [
													{
														"constant": false,
														"id": 1182,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "7436:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1258,
														"src": "7423:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1181,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1180,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "7423:5:6"
															},
															"referencedDeclaration": 889,
															"src": "7423:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1187,
												"initialValue": {
													"baseExpression": {
														"id": 1183,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "7449:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1186,
													"indexExpression": {
														"expression": {
															"id": 1184,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7462:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7462:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7449:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7423:50:6"
											},
											{
												"assignments": [
													1189
												],
												"declarations": [
													{
														"constant": false,
														"id": 1189,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "7491:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1258,
														"src": "7483:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1188,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7483:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1193,
												"initialValue": {
													"arguments": [
														{
															"id": 1191,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "7522:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1190,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "7500:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7500:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7483:50:6"
											},
											{
												"expression": {
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7544:31:6",
													"subExpression": {
														"baseExpression": {
															"id": 1194,
															"name": "stakeholders",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 903,
															"src": "7551:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
																"typeString": "mapping(address => struct Staking.Stake storage ref)"
															}
														},
														"id": 1197,
														"indexExpression": {
															"expression": {
																"id": 1195,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7564:3:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1196,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7564:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7551:24:6",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage",
															"typeString": "struct Staking.Stake storage ref"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1199,
												"nodeType": "ExpressionStatement",
												"src": "7544:31:6"
											},
											{
												"expression": {
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1200,
														"name": "totalVoters",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 827,
														"src": "7585:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1201,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7600:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "7585:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "7585:16:6"
											},
											{
												"expression": {
													"id": 1211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "7611:42:6",
													"subExpression": {
														"baseExpression": {
															"expression": {
																"baseExpression": {
																	"id": 1204,
																	"name": "voters",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 832,
																	"src": "7618:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$811_storage_$",
																		"typeString": "mapping(address => struct Staking.Voter storage ref)"
																	}
																},
																"id": 1207,
																"indexExpression": {
																	"expression": {
																		"id": 1205,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "7625:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "7625:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7618:18:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Voter_$811_storage",
																	"typeString": "struct Staking.Voter storage ref"
																}
															},
															"id": 1208,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "voted",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 810,
															"src": "7618:24:6",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
																"typeString": "mapping(uint256 => bool)"
															}
														},
														"id": 1210,
														"indexExpression": {
															"id": 1209,
															"name": "_votingId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "7643:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7618:35:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1212,
												"nodeType": "ExpressionStatement",
												"src": "7611:42:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1213,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1182,
															"src": "7668:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1214,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "7668:22:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1215,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "7693:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "7693:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7668:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1256,
													"nodeType": "Block",
													"src": "7999:156:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1247,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8074:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1248,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8074:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1252,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"expression": {
																						"id": 1249,
																						"name": "user_stake",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1182,
																						"src": "8103:10:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																							"typeString": "struct Staking.Stake memory"
																						}
																					},
																					"id": 1250,
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "amount",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 876,
																					"src": "8103:17:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1251,
																					"name": "reward",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1189,
																					"src": "8123:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "8103:26:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1253,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8102:28:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1244,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "8033:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1243,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "8026:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8026:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1246,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 171,
																	"src": "8026:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8026:118:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1255,
															"nodeType": "ExpressionStatement",
															"src": "8026:118:6"
														}
													]
												},
												"id": 1257,
												"nodeType": "IfStatement",
												"src": "7664:491:6",
												"trueBody": {
													"id": 1242,
													"nodeType": "Block",
													"src": "7710:283:6",
													"statements": [
														{
															"assignments": [
																1219,
																1221
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1219,
																	"mutability": "mutable",
																	"name": "amount_reduced",
																	"nameLocation": "7750:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1242,
																	"src": "7742:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1218,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7742:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																},
																{
																	"constant": false,
																	"id": 1221,
																	"mutability": "mutable",
																	"name": "reward_reduced",
																	"nameLocation": "7790:14:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1242,
																	"src": "7782:22:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1220,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7782:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1227,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1223,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1182,
																			"src": "7850:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1224,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "7850:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1225,
																		"name": "reward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1189,
																		"src": "7869:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1222,
																	"name": "_calculateStakingWithPenalty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1174,
																	"src": "7821:28:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																		"typeString": "function (uint256,uint256) view returns (uint256,uint256)"
																	}
																},
																"id": 1226,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7821:55:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																	"typeString": "tuple(uint256,uint256)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7724:152:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1232,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "7921:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1231,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "7914:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1233,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7914:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"expression": {
																			"id": 1234,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "7936:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1235,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "7936:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1238,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1236,
																					"name": "amount_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1219,
																					"src": "7948:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "+",
																				"rightExpression": {
																					"id": 1237,
																					"name": "reward_reduced",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1221,
																					"src": "7965:14:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "7948:31:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1239,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "7947:33:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1228,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 446,
																		"src": "7891:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$446_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1230,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 253,
																	"src": "7891:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$222_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7891:90:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1241,
															"nodeType": "ExpressionStatement",
															"src": "7891:90:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1175,
										"nodeType": "StructuredDocumentation",
										"src": "6917:335:6",
										"text": " @notice\n withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n Notice index of the stake is the users stake counter, starting at 0 for the first stake\n Will return the amount to MINT onto the account\n Will also _calculateStakeReward and reset timer"
									},
									"functionSelector": "bed9d861",
									"id": 1259,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1178,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1177,
												"name": "nonReentrant",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 143,
												"src": "7292:12:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "7292:12:6"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "7267:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7280:2:6"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7305:0:6"
									},
									"scope": 1509,
									"src": "7258:903:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1375,
										"nodeType": "Block",
										"src": "8233:958:6",
										"statements": [
											{
												"assignments": [
													1267
												],
												"declarations": [
													{
														"constant": false,
														"id": 1267,
														"mutability": "mutable",
														"name": "user_stake",
														"nameLocation": "8256:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1375,
														"src": "8243:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1266,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1265,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "8243:5:6"
															},
															"referencedDeclaration": 889,
															"src": "8243:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1272,
												"initialValue": {
													"baseExpression": {
														"id": 1268,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "8269:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1271,
													"indexExpression": {
														"expression": {
															"id": 1269,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8282:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1270,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "8282:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8269:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8243:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1273,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "8368:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "8368:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1275,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8389:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8368:22:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1281,
												"nodeType": "IfStatement",
												"src": "8364:85:6",
												"trueBody": {
													"id": 1280,
													"nodeType": "Block",
													"src": "8392:57:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1277,
																	"name": "Staking__noStakingFound",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "8413:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8413:25:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1279,
															"nodeType": "RevertStatement",
															"src": "8406:32:6"
														}
													]
												}
											},
											{
												"assignments": [
													1284
												],
												"declarations": [
													{
														"constant": false,
														"id": 1284,
														"mutability": "mutable",
														"name": "summary",
														"nameLocation": "8480:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 1375,
														"src": "8458:29:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
															"typeString": "struct Staking.StakingSummary"
														},
														"typeName": {
															"id": 1283,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1282,
																"name": "StakingSummary",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 897,
																"src": "8458:14:6"
															},
															"referencedDeclaration": 897,
															"src": "8458:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
																"typeString": "struct Staking.StakingSummary"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1290,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "30",
															"id": 1286,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8505:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "30",
															"id": 1287,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8508:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1288,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "8511:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1285,
														"name": "StakingSummary",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "8490:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_StakingSummary_$897_storage_ptr_$",
															"typeString": "type(struct Staking.StakingSummary storage pointer)"
														}
													},
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8490:32:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8458:64:6"
											},
											{
												"assignments": [
													1292
												],
												"declarations": [
													{
														"constant": false,
														"id": 1292,
														"mutability": "mutable",
														"name": "reward",
														"nameLocation": "8541:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1375,
														"src": "8533:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1291,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8533:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1296,
												"initialValue": {
													"arguments": [
														{
															"id": 1294,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "8572:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														],
														"id": 1293,
														"name": "_calculateStakeReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1133,
														"src": "8550:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Stake_$889_memory_ptr_$returns$_t_uint256_$",
															"typeString": "function (struct Staking.Stake memory) view returns (uint256)"
														}
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8550:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8533:50:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1297,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1284,
																"src": "8598:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1298,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "8598:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "releaseTime",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 882,
														"src": "8598:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"expression": {
															"id": 1300,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "8626:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1301,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "8626:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8598:43:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1325,
												"nodeType": "IfStatement",
												"src": "8594:214:6",
												"trueBody": {
													"id": 1324,
													"nodeType": "Block",
													"src": "8643:165:6",
													"statements": [
														{
															"expression": {
																"id": 1322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1303,
																		"name": "summary",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1284,
																		"src": "8657:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																			"typeString": "struct Staking.StakingSummary memory"
																		}
																	},
																	"id": 1305,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "penalty",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 893,
																	"src": "8657:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1312,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1309,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"expression": {
																									"id": 1306,
																									"name": "user_stake",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1267,
																									"src": "8693:10:6",
																									"typeDescriptions": {
																										"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																										"typeString": "struct Staking.Stake memory"
																									}
																								},
																								"id": 1307,
																								"isConstant": false,
																								"isLValue": true,
																								"isPure": false,
																								"lValueRequested": false,
																								"memberName": "amount",
																								"nodeType": "MemberAccess",
																								"referencedDeclaration": 876,
																								"src": "8693:17:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1308,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "8713:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "8693:38:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1310,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "8692:40:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1311,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8735:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "8692:47:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1313,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8691:49:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1319,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 1316,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 1314,
																								"name": "reward",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1292,
																								"src": "8761:6:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "*",
																							"rightExpression": {
																								"id": 1315,
																								"name": "stakingPenaltyRate",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 817,
																								"src": "8770:18:6",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "8761:27:6",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 1317,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "8760:29:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "31303030",
																					"id": 1318,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8792:4:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_1000_by_1",
																						"typeString": "int_const 1000"
																					},
																					"value": "1000"
																				},
																				"src": "8760:36:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1320,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "8759:38:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "8691:106:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8657:140:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1323,
															"nodeType": "ExpressionStatement",
															"src": "8657:140:6"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 1327,
																	"name": "user_stake",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "8836:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																		"typeString": "struct Staking.Stake memory"
																	}
																},
																"id": 1328,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "latestClaimDrop",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 888,
																"src": "8836:26:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1326,
															"name": "calculateWeek",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "8822:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256) view returns (uint256)"
															}
														},
														"id": 1329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8822:41:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1330,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8866:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8822:45:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1356,
													"nodeType": "Block",
													"src": "9008:59:6",
													"statements": [
														{
															"expression": {
																"id": 1354,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1348,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1284,
																			"src": "9022:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1351,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "9022:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1352,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "9022:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9055:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "9022:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1355,
															"nodeType": "ExpressionStatement",
															"src": "9022:34:6"
														}
													]
												},
												"id": 1357,
												"nodeType": "IfStatement",
												"src": "8818:249:6",
												"trueBody": {
													"id": 1347,
													"nodeType": "Block",
													"src": "8869:133:6",
													"statements": [
														{
															"assignments": [
																1333
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1333,
																	"mutability": "mutable",
																	"name": "airdrop",
																	"nameLocation": "8891:7:6",
																	"nodeType": "VariableDeclaration",
																	"scope": 1347,
																	"src": "8883:15:6",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1332,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "8883:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1338,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1335,
																			"name": "user_stake",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1267,
																			"src": "8919:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																				"typeString": "struct Staking.Stake memory"
																			}
																		},
																		"id": 1336,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 876,
																		"src": "8919:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1334,
																	"name": "_calculateAirdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1454,
																	"src": "8901:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) view returns (uint256)"
																	}
																},
																"id": 1337,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8901:36:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "8883:54:6"
														},
														{
															"expression": {
																"id": 1345,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"expression": {
																			"id": 1339,
																			"name": "summary",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1284,
																			"src": "8951:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																				"typeString": "struct Staking.StakingSummary memory"
																			}
																		},
																		"id": 1342,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "stake",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 896,
																		"src": "8951:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																			"typeString": "struct Staking.Stake memory"
																		}
																	},
																	"id": 1343,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "8951:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1344,
																	"name": "airdrop",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1333,
																	"src": "8984:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8951:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1346,
															"nodeType": "ExpressionStatement",
															"src": "8951:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"expression": {
																"id": 1358,
																"name": "summary",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1284,
																"src": "9077:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																	"typeString": "struct Staking.StakingSummary memory"
																}
															},
															"id": 1361,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "stake",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 896,
															"src": "9077:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1362,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "claimable",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 884,
														"src": "9077:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1363,
														"name": "reward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1292,
														"src": "9103:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9077:32:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1365,
												"nodeType": "ExpressionStatement",
												"src": "9077:32:6"
											},
											{
												"expression": {
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 1366,
															"name": "summary",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "9119:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
																"typeString": "struct Staking.StakingSummary memory"
															}
														},
														"id": 1368,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "total_amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 891,
														"src": "9119:20:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1369,
															"name": "user_stake",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1267,
															"src": "9142:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_memory_ptr",
																"typeString": "struct Staking.Stake memory"
															}
														},
														"id": 1370,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "9142:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9119:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1372,
												"nodeType": "ExpressionStatement",
												"src": "9119:40:6"
											},
											{
												"expression": {
													"id": 1373,
													"name": "summary",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1284,
													"src": "9177:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
														"typeString": "struct Staking.StakingSummary memory"
													}
												},
												"functionReturnParameters": 1264,
												"id": 1374,
												"nodeType": "Return",
												"src": "9170:14:6"
											}
										]
									},
									"functionSelector": "10486b6a",
									"id": 1376,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "hasStake",
									"nameLocation": "8176:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8184:2:6"
									},
									"returnParameters": {
										"id": 1264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1376,
												"src": "8210:21:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StakingSummary_$897_memory_ptr",
													"typeString": "struct Staking.StakingSummary"
												},
												"typeName": {
													"id": 1262,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1261,
														"name": "StakingSummary",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 897,
														"src": "8210:14:6"
													},
													"referencedDeclaration": 897,
													"src": "8210:14:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StakingSummary_$897_storage_ptr",
														"typeString": "struct Staking.StakingSummary"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8209:23:6"
									},
									"scope": 1509,
									"src": "8167:1024:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1386,
										"nodeType": "Block",
										"src": "9346:47:6",
										"statements": [
											{
												"expression": {
													"id": 1384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1381,
														"name": "airdropSince",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 821,
														"src": "9356:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1382,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "9371:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1383,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "9371:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9356:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1385,
												"nodeType": "ExpressionStatement",
												"src": "9356:30:6"
											}
										]
									},
									"functionSelector": "d2a569c3",
									"id": 1387,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1379,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1378,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9336:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9336:9:6"
										}
									],
									"name": "startAirdrop",
									"nameLocation": "9312:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1377,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9324:2:6"
									},
									"returnParameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9346:0:6"
									},
									"scope": 1509,
									"src": "9303:90:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1410,
										"nodeType": "Block",
										"src": "9467:166:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1394,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1389,
														"src": "9481:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "323030",
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9490:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_200_by_1",
															"typeString": "int_const 200"
														},
														"value": "200"
													},
													"src": "9481:12:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1401,
												"nodeType": "IfStatement",
												"src": "9477:83:6",
												"trueBody": {
													"id": 1400,
													"nodeType": "Block",
													"src": "9495:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1397,
																	"name": "Staking__airdropExceed20Percent",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 784,
																	"src": "9516:31:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9516:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1399,
															"nodeType": "RevertStatement",
															"src": "9509:40:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1402,
														"name": "airdropRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 819,
														"src": "9569:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1403,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1389,
														"src": "9583:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9569:20:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1405,
												"nodeType": "ExpressionStatement",
												"src": "9569:20:6"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1407,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1389,
															"src": "9619:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1406,
														"name": "AirdropChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 922,
														"src": "9604:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9604:22:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1409,
												"nodeType": "EmitStatement",
												"src": "9599:27:6"
											}
										]
									},
									"functionSelector": "d5dbdf1b",
									"id": 1411,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1392,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1391,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 46,
												"src": "9457:9:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "9457:9:6"
										}
									],
									"name": "changeAirdropPercentage",
									"nameLocation": "9408:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9440:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9432:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9432:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9431:16:6"
									},
									"returnParameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9467:0:6"
									},
									"scope": 1509,
									"src": "9399:234:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1419,
										"nodeType": "Block",
										"src": "9696:39:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1416,
														"name": "block",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967292,
														"src": "9713:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_block",
															"typeString": "block"
														}
													},
													"id": 1417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "timestamp",
													"nodeType": "MemberAccess",
													"src": "9713:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1415,
												"id": 1418,
												"nodeType": "Return",
												"src": "9706:22:6"
											}
										]
									},
									"functionSelector": "c63aa3e7",
									"id": 1420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_blockTimestamp",
									"nameLocation": "9648:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9663:2:6"
									},
									"returnParameters": {
										"id": 1415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9687:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1413,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9687:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9686:9:6"
									},
									"scope": 1509,
									"src": "9639:96:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1435,
										"nodeType": "Block",
										"src": "9813:62:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1427,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "9831:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "9831:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1429,
																	"name": "timestamp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1422,
																	"src": "9849:9:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9831:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1431,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9830:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "37",
														"id": 1432,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9862:6:6",
														"subdenomination": "days",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_604800_by_1",
															"typeString": "int_const 604800"
														},
														"value": "7"
													},
													"src": "9830:38:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1426,
												"id": 1434,
												"nodeType": "Return",
												"src": "9823:45:6"
											}
										]
									},
									"functionSelector": "b5d9df83",
									"id": 1436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateWeek",
									"nameLocation": "9750:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1422,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "9772:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "9764:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9764:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9763:19:6"
									},
									"returnParameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1436,
												"src": "9804:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9804:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9803:9:6"
									},
									"scope": 1509,
									"src": "9741:134:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1453,
										"nodeType": "Block",
										"src": "9989:71:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1448,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1445,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1443,
																				"name": "stakeAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1438,
																				"src": "10008:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1444,
																				"name": "airdropRate",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 819,
																				"src": "10022:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10008:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1446,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10007:27:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"hexValue": "31303030",
																	"id": 1447,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10037:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1000_by_1",
																		"typeString": "int_const 1000"
																	},
																	"value": "1000"
																},
																"src": "10007:34:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1449,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "10006:36:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3532",
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10045:8:6",
														"subdenomination": "weeks",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31449600_by_1",
															"typeString": "int_const 31449600"
														},
														"value": "52"
													},
													"src": "10006:47:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1442,
												"id": 1452,
												"nodeType": "Return",
												"src": "9999:54:6"
											}
										]
									},
									"id": 1454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateAirdrop",
									"nameLocation": "9890:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "stakeAmount",
												"nameLocation": "9916:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "9908:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1437,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9908:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:21:6"
									},
									"returnParameters": {
										"id": 1442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1441,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1454,
												"src": "9976:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9976:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9975:9:6"
									},
									"scope": 1509,
									"src": "9881:179:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1507,
										"nodeType": "Block",
										"src": "10099:523:6",
										"statements": [
											{
												"assignments": [
													1459
												],
												"declarations": [
													{
														"constant": false,
														"id": 1459,
														"mutability": "mutable",
														"name": "staker",
														"nameLocation": "10175:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1507,
														"src": "10161:20:6",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
															"typeString": "struct Staking.Stake"
														},
														"typeName": {
															"id": 1458,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1457,
																"name": "Stake",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 889,
																"src": "10161:5:6"
															},
															"referencedDeclaration": 889,
															"src": "10161:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1464,
												"initialValue": {
													"baseExpression": {
														"id": 1460,
														"name": "stakeholders",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 903,
														"src": "10184:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Stake_$889_storage_$",
															"typeString": "mapping(address => struct Staking.Stake storage ref)"
														}
													},
													"id": 1463,
													"indexExpression": {
														"expression": {
															"id": 1461,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "10197:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1462,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "10197:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10184:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Stake_$889_storage",
														"typeString": "struct Staking.Stake storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10161:47:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1465,
															"name": "staker",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "10223:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																"typeString": "struct Staking.Stake storage pointer"
															}
														},
														"id": 1466,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "amount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 876,
														"src": "10223:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1467,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10239:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10223:17:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1506,
												"nodeType": "IfStatement",
												"src": "10219:397:6",
												"trueBody": {
													"id": 1505,
													"nodeType": "Block",
													"src": "10242:374:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"expression": {
																				"id": 1470,
																				"name": "staker",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1459,
																				"src": "10274:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																					"typeString": "struct Staking.Stake storage pointer"
																				}
																			},
																			"id": 1471,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "latestClaimDrop",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 888,
																			"src": "10274:22:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1469,
																		"name": "calculateWeek",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "10260:13:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) view returns (uint256)"
																		}
																	},
																	"id": 1472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10260:37:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10301:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10260:42:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1479,
															"nodeType": "IfStatement",
															"src": "10256:117:6",
															"trueBody": {
																"id": 1478,
																"nodeType": "Block",
																"src": "10304:69:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1475,
																				"name": "Airdrop__claimableOnceAWeek",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 791,
																				"src": "10329:27:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 1476,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10329:29:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1477,
																		"nodeType": "RevertStatement",
																		"src": "10322:36:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1484,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1480,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1459,
																		"src": "10387:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1482,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "claimableAirdrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 886,
																	"src": "10387:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "30",
																	"id": 1483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10413:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10387:27:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1485,
															"nodeType": "ExpressionStatement",
															"src": "10387:27:6"
														},
														{
															"expression": {
																"id": 1491,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 1486,
																		"name": "staker",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1459,
																		"src": "10428:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																			"typeString": "struct Staking.Stake storage pointer"
																		}
																	},
																	"id": 1488,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberName": "latestClaimDrop",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 888,
																	"src": "10428:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"id": 1489,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "10453:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1490,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "10453:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10428:40:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1492,
															"nodeType": "ExpressionStatement",
															"src": "10428:40:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1497,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "10531:3:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1498,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "10531:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1500,
																					"name": "staker",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1459,
																					"src": "10577:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Stake_$889_storage_ptr",
																						"typeString": "struct Staking.Stake storage pointer"
																					}
																				},
																				"id": 1501,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 876,
																				"src": "10577:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1499,
																			"name": "_calculateAirdrop",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1454,
																			"src": "10559:17:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) view returns (uint256)"
																			}
																		},
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10559:32:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1494,
																				"name": "token_address",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 838,
																				"src": "10490:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1493,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "10483:6:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$222_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1495,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10483:21:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$222",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1496,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 171,
																	"src": "10483:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																"id": 1503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10483:122:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1504,
															"nodeType": "ExpressionStatement",
															"src": "10483:122:6"
														}
													]
												}
											}
										]
									},
									"functionSelector": "5b88349d",
									"id": 1508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimAirdrop",
									"nameLocation": "10075:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10087:2:6"
									},
									"returnParameters": {
										"id": 1456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10099:0:6"
									},
									"scope": 1509,
									"src": "10066:556:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1510,
							"src": "980:11432:6",
							"usedErrors": [
								780,
								782,
								784,
								786,
								788,
								791
							]
						}
					],
					"src": "39:12374:6"
				},
				"id": 6
			}
		}
	}
}